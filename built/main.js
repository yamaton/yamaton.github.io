!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.areSameWidth=t.areSameHeight=t.getHeight=t.getWidth=t.makeUnorderedPair=t.negate=t.normalize=t.unitVec=t.randn=t.randRange=t.range=t.cloestPointPairY=t.cloestPointPairX=t.distEuclid=t.distVerti=t.distHoriz=t.bottommostPoint=t.topmostPoint=t.leftmostPoint=t.rightmostPoint=t.vectorMean=t.arrMinBy=t.arrMaxBy=t.arrMetaBy=t.arrMean=t.arrSum=t.arrMin=t.arrMax=void 0,t.arrMax=function(e){return e.reduce((function(e,t){return Math.max(e,t)}),-1/0)},t.arrMin=function(e){return e.reduce((function(e,t){return Math.min(e,t)}),1/0)},t.arrSum=function(e){return e.reduce((function(e,t){return e+t}),0)},t.arrMean=function(e){return t.arrSum(e)/e.length},t.arrMetaBy=function(e,t,n){var o=e.map(t),i=n(o),r=Array();for(var a in e)o[a]==i&&r.push(e[a]);return r},t.arrMaxBy=function(e){var n=e.xs,o=e.f;return t.arrMetaBy(n,o,t.arrMax)},t.arrMinBy=function(e){var n=e.xs,o=e.f;return t.arrMetaBy(n,o,t.arrMin)},t.vectorMean=function(e){return{x:t.arrMean(e.map((function(e){return e.x}))),y:t.arrMean(e.map((function(e){return e.y})))}},t.rightmostPoint=function(e){return t.vectorMean(t.arrMaxBy({xs:e,f:function(e){return e.x}}))},t.leftmostPoint=function(e){return t.vectorMean(t.arrMinBy({xs:e,f:function(e){return e.x}}))},t.topmostPoint=function(e){return t.vectorMean(t.arrMinBy({xs:e,f:function(e){return e.y}}))},t.bottommostPoint=function(e){return t.vectorMean(t.arrMaxBy({xs:e,f:function(e){return e.y}}))},t.distHoriz=function(e,t){return Math.abs(e.x-t.x)},t.distVerti=function(e,t){return Math.abs(e.y-t.y)},t.distEuclid=function(e,t){return Math.hypot(e.x-t.x,e.y-t.y)};var o=function(e,t,n,o,i){for(var r=n(e.vertices),a=o(e.vertices),s=n(t.vertices),l=o(t.vertices),c=[r,a,1/0],u=1/0,d=0,p=[r,a];d<p.length;d++)for(var f=p[d],v=0,m=[s,l];v<m.length;v++){var g=m[v],y=i(f,g);y<u&&(c=[f,g,u=y])}return c};t.cloestPointPairX=function(e,n){return o(e,n,t.leftmostPoint,t.rightmostPoint,t.distHoriz)},t.cloestPointPairY=function(e,n){return o(e,n,t.topmostPoint,t.bottommostPoint,t.distVerti)},t.range=function(e){return e=Math.floor(e),Array.from(Array(e).keys())},t.randRange=function(e,t,n){void 0===n&&(n=1);var o=Math.floor(e),i=Math.floor(t);return o+Math.floor(Math.random()*(i-o)/n)*n},t.randn=function(){for(var e=0,n=0;0===e;)e=Math.random();for(;0===n;)n=Math.random();var o=Math.sqrt(-2*Math.log(e))*Math.cos(2*Math.PI*n);return(o=o/10+.5)>1||o<0?t.randn():o-.5},t.unitVec=function(e,n){var o=t.distEuclid(e,n);return{x:(n.x-e.x)/o,y:(n.y-e.y)/o}},t.normalize=function(e){var t=Math.hypot(e.x,e.y);return{x:e.x/t,y:e.y/t}},t.negate=function(e){return{x:-e.x,y:-e.y}},t.makeUnorderedPair=function(e,t){var n;return t<e&&(e=(n=[t,e])[0],t=n[1]),{first:e,second:t}},t.getWidth=function(e){var n=e.vertices.map((function(e){return e.x}));return t.arrMax(n)-t.arrMin(n)},t.getHeight=function(e){var n=e.vertices.map((function(e){return e.y}));return t.arrMax(n)-t.arrMin(n)},t.areSameHeight=function(e,n){return t.getHeight(e)==t.getHeight(n)},t.areSameWidth=function(e,n){return t.getWidth(e)==t.getWidth(n)}},function(e,t,n){(function(t){e.exports=function e(t,n,o){function i(a,s){if(!n[a]){if(!t[a]){if(r)return r(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,(function(e){return i(t[a][1][e]||e)}),c,c.exports,e,t,n,o)}return n[a].exports}for(var r=!1,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector"),a=e("../core/Sleeping"),s=(e("../render/Render"),e("../core/Common")),l=e("../geometry/Bounds"),c=e("../geometry/Axes");!function(){o._inertiaScale=4,o._nextCollidingGroupId=1,o._nextNonCollidingGroupId=-1,o._nextCategory=1,o.create=function(t){var n={id:s.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:i.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:0}},o=s.extend(n,t);return e(o,t),o},o.nextGroup=function(e){return e?o._nextNonCollidingGroupId--:o._nextCollidingGroupId++},o.nextCategory=function(){return o._nextCategory=o._nextCategory<<1,o._nextCategory};var e=function(e,t){t=t||{},o.set(e,{bounds:e.bounds||l.create(e.vertices),positionPrev:e.positionPrev||r.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),i.rotate(e.vertices,e.angle,e.position),c.rotate(e.axes,e.angle),l.update(e.bounds,e.vertices,e.velocity),o.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#2e2b44":s.choose(["#006BA6","#0496FF","#FFBC42","#D81159","#8F2D56"]);e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||"#000",e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};o.set=function(e,t,n){var i;for(i in"string"==typeof t&&(i=t,(t={})[i]=n),t)if(n=t[i],t.hasOwnProperty(i))switch(i){case"isStatic":o.setStatic(e,n);break;case"isSleeping":a.set(e,n);break;case"mass":o.setMass(e,n);break;case"density":o.setDensity(e,n);break;case"inertia":o.setInertia(e,n);break;case"vertices":o.setVertices(e,n);break;case"position":o.setPosition(e,n);break;case"angle":o.setAngle(e,n);break;case"velocity":o.setVelocity(e,n);break;case"angularVelocity":o.setAngularVelocity(e,n);break;case"parts":o.setParts(e,n);break;default:e[i]=n}},o.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var o=e.parts[n];o.isStatic=t,t?(o._original={restitution:o.restitution,friction:o.friction,mass:o.mass,inertia:o.inertia,density:o.density,inverseMass:o.inverseMass,inverseInertia:o.inverseInertia},o.restitution=0,o.friction=1,o.mass=o.inertia=o.density=1/0,o.inverseMass=o.inverseInertia=0,o.positionPrev.x=o.position.x,o.positionPrev.y=o.position.y,o.anglePrev=o.angle,o.angularVelocity=0,o.speed=0,o.angularSpeed=0,o.motion=0):o._original&&(o.restitution=o._original.restitution,o.friction=o._original.friction,o.mass=o._original.mass,o.inertia=o._original.inertia,o.density=o._original.density,o.inverseMass=o._original.inverseMass,o.inverseInertia=o._original.inverseInertia,delete o._original)}},o.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},o.setDensity=function(e,t){o.setMass(e,t*e.area),e.density=t},o.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},o.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=i.create(t,e),e.axes=c.fromVertices(e.vertices),e.area=i.area(e.vertices),o.setMass(e,e.density*e.area);var n=i.centre(e.vertices);i.translate(e.vertices,n,-1),o.setInertia(e,o._inertiaScale*i.inertia(e.vertices,e.mass)),i.translate(e.vertices,e.position),l.update(e.bounds,e.vertices,e.velocity)},o.setParts=function(e,t,n){var r;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,r=0;r<t.length;r++){var a=t[r];a!==e&&(a.parent=e,e.parts.push(a))}if(1!==e.parts.length){if(n=void 0===n||n){var s=[];for(r=0;r<t.length;r++)s=s.concat(t[r].vertices);i.clockwiseSort(s);var l=i.hull(s),c=i.centre(l);o.setVertices(e,l),i.translate(e.vertices,c)}var u=o._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,o.setMass(e,u.mass),o.setInertia(e,u.inertia),o.setPosition(e,u.centre)}},o.setPosition=function(e,t){var n=r.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var o=0;o<e.parts.length;o++){var a=e.parts[o];a.position.x+=n.x,a.position.y+=n.y,i.translate(a.vertices,n),l.update(a.bounds,a.vertices,e.velocity)}},o.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var o=0;o<e.parts.length;o++){var a=e.parts[o];a.angle+=n,i.rotate(a.vertices,n,e.position),c.rotate(a.axes,n),l.update(a.bounds,a.vertices,e.velocity),o>0&&r.rotateAbout(a.position,n,e.position,a.position)}},o.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=r.magnitude(e.velocity)},o.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},o.translate=function(e,t){o.setPosition(e,r.add(e.position,t))},o.rotate=function(e,t,n){if(n){var i=Math.cos(t),r=Math.sin(t),a=e.position.x-n.x,s=e.position.y-n.y;o.setPosition(e,{x:n.x+(a*i-s*r),y:n.y+(a*r+s*i)}),o.setAngle(e,e.angle+t)}else o.setAngle(e,e.angle+t)},o.scale=function(e,t,n,r){var a=0,s=0;r=r||e.position;for(var u=0;u<e.parts.length;u++){var d=e.parts[u];i.scale(d.vertices,t,n,r),d.axes=c.fromVertices(d.vertices),d.area=i.area(d.vertices),o.setMass(d,e.density*d.area),i.translate(d.vertices,{x:-d.position.x,y:-d.position.y}),o.setInertia(d,o._inertiaScale*i.inertia(d.vertices,d.mass)),i.translate(d.vertices,{x:d.position.x,y:d.position.y}),u>0&&(a+=d.area,s+=d.inertia),d.position.x=r.x+(d.position.x-r.x)*t,d.position.y=r.y+(d.position.y-r.y)*n,l.update(d.bounds,d.vertices,e.velocity)}e.parts.length>1&&(e.area=a,e.isStatic||(o.setMass(e,e.density*a),o.setInertia(e,s))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},o.update=function(e,t,n,o){var a=Math.pow(t*n*e.timeScale,2),s=1-e.frictionAir*n*e.timeScale,u=e.position.x-e.positionPrev.x,d=e.position.y-e.positionPrev.y;e.velocity.x=u*s*o+e.force.x/e.mass*a,e.velocity.y=d*s*o+e.force.y/e.mass*a,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*s*o+e.torque/e.inertia*a,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=r.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var p=0;p<e.parts.length;p++){var f=e.parts[p];i.translate(f.vertices,e.velocity),p>0&&(f.position.x+=e.velocity.x,f.position.y+=e.velocity.y),0!==e.angularVelocity&&(i.rotate(f.vertices,e.angularVelocity,e.position),c.rotate(f.axes,e.angularVelocity),p>0&&r.rotateAbout(f.position,e.angularVelocity,e.position,f.position)),l.update(f.bounds,f.vertices,e.velocity)}},o.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var o=t.x-e.position.x,i=t.y-e.position.y;e.torque+=o*n.y-i*n.x},o._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var o=e.parts[n],i=o.mass!==1/0?o.mass:1;t.mass+=i,t.area+=o.area,t.inertia+=o.inertia,t.centre=r.add(t.centre,r.mult(o.position,i))}return t.centre=r.div(t.centre,t.mass),t}}()},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31}],2:[function(e,t,n){var o={};t.exports=o;var i=e("../core/Events"),r=e("../core/Common"),a=e("../geometry/Bounds"),s=e("./Body");o.create=function(e){return r.extend({id:r.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{}},e)},o.setModified=function(e,t,n,i){if(e.isModified=t,n&&e.parent&&o.setModified(e.parent,t,n,i),i)for(var r=0;r<e.composites.length;r++){var a=e.composites[r];o.setModified(a,t,n,i)}},o.add=function(e,t){var n=[].concat(t);i.trigger(e,"beforeAdd",{object:t});for(var a=0;a<n.length;a++){var s=n[a];switch(s.type){case"body":if(s.parent!==s){r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}o.addBody(e,s);break;case"constraint":o.addConstraint(e,s);break;case"composite":o.addComposite(e,s);break;case"mouseConstraint":o.addConstraint(e,s.constraint)}}return i.trigger(e,"afterAdd",{object:t}),e},o.remove=function(e,t,n){var r=[].concat(t);i.trigger(e,"beforeRemove",{object:t});for(var a=0;a<r.length;a++){var s=r[a];switch(s.type){case"body":o.removeBody(e,s,n);break;case"constraint":o.removeConstraint(e,s,n);break;case"composite":o.removeComposite(e,s,n);break;case"mouseConstraint":o.removeConstraint(e,s.constraint)}}return i.trigger(e,"afterRemove",{object:t}),e},o.addComposite=function(e,t){return e.composites.push(t),t.parent=e,o.setModified(e,!0,!0,!1),e},o.removeComposite=function(e,t,n){var i=r.indexOf(e.composites,t);if(-1!==i&&(o.removeCompositeAt(e,i),o.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)o.removeComposite(e.composites[a],t,!0);return e},o.removeCompositeAt=function(e,t){return e.composites.splice(t,1),o.setModified(e,!0,!0,!1),e},o.addBody=function(e,t){return e.bodies.push(t),o.setModified(e,!0,!0,!1),e},o.removeBody=function(e,t,n){var i=r.indexOf(e.bodies,t);if(-1!==i&&(o.removeBodyAt(e,i),o.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)o.removeBody(e.composites[a],t,!0);return e},o.removeBodyAt=function(e,t){return e.bodies.splice(t,1),o.setModified(e,!0,!0,!1),e},o.addConstraint=function(e,t){return e.constraints.push(t),o.setModified(e,!0,!0,!1),e},o.removeConstraint=function(e,t,n){var i=r.indexOf(e.constraints,t);if(-1!==i&&o.removeConstraintAt(e,i),n)for(var a=0;a<e.composites.length;a++)o.removeConstraint(e.composites[a],t,!0);return e},o.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),o.setModified(e,!0,!0,!1),e},o.clear=function(e,t,n){if(n)for(var i=0;i<e.composites.length;i++)o.clear(e.composites[i],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,o.setModified(e,!0,!0,!1),e},o.allBodies=function(e){for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(o.allBodies(e.composites[n]));return t},o.allConstraints=function(e){for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(o.allConstraints(e.composites[n]));return t},o.allComposites=function(e){for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(o.allComposites(e.composites[n]));return t},o.get=function(e,t,n){var i,r;switch(n){case"body":i=o.allBodies(e);break;case"constraint":i=o.allConstraints(e);break;case"composite":i=o.allComposites(e).concat(e)}return i?0===(r=i.filter((function(e){return e.id.toString()===t.toString()}))).length?null:r[0]:null},o.move=function(e,t,n){return o.remove(e,t),o.add(n,t),e},o.rebase=function(e){for(var t=o.allBodies(e).concat(o.allConstraints(e)).concat(o.allComposites(e)),n=0;n<t.length;n++)t[n].id=r.nextId();return o.setModified(e,!0,!0,!1),e},o.translate=function(e,t,n){for(var i=n?o.allBodies(e):e.bodies,r=0;r<i.length;r++)s.translate(i[r],t);return o.setModified(e,!0,!0,!1),e},o.rotate=function(e,t,n,i){for(var r=Math.cos(t),a=Math.sin(t),l=i?o.allBodies(e):e.bodies,c=0;c<l.length;c++){var u=l[c],d=u.position.x-n.x,p=u.position.y-n.y;s.setPosition(u,{x:n.x+(d*r-p*a),y:n.y+(d*a+p*r)}),s.rotate(u,t)}return o.setModified(e,!0,!0,!1),e},o.scale=function(e,t,n,i,r){for(var a=r?o.allBodies(e):e.bodies,l=0;l<a.length;l++){var c=a[l],u=c.position.x-i.x,d=c.position.y-i.y;s.setPosition(c,{x:i.x+u*t,y:i.y+d*n}),s.scale(c,t,n)}return o.setModified(e,!0,!0,!1),e},o.bounds=function(e){for(var t=o.allBodies(e),n=[],i=0;i<t.length;i+=1){var r=t[i];n.push(r.bounds.min,r.bounds.max)}return a.create(n)}},{"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"./Body":1}],3:[function(e,t,n){var o={};t.exports=o;var i=e("./Composite"),r=(e("../constraint/Constraint"),e("../core/Common"));o.create=function(e){var t=i.create(),n={label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}};return r.extend(t,n,e)}},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(e,t,n){var o={};t.exports=o,o.create=function(e){return{id:o.id(e),vertex:e,normalImpulse:0,tangentImpulse:0}},o.id=function(e){return e.body.id+"_"+e.index}},{}],5:[function(e,t,n){var o={};t.exports=o;var i=e("./SAT"),r=e("./Pair"),a=e("../geometry/Bounds");o.collisions=function(e,t){for(var n=[],s=t.pairs.table,l=0;l<e.length;l++){var c=e[l][0],u=e[l][1];if((!c.isStatic&&!c.isSleeping||!u.isStatic&&!u.isSleeping)&&o.canCollide(c.collisionFilter,u.collisionFilter)&&a.overlaps(c.bounds,u.bounds))for(var d=c.parts.length>1?1:0;d<c.parts.length;d++)for(var p=c.parts[d],f=u.parts.length>1?1:0;f<u.parts.length;f++){var v=u.parts[f];if(p===c&&v===u||a.overlaps(p.bounds,v.bounds)){var m,g=s[r.id(p,v)];m=g&&g.isActive?g.collision:null;var y=i.collides(p,v,m);y.collided&&n.push(y)}}}return n},o.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)}},{"../geometry/Bounds":26,"./Pair":7,"./SAT":11}],6:[function(e,t,n){var o={};t.exports=o;var i=e("./Pair"),r=e("./Detector"),a=e("../core/Common");o.create=function(e){var t={controller:o,detector:r.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return a.extend(t,e)},o.update=function(e,t,n,i){var r,a,s,l,c,u=n.world,d=e.buckets,p=!1;for(r=0;r<t.length;r++){var f=t[r];if((!f.isSleeping||i)&&!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y)){var v=o._getRegion(e,f);if(!f.region||v.id!==f.region.id||i){f.region&&!i||(f.region=v);var m=o._regionUnion(v,f.region);for(a=m.startCol;a<=m.endCol;a++)for(s=m.startRow;s<=m.endRow;s++){l=d[c=o._getBucketId(a,s)];var g=a>=v.startCol&&a<=v.endCol&&s>=v.startRow&&s<=v.endRow,y=a>=f.region.startCol&&a<=f.region.endCol&&s>=f.region.startRow&&s<=f.region.endRow;!g&&y&&y&&l&&o._bucketRemoveBody(e,l,f),(f.region===v||g&&!y||i)&&(l||(l=o._createBucket(d,c)),o._bucketAddBody(e,l,f))}f.region=v,p=!0}}}p&&(e.pairsList=o._createActivePairsList(e))},o.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},o._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),i=Math.max(e.endCol,t.endCol),r=Math.min(e.startRow,t.startRow),a=Math.max(e.endRow,t.endRow);return o._createRegion(n,i,r,a)},o._getRegion=function(e,t){var n=t.bounds,i=Math.floor(n.min.x/e.bucketWidth),r=Math.floor(n.max.x/e.bucketWidth),a=Math.floor(n.min.y/e.bucketHeight),s=Math.floor(n.max.y/e.bucketHeight);return o._createRegion(i,r,a,s)},o._createRegion=function(e,t,n,o){return{id:e+","+t+","+n+","+o,startCol:e,endCol:t,startRow:n,endRow:o}},o._getBucketId=function(e,t){return"C"+e+"R"+t},o._createBucket=function(e,t){return e[t]=[]},o._bucketAddBody=function(e,t,n){for(var o=0;o<t.length;o++){var r=t[o];if(!(n.id===r.id||n.isStatic&&r.isStatic)){var a=i.id(n,r),s=e.pairs[a];s?s[2]+=1:e.pairs[a]=[n,r,1]}}t.push(n)},o._bucketRemoveBody=function(e,t,n){t.splice(a.indexOf(t,n),1);for(var o=0;o<t.length;o++){var r=t[o],s=i.id(n,r),l=e.pairs[s];l&&(l[2]-=1)}},o._createActivePairsList=function(e){var t,n,o=[];t=a.keys(e.pairs);for(var i=0;i<t.length;i++)(n=e.pairs[t[i]])[2]>0?o.push(n):delete e.pairs[t[i]];return o}},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(e,t,n){var o={};t.exports=o;var i=e("./Contact");o.create=function(e,t){var n=e.bodyA,i=e.bodyB,r=e.parentA,a=e.parentB,s={id:o.id(n,i),bodyA:n,bodyB:i,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:n.isSensor||i.isSensor,timeCreated:t,timeUpdated:t,inverseMass:r.inverseMass+a.inverseMass,friction:Math.min(r.friction,a.friction),frictionStatic:Math.max(r.frictionStatic,a.frictionStatic),restitution:Math.max(r.restitution,a.restitution),slop:Math.max(r.slop,a.slop)};return o.update(s,e,t),s},o.update=function(e,t,n){var r=e.contacts,a=t.supports,s=e.activeContacts,l=t.parentA,c=t.parentB;if(e.collision=t,e.inverseMass=l.inverseMass+c.inverseMass,e.friction=Math.min(l.friction,c.friction),e.frictionStatic=Math.max(l.frictionStatic,c.frictionStatic),e.restitution=Math.max(l.restitution,c.restitution),e.slop=Math.max(l.slop,c.slop),s.length=0,t.collided){for(var u=0;u<a.length;u++){var d=a[u],p=i.id(d),f=r[p];f?s.push(f):s.push(r[p]=i.create(d))}e.separation=t.depth,o.setActive(e,!0,n)}else!0===e.isActive&&o.setActive(e,!1,n)},o.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},o.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},{"./Contact":4}],8:[function(e,t,n){var o={};t.exports=o;var i=e("./Pair"),r=e("../core/Common");o._pairMaxIdleLife=1e3,o.create=function(e){return r.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},o.update=function(e,t,n){var o,a,s,l,c=e.list,u=e.table,d=e.collisionStart,p=e.collisionEnd,f=e.collisionActive,v=[];for(d.length=0,p.length=0,f.length=0,l=0;l<t.length;l++)(o=t[l]).collided&&(a=i.id(o.bodyA,o.bodyB),v.push(a),(s=u[a])?(s.isActive?f.push(s):d.push(s),i.update(s,o,n)):(s=i.create(o,n),u[a]=s,d.push(s),c.push(s)));for(l=0;l<c.length;l++)(s=c[l]).isActive&&-1===r.indexOf(v,s.id)&&(i.setActive(s,!1,n),p.push(s))},o.removeOld=function(e,t){var n,i,r,a,s=e.list,l=e.table,c=[];for(a=0;a<s.length;a++)(i=(n=s[a]).collision).bodyA.isSleeping||i.bodyB.isSleeping?n.timeUpdated=t:t-n.timeUpdated>o._pairMaxIdleLife&&c.push(a);for(a=0;a<c.length;a++)delete l[(n=s[r=c[a]-a]).id],s.splice(r,1)},o.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},{"../core/Common":14,"./Pair":7}],9:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vector"),r=e("./SAT"),a=e("../geometry/Bounds"),s=e("../factory/Bodies"),l=e("../geometry/Vertices");o.collides=function(e,t){for(var n=[],o=0;o<t.length;o++){var i=t[o];if(a.overlaps(i.bounds,e.bounds))for(var s=1===i.parts.length?0:1;s<i.parts.length;s++){var l=i.parts[s];if(a.overlaps(l.bounds,e.bounds)){var c=r.collides(l,e);if(c.collided){n.push(c);break}}}}return n},o.ray=function(e,t,n,r){r=r||1e-100;for(var a=i.angle(t,n),l=i.magnitude(i.sub(t,n)),c=.5*(n.x+t.x),u=.5*(n.y+t.y),d=s.rectangle(c,u,l,r,{angle:a}),p=o.collides(d,e),f=0;f<p.length;f+=1){var v=p[f];v.body=v.bodyB=v.bodyA}return p},o.region=function(e,t,n){for(var o=[],i=0;i<e.length;i++){var r=e[i],s=a.overlaps(r.bounds,t);(s&&!n||!s&&n)&&o.push(r)}return o},o.point=function(e,t){for(var n=[],o=0;o<e.length;o++){var i=e[o];if(a.contains(i.bounds,t))for(var r=1===i.parts.length?0:1;r<i.parts.length;r++){var s=i.parts[r];if(a.contains(s.bounds,t)&&l.contains(s.vertices,t)){n.push(i);break}}}return n}},{"../factory/Bodies":23,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"./SAT":11}],10:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector"),a=e("../core/Common"),s=e("../geometry/Bounds");o._restingThresh=4,o._restingThreshTangent=6,o._positionDampen=.9,o._positionWarming=.8,o._frictionNormalMultiplier=5,o.preSolvePosition=function(e){var t,n,o;for(t=0;t<e.length;t++)(n=e[t]).isActive&&(o=n.activeContacts.length,n.collision.parentA.totalContacts+=o,n.collision.parentB.totalContacts+=o)},o.solvePosition=function(e,t){var n,i,a,s,l,c,u,d,p,f=r._temp[0],v=r._temp[1],m=r._temp[2],g=r._temp[3];for(n=0;n<e.length;n++)(i=e[n]).isActive&&!i.isSensor&&(s=(a=i.collision).parentA,l=a.parentB,c=a.normal,u=r.sub(r.add(l.positionImpulse,l.position,f),r.add(s.positionImpulse,r.sub(l.position,a.penetration,v),m),g),i.separation=r.dot(c,u));for(n=0;n<e.length;n++)(i=e[n]).isActive&&!i.isSensor&&(s=(a=i.collision).parentA,l=a.parentB,c=a.normal,p=(i.separation-i.slop)*t,(s.isStatic||l.isStatic)&&(p*=2),s.isStatic||s.isSleeping||(d=o._positionDampen/s.totalContacts,s.positionImpulse.x+=c.x*p*d,s.positionImpulse.y+=c.y*p*d),l.isStatic||l.isSleeping||(d=o._positionDampen/l.totalContacts,l.positionImpulse.x-=c.x*p*d,l.positionImpulse.y-=c.y*p*d))},o.postSolvePosition=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.totalContacts=0,0!==n.positionImpulse.x||0!==n.positionImpulse.y){for(var a=0;a<n.parts.length;a++){var l=n.parts[a];i.translate(l.vertices,n.positionImpulse),s.update(l.bounds,l.vertices,n.velocity),l.position.x+=n.positionImpulse.x,l.position.y+=n.positionImpulse.y}n.positionPrev.x+=n.positionImpulse.x,n.positionPrev.y+=n.positionImpulse.y,r.dot(n.positionImpulse,n.velocity)<0?(n.positionImpulse.x=0,n.positionImpulse.y=0):(n.positionImpulse.x*=o._positionWarming,n.positionImpulse.y*=o._positionWarming)}}},o.preSolveVelocity=function(e){var t,n,o,i,a,s,l,c,u,d,p,f,v,m,g=r._temp[0],y=r._temp[1];for(t=0;t<e.length;t++)if((o=e[t]).isActive&&!o.isSensor)for(i=o.activeContacts,s=(a=o.collision).parentA,l=a.parentB,c=a.normal,u=a.tangent,n=0;n<i.length;n++)p=(d=i[n]).vertex,f=d.normalImpulse,v=d.tangentImpulse,0===f&&0===v||(g.x=c.x*f+u.x*v,g.y=c.y*f+u.y*v,s.isStatic||s.isSleeping||(m=r.sub(p,s.position,y),s.positionPrev.x+=g.x*s.inverseMass,s.positionPrev.y+=g.y*s.inverseMass,s.anglePrev+=r.cross(m,g)*s.inverseInertia),l.isStatic||l.isSleeping||(m=r.sub(p,l.position,y),l.positionPrev.x-=g.x*l.inverseMass,l.positionPrev.y-=g.y*l.inverseMass,l.anglePrev-=r.cross(m,g)*l.inverseInertia))},o.solveVelocity=function(e,t){for(var n=t*t,i=r._temp[0],s=r._temp[1],l=r._temp[2],c=r._temp[3],u=r._temp[4],d=r._temp[5],p=0;p<e.length;p++){var f=e[p];if(f.isActive&&!f.isSensor){var v=f.collision,m=v.parentA,g=v.parentB,y=v.normal,h=v.tangent,x=f.activeContacts,b=1/x.length;m.velocity.x=m.position.x-m.positionPrev.x,m.velocity.y=m.position.y-m.positionPrev.y,g.velocity.x=g.position.x-g.positionPrev.x,g.velocity.y=g.position.y-g.positionPrev.y,m.angularVelocity=m.angle-m.anglePrev,g.angularVelocity=g.angle-g.anglePrev;for(var w=0;w<x.length;w++){var S=x[w],P=S.vertex,C=r.sub(P,m.position,s),_=r.sub(P,g.position,l),M=r.add(m.velocity,r.mult(r.perp(C),m.angularVelocity),c),A=r.add(g.velocity,r.mult(r.perp(_),g.angularVelocity),u),B=r.sub(M,A,d),k=r.dot(y,B),I=r.dot(h,B),T=Math.abs(I),R=a.sign(I),V=(1+f.restitution)*k,O=a.clamp(f.separation+k,0,1)*o._frictionNormalMultiplier,E=I,F=1/0;T>f.friction*f.frictionStatic*O*n&&(F=T,E=a.clamp(f.friction*R*n,-F,F));var j=r.cross(C,y),L=r.cross(_,y),W=b/(m.inverseMass+g.inverseMass+m.inverseInertia*j*j+g.inverseInertia*L*L);if(V*=W,E*=W,k<0&&k*k>o._restingThresh*n)S.normalImpulse=0;else{var q=S.normalImpulse;S.normalImpulse=Math.min(S.normalImpulse+V,0),V=S.normalImpulse-q}if(I*I>o._restingThreshTangent*n)S.tangentImpulse=0;else{var D=S.tangentImpulse;S.tangentImpulse=a.clamp(S.tangentImpulse+E,-F,F),E=S.tangentImpulse-D}i.x=y.x*V+h.x*E,i.y=y.y*V+h.y*E,m.isStatic||m.isSleeping||(m.positionPrev.x+=i.x*m.inverseMass,m.positionPrev.y+=i.y*m.inverseMass,m.anglePrev+=r.cross(C,i)*m.inverseInertia),g.isStatic||g.isSleeping||(g.positionPrev.x-=i.x*g.inverseMass,g.positionPrev.y-=i.y*g.inverseMass,g.anglePrev-=r.cross(_,i)*g.inverseInertia)}}}}},{"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],11:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector");o.collides=function(e,t,n){var a,s,l,c,u=!1;if(n){var d=e.parent,p=t.parent,f=d.speed*d.speed+d.angularSpeed*d.angularSpeed+p.speed*p.speed+p.angularSpeed*p.angularSpeed;u=n&&n.collided&&f<.2,c=n}else c={collided:!1,bodyA:e,bodyB:t};if(n&&u){var v=c.axisBody,m=v===e?t:e,g=[v.axes[n.axisNumber]];if(l=o._overlapAxes(v.vertices,m.vertices,g),c.reused=!0,l.overlap<=0)return c.collided=!1,c}else{if((a=o._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return c.collided=!1,c;if((s=o._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return c.collided=!1,c;a.overlap<s.overlap?(l=a,c.axisBody=e):(l=s,c.axisBody=t),c.axisNumber=l.axisNumber}c.bodyA=e.id<t.id?e:t,c.bodyB=e.id<t.id?t:e,c.collided=!0,c.depth=l.overlap,c.parentA=c.bodyA.parent,c.parentB=c.bodyB.parent,e=c.bodyA,t=c.bodyB,r.dot(l.axis,r.sub(t.position,e.position))<0?c.normal={x:l.axis.x,y:l.axis.y}:c.normal={x:-l.axis.x,y:-l.axis.y},c.tangent=r.perp(c.normal),c.penetration=c.penetration||{},c.penetration.x=c.normal.x*c.depth,c.penetration.y=c.normal.y*c.depth;var y=o._findSupports(e,t,c.normal),h=[];if(i.contains(e.vertices,y[0])&&h.push(y[0]),i.contains(e.vertices,y[1])&&h.push(y[1]),h.length<2){var x=o._findSupports(t,e,r.neg(c.normal));i.contains(t.vertices,x[0])&&h.push(x[0]),h.length<2&&i.contains(t.vertices,x[1])&&h.push(x[1])}return h.length<1&&(h=[y[0]]),c.supports=h,c},o._overlapAxes=function(e,t,n){for(var i,a,s=r._temp[0],l=r._temp[1],c={overlap:Number.MAX_VALUE},u=0;u<n.length;u++){if(a=n[u],o._projectToAxis(s,e,a),o._projectToAxis(l,t,a),(i=Math.min(s.max-l.min,l.max-s.min))<=0)return c.overlap=i,c;i<c.overlap&&(c.overlap=i,c.axis=a,c.axisNumber=u)}return c},o._projectToAxis=function(e,t,n){for(var o=r.dot(t[0],n),i=o,a=1;a<t.length;a+=1){var s=r.dot(t[a],n);s>i?i=s:s<o&&(o=s)}e.min=o,e.max=i},o._findSupports=function(e,t,n){for(var o,i,a,s,l=Number.MAX_VALUE,c=r._temp[0],u=t.vertices,d=e.position,p=0;p<u.length;p++)i=u[p],c.x=i.x-d.x,c.y=i.y-d.y,(o=-r.dot(n,c))<l&&(l=o,a=i);return i=u[a.index-1>=0?a.index-1:u.length-1],c.x=i.x-d.x,c.y=i.y-d.y,l=-r.dot(n,c),s=i,i=u[(a.index+1)%u.length],c.x=i.x-d.x,c.y=i.y-d.y,(o=-r.dot(n,c))<l&&(s=i),[a,s]}},{"../geometry/Vector":28,"../geometry/Vertices":29}],12:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector"),a=e("../core/Sleeping"),s=e("../geometry/Bounds"),l=e("../geometry/Axes"),c=e("../core/Common");o._warming=.4,o._torqueDampen=1,o._minLength=1e-6,o.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?r.add(t.bodyA.position,t.pointA):t.pointA,o=t.bodyB?r.add(t.bodyB.position,t.pointB):t.pointB,i=r.magnitude(r.sub(n,o));t.length=void 0!==t.length?t.length:i,t.id=t.id||c.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var a={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(a.type="pin",a.anchors=!1):t.stiffness<.9&&(a.type="spring"),t.render=c.extend(a,t.render),t},o.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],o=n.constraintImpulse;n.isStatic||0===o.x&&0===o.y&&0===o.angle||(n.position.x+=o.x,n.position.y+=o.y,n.angle+=o.angle)}},o.solveAll=function(e,t){for(var n=0;n<e.length;n+=1){var i=e[n],r=!i.bodyA||i.bodyA&&i.bodyA.isStatic,a=!i.bodyB||i.bodyB&&i.bodyB.isStatic;(r||a)&&o.solve(e[n],t)}for(n=0;n<e.length;n+=1)r=!(i=e[n]).bodyA||i.bodyA&&i.bodyA.isStatic,a=!i.bodyB||i.bodyB&&i.bodyB.isStatic,r||a||o.solve(e[n],t)},o.solve=function(e,t){var n=e.bodyA,i=e.bodyB,a=e.pointA,s=e.pointB;if(n||i){n&&!n.isStatic&&(r.rotate(a,n.angle-e.angleA,a),e.angleA=n.angle),i&&!i.isStatic&&(r.rotate(s,i.angle-e.angleB,s),e.angleB=i.angle);var l=a,c=s;if(n&&(l=r.add(n.position,a)),i&&(c=r.add(i.position,s)),l&&c){var u=r.sub(l,c),d=r.magnitude(u);d<o._minLength&&(d=o._minLength);var p,f,v,m,g,y=(d-e.length)/d,h=e.stiffness<1?e.stiffness*t:e.stiffness,x=r.mult(u,y*h),b=(n?n.inverseMass:0)+(i?i.inverseMass:0),w=b+((n?n.inverseInertia:0)+(i?i.inverseInertia:0));if(e.damping){var S=r.create();v=r.div(u,d),g=r.sub(i&&r.sub(i.position,i.positionPrev)||S,n&&r.sub(n.position,n.positionPrev)||S),m=r.dot(v,g)}n&&!n.isStatic&&(f=n.inverseMass/b,n.constraintImpulse.x-=x.x*f,n.constraintImpulse.y-=x.y*f,n.position.x-=x.x*f,n.position.y-=x.y*f,e.damping&&(n.positionPrev.x-=e.damping*v.x*m*f,n.positionPrev.y-=e.damping*v.y*m*f),p=r.cross(a,x)/w*o._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=p,n.angle-=p),i&&!i.isStatic&&(f=i.inverseMass/b,i.constraintImpulse.x+=x.x*f,i.constraintImpulse.y+=x.y*f,i.position.x+=x.x*f,i.position.y+=x.y*f,e.damping&&(i.positionPrev.x+=e.damping*v.x*m*f,i.positionPrev.y+=e.damping*v.y*m*f),p=r.cross(s,x)/w*o._torqueDampen*i.inverseInertia*(1-e.angularStiffness),i.constraintImpulse.angle+=p,i.angle+=p)}}},o.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],c=n.constraintImpulse;if(!(n.isStatic||0===c.x&&0===c.y&&0===c.angle)){a.set(n,!1);for(var u=0;u<n.parts.length;u++){var d=n.parts[u];i.translate(d.vertices,c),u>0&&(d.position.x+=c.x,d.position.y+=c.y),0!==c.angle&&(i.rotate(d.vertices,c.angle,n.position),l.rotate(d.axes,c.angle),u>0&&r.rotateAbout(d.position,c.angle,n.position,d.position)),s.update(d.bounds,d.vertices,n.velocity)}c.angle*=o._warming,c.x*=o._warming,c.y*=o._warming}}}},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],13:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../core/Sleeping"),a=e("../core/Mouse"),s=e("../core/Events"),l=e("../collision/Detector"),c=e("./Constraint"),u=e("../body/Composite"),d=e("../core/Common"),p=e("../geometry/Bounds");o.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=a.create(e.render.canvas):t&&t.element?n=a.create(t.element):(n=a.create(),d.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var i={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:c.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},r=d.extend(i,t);return s.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);o.update(r,t),o._triggerEvents(r)})),r},o.update=function(e,t){var n=e.mouse,o=e.constraint,a=e.body;if(0===n.button){if(o.bodyB)r.set(o.bodyB,!1),o.pointA=n.position;else for(var c=0;c<t.length;c++)if(a=t[c],p.contains(a.bounds,n.position)&&l.canCollide(a.collisionFilter,e.collisionFilter))for(var u=a.parts.length>1?1:0;u<a.parts.length;u++){var d=a.parts[u];if(i.contains(d.vertices,n.position)){o.pointA=n.position,o.bodyB=e.body=a,o.pointB={x:n.position.x-a.position.x,y:n.position.y-a.position.y},o.angleB=a.angle,r.set(a,!1),s.trigger(e,"startdrag",{mouse:n,body:a});break}}}else o.bodyB=e.body=null,o.pointB=null,a&&s.trigger(e,"enddrag",{mouse:n,body:a})},o._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&s.trigger(e,"mousemove",{mouse:t}),n.mousedown&&s.trigger(e,"mousedown",{mouse:t}),n.mouseup&&s.trigger(e,"mouseup",{mouse:t}),a.clearSourceEvents(t)}},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../core/Sleeping":22,"../geometry/Bounds":26,"../geometry/Vertices":29,"./Constraint":12}],14:[function(e,n,o){(function(t){var o={};n.exports=o,function(){o._nextId=0,o._seed=0,o._nowStartTime=+new Date,o.extend=function(e,t){var n,i;"boolean"==typeof t?(n=2,i=t):(n=1,i=!0);for(var r=n;r<arguments.length;r++){var a=arguments[r];if(a)for(var s in a)i&&a[s]&&a[s].constructor===Object?e[s]&&e[s].constructor!==Object?e[s]=a[s]:(e[s]=e[s]||{},o.extend(e[s],i,a[s])):e[s]=a[s]}return e},o.clone=function(e,t){return o.extend({},t,e)},o.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},o.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),o=0;o<n.length;o++)t.push(e[n[o]]);return t}for(var i in e)t.push(e[i]);return t},o.get=function(e,t,n,o){t=t.split(".").slice(n,o);for(var i=0;i<t.length;i+=1)e=e[t[i]];return e},o.set=function(e,t,n,i,r){var a=t.split(".").slice(i,r);return o.get(e,t,0,-1)[a[a.length-1]]=n,n},o.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(o.random()*(t+1)),i=e[t];e[t]=e[n],e[n]=i}return e},o.choose=function(e){return e[Math.floor(o.random()*e.length)]},o.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},o.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},o.isFunction=function(e){return"function"==typeof e},o.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},o.isString=function(e){return"[object String]"===toString.call(e)},o.clamp=function(e,t,n){return e<t?t:e>n?n:e},o.sign=function(e){return e<0?-1:1},o.now=function(){if(window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return new Date-o._nowStartTime},o.random=function(e,t){return t=void 0!==t?t:1,(e=void 0!==e?e:0)+n()*(t-e)};var n=function(){return o._seed=(9301*o._seed+49297)%233280,o._seed/233280};o.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},o.logLevel=1,o.log=function(){console&&o.logLevel>0&&o.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.info=function(){console&&o.logLevel>0&&o.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.warn=function(){console&&o.logLevel>0&&o.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.nextId=function(){return o._nextId++},o.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},o.map=function(e,t){if(e.map)return e.map(t);for(var n=[],o=0;o<e.length;o+=1)n.push(t(e[o]));return n},o.topologicalSort=function(e){var t=[],n=[],i=[];for(var r in e)n[r]||i[r]||o._topologicalSort(r,n,i,e,t);return t},o._topologicalSort=function(e,t,n,i,r){var a=i[e]||[];n[e]=!0;for(var s=0;s<a.length;s+=1){var l=a[s];n[l]||t[l]||o._topologicalSort(l,t,n,i,r)}n[e]=!1,t[e]=!0,r.push(e)},o.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var o=function(){for(var t,n=new Array(arguments.length),o=0,i=arguments.length;o<i;o++)n[o]=arguments[o];for(o=0;o<e.length;o+=1){var r=e[o].apply(t,n);void 0!==r&&(t=r)}return t};return o._chained=e,o},o.chainPathBefore=function(e,t,n){return o.set(e,t,o.chain(n,o.get(e,t)))},o.chainPathAfter=function(e,t,n){return o.set(e,t,o.chain(o.get(e,t),n))},o._requireGlobal=function(n,o){return("undefined"!=typeof window?window[n]:void 0!==t?t[n]:null)||e(o)}}()}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],15:[function(e,t,n){var o={};t.exports=o;var i=e("../body/World"),r=e("./Sleeping"),a=e("../collision/Resolver"),s=e("../render/Render"),l=e("../collision/Pairs"),c=(e("./Metrics"),e("../collision/Grid")),u=e("./Events"),d=e("../body/Composite"),p=e("../constraint/Constraint"),f=e("./Common"),v=e("../body/Body");o.create=function(e,t){t=(t=f.isElement(e)?t:e)||{},((e=f.isElement(e)?e:null)||t.render)&&f.warn("Engine.create: engine.render is deprecated (see docs)");var n={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},timing:{timestamp:0,timeScale:1},broadphase:{controller:c}},o=f.extend(n,t);if(e||o.render){var r={element:e,controller:s};o.render=f.extend(r,o.render)}return o.render&&o.render.controller&&(o.render=o.render.controller.create(o.render)),o.render&&(o.render.engine=o),o.world=t.world||i.create(o.world),o.pairs=l.create(),o.broadphase=o.broadphase.controller.create(o.broadphase),o.metrics=o.metrics||{extended:!1},o},o.update=function(e,t,n){t=t||1e3/60,n=n||1;var i,s=e.world,c=e.timing,f=e.broadphase,v=[];c.timestamp+=t*c.timeScale;var m={timestamp:c.timestamp};u.trigger(e,"beforeUpdate",m);var g=d.allBodies(s),y=d.allConstraints(s);for(e.enableSleeping&&r.update(g,c.timeScale),o._bodiesApplyGravity(g,s.gravity),o._bodiesUpdate(g,t,c.timeScale,n,s.bounds),p.preSolveAll(g),i=0;i<e.constraintIterations;i++)p.solveAll(y,c.timeScale);p.postSolveAll(g),f.controller?(s.isModified&&f.controller.clear(f),f.controller.update(f,g,e,s.isModified),v=f.pairsList):v=g,s.isModified&&d.setModified(s,!1,!1,!0);var h=f.detector(v,e),x=e.pairs,b=c.timestamp;for(l.update(x,h,b),l.removeOld(x,b),e.enableSleeping&&r.afterCollisions(x.list,c.timeScale),x.collisionStart.length>0&&u.trigger(e,"collisionStart",{pairs:x.collisionStart}),a.preSolvePosition(x.list),i=0;i<e.positionIterations;i++)a.solvePosition(x.list,c.timeScale);for(a.postSolvePosition(g),p.preSolveAll(g),i=0;i<e.constraintIterations;i++)p.solveAll(y,c.timeScale);for(p.postSolveAll(g),a.preSolveVelocity(x.list),i=0;i<e.velocityIterations;i++)a.solveVelocity(x.list,c.timeScale);return x.collisionActive.length>0&&u.trigger(e,"collisionActive",{pairs:x.collisionActive}),x.collisionEnd.length>0&&u.trigger(e,"collisionEnd",{pairs:x.collisionEnd}),o._bodiesClearForces(g),u.trigger(e,"afterUpdate",m),e},o.merge=function(e,t){if(f.extend(e,t),t.world){e.world=t.world,o.clear(e);for(var n=d.allBodies(e.world),i=0;i<n.length;i++){var a=n[i];r.set(a,!1),a.id=f.nextId()}}},o.clear=function(e){var t=e.world;l.clear(e.pairs);var n=e.broadphase;if(n.controller){var o=d.allBodies(t);n.controller.clear(n),n.controller.update(n,o,e,!0)}},o._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},o._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var o=0;o<e.length;o++){var i=e[o];i.isStatic||i.isSleeping||(i.force.y+=i.mass*t.y*n,i.force.x+=i.mass*t.x*n)}},o._bodiesUpdate=function(e,t,n,o,i){for(var r=0;r<e.length;r++){var a=e[r];a.isStatic||a.isSleeping||v.update(a,t,n,o)}}},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":31,"./Common":14,"./Events":16,"./Metrics":18,"./Sleeping":22}],16:[function(e,t,n){var o={};t.exports=o;var i=e("./Common");o.on=function(e,t,n){for(var o,i=t.split(" "),r=0;r<i.length;r++)o=i[r],e.events=e.events||{},e.events[o]=e.events[o]||[],e.events[o].push(n);return n},o.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=i.keys(e.events).join(" "));for(var o=t.split(" "),r=0;r<o.length;r++){var a=e.events[o[r]],s=[];if(n&&a)for(var l=0;l<a.length;l++)a[l]!==n&&s.push(a[l]);e.events[o[r]]=s}}else e.events={}},o.trigger=function(e,t,n){var o,r,a,s;if(e.events){n||(n={}),o=t.split(" ");for(var l=0;l<o.length;l++)if(r=o[l],a=e.events[r]){(s=i.clone(n,!1)).name=r,s.source=e;for(var c=0;c<a.length;c++)a[c].apply(e,[s])}}}},{"./Common":14}],17:[function(e,t,n){var o={};t.exports=o;var i=e("./Plugin"),r=e("./Common");o.name="matter-js",o.version="0.14.2",o.uses=[],o.used=[],o.use=function(){i.use(o,Array.prototype.slice.call(arguments))},o.before=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathBefore(o,e,t)},o.after=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathAfter(o,e,t)}},{"./Common":14,"./Plugin":20}],18:[function(e,t,n){},{"../body/Composite":2,"./Common":14}],19:[function(e,t,n){var o={};t.exports=o;var i=e("../core/Common");o.create=function(e){var t={};return e||i.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=t.element.getAttribute("data-pixel-ratio")||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},o.setElement(t,t.element),t},o.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},o.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},o.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},o.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},o._getRelativeMousePosition=function(e,t,n){var o,i,r=t.getBoundingClientRect(),a=document.documentElement||document.body.parentNode||document.body,s=void 0!==window.pageXOffset?window.pageXOffset:a.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:a.scrollTop,c=e.changedTouches;return c?(o=c[0].pageX-r.left-s,i=c[0].pageY-r.top-l):(o=e.pageX-r.left-s,i=e.pageY-r.top-l),{x:o/(t.clientWidth/(t.width||t.clientWidth)*n),y:i/(t.clientHeight/(t.height||t.clientHeight)*n)}}},{"../core/Common":14}],20:[function(e,t,n){var o={};t.exports=o;var i=e("./Common");o._registry={},o.register=function(e){if(o.isPlugin(e)||i.warn("Plugin.register:",o.toString(e),"does not implement all required fields."),e.name in o._registry){var t=o._registry[e.name],n=o.versionParse(e.version).number,r=o.versionParse(t.version).number;n>r?(i.warn("Plugin.register:",o.toString(t),"was upgraded to",o.toString(e)),o._registry[e.name]=e):n<r?i.warn("Plugin.register:",o.toString(t),"can not be downgraded to",o.toString(e)):e!==t&&i.warn("Plugin.register:",o.toString(e),"is already registered to different plugin object")}else o._registry[e.name]=e;return e},o.resolve=function(e){return o._registry[o.dependencyParse(e).name]},o.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},o.isPlugin=function(e){return e&&e.name&&e.version&&e.install},o.isUsed=function(e,t){return e.used.indexOf(t)>-1},o.isFor=function(e,t){var n=e.for&&o.dependencyParse(e.for);return!e.for||t.name===n.name&&o.versionSatisfies(t.version,n.range)},o.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=o.dependencies(e),r=i.topologicalSort(n),a=[],s=0;s<r.length;s+=1)if(r[s]!==e.name){var l=o.resolve(r[s]);l?o.isUsed(e,l.name)||(o.isFor(l,e)||(i.warn("Plugin.use:",o.toString(l),"is for",l.for,"but installed on",o.toString(e)+"."),l._warned=!0),l.install?l.install(e):(i.warn("Plugin.use:",o.toString(l),"does not specify an install function."),l._warned=!0),l._warned?(a.push("🔶 "+o.toString(l)),delete l._warned):a.push("✅ "+o.toString(l)),e.used.push(l.name)):a.push("❌ "+r[s])}a.length>0&&i.info(a.join("  "))}else i.warn("Plugin.use:",o.toString(e),"does not specify any dependencies to install.")},o.dependencies=function(e,t){var n=o.dependencyParse(e),r=n.name;if(!(r in(t=t||{}))){e=o.resolve(e)||e,t[r]=i.map(e.uses||[],(function(t){o.isPlugin(t)&&o.register(t);var r=o.dependencyParse(t),a=o.resolve(t);return a&&!o.versionSatisfies(a.version,r.range)?(i.warn("Plugin.dependencies:",o.toString(a),"does not satisfy",o.toString(r),"used by",o.toString(n)+"."),a._warned=!0,e._warned=!0):a||(i.warn("Plugin.dependencies:",o.toString(t),"used by",o.toString(n),"could not be resolved."),e._warned=!0),r.name}));for(var a=0;a<t[r].length;a+=1)o.dependencies(t[r][a],t);return t}},o.dependencyParse=function(e){return i.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(e)||i.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},o.versionParse=function(e){/^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(e)||i.warn("Plugin.versionParse:",e,"is not a valid version or range.");var t=e.split("-");e=t[0];var n=isNaN(Number(e[0])),o=n?e.substr(1):e,r=i.map(o.split("."),(function(e){return Number(e)}));return{isRange:n,version:o,range:e,operator:n?e[0]:"",parts:r,prerelease:t[1],number:1e8*r[0]+1e4*r[1]+r[2]}},o.versionSatisfies=function(e,t){t=t||"*";var n=o.versionParse(t),i=n.parts,r=o.versionParse(e),a=r.parts;if(n.isRange){if("*"===n.operator||"*"===e)return!0;if("~"===n.operator)return a[0]===i[0]&&a[1]===i[1]&&a[2]>=i[2];if("^"===n.operator)return i[0]>0?a[0]===i[0]&&r.number>=n.number:i[1]>0?a[1]===i[1]&&a[2]>=i[2]:a[2]===i[2]}return e===t||"*"===e}},{"./Common":14}],21:[function(e,t,n){var o={};t.exports=o;var i,r,a,s=e("./Events"),l=e("./Engine"),c=e("./Common");"undefined"!=typeof window&&(i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,r=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),i||(i=function(e){a=setTimeout((function(){e(c.now())}),1e3/60)},r=function(){clearTimeout(a)}),o.create=function(e){var t=c.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},o.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=o.create()),function n(r){e.frameRequestId=i(n),r&&e.enabled&&o.tick(e,t,r)}(),e},o.tick=function(e,t,n){var o,i=t.timing,r=1,a={timestamp:i.timestamp};s.trigger(e,"beforeTick",a),s.trigger(t,"beforeTick",a),e.isFixed?o=e.delta:(o=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(o),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),r=(o=(o=(o=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:o)>e.deltaMax?e.deltaMax:o)/e.delta,e.delta=o),0!==e.timeScalePrev&&(r*=i.timeScale/e.timeScalePrev),0===i.timeScale&&(r=0),e.timeScalePrev=i.timeScale,e.correction=r,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),s.trigger(e,"tick",a),s.trigger(t,"tick",a),t.world.isModified&&t.render&&t.render.controller&&t.render.controller.clear&&t.render.controller.clear(t.render),s.trigger(e,"beforeUpdate",a),l.update(t,o,r),s.trigger(e,"afterUpdate",a),t.render&&t.render.controller&&(s.trigger(e,"beforeRender",a),s.trigger(t,"beforeRender",a),t.render.controller.world(t.render),s.trigger(e,"afterRender",a),s.trigger(t,"afterRender",a)),s.trigger(e,"afterTick",a),s.trigger(t,"afterTick",a)},o.stop=function(e){r(e.frameRequestId)},o.start=function(e,t){o.run(e,t)}},{"./Common":14,"./Engine":15,"./Events":16}],22:[function(e,t,n){var o={};t.exports=o;var i=e("./Events");o._motionWakeThreshold=.18,o._motionSleepThreshold=.08,o._minBias=.9,o.update=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var r=e[i],a=r.speed*r.speed+r.angularSpeed*r.angularSpeed;if(0===r.force.x&&0===r.force.y){var s=Math.min(r.motion,a),l=Math.max(r.motion,a);r.motion=o._minBias*s+(1-o._minBias)*l,r.sleepThreshold>0&&r.motion<o._motionSleepThreshold*n?(r.sleepCounter+=1,r.sleepCounter>=r.sleepThreshold&&o.set(r,!0)):r.sleepCounter>0&&(r.sleepCounter-=1)}else o.set(r,!1)}},o.afterCollisions=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var r=e[i];if(r.isActive){var a=r.collision,s=a.bodyA.parent,l=a.bodyB.parent;if(!(s.isSleeping&&l.isSleeping||s.isStatic||l.isStatic)&&(s.isSleeping||l.isSleeping)){var c=s.isSleeping&&!s.isStatic?s:l,u=c===s?l:s;!c.isStatic&&u.motion>o._motionWakeThreshold*n&&o.set(c,!1)}}}},o.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||i.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&i.trigger(e,"sleepEnd"))}},{"./Events":16}],23:[function(e,t,n){var o={};t.exports=o;var i,r=e("../geometry/Vertices"),a=e("../core/Common"),s=e("../body/Body"),l=e("../geometry/Bounds"),c=e("../geometry/Vector");o.rectangle=function(e,t,n,o,i){i=i||{};var l={label:"Rectangle Body",position:{x:e,y:t},vertices:r.fromPath("L 0 0 L "+n+" 0 L "+n+" "+o+" L 0 "+o)};if(i.chamfer){var c=i.chamfer;l.vertices=r.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete i.chamfer}return s.create(a.extend({},l,i))},o.trapezoid=function(e,t,n,o,i,l){l=l||{};var c,u=n*(i*=.5),d=u+(1-2*i)*n,p=d+u;c=i<.5?"L 0 0 L "+u+" "+-o+" L "+d+" "+-o+" L "+p+" 0":"L 0 0 L "+d+" "+-o+" L "+p+" 0";var f={label:"Trapezoid Body",position:{x:e,y:t},vertices:r.fromPath(c)};if(l.chamfer){var v=l.chamfer;f.vertices=r.chamfer(f.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete l.chamfer}return s.create(a.extend({},f,l))},o.circle=function(e,t,n,i,r){i=i||{};var s={label:"Circle Body",circleRadius:n};r=r||25;var l=Math.ceil(Math.max(10,Math.min(r,n)));return l%2==1&&(l+=1),o.polygon(e,t,l,n,a.extend({},s,i))},o.polygon=function(e,t,n,i,l){if(l=l||{},n<3)return o.circle(e,t,i,l);for(var c=2*Math.PI/n,u="",d=.5*c,p=0;p<n;p+=1){var f=d+p*c,v=Math.cos(f)*i,m=Math.sin(f)*i;u+="L "+v.toFixed(3)+" "+m.toFixed(3)+" "}var g={label:"Polygon Body",position:{x:e,y:t},vertices:r.fromPath(u)};if(l.chamfer){var y=l.chamfer;g.vertices=r.chamfer(g.vertices,y.radius,y.quality,y.qualityMin,y.qualityMax),delete l.chamfer}return s.create(a.extend({},g,l))},o.fromVertices=function(e,t,n,o,u,d,p){var f,v,m,g,y,h,x,b,w;for(i||(i=a._requireGlobal("decomp","poly-decomp")),o=o||{},v=[],u=void 0!==u&&u,d=void 0!==d?d:.01,p=void 0!==p?p:10,i||a.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),a.isArray(n[0])||(n=[n]),b=0;b<n.length;b+=1)if(g=n[b],(m=r.isConvex(g))||!i)g=m?r.clockwiseSort(g):r.hull(g),v.push({position:{x:e,y:t},vertices:g});else{var S=g.map((function(e){return[e.x,e.y]}));i.makeCCW(S),!1!==d&&i.removeCollinearPoints(S,d);var P=i.quickDecomp(S);for(y=0;y<P.length;y++){var C=P[y].map((function(e){return{x:e[0],y:e[1]}}));p>0&&r.area(C)<p||v.push({position:r.centre(C),vertices:C})}}for(y=0;y<v.length;y++)v[y]=s.create(a.extend(v[y],o));if(u)for(y=0;y<v.length;y++){var _=v[y];for(h=y+1;h<v.length;h++){var M=v[h];if(l.overlaps(_.bounds,M.bounds)){var A=_.vertices,B=M.vertices;for(x=0;x<_.vertices.length;x++)for(w=0;w<M.vertices.length;w++){var k=c.magnitudeSquared(c.sub(A[(x+1)%A.length],B[w])),I=c.magnitudeSquared(c.sub(A[x],B[(w+1)%B.length]));k<5&&I<5&&(A[x].isInternal=!0,B[w].isInternal=!0)}}}}return v.length>1?(f=s.create(a.extend({parts:v.slice(0)},o)),s.setPosition(f,{x:e,y:t}),f):v[0]}},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],24:[function(e,t,n){var o={};t.exports=o;var i=e("../body/Composite"),r=e("../constraint/Constraint"),a=e("../core/Common"),s=e("../body/Body"),l=e("./Bodies");o.stack=function(e,t,n,o,r,a,l){for(var c,u=i.create({label:"Stack"}),d=e,p=t,f=0,v=0;v<o;v++){for(var m=0,g=0;g<n;g++){var y=l(d,p,g,v,c,f);if(y){var h=y.bounds.max.y-y.bounds.min.y,x=y.bounds.max.x-y.bounds.min.x;h>m&&(m=h),s.translate(y,{x:.5*x,y:.5*h}),d=y.bounds.max.x+r,i.addBody(u,y),c=y,f+=1}else d+=r}p+=m+a,d=e}return u},o.chain=function(e,t,n,o,s,l){for(var c=e.bodies,u=1;u<c.length;u++){var d=c[u-1],p=c[u],f=d.bounds.max.y-d.bounds.min.y,v=d.bounds.max.x-d.bounds.min.x,m=p.bounds.max.y-p.bounds.min.y,g={bodyA:d,pointA:{x:v*t,y:f*n},bodyB:p,pointB:{x:(p.bounds.max.x-p.bounds.min.x)*o,y:m*s}},y=a.extend(g,l);i.addConstraint(e,r.create(y))}return e.label+=" Chain",e},o.mesh=function(e,t,n,o,s){var l,c,u,d,p,f=e.bodies;for(l=0;l<n;l++){for(c=1;c<t;c++)u=f[c-1+l*t],d=f[c+l*t],i.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:d},s)));if(l>0)for(c=0;c<t;c++)u=f[c+(l-1)*t],d=f[c+l*t],i.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:d},s))),o&&c>0&&(p=f[c-1+(l-1)*t],i.addConstraint(e,r.create(a.extend({bodyA:p,bodyB:d},s)))),o&&c<t-1&&(p=f[c+1+(l-1)*t],i.addConstraint(e,r.create(a.extend({bodyA:p,bodyB:d},s))))}return e.label+=" Mesh",e},o.pyramid=function(e,t,n,i,r,a,l){return o.stack(e,t,n,i,r,a,(function(t,o,a,c,u,d){var p=Math.min(i,Math.ceil(n/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>p||a<(c=p-c)||a>n-1-c))return 1===d&&s.translate(u,{x:(a+(n%2==1?1:-1))*f,y:0}),l(e+(u?a*f:0)+a*r,o,a,c,u,d)}))},o.newtonsCradle=function(e,t,n,o,a){for(var s=i.create({label:"Newtons Cradle"}),c=0;c<n;c++){var u=l.circle(e+c*(1.9*o),t+a,o,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),d=r.create({pointA:{x:e+c*(1.9*o),y:t},bodyB:u});i.addBody(s,u),i.addConstraint(s,d)}return s},o.car=function(e,t,n,o,a){var c=s.nextGroup(!0),u=.5*-n+20,d=.5*n-20,p=i.create({label:"Car"}),f=l.rectangle(e,t,n,o,{collisionFilter:{group:c},chamfer:{radius:.5*o},density:2e-4}),v=l.circle(e+u,t+0,a,{collisionFilter:{group:c},friction:.8}),m=l.circle(e+d,t+0,a,{collisionFilter:{group:c},friction:.8}),g=r.create({bodyB:f,pointB:{x:u,y:0},bodyA:v,stiffness:1,length:0}),y=r.create({bodyB:f,pointB:{x:d,y:0},bodyA:m,stiffness:1,length:0});return i.addBody(p,f),i.addBody(p,v),i.addBody(p,m),i.addConstraint(p,g),i.addConstraint(p,y),p},o.softBody=function(e,t,n,i,r,s,c,u,d,p){d=a.extend({inertia:1/0},d),p=a.extend({stiffness:.2,render:{type:"line",anchors:!1}},p);var f=o.stack(e,t,n,i,r,s,(function(e,t){return l.circle(e,t,u,d)}));return o.mesh(f,n,i,c,p),f.label="Soft Body",f}},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":23}],25:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vector"),r=e("../core/Common");o.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var o=(n+1)%e.length,a=i.normalise({x:e[o].y-e[n].y,y:e[n].x-e[o].x}),s=0===a.y?1/0:a.x/a.y;t[s=s.toFixed(3).toString()]=a}return r.values(t)},o.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),o=Math.sin(t),i=0;i<e.length;i++){var r,a=e[i];r=a.x*n-a.y*o,a.y=a.x*o+a.y*n,a.x=r}}},{"../core/Common":14,"../geometry/Vector":28}],26:[function(e,t,n){var o={};t.exports=o,o.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&o.update(t,e),t},o.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var o=0;o<t.length;o++){var i=t[o];i.x>e.max.x&&(e.max.x=i.x),i.x<e.min.x&&(e.min.x=i.x),i.y>e.max.y&&(e.max.y=i.y),i.y<e.min.y&&(e.min.y=i.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},o.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},o.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},o.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},o.shift=function(e,t){var n=e.max.x-e.min.x,o=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+o}},{}],27:[function(e,t,n){var o={};t.exports=o,e("../geometry/Bounds");var i=e("../core/Common");o.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||i.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,r,a,s,l,c,u,d,p,f,v,m=[],g=0,y=0,h=0;t=t||15;var x=function(e,t,n){var o=n%2==1&&n>1;if(!p||e!=p.x||t!=p.y){p&&o?(f=p.x,v=p.y):(f=0,v=0);var i={x:f+e,y:v+t};!o&&p||(p=i),m.push(i),y=f+e,h=v+t}},b=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":y=e.x,h=e.y;break;case"H":y=e.x;break;case"V":h=e.y}x(y,h,e.pathSegType)}};for(o._svgPathToAbsolute(e),a=e.getTotalLength(),c=[],n=0;n<e.pathSegList.numberOfItems;n+=1)c.push(e.pathSegList.getItem(n));for(u=c.concat();g<a;){if((l=c[e.getPathSegAtLength(g)])!=d){for(;u.length&&u[0]!=l;)b(u.shift());d=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":s=e.getPointAtLength(g),x(s.x,s.y,0)}g+=t}for(n=0,r=u.length;n<r;++n)b(u[n]);return m},o._svgPathToAbsolute=function(e){for(var t,n,o,i,r,a,s=e.pathSegList,l=0,c=0,u=s.numberOfItems,d=0;d<u;++d){var p=s.getItem(d),f=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in p&&(l=p.x),"y"in p&&(c=p.y);else switch("x1"in p&&(o=l+p.x1),"x2"in p&&(r=l+p.x2),"y1"in p&&(i=c+p.y1),"y2"in p&&(a=c+p.y2),"x"in p&&(l+=p.x),"y"in p&&(c+=p.y),f){case"m":s.replaceItem(e.createSVGPathSegMovetoAbs(l,c),d);break;case"l":s.replaceItem(e.createSVGPathSegLinetoAbs(l,c),d);break;case"h":s.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(l),d);break;case"v":s.replaceItem(e.createSVGPathSegLinetoVerticalAbs(c),d);break;case"c":s.replaceItem(e.createSVGPathSegCurvetoCubicAbs(l,c,o,i,r,a),d);break;case"s":s.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(l,c,r,a),d);break;case"q":s.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(l,c,o,i),d);break;case"t":s.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),d);break;case"a":s.replaceItem(e.createSVGPathSegArcAbs(l,c,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),d);break;case"z":case"Z":l=t,c=n}"M"!=f&&"m"!=f||(t=l,n=c)}}},{"../core/Common":14,"../geometry/Bounds":26}],28:[function(e,t,n){var o={};t.exports=o,o.create=function(e,t){return{x:e||0,y:t||0}},o.clone=function(e){return{x:e.x,y:e.y}},o.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},o.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},o.rotate=function(e,t,n){var o=Math.cos(t),i=Math.sin(t);n||(n={});var r=e.x*o-e.y*i;return n.y=e.x*i+e.y*o,n.x=r,n},o.rotateAbout=function(e,t,n,o){var i=Math.cos(t),r=Math.sin(t);o||(o={});var a=n.x+((e.x-n.x)*i-(e.y-n.y)*r);return o.y=n.y+((e.x-n.x)*r+(e.y-n.y)*i),o.x=a,o},o.normalise=function(e){var t=o.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},o.dot=function(e,t){return e.x*t.x+e.y*t.y},o.cross=function(e,t){return e.x*t.y-e.y*t.x},o.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},o.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},o.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},o.mult=function(e,t){return{x:e.x*t,y:e.y*t}},o.div=function(e,t){return{x:e.x/t,y:e.y/t}},o.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},o.neg=function(e){return{x:-e.x,y:-e.y}},o.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},o._temp=[o.create(),o.create(),o.create(),o.create(),o.create(),o.create()]},{}],29:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vector"),r=e("../core/Common");o.create=function(e,t){for(var n=[],o=0;o<e.length;o++){var i=e[o],r={x:i.x,y:i.y,index:o,body:t,isInternal:!1};n.push(r)}return n},o.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,(function(e,t,o){n.push({x:parseFloat(t),y:parseFloat(o)})})),o.create(n,t)},o.centre=function(e){for(var t,n,r,a=o.area(e,!0),s={x:0,y:0},l=0;l<e.length;l++)r=(l+1)%e.length,t=i.cross(e[l],e[r]),n=i.mult(i.add(e[l],e[r]),t),s=i.add(s,n);return i.div(s,6*a)},o.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return i.div(t,e.length)},o.area=function(e,t){for(var n=0,o=e.length-1,i=0;i<e.length;i++)n+=(e[o].x-e[i].x)*(e[o].y+e[i].y),o=i;return t?n/2:Math.abs(n)/2},o.inertia=function(e,t){for(var n,o,r=0,a=0,s=e,l=0;l<s.length;l++)o=(l+1)%s.length,r+=(n=Math.abs(i.cross(s[o],s[l])))*(i.dot(s[o],s[o])+i.dot(s[o],s[l])+i.dot(s[l],s[l])),a+=n;return t/6*(r/a)},o.translate=function(e,t,n){var o;if(n)for(o=0;o<e.length;o++)e[o].x+=t.x*n,e[o].y+=t.y*n;else for(o=0;o<e.length;o++)e[o].x+=t.x,e[o].y+=t.y;return e},o.rotate=function(e,t,n){if(0!==t){for(var o=Math.cos(t),i=Math.sin(t),r=0;r<e.length;r++){var a=e[r],s=a.x-n.x,l=a.y-n.y;a.x=n.x+(s*o-l*i),a.y=n.y+(s*i+l*o)}return e}},o.contains=function(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=e[(n+1)%e.length];if((t.x-o.x)*(i.y-o.y)+(t.y-o.y)*(o.x-i.x)>0)return!1}return!0},o.scale=function(e,t,n,r){if(1===t&&1===n)return e;var a,s;r=r||o.centre(e);for(var l=0;l<e.length;l++)a=e[l],s=i.sub(a,r),e[l].x=r.x+s.x*t,e[l].y=r.y+s.y*n;return e},o.chamfer=function(e,t,n,o,a){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,o=o||2,a=a||14;for(var s=[],l=0;l<e.length;l++){var c=e[l-1>=0?l-1:e.length-1],u=e[l],d=e[(l+1)%e.length],p=t[l<t.length?l:t.length-1];if(0!==p){var f=i.normalise({x:u.y-c.y,y:c.x-u.x}),v=i.normalise({x:d.y-u.y,y:u.x-d.x}),m=Math.sqrt(2*Math.pow(p,2)),g=i.mult(r.clone(f),p),y=i.normalise(i.mult(i.add(f,v),.5)),h=i.sub(u,i.mult(y,m)),x=n;-1===n&&(x=1.75*Math.pow(p,.32)),(x=r.clamp(x,o,a))%2==1&&(x+=1);for(var b=Math.acos(i.dot(f,v))/x,w=0;w<x;w++)s.push(i.add(i.rotate(g,b*w),h))}else s.push(u)}return s},o.clockwiseSort=function(e){var t=o.mean(e);return e.sort((function(e,n){return i.angle(t,e)-i.angle(t,n)})),e},o.isConvex=function(e){var t,n,o,i,r=0,a=e.length;if(a<3)return null;for(t=0;t<a;t++)if(o=(t+2)%a,i=(e[n=(t+1)%a].x-e[t].x)*(e[o].y-e[n].y),(i-=(e[n].y-e[t].y)*(e[o].x-e[n].x))<0?r|=1:i>0&&(r|=2),3===r)return!1;return 0!==r||null},o.hull=function(e){var t,n,o=[],r=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];r.length>=2&&i.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];o.length>=2&&i.cross3(o[o.length-2],o[o.length-1],t)<=0;)o.pop();o.push(t)}return o.pop(),r.pop(),o.concat(r)}},{"../core/Common":14,"../geometry/Vector":28}],30:[function(e,t,n){var o=t.exports=e("../core/Matter");o.Body=e("../body/Body"),o.Composite=e("../body/Composite"),o.World=e("../body/World"),o.Contact=e("../collision/Contact"),o.Detector=e("../collision/Detector"),o.Grid=e("../collision/Grid"),o.Pairs=e("../collision/Pairs"),o.Pair=e("../collision/Pair"),o.Query=e("../collision/Query"),o.Resolver=e("../collision/Resolver"),o.SAT=e("../collision/SAT"),o.Constraint=e("../constraint/Constraint"),o.MouseConstraint=e("../constraint/MouseConstraint"),o.Common=e("../core/Common"),o.Engine=e("../core/Engine"),o.Events=e("../core/Events"),o.Mouse=e("../core/Mouse"),o.Runner=e("../core/Runner"),o.Sleeping=e("../core/Sleeping"),o.Plugin=e("../core/Plugin"),o.Bodies=e("../factory/Bodies"),o.Composites=e("../factory/Composites"),o.Axes=e("../geometry/Axes"),o.Bounds=e("../geometry/Bounds"),o.Svg=e("../geometry/Svg"),o.Vector=e("../geometry/Vector"),o.Vertices=e("../geometry/Vertices"),o.Render=e("../render/Render"),o.RenderPixi=e("../render/RenderPixi"),o.World.add=o.Composite.add,o.World.remove=o.Composite.remove,o.World.addComposite=o.Composite.addComposite,o.World.addBody=o.Composite.addBody,o.World.addConstraint=o.Composite.addConstraint,o.World.clear=o.Composite.clear,o.Engine.run=o.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Matter":17,"../core/Metrics":18,"../core/Mouse":19,"../core/Plugin":20,"../core/Runner":21,"../core/Sleeping":22,"../factory/Bodies":23,"../factory/Composites":24,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Svg":27,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31,"../render/RenderPixi":32}],31:[function(e,t,n){var o={};t.exports=o;var i=e("../core/Common"),r=e("../body/Composite"),a=e("../geometry/Bounds"),s=e("../core/Events"),l=e("../collision/Grid"),c=e("../geometry/Vector"),u=e("../core/Mouse");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(i.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o.create=function(e){var t={controller:o,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#18181d",wireframeBackground:"#0f0f13",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},r=i.extend(t,e);return r.canvas&&(r.canvas.width=r.options.width||r.canvas.width,r.canvas.height=r.options.height||r.canvas.height),r.mouse=e.mouse,r.engine=e.engine,r.canvas=r.canvas||n(r.options.width,r.options.height),r.context=r.canvas.getContext("2d"),r.textures={},r.bounds=r.bounds||{min:{x:0,y:0},max:{x:r.canvas.width,y:r.canvas.height}},1!==r.options.pixelRatio&&o.setPixelRatio(r,r.options.pixelRatio),i.isElement(r.element)?r.element.appendChild(r.canvas):r.canvas.parentNode||i.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),r},o.run=function(t){!function n(i){t.frameRequestId=e(n),o.world(t)}()},o.stop=function(e){t(e.frameRequestId)},o.setPixelRatio=function(e,t){var n=e.options,o=e.canvas;"auto"===t&&(t=d(o)),n.pixelRatio=t,o.setAttribute("data-pixel-ratio",t),o.width=n.width*t,o.height=n.height*t,o.style.width=n.width+"px",o.style.height=n.height+"px",e.context.scale(t,t)},o.lookAt=function(e,t,n,o){o=void 0===o||o,t=i.isArray(t)?t:[t],n=n||{x:0,y:0};for(var r={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},a=0;a<t.length;a+=1){var s=t[a],l=s.bounds?s.bounds.min:s.min||s.position||s,c=s.bounds?s.bounds.max:s.max||s.position||s;l&&c&&(l.x<r.min.x&&(r.min.x=l.x),c.x>r.max.x&&(r.max.x=c.x),l.y<r.min.y&&(r.min.y=l.y),c.y>r.max.y&&(r.max.y=c.y))}var d=r.max.x-r.min.x+2*n.x,p=r.max.y-r.min.y+2*n.y,f=e.canvas.height,v=e.canvas.width/f,m=d/p,g=1,y=1;m>v?y=m/v:g=v/m,e.options.hasBounds=!0,e.bounds.min.x=r.min.x,e.bounds.max.x=r.min.x+d*g,e.bounds.min.y=r.min.y,e.bounds.max.y=r.min.y+p*y,o&&(e.bounds.min.x+=.5*d-d*g*.5,e.bounds.max.x+=.5*d-d*g*.5,e.bounds.min.y+=.5*p-p*y*.5,e.bounds.max.y+=.5*p-p*y*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))},o.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,o=t/e.options.width,i=n/e.options.height;e.context.scale(1/o,1/i),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},o.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},o.world=function(e){var t,n=e.engine,i=n.world,d=e.canvas,p=e.context,v=e.options,m=r.allBodies(i),g=r.allConstraints(i),y=v.wireframes?v.wireframeBackground:v.background,h=[],x=[],b={timestamp:n.timing.timestamp};if(s.trigger(e,"beforeRender",b),e.currentBackground!==y&&f(e,y),p.globalCompositeOperation="source-in",p.fillStyle="transparent",p.fillRect(0,0,d.width,d.height),p.globalCompositeOperation="source-over",v.hasBounds){for(t=0;t<m.length;t++){var w=m[t];a.overlaps(w.bounds,e.bounds)&&h.push(w)}for(t=0;t<g.length;t++){var S=g[t],P=S.bodyA,C=S.bodyB,_=S.pointA,M=S.pointB;P&&(_=c.add(P.position,S.pointA)),C&&(M=c.add(C.position,S.pointB)),_&&M&&(a.contains(e.bounds,_)||a.contains(e.bounds,M))&&x.push(S)}o.startViewTransform(e),e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))}else x=g,h=m;!v.wireframes||n.enableSleeping&&v.showSleeping?o.bodies(e,h,p):(v.showConvexHulls&&o.bodyConvexHulls(e,h,p),o.bodyWireframes(e,h,p)),v.showBounds&&o.bodyBounds(e,h,p),(v.showAxes||v.showAngleIndicator)&&o.bodyAxes(e,h,p),v.showPositions&&o.bodyPositions(e,h,p),v.showVelocity&&o.bodyVelocity(e,h,p),v.showIds&&o.bodyIds(e,h,p),v.showSeparations&&o.separations(e,n.pairs.list,p),v.showCollisions&&o.collisions(e,n.pairs.list,p),v.showVertexNumbers&&o.vertexNumbers(e,h,p),v.showMousePosition&&o.mousePosition(e,e.mouse,p),o.constraints(x,p),v.showBroadphase&&n.broadphase.controller===l&&o.grid(e,n.broadphase,p),v.showDebug&&o.debug(e,p),v.hasBounds&&o.endViewTransform(e),s.trigger(e,"afterRender",b)},o.debug=function(e,t){var n=t,o=e.engine,i=o.world,a=o.metrics,s=e.options;if(r.allBodies(i),o.timing.timestamp-(e.debugTimestamp||0)>=500){var l="";a.timing&&(l+="fps: "+Math.round(a.timing.fps)+"    "),e.debugString=l,e.debugTimestamp=o.timing.timestamp}if(e.debugString){n.font="12px Arial",s.wireframes?n.fillStyle="rgba(255,255,255,0.5)":n.fillStyle="rgba(0,0,0,0.5)";for(var c=e.debugString.split("\n"),u=0;u<c.length;u++)n.fillText(c[u],50,50+18*u)}},o.constraints=function(e,t){for(var n=t,o=0;o<e.length;o++){var r=e[o];if(r.render.visible&&r.pointA&&r.pointB){var a,s,l=r.bodyA,u=r.bodyB;if(a=l?c.add(l.position,r.pointA):r.pointA,"pin"===r.render.type)n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath();else{if(s=u?c.add(u.position,r.pointB):r.pointB,n.beginPath(),n.moveTo(a.x,a.y),"spring"===r.render.type)for(var d,p=c.sub(s,a),f=c.perp(c.normalise(p)),v=Math.ceil(i.clamp(r.length/5,12,20)),m=1;m<v;m+=1)d=m%2==0?1:-1,n.lineTo(a.x+p.x*(m/v)+f.x*d*4,a.y+p.y*(m/v)+f.y*d*4);n.lineTo(s.x,s.y)}r.render.lineWidth&&(n.lineWidth=r.render.lineWidth,n.strokeStyle=r.render.strokeStyle,n.stroke()),r.render.anchors&&(n.fillStyle=r.render.strokeStyle,n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.arc(s.x,s.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},o.bodyShadows=function(e,t,n){for(var o=n,i=(e.engine,0);i<t.length;i++){var r=t[i];if(r.render.visible){if(r.circleRadius)o.beginPath(),o.arc(r.position.x,r.position.y,r.circleRadius,0,2*Math.PI),o.closePath();else{o.beginPath(),o.moveTo(r.vertices[0].x,r.vertices[0].y);for(var a=1;a<r.vertices.length;a++)o.lineTo(r.vertices[a].x,r.vertices[a].y);o.closePath()}var s=r.position.x-.5*e.options.width,l=r.position.y-.2*e.options.height,c=Math.abs(s)+Math.abs(l);o.shadowColor="rgba(0,0,0,0.15)",o.shadowOffsetX=.05*s,o.shadowOffsetY=.05*l,o.shadowBlur=1+12*Math.min(1,c/1e3),o.fill(),o.shadowColor=null,o.shadowOffsetX=null,o.shadowOffsetY=null,o.shadowBlur=null}}},o.bodies=function(e,t,n){var o,i,r,a,s=n,l=(e.engine,e.options),c=l.showInternalEdges||!l.wireframes;for(r=0;r<t.length;r++)if((o=t[r]).render.visible)for(a=o.parts.length>1?1:0;a<o.parts.length;a++)if((i=o.parts[a]).render.visible){if(l.showSleeping&&o.isSleeping?s.globalAlpha=.5*i.render.opacity:1!==i.render.opacity&&(s.globalAlpha=i.render.opacity),i.render.sprite&&i.render.sprite.texture&&!l.wireframes){var u=i.render.sprite,d=p(e,u.texture);s.translate(i.position.x,i.position.y),s.rotate(i.angle),s.drawImage(d,d.width*-u.xOffset*u.xScale,d.height*-u.yOffset*u.yScale,d.width*u.xScale,d.height*u.yScale),s.rotate(-i.angle),s.translate(-i.position.x,-i.position.y)}else{if(i.circleRadius)s.beginPath(),s.arc(i.position.x,i.position.y,i.circleRadius,0,2*Math.PI);else{s.beginPath(),s.moveTo(i.vertices[0].x,i.vertices[0].y);for(var f=1;f<i.vertices.length;f++)!i.vertices[f-1].isInternal||c?s.lineTo(i.vertices[f].x,i.vertices[f].y):s.moveTo(i.vertices[f].x,i.vertices[f].y),i.vertices[f].isInternal&&!c&&s.moveTo(i.vertices[(f+1)%i.vertices.length].x,i.vertices[(f+1)%i.vertices.length].y);s.lineTo(i.vertices[0].x,i.vertices[0].y),s.closePath()}l.wireframes?(s.lineWidth=1,s.strokeStyle="#bbb",s.stroke()):(s.fillStyle=i.render.fillStyle,i.render.lineWidth&&(s.lineWidth=i.render.lineWidth,s.strokeStyle=i.render.strokeStyle,s.stroke()),s.fill())}s.globalAlpha=1}},o.bodyWireframes=function(e,t,n){var o,i,r,a,s,l=n,c=e.options.showInternalEdges;for(l.beginPath(),r=0;r<t.length;r++)if((o=t[r]).render.visible)for(s=o.parts.length>1?1:0;s<o.parts.length;s++){for(i=o.parts[s],l.moveTo(i.vertices[0].x,i.vertices[0].y),a=1;a<i.vertices.length;a++)!i.vertices[a-1].isInternal||c?l.lineTo(i.vertices[a].x,i.vertices[a].y):l.moveTo(i.vertices[a].x,i.vertices[a].y),i.vertices[a].isInternal&&!c&&l.moveTo(i.vertices[(a+1)%i.vertices.length].x,i.vertices[(a+1)%i.vertices.length].y);l.lineTo(i.vertices[0].x,i.vertices[0].y)}l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()},o.bodyConvexHulls=function(e,t,n){var o,i,r,a=n;for(a.beginPath(),i=0;i<t.length;i++)if((o=t[i]).render.visible&&1!==o.parts.length){for(a.moveTo(o.vertices[0].x,o.vertices[0].y),r=1;r<o.vertices.length;r++)a.lineTo(o.vertices[r].x,o.vertices[r].y);a.lineTo(o.vertices[0].x,o.vertices[0].y)}a.lineWidth=1,a.strokeStyle="rgba(255,255,255,0.2)",a.stroke()},o.vertexNumbers=function(e,t,n){var o,i,r,a=n;for(o=0;o<t.length;o++){var s=t[o].parts;for(r=s.length>1?1:0;r<s.length;r++){var l=s[r];for(i=0;i<l.vertices.length;i++)a.fillStyle="rgba(255,255,255,0.2)",a.fillText(o+"_"+i,l.position.x+.8*(l.vertices[i].x-l.position.x),l.position.y+.8*(l.vertices[i].y-l.position.y))}}},o.mousePosition=function(e,t,n){var o=n;o.fillStyle="rgba(255,255,255,0.8)",o.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},o.bodyBounds=function(e,t,n){var o=n,i=(e.engine,e.options);o.beginPath();for(var r=0;r<t.length;r++)if(t[r].render.visible)for(var a=t[r].parts,s=a.length>1?1:0;s<a.length;s++){var l=a[s];o.rect(l.bounds.min.x,l.bounds.min.y,l.bounds.max.x-l.bounds.min.x,l.bounds.max.y-l.bounds.min.y)}i.wireframes?o.strokeStyle="rgba(255,255,255,0.08)":o.strokeStyle="rgba(0,0,0,0.1)",o.lineWidth=1,o.stroke()},o.bodyAxes=function(e,t,n){var o,i,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),i=0;i<t.length;i++){var c=t[i],u=c.parts;if(c.render.visible)if(l.showAxes)for(r=u.length>1?1:0;r<u.length;r++)for(o=u[r],a=0;a<o.axes.length;a++){var d=o.axes[a];s.moveTo(o.position.x,o.position.y),s.lineTo(o.position.x+20*d.x,o.position.y+20*d.y)}else for(r=u.length>1?1:0;r<u.length;r++)for(o=u[r],a=0;a<o.axes.length;a++)s.moveTo(o.position.x,o.position.y),s.lineTo((o.vertices[0].x+o.vertices[o.vertices.length-1].x)/2,(o.vertices[0].y+o.vertices[o.vertices.length-1].y)/2)}l.wireframes?(s.strokeStyle="indianred",s.lineWidth=1):(s.strokeStyle="rgba(255, 255, 255, 0.4)",s.globalCompositeOperation="overlay",s.lineWidth=2),s.stroke(),s.globalCompositeOperation="source-over"},o.bodyPositions=function(e,t,n){var o,i,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),r=0;r<t.length;r++)if((o=t[r]).render.visible)for(a=0;a<o.parts.length;a++)i=o.parts[a],s.arc(i.position.x,i.position.y,3,0,2*Math.PI,!1),s.closePath();for(l.wireframes?s.fillStyle="indianred":s.fillStyle="rgba(0,0,0,0.5)",s.fill(),s.beginPath(),r=0;r<t.length;r++)(o=t[r]).render.visible&&(s.arc(o.positionPrev.x,o.positionPrev.y,2,0,2*Math.PI,!1),s.closePath());s.fillStyle="rgba(255,165,0,0.8)",s.fill()},o.bodyVelocity=function(e,t,n){var o=n;o.beginPath();for(var i=0;i<t.length;i++){var r=t[i];r.render.visible&&(o.moveTo(r.position.x,r.position.y),o.lineTo(r.position.x+2*(r.position.x-r.positionPrev.x),r.position.y+2*(r.position.y-r.positionPrev.y)))}o.lineWidth=3,o.strokeStyle="cornflowerblue",o.stroke()},o.bodyIds=function(e,t,n){var o,i,r=n;for(o=0;o<t.length;o++)if(t[o].render.visible){var a=t[o].parts;for(i=a.length>1?1:0;i<a.length;i++){var s=a[i];r.font="12px Arial",r.fillStyle="rgba(255,255,255,0.5)",r.fillText(s.id,s.position.x+10,s.position.y-10)}}},o.collisions=function(e,t,n){var o,i,r,a,s=n,l=e.options;for(s.beginPath(),r=0;r<t.length;r++)if((o=t[r]).isActive)for(i=o.collision,a=0;a<o.activeContacts.length;a++){var c=o.activeContacts[a].vertex;s.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?s.fillStyle="rgba(255,255,255,0.7)":s.fillStyle="orange",s.fill(),s.beginPath(),r=0;r<t.length;r++)if((o=t[r]).isActive&&(i=o.collision,o.activeContacts.length>0)){var u=o.activeContacts[0].vertex.x,d=o.activeContacts[0].vertex.y;2===o.activeContacts.length&&(u=(o.activeContacts[0].vertex.x+o.activeContacts[1].vertex.x)/2,d=(o.activeContacts[0].vertex.y+o.activeContacts[1].vertex.y)/2),i.bodyB===i.supports[0].body||!0===i.bodyA.isStatic?s.moveTo(u-8*i.normal.x,d-8*i.normal.y):s.moveTo(u+8*i.normal.x,d+8*i.normal.y),s.lineTo(u,d)}l.wireframes?s.strokeStyle="rgba(255,165,0,0.7)":s.strokeStyle="orange",s.lineWidth=1,s.stroke()},o.separations=function(e,t,n){var o,i,r,a,s,l=n,c=e.options;for(l.beginPath(),s=0;s<t.length;s++)if((o=t[s]).isActive){r=(i=o.collision).bodyA;var u=1;(a=i.bodyB).isStatic||r.isStatic||(u=.5),a.isStatic&&(u=0),l.moveTo(a.position.x,a.position.y),l.lineTo(a.position.x-i.penetration.x*u,a.position.y-i.penetration.y*u),u=1,a.isStatic||r.isStatic||(u=.5),r.isStatic&&(u=0),l.moveTo(r.position.x,r.position.y),l.lineTo(r.position.x+i.penetration.x*u,r.position.y+i.penetration.y*u)}c.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},o.grid=function(e,t,n){var o=n;e.options.wireframes?o.strokeStyle="rgba(255,180,0,0.1)":o.strokeStyle="rgba(255,180,0,0.5)",o.beginPath();for(var r=i.keys(t.buckets),a=0;a<r.length;a++){var s=r[a];if(!(t.buckets[s].length<2)){var l=s.split(/C|R/);o.rect(.5+parseInt(l[1],10)*t.bucketWidth,.5+parseInt(l[2],10)*t.bucketHeight,t.bucketWidth,t.bucketHeight)}}o.lineWidth=1,o.stroke()},o.inspector=function(e,t){e.engine;var n,o=e.selected,i=e.render,r=i.options;if(r.hasBounds){var a=i.bounds.max.x-i.bounds.min.x,s=i.bounds.max.y-i.bounds.min.y,l=a/i.options.width,c=s/i.options.height;t.scale(1/l,1/c),t.translate(-i.bounds.min.x,-i.bounds.min.y)}for(var u=0;u<o.length;u++){var d=o[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),d.type){case"body":n=d.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var p=d.pointA;d.bodyA&&(p=d.pointB),t.beginPath(),t.arc(p.x,p.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),r.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},d=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},p=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},f=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../geometry/Bounds":26,"../geometry/Vector":28}],32:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Bounds"),r=e("../body/Composite"),a=e("../core/Common"),s=e("../core/Events"),l=e("../geometry/Vector");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(a.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o.create=function(e){a.warn("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)");var t={controller:o,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},n=a.extend(t,e),i=!n.options.wireframes&&"transparent"===n.options.background;return n.pixiOptions=n.pixiOptions||{view:n.canvas,transparent:i,antialias:!0,backgroundColor:e.background},n.mouse=e.mouse,n.engine=e.engine,n.renderer=n.renderer||new PIXI.WebGLRenderer(n.options.width,n.options.height,n.pixiOptions),n.container=n.container||new PIXI.Container,n.spriteContainer=n.spriteContainer||new PIXI.Container,n.canvas=n.canvas||n.renderer.view,n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.options.width,y:n.options.height}},s.on(n.engine,"beforeUpdate",(function(){o.clear(n)})),n.textures={},n.sprites={},n.primitives={},n.container.addChild(n.spriteContainer),a.isElement(n.element)?n.element.appendChild(n.canvas):a.warn('No "render.element" passed, "render.canvas" was not inserted into document.'),n.canvas.oncontextmenu=function(){return!1},n.canvas.onselectstart=function(){return!1},n},o.run=function(t){!function n(i){t.frameRequestId=e(n),o.world(t)}()},o.stop=function(e){t(e.frameRequestId)},o.clear=function(e){for(var t=e.container,n=e.spriteContainer;t.children[0];)t.removeChild(t.children[0]);for(;n.children[0];)n.removeChild(n.children[0]);var o=e.sprites["bg-0"];e.textures={},e.sprites={},e.primitives={},e.sprites["bg-0"]=o,o&&t.addChildAt(o,0),e.container.addChild(e.spriteContainer),e.currentBackground=null,t.scale.set(1,1),t.position.set(0,0)},o.setBackground=function(e,t){if(e.currentBackground!==t){var n=t.indexOf&&-1!==t.indexOf("#"),o=e.sprites["bg-0"];if(n){var i=a.colorToNumber(t);e.renderer.backgroundColor=i,o&&e.container.removeChild(o)}else if(!o){var r=u(e,t);(o=e.sprites["bg-0"]=new PIXI.Sprite(r)).position.x=0,o.position.y=0,e.container.addChildAt(o,0)}e.currentBackground=t}},o.world=function(e){var t,n=e.engine.world,a=e.renderer,s=e.container,c=e.options,u=r.allBodies(n),d=r.allConstraints(n),p=[];c.wireframes?o.setBackground(e,c.wireframeBackground):o.setBackground(e,c.background);var f=e.bounds.max.x-e.bounds.min.x,v=e.bounds.max.y-e.bounds.min.y,m=f/e.options.width,g=v/e.options.height;if(c.hasBounds){for(t=0;t<u.length;t++){var y=u[t];y.render.sprite.visible=i.overlaps(y.bounds,e.bounds)}for(t=0;t<d.length;t++){var h=d[t],x=h.bodyA,b=h.bodyB,w=h.pointA,S=h.pointB;x&&(w=l.add(x.position,h.pointA)),b&&(S=l.add(b.position,h.pointB)),w&&S&&(i.contains(e.bounds,w)||i.contains(e.bounds,S))&&p.push(h)}s.scale.set(1/m,1/g),s.position.set(-e.bounds.min.x*(1/m),-e.bounds.min.y*(1/g))}else p=d;for(t=0;t<u.length;t++)o.body(e,u[t]);for(t=0;t<p.length;t++)o.constraint(e,p[t]);a.render(s)},o.constraint=function(e,t){e.engine;var n=t.bodyA,o=t.bodyB,i=t.pointA,r=t.pointB,s=e.container,l=t.render,c="c-"+t.id,u=e.primitives[c];u||(u=e.primitives[c]=new PIXI.Graphics),l.visible&&t.pointA&&t.pointB?(-1===a.indexOf(s.children,u)&&s.addChild(u),u.clear(),u.beginFill(0,0),u.lineStyle(l.lineWidth,a.colorToNumber(l.strokeStyle),1),n?u.moveTo(n.position.x+i.x,n.position.y+i.y):u.moveTo(i.x,i.y),o?u.lineTo(o.position.x+r.x,o.position.y+r.y):u.lineTo(r.x,r.y),u.endFill()):u.clear()},o.body=function(e,t){e.engine;var o=t.render;if(o.visible)if(o.sprite&&o.sprite.texture){var i="b-"+t.id,r=e.sprites[i],s=e.spriteContainer;r||(r=e.sprites[i]=n(e,t)),-1===a.indexOf(s.children,r)&&s.addChild(r),r.position.x=t.position.x,r.position.y=t.position.y,r.rotation=t.angle,r.scale.x=o.sprite.xScale||1,r.scale.y=o.sprite.yScale||1}else{var l="b-"+t.id,u=e.primitives[l],d=e.container;u||((u=e.primitives[l]=c(e,t)).initialAngle=t.angle),-1===a.indexOf(d.children,u)&&d.addChild(u),u.position.x=t.position.x,u.position.y=t.position.y,u.rotation=t.angle-u.initialAngle}};var n=function(e,t){var n=t.render.sprite.texture,o=u(e,n),i=new PIXI.Sprite(o);return i.anchor.x=t.render.sprite.xOffset,i.anchor.y=t.render.sprite.yOffset,i},c=function(e,t){var n,o=t.render,i=e.options,r=new PIXI.Graphics,s=a.colorToNumber(o.fillStyle),l=a.colorToNumber(o.strokeStyle),c=a.colorToNumber(o.strokeStyle),u=a.colorToNumber("#bbb"),d=a.colorToNumber("#CD5C5C");r.clear();for(var p=t.parts.length>1?1:0;p<t.parts.length;p++){n=t.parts[p],i.wireframes?(r.beginFill(0,0),r.lineStyle(1,u,1)):(r.beginFill(s,1),r.lineStyle(o.lineWidth,l,1)),r.moveTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y);for(var f=1;f<n.vertices.length;f++)r.lineTo(n.vertices[f].x-t.position.x,n.vertices[f].y-t.position.y);r.lineTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y),r.endFill(),(i.showAngleIndicator||i.showAxes)&&(r.beginFill(0,0),i.wireframes?r.lineStyle(1,d,1):r.lineStyle(1,c),r.moveTo(n.position.x-t.position.x,n.position.y-t.position.y),r.lineTo((n.vertices[0].x+n.vertices[n.vertices.length-1].x)/2-t.position.x,(n.vertices[0].y+n.vertices[n.vertices.length-1].y)/2-t.position.y),r.endFill())}return r},u=function(e,t){var n=e.textures[t];return n||(n=e.textures[t]=PIXI.Texture.fromImage(t)),n}}()},{"../body/Composite":2,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"../geometry/Vector":28}]},{},[30])(30)}).call(this,n(7))},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyAntiGravity=t.applyAntiGravityTwoBody=t.antiGravity=t.antiGravityRanged=t.antiGravityManhattan=void 0;var s=a(n(1)),l=r(n(0));t.antiGravityManhattan=function(e,t,n){void 0===n&&(n=100);var o=n,i=l.distHoriz(e.position,t.position),r=l.distVerti(e.position,t.position),a=.5*(Math.sqrt(e.area)+Math.sqrt(t.area));return{x:i<1.5*a?o/(1e3+Math.pow(i,2)):0,y:r<1.5*a?o/(1e3+Math.pow(r,2)):0}},t.antiGravityRanged=function(e,t,n,o){void 0===n&&(n=100),void 0===o&&(o=3);var i=l.distEuclid(e.position,t.position),r=i<o*(.5*(Math.sqrt(e.area)+Math.sqrt(t.area)))?n/Math.pow(i,2):0,a=l.unitVec(e.position,t.position);return{x:r*a.x,y:r*a.y}},t.antiGravity=function(e,t,n){void 0===n&&(n=100);var o=l.distEuclid(e.position,t.position),i=n/Math.pow(o,2),r=l.unitVec(e.position,t.position);return{x:i*r.x,y:i*r.y}},t.applyAntiGravityTwoBody=function(e,n,o){var i,r;if(!n.isStatic&&!o.isStatic){var a=(i=n,r=o,t.antiGravityRanged(i,r,e.repulsionCoeff,e.repulsionRange));s.default.Body.applyForce(o,o.position,a),s.default.Body.applyForce(n,n.position,l.negate(a))}},t.applyAntiGravity=function(e,n){for(var o=0;o<n.length;o++)for(var i=o+1;i<n.length;i++)t.applyAntiGravityTwoBody(e,n[o],n[i])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=function(){function e(e){"number"==typeof e?(this.len=e,this.translate=new Map(o.range(e).map((function(e,t){return[t,t]})))):(this.len=e.length,this.translate=new Map(e.map((function(e,t){return[e,t]})))),this.parent=o.range(this.len).map((function(e){return-1}))}return e.prototype._isRoot=function(e){return this.parent[e]<0},e.prototype._root=function(e){for(;!this._isRoot(e);)e=this.parent[e];return e},e.prototype._depth=function(e){return-this.parent[this._root(e)]},e.prototype._index=function(e){var t,n=this.translate.get(e);return void 0===n?(t=this.len,this.translate.set(e,t),this.len+=1):t=n,t},e.prototype.areConnected=function(e,t){var n=this._index(e),o=this._index(t);return this._root(n)==this._root(o)},e.prototype.connect=function(e,t){var n=this._index(e),o=this._index(t);if(this._depth(n)<this._depth(o))return this.connect(t,e);var i=this._root(n),r=this._root(o);return i!=r&&(this.parent[i]+=this.parent[r],this.parent[r]=i,!0)},e.prototype.getRootAll=function(){var e=this;return o.range(this.len).map((function(t){return e._root(t)}))},e}();t.default=i;!function(){function e(e){var t=this;this.counter=new Map,e&&e.forEach((function(e){return t.add(e)}))}e.prototype.add=function(e){var t;this.counter.set(e,(null!==(t=this.counter.get(e))&&void 0!==t?t:0)+1)},e.prototype.get=function(e){var t;return null!==(t=this.counter.get(e))&&void 0!==t?t:0},e.prototype.has=function(e){return this.counter.has(e)},e.prototype.clear=function(){this.counter.clear()}}()},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyGrouping=t.applyAntiGravityDisjoint=void 0;var s=a(n(1)),l=n(2),c=r(n(0));t.applyAntiGravityDisjoint=function(e,t,n,o){for(var i,r,a=0;a<t.length;a++)for(var u=a+1;u<t.length;u++){var d=t[a],p=t[u];if(!d.isStatic&&!p.isStatic){var f=(i=d,r=p,l.antiGravityRanged(i,r,e.repulsionCoeff,e.repulsionRange));n.areConnected(a,u)&&(f.x=0),o.areConnected(a,u)&&(f.y=0),s.default.Body.applyForce(p,p.position,f),s.default.Body.applyForce(d,d.position,c.negate(f))}}};var u=function(e,t,n){var o,i;if(!t.isStatic&&!n.isStatic){var r=(o=t,i=n,l.antiGravity(o,i,e.groupingCoeff));(c.areSameWidth(t,n)||c.areSameHeight(t,n))&&(r=c.negate(r)),s.default.Body.applyForce(n,n.position,r),s.default.Body.applyForce(t,t.position,c.negate(r))}};t.applyGrouping=function(e,t){for(var n=0;n<t.length;n++)for(var o=n+1;o<t.length;o++)u(e,t[n],t[o])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(6).Knollbot.run()},function(e,t,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t},s=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},l=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},c=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var o=Array(e),i=0;for(t=0;t<n;t++)for(var r=arguments[t],a=0,s=r.length;a<s;a++,i++)o[i]=r[a];return o},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Knollbot=void 0;var d=u(n(1)),p=n(8),f=a(n(0)),v=a(n(2)),m=a(n(9)),g=a(n(4)),y=a(n(11));!function(e){var t=this;e.run=function(){var e=d.default.Engine.create(),n=e.world,i=d.default.Runner.create();n.gravity.y=0;var r=document.documentElement.clientWidth-20,a=document.documentElement.clientHeight-20,u=Math.floor(r/2),h=Math.floor(a/2),x=Math.floor(100)-5;p.imgPaths.length;n.pokeScale=p.params.pokeScale,n.alignmentForceCoeff=p.params.alignmentForceCoeff,n.alignmentForceRange=p.params.alignmentForceRange,n.alignmentForceWallRange=p.params.alignmentForceWallRange,n.repulsionCoeff=p.params.repulsionCoeff,n.repulsionRange=p.params.repulsionRange,n.groupingCoeff=p.params.groupingCoeff;var b,w=d.default.Render.create({element:document.body,engine:e,options:{width:r,height:a,showVelocity:!1,wireframes:!1,background:"#247c41"}}),S={inertia:1/0,frictionAir:p.params.frictionAir,friction:p.params.friction},P=Promise.all(p.imgPaths.map((function(e){return s(t,void 0,void 0,(function(){var t,n,i,s,c,u;return l(this,(function(l){switch(l.label){case 0:return[4,(p=e,new Promise((function(e,t){var n=new Image;n.onload=function(){var t=n.naturalWidth,o=n.naturalHeight;e({width:t,height:o})},n.onerror=function(){t("There was some problem with the image.")},n.src=p})))];case 1:return t=l.sent(),n=x+t.width/2,i=x+t.height/2,s=f.randRange(n,r-n),c=f.randRange(i,a-i),u=o(o({},S),{render:{sprite:{texture:e}}}),[2,d.default.Bodies.rectangle(s,c,t.width,t.height,u)]}var p}))}))}))),C={isStatic:!0,friction:p.params.wallFriction},_=d.default.Bodies.rectangle(u,-x,r+100,200,C),M=d.default.Bodies.rectangle(u,a+x,r+100,200,C),A=d.default.Bodies.rectangle(-x,h,200,a+100,C),B=d.default.Bodies.rectangle(r+x,h,200,a+100,C),k=d.default.Mouse.create(w.canvas),I=d.default.Constraint.create({pointA:k.position,pointB:{x:0,y:0},stiffness:.2,render:{visible:!1}}),T=d.default.MouseConstraint.create(e,{mouse:k,constraint:I});s(t,void 0,void 0,(function(){var t;return l(this,(function(o){switch(o.label){case 0:return[4,P];case 1:return t=o.sent(),b=c(t,[_,M,A,B]),d.default.World.add(n,b),d.default.World.add(n,T),d.default.Runner.run(i,e),d.default.Render.run(w),[2]}}))}));var R=0;return d.default.Events.on(e,"beforeUpdate",(function(e){(R+=1)%300==0&&console.log("counter: ",R),R<180?g.applyGrouping(n,b):R<240?v.applyAntiGravity(n,b):m.applyAlignment(n,b),R%10==9&&(n.pokeScale*=p.params.pokeScaleDecay),y.applyRandomPokes(n,b)})),document.addEventListener("dblclick",(function(){console.log("--- Double click at t="+R+" ---"),b.filter((function(e){return!e.isStatic&&d.default.Bounds.contains(e.bounds,k.position)})).forEach((function(e){return d.default.Body.rotate(e,Math.PI/2)}))})),document.addEventListener("touchmove",(function(e){var t,n=e.changedTouches.item(0),o=Math.PI/180*(null!==(t=null==n?void 0:n.rotationAngle)&&void 0!==t?t:0);console.log("--- Touch rotation activated at t="+R+" ---"),console.log("    rotation angle = "+(null==n?void 0:n.rotationAngle)+" (deg)"),b.filter((function(e){return!e.isStatic&&d.default.Bounds.contains(e.bounds,k.position)})).forEach((function(e){return d.default.Body.rotate(e,o)}))})),{engine:e,runner:i,render:w,canvas:w.canvas,stop:function(){d.default.Render.stop(w),d.default.Runner.stop(i)}}}}(t.Knollbot||(t.Knollbot={}))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.params=t.imgPaths=void 0;t.imgPaths=["blue_1x2.png","blue_1x2.png","blue_1x2.png","blue_1x2.png","blue_1x2.png","blue_1x3.png","blue_1x3.png","green_1x2.png","green_1x2.png","green_1x2.png","green_1x2.png","green_2x2.png","green_2x2.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x3.png","orange_2x3.png","red_1x4.png","red_1x4.png","red_1x4.png","red_2x2.png","red_2x2.png","yellow_2x1.png","yellow_2x1.png","yellow_2x1.png","yellow_2x1.png","yellow_2x1.png","yellow_3x2.png","yellow_3x2.png","yellow_3x2.png"].map((function(e){return"./public/lego/"+e})),t.params={frictionAir:.01,friction:0,wallFriction:.01,pokeScale:.05,pokeScaleDecay:.95,alignmentForceCoeff:.001,alignmentForceRange:30,alignmentForceWallRange:15,repulsionCoeff:100,repulsionRange:3,groupingCoeff:400}},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyAlignment=void 0;var s=a(n(1)),l=r(n(0)),c=n(10),u=a(n(3)),d=r(n(4)),p=function(e,t,n){for(var o=[],i=0;i<t.length;i++)for(var r=i+1;r<t.length;r++){var a=t[i],s=t[r],c=n(a,s),u=c[0],d=c[1],p=c[2];if(p<e.alignmentForceRange&&(!a.isStatic||!s.isStatic)){var f={weight:p,pair:l.makeUnorderedPair(i,r),posSrc:u,posTgt:d,idxSrc:i,idxTgt:r};o.push(f)}}return{vertices:l.range(t.length),edges:o}},f=function(e,t,n){var o=n.posSrc.x<n.posTgt.x?-1:1,i=n.weight,r={x:e.alignmentForceCoeff*o*i,y:0},a=t[n.idxSrc],c=t[n.idxTgt];s.default.Body.applyForce(c,c.position,r),s.default.Body.applyForce(a,a.position,l.negate(r))},v=function(e,t,n){var o=n.posSrc.y<n.posTgt.y?-1:1,i=n.weight,r={x:0,y:e.alignmentForceCoeff*o*i},a=t[n.idxSrc],c=t[n.idxTgt];s.default.Body.applyForce(c,c.position,r),s.default.Body.applyForce(a,a.position,l.negate(r))},m=function(e,t){var n=function(e,t){return p(e,t,l.cloestPointPairX)}(e,t),o=function(e,t){return p(e,t,l.cloestPointPairY)}(e,t),i=c.kruskal(n),r=c.kruskal(o);i.forEach((function(n){return f(e,t,n)})),r.forEach((function(n){return v(e,t,n)}));var a=new u.default(n.vertices);n.edges.forEach((function(e){a.connect(e.idxSrc,e.idxTgt)}));var s=new u.default(o.vertices);o.edges.forEach((function(e){s.connect(e.idxSrc,e.idxTgt)})),d.applyAntiGravityDisjoint(e,t,a,s)},g=function(e,t,n){for(var o=[],i=t.slice(0,t.length-4),r=t.slice(t.length-4,t.length),a=0;a<i.length;a++)for(var s=0;s<4;s++){var c=i[a],u=r[s],d=a,p=s+i.length,f=n(c,u),v=f[0],m=f[1],g=f[2];if(g<e.alignmentForceWallRange){var y={weight:g,pair:{first:d,second:p},posSrc:v,posTgt:m,idxSrc:a,idxTgt:s};o.push(y)}}return{vertices:l.range(t.length),edges:o}};t.applyAlignment=function(e,t){!function(e,t){var n=g(e,t,l.cloestPointPairX),o=g(e,t,l.cloestPointPairY);n.edges.forEach((function(n){return f(e,t,n)})),o.edges.forEach((function(n){return v(e,t,n)}))}(e,t);var n=t.slice(0,t.length-4);m(e,n)}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.kruskal=void 0;var i=o(n(3));t.kruskal=function(e){for(var t=new i.default(e.vertices),n=[],o=0,r=e.edges.sort((function(e,t){return e.weight-t.weight}));o<r.length;o++){var a=r[o],s=a.pair.first,l=a.pair.second;t.areConnected(s,l)||(t.connect(s,l),n.push(a))}return n}},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyRandomPokes=void 0;var s=a(n(1)),l=r(n(0));t.applyRandomPokes=function(e,t){t.forEach((function(t){return function(e,t){t.isStatic||s.default.Body.applyForce(t,t.position,{x:e.pokeScale*l.randn(),y:e.pokeScale*l.randn()})}(e,t)}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXR0ZXItanMvYnVpbGQvbWF0dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9yZXB1bHNpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaW9uZmluZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ3JvdXBpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9rbm9sbGJvdC50cyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FsaWdubWVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ3JhcGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JhbmRvbXBva2VzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXJyTWF4IiwieHMiLCJyZWR1Y2UiLCJhY2MiLCJ4IiwiTWF0aCIsIm1heCIsIkluZmluaXR5IiwiYXJyTWluIiwibWluIiwiYXJyU3VtIiwiYXJyTWVhbiIsImxlbmd0aCIsImFyck1ldGFCeSIsImYiLCJ5cyIsIm1hcCIsInltYXgiLCJyZXMiLCJBcnJheSIsInB1c2giLCJhcnJNYXhCeSIsImFyck1pbkJ5IiwidmVjdG9yTWVhbiIsInZlYyIsInYiLCJ5IiwicmlnaHRtb3N0UG9pbnQiLCJwb2ludHMiLCJsZWZ0bW9zdFBvaW50IiwidG9wbW9zdFBvaW50IiwiYm90dG9tbW9zdFBvaW50IiwiZGlzdEhvcml6IiwicG9pbnRBIiwicG9pbnRCIiwiYWJzIiwiZGlzdFZlcnRpIiwiZGlzdEV1Y2xpZCIsImh5cG90IiwiY2xvZXN0UG9pbnRNZXRhIiwiYm9keTEiLCJib2R5MiIsImVkZ2VBIiwiZWRnZUIiLCJkaXN0RnVuYyIsIm9uZTEiLCJ2ZXJ0aWNlcyIsImFub3RoZXIxIiwib25lMiIsImFub3RoZXIyIiwiZGlzdCIsInAxIiwicDIiLCJjbG9lc3RQb2ludFBhaXJYIiwiY2xvZXN0UG9pbnRQYWlyWSIsInJhbmdlIiwic2l6ZSIsImZsb29yIiwiZnJvbSIsImtleXMiLCJyYW5kUmFuZ2UiLCJsbyIsImhpIiwidW5pdCIsImEiLCJiIiwicmFuZG9tIiwicmFuZG4iLCJ1IiwibnVtIiwic3FydCIsImxvZyIsImNvcyIsIlBJIiwidW5pdFZlYyIsInRvIiwibm9ybWFsaXplIiwibm9ybSIsIm5lZ2F0ZSIsIm1ha2VVbm9yZGVyZWRQYWlyIiwiZmlyc3QiLCJzZWNvbmQiLCJnZXRXaWR0aCIsImJsb2NrIiwiZ2V0SGVpZ2h0IiwiYXJlU2FtZUhlaWdodCIsImZvbyIsImJhciIsImFyZVNhbWVXaWR0aCIsImUiLCJFcnJvciIsImNvZGUiLCIxIiwiX2RlcmVxXyIsIkJvZHkiLCJWZXJ0aWNlcyIsIlZlY3RvciIsIlNsZWVwaW5nIiwiQ29tbW9uIiwiQm91bmRzIiwiQXhlcyIsIl9pbmVydGlhU2NhbGUiLCJfbmV4dENvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dENhdGVnb3J5Iiwib3B0aW9ucyIsImRlZmF1bHRzIiwiaWQiLCJuZXh0SWQiLCJ0eXBlIiwibGFiZWwiLCJwYXJ0cyIsInBsdWdpbiIsImFuZ2xlIiwiZnJvbVBhdGgiLCJwb3NpdGlvbiIsImZvcmNlIiwidG9ycXVlIiwicG9zaXRpb25JbXB1bHNlIiwiY29uc3RyYWludEltcHVsc2UiLCJ0b3RhbENvbnRhY3RzIiwic3BlZWQiLCJhbmd1bGFyU3BlZWQiLCJ2ZWxvY2l0eSIsImFuZ3VsYXJWZWxvY2l0eSIsImlzU2Vuc29yIiwiaXNTdGF0aWMiLCJpc1NsZWVwaW5nIiwibW90aW9uIiwic2xlZXBUaHJlc2hvbGQiLCJkZW5zaXR5IiwicmVzdGl0dXRpb24iLCJmcmljdGlvbiIsImZyaWN0aW9uU3RhdGljIiwiZnJpY3Rpb25BaXIiLCJjb2xsaXNpb25GaWx0ZXIiLCJjYXRlZ29yeSIsIm1hc2siLCJncm91cCIsInNsb3AiLCJ0aW1lU2NhbGUiLCJyZW5kZXIiLCJ2aXNpYmxlIiwib3BhY2l0eSIsInNwcml0ZSIsInhTY2FsZSIsInlTY2FsZSIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwibGluZVdpZHRoIiwiYm9keSIsImV4dGVuZCIsIl9pbml0UHJvcGVydGllcyIsIm5leHRHcm91cCIsImlzTm9uQ29sbGlkaW5nIiwibmV4dENhdGVnb3J5Iiwic2V0IiwiYm91bmRzIiwicG9zaXRpb25QcmV2IiwiY2xvbmUiLCJhbmdsZVByZXYiLCJwYXJlbnQiLCJyb3RhdGUiLCJheGVzIiwidXBkYXRlIiwiYXJlYSIsIm1hc3MiLCJpbmVydGlhIiwiZGVmYXVsdEZpbGxTdHlsZSIsImNob29zZSIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwic2V0dGluZ3MiLCJzZXRTdGF0aWMiLCJzZXRNYXNzIiwic2V0RGVuc2l0eSIsInNldEluZXJ0aWEiLCJzZXRWZXJ0aWNlcyIsInNldFBvc2l0aW9uIiwic2V0QW5nbGUiLCJzZXRWZWxvY2l0eSIsInNldEFuZ3VsYXJWZWxvY2l0eSIsInNldFBhcnRzIiwicGFydCIsIl9vcmlnaW5hbCIsImludmVyc2VNYXNzIiwiaW52ZXJzZUluZXJ0aWEiLCJtb21lbnQiLCJmcm9tVmVydGljZXMiLCJjZW50cmUiLCJ0cmFuc2xhdGUiLCJhdXRvSHVsbCIsInNsaWNlIiwiY29uY2F0IiwiY2xvY2t3aXNlU29ydCIsImh1bGwiLCJodWxsQ2VudHJlIiwidG90YWwiLCJfdG90YWxQcm9wZXJ0aWVzIiwiZGVsdGEiLCJzdWIiLCJyb3RhdGVBYm91dCIsIm1hZ25pdHVkZSIsInRyYW5zbGF0aW9uIiwiYWRkIiwicm90YXRpb24iLCJwb2ludCIsInNpbiIsImR4IiwiZHkiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInRvdGFsQXJlYSIsInRvdGFsSW5lcnRpYSIsImNpcmNsZVJhZGl1cyIsImRlbHRhVGltZSIsImNvcnJlY3Rpb24iLCJkZWx0YVRpbWVTcXVhcmVkIiwicG93IiwidmVsb2NpdHlQcmV2WCIsInZlbG9jaXR5UHJldlkiLCJhcHBseUZvcmNlIiwib2Zmc2V0IiwicHJvcGVydGllcyIsIm11bHQiLCJkaXYiLCIyIiwiQ29tcG9zaXRlIiwiRXZlbnRzIiwiaXNNb2RpZmllZCIsImJvZGllcyIsImNvbnN0cmFpbnRzIiwiY29tcG9zaXRlcyIsInNldE1vZGlmaWVkIiwiY29tcG9zaXRlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiY2hpbGRDb21wb3NpdGUiLCJvYmplY3RzIiwidHJpZ2dlciIsIm9iaiIsIndhcm4iLCJhZGRCb2R5IiwiYWRkQ29uc3RyYWludCIsImFkZENvbXBvc2l0ZSIsImNvbnN0cmFpbnQiLCJyZW1vdmUiLCJkZWVwIiwicmVtb3ZlQm9keSIsInJlbW92ZUNvbnN0cmFpbnQiLCJyZW1vdmVDb21wb3NpdGUiLCJjb21wb3NpdGVBIiwiY29tcG9zaXRlQiIsImluZGV4T2YiLCJyZW1vdmVDb21wb3NpdGVBdCIsInNwbGljZSIsInJlbW92ZUJvZHlBdCIsInJlbW92ZUNvbnN0cmFpbnRBdCIsImNsZWFyIiwia2VlcFN0YXRpYyIsImZpbHRlciIsImFsbEJvZGllcyIsImFsbENvbnN0cmFpbnRzIiwiYWxsQ29tcG9zaXRlcyIsInRvU3RyaW5nIiwibW92ZSIsInJlYmFzZSIsInJlY3Vyc2l2ZSIsIjMiLCJXb3JsZCIsImdyYXZpdHkiLCI0IiwiQ29udGFjdCIsInZlcnRleCIsIm5vcm1hbEltcHVsc2UiLCJ0YW5nZW50SW1wdWxzZSIsImluZGV4IiwiNSIsIkRldGVjdG9yIiwiU0FUIiwiUGFpciIsImNvbGxpc2lvbnMiLCJicm9hZHBoYXNlUGFpcnMiLCJlbmdpbmUiLCJwYWlyc1RhYmxlIiwicGFpcnMiLCJ0YWJsZSIsImJvZHlBIiwiYm9keUIiLCJjYW5Db2xsaWRlIiwib3ZlcmxhcHMiLCJqIiwicGFydEEiLCJrIiwicGFydEIiLCJwcmV2aW91c0NvbGxpc2lvbiIsInBhaXIiLCJpc0FjdGl2ZSIsImNvbGxpc2lvbiIsImNvbGxpZGVzIiwiY29sbGlkZWQiLCJmaWx0ZXJBIiwiZmlsdGVyQiIsIjYiLCJHcmlkIiwiY29udHJvbGxlciIsImRldGVjdG9yIiwiYnVja2V0cyIsInBhaXJzTGlzdCIsImJ1Y2tldFdpZHRoIiwiYnVja2V0SGVpZ2h0IiwiZ3JpZCIsImZvcmNlVXBkYXRlIiwiY29sIiwicm93IiwiYnVja2V0IiwiYnVja2V0SWQiLCJ3b3JsZCIsImdyaWRDaGFuZ2VkIiwibmV3UmVnaW9uIiwiX2dldFJlZ2lvbiIsInJlZ2lvbiIsInVuaW9uIiwiX3JlZ2lvblVuaW9uIiwic3RhcnRDb2wiLCJlbmRDb2wiLCJzdGFydFJvdyIsImVuZFJvdyIsIl9nZXRCdWNrZXRJZCIsImlzSW5zaWRlTmV3UmVnaW9uIiwiaXNJbnNpZGVPbGRSZWdpb24iLCJfYnVja2V0UmVtb3ZlQm9keSIsIl9jcmVhdGVCdWNrZXQiLCJfYnVja2V0QWRkQm9keSIsIl9jcmVhdGVBY3RpdmVQYWlyc0xpc3QiLCJyZWdpb25BIiwicmVnaW9uQiIsIl9jcmVhdGVSZWdpb24iLCJjb2x1bW4iLCJwYWlySWQiLCJwYWlyS2V5cyIsIjciLCJ0aW1lc3RhbXAiLCJwYXJlbnRBIiwicGFyZW50QiIsImNvbnRhY3RzIiwiYWN0aXZlQ29udGFjdHMiLCJzZXBhcmF0aW9uIiwidGltZUNyZWF0ZWQiLCJ0aW1lVXBkYXRlZCIsInN1cHBvcnRzIiwic3VwcG9ydCIsImNvbnRhY3RJZCIsImNvbnRhY3QiLCJkZXB0aCIsInNldEFjdGl2ZSIsIjgiLCJQYWlycyIsIl9wYWlyTWF4SWRsZUxpZmUiLCJsaXN0IiwiY29sbGlzaW9uU3RhcnQiLCJjb2xsaXNpb25BY3RpdmUiLCJjb2xsaXNpb25FbmQiLCJhY3RpdmVQYWlySWRzIiwicmVtb3ZlT2xkIiwicGFpckluZGV4IiwiaW5kZXhlc1RvUmVtb3ZlIiwiOSIsIlF1ZXJ5IiwiQm9kaWVzIiwicmF5Iiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwicmF5V2lkdGgiLCJyYXlBbmdsZSIsInJheUxlbmd0aCIsInJheVgiLCJyYXlZIiwicmVjdGFuZ2xlIiwib3V0c2lkZSIsInJlc3VsdCIsImNvbnRhaW5zIiwiMTAiLCJSZXNvbHZlciIsIl9yZXN0aW5nVGhyZXNoIiwiX3Jlc3RpbmdUaHJlc2hUYW5nZW50IiwiX3Bvc2l0aW9uRGFtcGVuIiwiX3Bvc2l0aW9uV2FybWluZyIsIl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXIiLCJwcmVTb2x2ZVBvc2l0aW9uIiwiYWN0aXZlQ291bnQiLCJzb2x2ZVBvc2l0aW9uIiwibm9ybWFsIiwiYm9keUJ0b0EiLCJjb250YWN0U2hhcmUiLCJ0ZW1wQSIsIl90ZW1wIiwidGVtcEIiLCJ0ZW1wQyIsInRlbXBEIiwicGVuZXRyYXRpb24iLCJkb3QiLCJwb3N0U29sdmVQb3NpdGlvbiIsInByZVNvbHZlVmVsb2NpdHkiLCJ0YW5nZW50IiwiY29udGFjdFZlcnRleCIsImltcHVsc2UiLCJjcm9zcyIsInNvbHZlVmVsb2NpdHkiLCJ0aW1lU2NhbGVTcXVhcmVkIiwidGVtcEUiLCJvZmZzZXRBIiwib2Zmc2V0QiIsInZlbG9jaXR5UG9pbnRBIiwicGVycCIsInZlbG9jaXR5UG9pbnRCIiwicmVsYXRpdmVWZWxvY2l0eSIsIm5vcm1hbFZlbG9jaXR5IiwidGFuZ2VudFZlbG9jaXR5IiwidGFuZ2VudFNwZWVkIiwidGFuZ2VudFZlbG9jaXR5RGlyZWN0aW9uIiwic2lnbiIsIm5vcm1hbEZvcmNlIiwiY2xhbXAiLCJtYXhGcmljdGlvbiIsIm9BY04iLCJvQmNOIiwic2hhcmUiLCJjb250YWN0Tm9ybWFsSW1wdWxzZSIsImNvbnRhY3RUYW5nZW50SW1wdWxzZSIsIjExIiwib3ZlcmxhcEFCIiwib3ZlcmxhcEJBIiwibWluT3ZlcmxhcCIsImNhblJldXNlUHJldkNvbCIsImF4aXNCb2R5QSIsImF4aXNCb2R5IiwiYXhpc0JvZHlCIiwiYXhpc051bWJlciIsIl9vdmVybGFwQXhlcyIsInJldXNlZCIsIm92ZXJsYXAiLCJheGlzIiwidmVydGljZXNCIiwiX2ZpbmRTdXBwb3J0cyIsInZlcnRpY2VzQSIsIm5lZyIsInByb2plY3Rpb25BIiwicHJvamVjdGlvbkIiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJfcHJvamVjdFRvQXhpcyIsInByb2plY3Rpb24iLCJkaXN0YW5jZSIsInZlcnRleEEiLCJ2ZXJ0ZXhCIiwibmVhcmVzdERpc3RhbmNlIiwidmVydGV4VG9Cb2R5IiwiYm9keUFQb3NpdGlvbiIsIjEyIiwiQ29uc3RyYWludCIsIl93YXJtaW5nIiwiX3RvcnF1ZURhbXBlbiIsIl9taW5MZW5ndGgiLCJpbml0aWFsUG9pbnRBIiwiaW5pdGlhbFBvaW50QiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJhbmd1bGFyU3RpZmZuZXNzIiwiYW5nbGVBIiwiYW5nbGVCIiwiYW5jaG9ycyIsInByZVNvbHZlQWxsIiwic29sdmVBbGwiLCJmaXhlZEEiLCJmaXhlZEIiLCJzb2x2ZSIsInBvaW50QVdvcmxkIiwicG9pbnRCV29ybGQiLCJjdXJyZW50TGVuZ3RoIiwiZGlmZmVyZW5jZSIsIm1hc3NUb3RhbCIsInJlc2lzdGFuY2VUb3RhbCIsInplcm8iLCJwb3N0U29sdmVBbGwiLCIxMyIsIk1vdXNlQ29uc3RyYWludCIsIk1vdXNlIiwibW91c2UiLCJjYW52YXMiLCJlbGVtZW50IiwibW91c2VDb25zdHJhaW50Iiwib24iLCJfdHJpZ2dlckV2ZW50cyIsImJ1dHRvbiIsIm1vdXNlRXZlbnRzIiwic291cmNlRXZlbnRzIiwibW91c2Vtb3ZlIiwibW91c2Vkb3duIiwibW91c2V1cCIsImNsZWFyU291cmNlRXZlbnRzIiwiMTQiLCJnbG9iYWwiLCJfbmV4dElkIiwiX3NlZWQiLCJfbm93U3RhcnRUaW1lIiwiRGF0ZSIsImFyZ3NTdGFydCIsImRlZXBDbG9uZSIsImFyZ3VtZW50cyIsInNvdXJjZSIsInByb3AiLCJjb25zdHJ1Y3RvciIsInZhbHVlcyIsInBhdGgiLCJiZWdpbiIsImVuZCIsInNwbGl0IiwidmFsIiwic2h1ZmZsZSIsImFycmF5IiwidGVtcCIsImNob2ljZXMiLCJpc0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc0FycmF5IiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc1N0cmluZyIsIm5vdyIsIndpbmRvdyIsInBlcmZvcm1hbmNlIiwid2Via2l0Tm93IiwiX3NlZWRlZFJhbmRvbSIsImNvbG9yVG9OdW1iZXIiLCJjb2xvclN0cmluZyIsInJlcGxhY2UiLCJjaGFyQXQiLCJwYXJzZUludCIsImxvZ0xldmVsIiwiY29uc29sZSIsImFwcGx5IiwiaW5mbyIsImhheXN0YWNrIiwibmVlZGxlIiwiZnVuYyIsIm1hcHBlZCIsInRvcG9sb2dpY2FsU29ydCIsImdyYXBoIiwidmlzaXRlZCIsIm5vZGUiLCJfdG9wb2xvZ2ljYWxTb3J0IiwibmVpZ2hib3JzIiwibmVpZ2hib3IiLCJjaGFpbiIsImZ1bmNzIiwiX2NoYWluZWQiLCJsYXN0UmVzdWx0IiwiYXJncyIsImNoYWluUGF0aEJlZm9yZSIsImJhc2UiLCJjaGFpblBhdGhBZnRlciIsIl9yZXF1aXJlR2xvYmFsIiwiZ2xvYmFsTmFtZSIsIm1vZHVsZU5hbWUiLCJ0aGlzIiwic2VsZiIsIjE1IiwiRW5naW5lIiwiUmVuZGVyIiwicG9zaXRpb25JdGVyYXRpb25zIiwidmVsb2NpdHlJdGVyYXRpb25zIiwiY29uc3RyYWludEl0ZXJhdGlvbnMiLCJlbmFibGVTbGVlcGluZyIsImV2ZW50cyIsInRpbWluZyIsImJyb2FkcGhhc2UiLCJyZW5kZXJEZWZhdWx0cyIsIm1ldHJpY3MiLCJleHRlbmRlZCIsImV2ZW50IiwiX2JvZGllc0FwcGx5R3Jhdml0eSIsIl9ib2RpZXNVcGRhdGUiLCJhZnRlckNvbGxpc2lvbnMiLCJfYm9kaWVzQ2xlYXJGb3JjZXMiLCJtZXJnZSIsImVuZ2luZUEiLCJlbmdpbmVCIiwiZ3Jhdml0eVNjYWxlIiwid29ybGRCb3VuZHMiLCIxNiIsImV2ZW50TmFtZXMiLCJjYWxsYmFjayIsIm5hbWVzIiwib2ZmIiwiam9pbiIsImNhbGxiYWNrcyIsIm5ld0NhbGxiYWNrcyIsImV2ZW50Q2xvbmUiLCIxNyIsIk1hdHRlciIsIlBsdWdpbiIsInZlcnNpb24iLCJ1c2VzIiwidXNlZCIsInVzZSIsImJlZm9yZSIsImFmdGVyIiwiMTgiLCIxOSIsImRvY3VtZW50IiwiYWJzb2x1dGUiLCJtb3VzZWRvd25Qb3NpdGlvbiIsIm1vdXNldXBQb3NpdGlvbiIsIndoZWVsRGVsdGEiLCJwaXhlbFJhdGlvIiwiZ2V0QXR0cmlidXRlIiwibW91c2V3aGVlbCIsIl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24iLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnREZWZhdWx0IiwiZGV0YWlsIiwic2V0RWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRPZmZzZXQiLCJzZXRTY2FsZSIsImVsZW1lbnRCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyb290Tm9kZSIsImRvY3VtZW50RWxlbWVudCIsInBhcmVudE5vZGUiLCJzY3JvbGxYIiwidW5kZWZpbmVkIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwidG91Y2hlcyIsInBhZ2VYIiwibGVmdCIsInBhZ2VZIiwidG9wIiwiY2xpZW50V2lkdGgiLCJ3aWR0aCIsImNsaWVudEhlaWdodCIsImhlaWdodCIsIjIwIiwiX3JlZ2lzdHJ5IiwicmVnaXN0ZXIiLCJpc1BsdWdpbiIsInJlZ2lzdGVyZWQiLCJwbHVnaW5WZXJzaW9uIiwidmVyc2lvblBhcnNlIiwibnVtYmVyIiwicmVnaXN0ZXJlZFZlcnNpb24iLCJyZXNvbHZlIiwiZGVwZW5kZW5jeSIsImRlcGVuZGVuY3lQYXJzZSIsImluc3RhbGwiLCJpc1VzZWQiLCJpc0ZvciIsInBhcnNlZCIsImZvciIsInZlcnNpb25TYXRpc2ZpZXMiLCJwbHVnaW5zIiwiZGVwZW5kZW5jaWVzIiwic29ydGVkRGVwZW5kZW5jaWVzIiwic3RhdHVzIiwiX3dhcm5lZCIsInRyYWNrZWQiLCJwYXJzZWRCYXNlIiwicmVzb2x2ZWQiLCJ0ZXN0IiwiaWRlbnRpZmllcnMiLCJpc1JhbmdlIiwiaXNOYU4iLCJzdWJzdHIiLCJvcGVyYXRvciIsInByZXJlbGVhc2UiLCJyYW5nZVBhcnNlZCIsInJhbmdlUGFydHMiLCJ2ZXJzaW9uUGFyc2VkIiwidmVyc2lvblBhcnRzIiwiMjEiLCJSdW5uZXIiLCJfcmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX2NhbmNlbEFuaW1hdGlvbkZyYW1lIiwiX2ZyYW1lVGltZW91dCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibXNDYW5jZWxBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5uZXIiLCJmcHMiLCJkZWx0YVNhbXBsZVNpemUiLCJjb3VudGVyVGltZXN0YW1wIiwiZnJhbWVDb3VudGVyIiwiZGVsdGFIaXN0b3J5IiwidGltZVByZXYiLCJ0aW1lU2NhbGVQcmV2IiwiZnJhbWVSZXF1ZXN0SWQiLCJpc0ZpeGVkIiwiZW5hYmxlZCIsImRlbHRhTWluIiwiZGVsdGFNYXgiLCJydW4iLCJ0aW1lIiwidGljayIsInN0b3AiLCJzdGFydCIsIjIyIiwiX21vdGlvbldha2VUaHJlc2hvbGQiLCJfbW90aW9uU2xlZXBUaHJlc2hvbGQiLCJfbWluQmlhcyIsInRpbWVGYWN0b3IiLCJtaW5Nb3Rpb24iLCJtYXhNb3Rpb24iLCJzbGVlcENvdW50ZXIiLCJzbGVlcGluZ0JvZHkiLCJtb3ZpbmdCb2R5Iiwid2FzU2xlZXBpbmciLCIyMyIsImRlY29tcCIsImNoYW1mZXIiLCJyYWRpdXMiLCJxdWFsaXR5IiwicXVhbGl0eU1pbiIsInF1YWxpdHlNYXgiLCJ0cmFwZXpvaWQiLCJzbG9wZSIsInZlcnRpY2VzUGF0aCIsIngxIiwieDIiLCJ4MyIsImNpcmNsZSIsIm1heFNpZGVzIiwic2lkZXMiLCJjZWlsIiwicG9seWdvbiIsInRoZXRhIiwieHgiLCJ5eSIsInRvRml4ZWQiLCJ2ZXJ0ZXhTZXRzIiwiZmxhZ0ludGVybmFsIiwicmVtb3ZlQ29sbGluZWFyIiwibWluaW11bUFyZWEiLCJpc0NvbnZleCIsInoiLCJjb25jYXZlIiwibWFrZUNDVyIsInJlbW92ZUNvbGxpbmVhclBvaW50cyIsImRlY29tcG9zZWQiLCJxdWlja0RlY29tcCIsImNodW5rVmVydGljZXMiLCJwYXYiLCJwYnYiLCJkYSIsIm1hZ25pdHVkZVNxdWFyZWQiLCJkYiIsImlzSW50ZXJuYWwiLCIyNCIsIkNvbXBvc2l0ZXMiLCJzdGFjayIsImNvbHVtbnMiLCJyb3dzIiwiY29sdW1uR2FwIiwicm93R2FwIiwibGFzdEJvZHkiLCJtYXhIZWlnaHQiLCJib2R5SGVpZ2h0IiwiYm9keVdpZHRoIiwieE9mZnNldEEiLCJ5T2Zmc2V0QSIsInhPZmZzZXRCIiwieU9mZnNldEIiLCJib2R5QUhlaWdodCIsImJvZHlBV2lkdGgiLCJib2R5QkhlaWdodCIsIm1lc2giLCJjcm9zc0JyYWNlIiwiYm9keUMiLCJweXJhbWlkIiwiYWN0dWFsUm93cyIsImxhc3RCb2R5V2lkdGgiLCJuZXd0b25zQ3JhZGxlIiwiY2FyIiwid2hlZWxTaXplIiwid2hlZWxBT2Zmc2V0Iiwid2hlZWxCT2Zmc2V0Iiwid2hlZWxBIiwid2hlZWxCIiwiYXhlbEEiLCJheGVsQiIsInNvZnRCb2R5IiwicGFydGljbGVSYWRpdXMiLCJwYXJ0aWNsZU9wdGlvbnMiLCJjb25zdHJhaW50T3B0aW9ucyIsIjI1Iiwibm9ybWFsaXNlIiwiZ3JhZGllbnQiLCIyNiIsImJvdW5kc0EiLCJib3VuZHNCIiwidmVjdG9yIiwic2hpZnQiLCJkZWx0YVgiLCJkZWx0YVkiLCIyNyIsIlN2ZyIsInBhdGhUb1ZlcnRpY2VzIiwic2FtcGxlTGVuZ3RoIiwiaWwiLCJzZWdtZW50Iiwic2VnbWVudHMiLCJzZWdtZW50c1F1ZXVlIiwibGFzdFNlZ21lbnQiLCJsYXN0UG9pbnQiLCJseCIsImx5IiwiYWRkUG9pbnQiLCJweCIsInB5IiwicGF0aFNlZ1R5cGUiLCJpc1JlbGF0aXZlIiwiYWRkU2VnbWVudFBvaW50Iiwic2VnVHlwZSIsInBhdGhTZWdUeXBlQXNMZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsIl9zdmdQYXRoVG9BYnNvbHV0ZSIsImdldFRvdGFsTGVuZ3RoIiwicGF0aFNlZ0xpc3QiLCJudW1iZXJPZkl0ZW1zIiwiZ2V0SXRlbSIsImdldFBhdGhTZWdBdExlbmd0aCIsImdldFBvaW50QXRMZW5ndGgiLCJ4MCIsInkwIiwieTEiLCJ5MiIsInNlZ3MiLCJsZW4iLCJzZWciLCJyZXBsYWNlSXRlbSIsImNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQXJjQWJzIiwicjEiLCJyMiIsImxhcmdlQXJjRmxhZyIsInN3ZWVwRmxhZyIsIjI4Iiwib3V0cHV0IiwidmVjdG9yQSIsInZlY3RvckIiLCJjcm9zczMiLCJ2ZWN0b3JDIiwic2NhbGFyIiwiYXRhbjIiLCIyOSIsIm1hdGNoIiwicGFyc2VGbG9hdCIsIm1lYW4iLCJhdmVyYWdlIiwic2lnbmVkIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJ2ZXJ0aWNlIiwibmV4dFZlcnRpY2UiLCJuZXdWZXJ0aWNlcyIsInByZXZWZXJ0ZXgiLCJuZXh0VmVydGV4IiwiY3VycmVudFJhZGl1cyIsInByZXZOb3JtYWwiLCJuZXh0Tm9ybWFsIiwiZGlhZ29uYWxSYWRpdXMiLCJyYWRpdXNWZWN0b3IiLCJtaWROb3JtYWwiLCJzY2FsZWRWZXJ0ZXgiLCJwcmVjaXNpb24iLCJhY29zIiwic29ydCIsImZsYWciLCJ1cHBlciIsImxvd2VyIiwicG9wIiwiMzAiLCJSZW5kZXJQaXhpIiwiMzEiLCJiYWNrZ3JvdW5kIiwid2lyZWZyYW1lQmFja2dyb3VuZCIsImhhc0JvdW5kcyIsIndpcmVmcmFtZXMiLCJzaG93U2xlZXBpbmciLCJzaG93RGVidWciLCJzaG93QnJvYWRwaGFzZSIsInNob3dCb3VuZHMiLCJzaG93VmVsb2NpdHkiLCJzaG93Q29sbGlzaW9ucyIsInNob3dTZXBhcmF0aW9ucyIsInNob3dBeGVzIiwic2hvd1Bvc2l0aW9ucyIsInNob3dBbmdsZUluZGljYXRvciIsInNob3dJZHMiLCJzaG93U2hhZG93cyIsInNob3dWZXJ0ZXhOdW1iZXJzIiwic2hvd0NvbnZleEh1bGxzIiwic2hvd0ludGVybmFsRWRnZXMiLCJzaG93TW91c2VQb3NpdGlvbiIsIl9jcmVhdGVDYW52YXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInRleHR1cmVzIiwic2V0UGl4ZWxSYXRpbyIsImFwcGVuZENoaWxkIiwibG9vcCIsIl9nZXRQaXhlbFJhdGlvIiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJsb29rQXQiLCJwYWRkaW5nIiwiY2VudGVyIiwidmlld0hlaWdodCIsIm91dGVyUmF0aW8iLCJpbm5lclJhdGlvIiwic3RhcnRWaWV3VHJhbnNmb3JtIiwiYm91bmRzV2lkdGgiLCJib3VuZHNIZWlnaHQiLCJib3VuZHNTY2FsZVgiLCJib3VuZHNTY2FsZVkiLCJlbmRWaWV3VHJhbnNmb3JtIiwic2V0VHJhbnNmb3JtIiwiY3VycmVudEJhY2tncm91bmQiLCJfYXBwbHlCYWNrZ3JvdW5kIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZmlsbFJlY3QiLCJib2R5Q29udmV4SHVsbHMiLCJib2R5V2lyZWZyYW1lcyIsImJvZHlCb3VuZHMiLCJib2R5QXhlcyIsImJvZHlQb3NpdGlvbnMiLCJib2R5VmVsb2NpdHkiLCJib2R5SWRzIiwic2VwYXJhdGlvbnMiLCJ2ZXJ0ZXhOdW1iZXJzIiwibW91c2VQb3NpdGlvbiIsImRlYnVnIiwiZGVidWdUaW1lc3RhbXAiLCJ0ZXh0Iiwicm91bmQiLCJkZWJ1Z1N0cmluZyIsImZvbnQiLCJmaWxsVGV4dCIsImJlZ2luUGF0aCIsImFyYyIsImNsb3NlUGF0aCIsIm1vdmVUbyIsImNvaWxzIiwibGluZVRvIiwic3Ryb2tlIiwiZmlsbCIsImJvZHlTaGFkb3dzIiwiZGlzdGFuY2VYIiwiZGlzdGFuY2VZIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsInNoYWRvd0JsdXIiLCJnbG9iYWxBbHBoYSIsInRleHR1cmUiLCJfZ2V0VGV4dHVyZSIsImRyYXdJbWFnZSIsInJlY3QiLCJub3JtYWxQb3NYIiwibm9ybWFsUG9zWSIsImJ1Y2tldEtleXMiLCJpbnNwZWN0b3IiLCJzZWxlY3RlZCIsIml0ZW0iLCJkYXRhIiwic2V0TGluZURhc2giLCJzZWxlY3RTdGFydCIsInNlbGVjdEJvdW5kcyIsImNyZWF0ZUVsZW1lbnQiLCJvbmNvbnRleHRtZW51Iiwib25zZWxlY3RzdGFydCIsImRldmljZVBpeGVsUmF0aW8iLCJ3ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwibW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwiYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImltYWdlUGF0aCIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJjc3NCYWNrZ3JvdW5kIiwiYmFja2dyb3VuZFNpemUiLCIzMiIsInJlbmRlcmVyIiwiY29udGFpbmVyIiwic3ByaXRlQ29udGFpbmVyIiwicGl4aU9wdGlvbnMiLCJ0cmFuc3BhcmVudCIsInZpZXciLCJhbnRpYWxpYXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJQSVhJIiwiV2ViR0xSZW5kZXJlciIsIkNvbnRhaW5lciIsInNwcml0ZXMiLCJwcmltaXRpdmVzIiwiYWRkQ2hpbGQiLCJjaGlsZHJlbiIsInJlbW92ZUNoaWxkIiwiYmdTcHJpdGUiLCJhZGRDaGlsZEF0Iiwic2V0QmFja2dyb3VuZCIsImlzQ29sb3IiLCJjb2xvciIsIlNwcml0ZSIsImNvbnN0cmFpbnRSZW5kZXIiLCJwcmltaXRpdmVJZCIsInByaW1pdGl2ZSIsIkdyYXBoaWNzIiwiYmVnaW5GaWxsIiwibGluZVN0eWxlIiwiZW5kRmlsbCIsImJvZHlSZW5kZXIiLCJzcHJpdGVJZCIsIl9jcmVhdGVCb2R5U3ByaXRlIiwiX2NyZWF0ZUJvZHlQcmltaXRpdmUiLCJpbml0aWFsQW5nbGUiLCJ0ZXh0dXJlUGF0aCIsImFuY2hvciIsInN0cm9rZVN0eWxlSW5kaWNhdG9yIiwic3Ryb2tlU3R5bGVXaXJlZnJhbWUiLCJzdHJva2VTdHlsZVdpcmVmcmFtZUluZGljYXRvciIsIlRleHR1cmUiLCJmcm9tSW1hZ2UiLCJhbnRpR3Jhdml0eU1hbmhhdHRhbiIsInRndCIsImNvZWZmIiwiZyIsInV0aWxzIiwiY2hhclNpemUiLCJhbnRpR3Jhdml0eVJhbmdlZCIsInJhbmdlRmFjdG9yIiwiYW50aUdyYXZpdHlNYWciLCJ1bml0U3JjVG9UZ3QiLCJhbnRpR3Jhdml0eSIsImFwcGx5QW50aUdyYXZpdHlUd29Cb2R5IiwiZm9yY2VBbnRpR3Jhdml0eSIsInJlcHVsc2lvbkNvZWZmIiwicmVwdWxzaW9uUmFuZ2UiLCJhcHBseUFudGlHcmF2aXR5IiwiYmxvY2tzIiwiYXJnIiwiTWFwIiwiXyIsIl9pc1Jvb3QiLCJfcm9vdCIsIl9kZXB0aCIsIl9pbmRleCIsIml4IiwidG1wIiwiYXJlQ29ubmVjdGVkIiwiaXkiLCJjb25uZWN0Iiwicm9vdFgiLCJyb290WSIsImdldFJvb3RBbGwiLCJjb3VudGVyIiwiZm9yRWFjaCIsImhhcyIsImFwcGx5QW50aUdyYXZpdHlEaXNqb2ludCIsInVmWCIsInVmWSIsImFwcGx5R3JvdXBpbmdUd29Cb2R5IiwiZ3JvdXBpbmdDb2VmZiIsImFwcGx5R3JvdXBpbmciLCJLbm9sbGJvdCIsIlNjcmVlbldpZHRoIiwiU2NyZWVuSGVpZ2h0IiwiU2NyZWVuV2lkdGhIYWxmIiwiU2NyZWVuSGVpZ2h0SGFsZiIsIldhbGxPZmZzZXQiLCJXYWxsVGhpY2tuZXNzIiwiaW1nUGF0aHMiLCJwb2tlU2NhbGUiLCJwYXJhbXMiLCJhbGlnbm1lbnRGb3JjZUNvZWZmIiwiYWxpZ25tZW50Rm9yY2VSYW5nZSIsImFsaWdubWVudEZvcmNlV2FsbFJhbmdlIiwiYm9keU9wdGlvbnMiLCJwcm9taXNlZEJveGVzIiwiUHJvbWlzZSIsImFsbCIsImltZ1BhdGgiLCJyZWplY3QiLCJpbWciLCJvbmxvYWQiLCJvbmVycm9yIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ3YWxsT3B0aW9ucyIsIndhbGxGcmljdGlvbiIsIndhbGxUb3AiLCJ3YWxsQm90dG9tIiwid2FsbExlZnQiLCJ3YWxsUmlnaHQiLCJib3hlcyIsImdyb3VwaW5nIiwicmVwdWxzaW9uIiwiYWxpZ24iLCJhcHBseUFsaWdubWVudCIsInBva2VTY2FsZURlY2F5IiwicG9rZSIsImFwcGx5UmFuZG9tUG9rZXMiLCJ0b3VjaCIsImFuZ2xlSW5SYWRpYW4iLCJyb3RhdGlvbkFuZ2xlIiwiRnVuY3Rpb24iLCJjcmVhdGVBbGlnbm1lbnRHcmFwaE1ldGEiLCJwb2ludFBhaXJGdW5jIiwiZWRnZXMiLCJwb3NTcmMiLCJwb3NUZ3QiLCJ3ZWlnaHQiLCJpZHhTcmMiLCJpZHhUZ3QiLCJhcHBseUFsaWdubWVudEZvcmNlWCIsImVkZ2UiLCJmb3JjZU9uVGd0IiwiYXBwbHlBbGlnbm1lbnRGb3JjZVkiLCJhcHBseUFsaWdubWVudE1TVCIsImdYIiwiY3JlYXRlQWxpZ25tZW50R3JhcGhYIiwiZ1kiLCJjcmVhdGVBbGlnbm1lbnRHcmFwaFkiLCJlZGdlTXN0WCIsImtydXNrYWwiLCJlZGdlTXN0WSIsImNyZWF0ZUJveFdhbGxCaXBhcnRpdGVNZXRhIiwid2FsbHMiLCJpZHhCb3giLCJpZHhXYWxsIiwicG9zQm94IiwicG9zV2FsbCIsImFwcGx5Qm94V2FsbEFsaWdubWVudCIsInVmIiwiZTEiLCJlMiIsInYxIiwidjIiLCJhcHBseVJhbmRvbVBva2UiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNO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LEtBQUt4TixPQUNYNmpDLEVBQUdwRixhQUFhdUYsRUFBSUMsS0FDdkJKLEVBQUdsRixRQUFRcUYsRUFBSUMsR0FDZmhvQyxFQUFJRSxLQUFLcUUsSUFHYixPQUFPdkUsSSxxdEJDL0JULGNBQ0EsVUFjYSxFQUFBNGxDLGlCQUFtQixTQUFDaHpCLEVBQXNCa3ZCLEdBQ3JEQSxFQUFPaUIsU0FBUSxTQUFBOStCLEdBQVMsT0FYRixTQUFDMk8sRUFBc0IzTyxHQUN4Q0EsRUFBTTJDLFVBQ1QsVUFBT2hDLEtBQUtnSSxXQUFXM0ksRUFBT0EsRUFBTWdDLFNBQ2xDLENBQ0UvRyxFQUFHMFQsRUFBTW14QixVQUFZN0MsRUFBTWorQixRQUMzQnpDLEVBQUdvUyxFQUFNbXhCLFVBQVk3QyxFQUFNaitCLFVBTVRnbEMsQ0FBZ0JyMUIsRUFBTzNPIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNSk7XG4iLCJleHBvcnQgdHlwZSBQYWlyPFQ+ID0ge1xuICBmaXJzdDogVCxcbiAgc2Vjb25kOiBULFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlY3RvciB7XG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxufVxuXG5leHBvcnQgY29uc3QgYXJyTWF4ID0gKHhzOiBudW1iZXJbXSk6IG51bWJlciA9PiB4cy5yZWR1Y2UoKGFjYywgeCkgPT4gTWF0aC5tYXgoYWNjLCB4KSwgLUluZmluaXR5KTtcbmV4cG9ydCBjb25zdCBhcnJNaW4gPSAoeHM6IG51bWJlcltdKTogbnVtYmVyID0+IHhzLnJlZHVjZSgoYWNjLCB4KSA9PiBNYXRoLm1pbihhY2MsIHgpLCBJbmZpbml0eSk7XG5leHBvcnQgY29uc3QgYXJyU3VtID0gKHhzOiBudW1iZXJbXSk6IG51bWJlciA9PiB4cy5yZWR1Y2UoKGFjYywgeCkgPT4gYWNjICsgeCwgMCk7XG5leHBvcnQgY29uc3QgYXJyTWVhbiA9ICh4czogbnVtYmVyW10pOiBudW1iZXIgPT4gYXJyU3VtKHhzKSAvIHhzLmxlbmd0aDtcblxuZXhwb3J0IGNvbnN0IGFyck1ldGFCeSA9IDxUPih4czogVFtdLCBmOiAoYTogVCkgPT4gbnVtYmVyLCByZWR1Y2U6IChhOiBudW1iZXJbXSkgPT4gbnVtYmVyKTogVFtdID0+IHtcbiAgbGV0IHlzID0geHMubWFwKGYpXG4gIGxldCB5bWF4ID0gcmVkdWNlKHlzKTtcbiAgbGV0IHJlcyA9IEFycmF5PFQ+KCk7XG4gIGZvciAobGV0IGkgaW4geHMpIHtcbiAgICBpZiAoeXNbaV0gPT0geW1heCkge1xuICAgICAgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuZXhwb3J0IGNvbnN0IGFyck1heEJ5ID0gPFQ+KHsgeHMsIGYgfTogeyB4czogVFtdOyBmOiAoYTogVCkgPT4gbnVtYmVyOyB9KTogVFtdID0+IHtcbiAgcmV0dXJuIGFyck1ldGFCeSh4cywgZiwgYXJyTWF4KTtcbn1cblxuZXhwb3J0IGNvbnN0IGFyck1pbkJ5ID0gPFQ+KHsgeHMsIGYgfTogeyB4czogVFtdOyBmOiAoYTogVCkgPT4gbnVtYmVyOyB9KTogVFtdID0+IHtcbiAgcmV0dXJuIGFyck1ldGFCeSh4cywgZiwgYXJyTWluKTtcbn1cblxuZXhwb3J0IGNvbnN0IHZlY3Rvck1lYW4gPSAodmVjOiBWZWN0b3JbXSk6IFZlY3RvciA9PiB7XG4gIGxldCB4ID0gYXJyTWVhbih2ZWMubWFwKHYgPT4gdi54KSk7XG4gIGxldCB5ID0gYXJyTWVhbih2ZWMubWFwKHYgPT4gdi55KSk7XG4gIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJpZ2h0bW9zdFBvaW50ID0gKHBvaW50czogVmVjdG9yW10pOiBWZWN0b3IgPT4ge1xuICByZXR1cm4gdmVjdG9yTWVhbihhcnJNYXhCeSh7IHhzOiBwb2ludHMsIGY6IHAgPT4gcC54IH0pKTtcbn1cblxuZXhwb3J0IGNvbnN0IGxlZnRtb3N0UG9pbnQgPSAocG9pbnRzOiBWZWN0b3JbXSk6IFZlY3RvciA9PiB7XG4gIHJldHVybiB2ZWN0b3JNZWFuKGFyck1pbkJ5KHsgeHM6IHBvaW50cywgZjogcCA9PiBwLnggfSkpO1xufVxuXG5leHBvcnQgY29uc3QgdG9wbW9zdFBvaW50ID0gKHBvaW50czogVmVjdG9yW10pOiBWZWN0b3IgPT4ge1xuICByZXR1cm4gdmVjdG9yTWVhbihhcnJNaW5CeSh7IHhzOiBwb2ludHMsIGY6IHAgPT4gcC55IH0pKTtcbn1cblxuZXhwb3J0IGNvbnN0IGJvdHRvbW1vc3RQb2ludCA9IChwb2ludHM6IFZlY3RvcltdKTogVmVjdG9yID0+IHtcbiAgcmV0dXJuIHZlY3Rvck1lYW4oYXJyTWF4QnkoeyB4czogcG9pbnRzLCBmOiBwID0+IHAueSB9KSk7XG59XG5cbmV4cG9ydCBjb25zdCBkaXN0SG9yaXogPSAocG9pbnRBOiBWZWN0b3IsIHBvaW50QjogVmVjdG9yKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIE1hdGguYWJzKHBvaW50QS54IC0gcG9pbnRCLngpO1xufVxuXG5leHBvcnQgY29uc3QgZGlzdFZlcnRpID0gKHBvaW50QTogVmVjdG9yLCBwb2ludEI6IFZlY3Rvcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBNYXRoLmFicyhwb2ludEEueSAtIHBvaW50Qi55KTtcbn1cblxuZXhwb3J0IGNvbnN0IGRpc3RFdWNsaWQgPSAocG9pbnRBOiBWZWN0b3IsIHBvaW50QjogVmVjdG9yKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIE1hdGguaHlwb3QocG9pbnRBLnggLSBwb2ludEIueCwgcG9pbnRBLnkgLSBwb2ludEIueSk7XG59XG5cbmNvbnN0IGNsb2VzdFBvaW50TWV0YSA9IChib2R5MTogTWF0dGVyLkJvZHksIGJvZHkyOiBNYXR0ZXIuQm9keSwgZWRnZUE6ICh2czogVmVjdG9yW10pID0+IFZlY3RvciwgZWRnZUI6ICh2czogVmVjdG9yW10pID0+IFZlY3RvciwgZGlzdEZ1bmM6ICh2MTogVmVjdG9yLCB2MjogVmVjdG9yKSA9PiBudW1iZXIpOiBbVmVjdG9yLCBWZWN0b3IsIG51bWJlcl0gPT4ge1xuICBsZXQgb25lMSA9IGVkZ2VBKGJvZHkxLnZlcnRpY2VzKTtcbiAgbGV0IGFub3RoZXIxID0gZWRnZUIoYm9keTEudmVydGljZXMpO1xuICBsZXQgb25lMiA9IGVkZ2VBKGJvZHkyLnZlcnRpY2VzKTtcbiAgbGV0IGFub3RoZXIyID0gZWRnZUIoYm9keTIudmVydGljZXMpO1xuICBsZXQgcmVzOiBbVmVjdG9yLCBWZWN0b3IsIG51bWJlcl0gPSBbb25lMSwgYW5vdGhlcjEsIEluZmluaXR5XTtcbiAgbGV0IGRpc3QgPSBJbmZpbml0eTtcbiAgZm9yIChsZXQgcDEgb2YgW29uZTEsIGFub3RoZXIxXSkge1xuICAgIGZvciAobGV0IHAyIG9mIFtvbmUyLCBhbm90aGVyMl0pIHtcbiAgICAgIGxldCBkID0gZGlzdEZ1bmMocDEsIHAyKTtcbiAgICAgIGlmIChkIDwgZGlzdCkge1xuICAgICAgICBkaXN0ID0gZDtcbiAgICAgICAgcmVzID0gW3AxLCBwMiwgZGlzdF07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBjb25zdCBjbG9lc3RQb2ludFBhaXJYID0gKGJvZHkxOiBNYXR0ZXIuQm9keSwgYm9keTI6IE1hdHRlci5Cb2R5KTogW1ZlY3RvciwgVmVjdG9yLCBudW1iZXJdID0+IHtcbiAgcmV0dXJuIGNsb2VzdFBvaW50TWV0YShib2R5MSwgYm9keTIsIGxlZnRtb3N0UG9pbnQsIHJpZ2h0bW9zdFBvaW50LCBkaXN0SG9yaXopO1xufVxuXG5leHBvcnQgY29uc3QgY2xvZXN0UG9pbnRQYWlyWSA9IChib2R5MTogTWF0dGVyLkJvZHksIGJvZHkyOiBNYXR0ZXIuQm9keSk6IFtWZWN0b3IsIFZlY3RvciwgbnVtYmVyXSA9PiB7XG4gIHJldHVybiBjbG9lc3RQb2ludE1ldGEoYm9keTEsIGJvZHkyLCB0b3Btb3N0UG9pbnQsIGJvdHRvbW1vc3RQb2ludCwgZGlzdFZlcnRpKTtcbn1cblxuZXhwb3J0IGNvbnN0IHJhbmdlID0gKHNpemU6IG51bWJlcik6IG51bWJlcltdID0+IHtcbiAgc2l6ZSA9IE1hdGguZmxvb3Ioc2l6ZSk7XG4gIHJldHVybiBBcnJheS5mcm9tKEFycmF5KHNpemUpLmtleXMoKSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmFuZFJhbmdlID0gKGxvOiBudW1iZXIsIGhpOiBudW1iZXIsIHVuaXQ6IG51bWJlciA9IDEpOiBudW1iZXIgPT4ge1xuICBsZXQgYSA9IE1hdGguZmxvb3IobG8pO1xuICBsZXQgYiA9IE1hdGguZmxvb3IoaGkpO1xuICByZXR1cm4gYSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChiIC0gYSkgLyB1bml0KSAqIHVuaXRcbn1cblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjU1ODI4ODIvamF2YXNjcmlwdC1tYXRoLXJhbmRvbS1ub3JtYWwtZGlzdHJpYnV0aW9uLWdhdXNzaWFuLWJlbGwtY3VydmVcbmV4cG9ydCBjb25zdCByYW5kbiA9ICgpOiBudW1iZXIgPT4ge1xuICBsZXQgdSA9IDA7XG4gIGxldCB2ID0gMDtcbiAgd2hpbGUgKHUgPT09IDApIHUgPSBNYXRoLnJhbmRvbSgpOyAvL0NvbnZlcnRpbmcgWzAsMSkgdG8gKDAsMSlcbiAgd2hpbGUgKHYgPT09IDApIHYgPSBNYXRoLnJhbmRvbSgpO1xuICBsZXQgbnVtID0gTWF0aC5zcXJ0KC0yLjAgKiBNYXRoLmxvZyh1KSkgKiBNYXRoLmNvcygyLjAgKiBNYXRoLlBJICogdik7XG4gIG51bSA9IG51bSAvIDEwLjAgKyAwLjU7IC8vIFRyYW5zbGF0ZSB0byAwIC0+IDFcbiAgaWYgKG51bSA+IDEgfHwgbnVtIDwgMCkgcmV0dXJuIHJhbmRuKCk7IC8vIHJlc2FtcGxlIGJldHdlZW4gMCBhbmQgMVxuICByZXR1cm4gbnVtIC0gMC41O1xufVxuXG5leHBvcnQgY29uc3QgdW5pdFZlYyA9IChmcm9tOiBWZWN0b3IsIHRvOiBWZWN0b3IpOiBWZWN0b3IgPT4ge1xuICBsZXQgZCA9IGRpc3RFdWNsaWQoZnJvbSwgdG8pXG4gIHJldHVybiB7XG4gICAgeDogKHRvLnggLSBmcm9tLngpIC8gZCxcbiAgICB5OiAodG8ueSAtIGZyb20ueSkgLyBkLFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSAodjogVmVjdG9yKTogVmVjdG9yID0+IHtcbiAgbGV0IG5vcm0gPSBNYXRoLmh5cG90KHYueCwgdi55KTtcbiAgcmV0dXJuIHtcbiAgICB4OiB2LnggLyBub3JtLFxuICAgIHk6IHYueSAvIG5vcm0sXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5lZ2F0ZSA9ICh2OiBWZWN0b3IpOiBWZWN0b3IgPT4ge1xuICByZXR1cm4geyB4OiAtdi54LCB5OiAtdi55IH07XG59XG5cbmV4cG9ydCBjb25zdCBtYWtlVW5vcmRlcmVkUGFpciA9IDxUPihhOiBULCBiOiBUKTogUGFpcjxUPiA9PiB7XG4gIGlmIChiIDwgYSkge1xuICAgIFthLCBiXSA9IFtiLCBhXTtcbiAgfVxuICByZXR1cm4geyBmaXJzdDogYSwgc2Vjb25kOiBiIH07XG59XG5cbmV4cG9ydCBjb25zdCBnZXRXaWR0aCA9IChibG9jazogTWF0dGVyLkJvZHkpOiBudW1iZXIgPT4ge1xuICBsZXQgeHMgPSBibG9jay52ZXJ0aWNlcy5tYXAodiA9PiB2LngpO1xuICByZXR1cm4gYXJyTWF4KHhzKSAtIGFyck1pbih4cyk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRIZWlnaHQgPSAoYmxvY2s6IE1hdHRlci5Cb2R5KTogbnVtYmVyID0+IHtcbiAgbGV0IHlzID0gYmxvY2sudmVydGljZXMubWFwKHYgPT4gdi55KTtcbiAgcmV0dXJuIGFyck1heCh5cykgLSBhcnJNaW4oeXMpO1xufVxuXG5leHBvcnQgY29uc3QgYXJlU2FtZUhlaWdodCA9IChmb286IE1hdHRlci5Cb2R5LCBiYXI6IE1hdHRlci5Cb2R5KSA9PiB7XG4gIHJldHVybiBnZXRIZWlnaHQoZm9vKSA9PSBnZXRIZWlnaHQoYmFyKTtcbn1cblxuZXhwb3J0IGNvbnN0IGFyZVNhbWVXaWR0aCA9IChmb286IE1hdHRlci5Cb2R5LCBiYXI6IE1hdHRlci5Cb2R5KSA9PiB7XG4gIHJldHVybiBnZXRXaWR0aChmb28pID09IGdldFdpZHRoKGJhcik7XG59XG4iLCIvKipcbiogbWF0dGVyLWpzIDAuMTQuMiBieSBAbGlhYnJ1IDIwMTgtMDYtMTFcbiogaHR0cDovL2JybS5pby9tYXR0ZXItanMvXG4qIExpY2Vuc2UgTUlUXG4qL1xuXG4vKipcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogXG4gKiBDb3B5cmlnaHQgKGMpIExpYW0gQnJ1bW1pdHQgYW5kIGNvbnRyaWJ1dG9ycy5cbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLk1hdHRlciA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkJvZHlgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGJvZHkgbW9kZWxzLlxuKiBBIGBNYXR0ZXIuQm9keWAgaXMgYSByaWdpZCBib2R5IHRoYXQgY2FuIGJlIHNpbXVsYXRlZCBieSBhIGBNYXR0ZXIuRW5naW5lYC5cbiogRmFjdG9yaWVzIGZvciBjb21tb25seSB1c2VkIGJvZHkgY29uZmlndXJhdGlvbnMgKHN1Y2ggYXMgcmVjdGFuZ2xlcywgY2lyY2xlcyBhbmQgb3RoZXIgcG9seWdvbnMpIGNhbiBiZSBmb3VuZCBpbiB0aGUgbW9kdWxlIGBNYXR0ZXIuQm9kaWVzYC5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cblxuKiBAY2xhc3MgQm9keVxuKi9cblxudmFyIEJvZHkgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb2R5O1xuXG52YXIgVmVydGljZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZXJ0aWNlcycpO1xudmFyIFZlY3RvciA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIFNsZWVwaW5nID0gX2RlcmVxXygnLi4vY29yZS9TbGVlcGluZycpO1xudmFyIFJlbmRlciA9IF9kZXJlcV8oJy4uL3JlbmRlci9SZW5kZXInKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xudmFyIEF4ZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9BeGVzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIEJvZHkuX2luZXJ0aWFTY2FsZSA9IDQ7XG4gICAgQm9keS5fbmV4dENvbGxpZGluZ0dyb3VwSWQgPSAxO1xuICAgIEJvZHkuX25leHROb25Db2xsaWRpbmdHcm91cElkID0gLTE7XG4gICAgQm9keS5fbmV4dENhdGVnb3J5ID0gMHgwMDAxO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFZlcnRpY2VzIG11c3QgYmUgc3BlY2lmaWVkIGluIGNsb2Nrd2lzZSBvcmRlci5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtib2R5fSBib2R5XG4gICAgICovXG4gICAgQm9keS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGlkOiBDb21tb24ubmV4dElkKCksXG4gICAgICAgICAgICB0eXBlOiAnYm9keScsXG4gICAgICAgICAgICBsYWJlbDogJ0JvZHknLFxuICAgICAgICAgICAgcGFydHM6IFtdLFxuICAgICAgICAgICAgcGx1Z2luOiB7fSxcbiAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgICAgdmVydGljZXM6IFZlcnRpY2VzLmZyb21QYXRoKCdMIDAgMCBMIDQwIDAgTCA0MCA0MCBMIDAgNDAnKSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIGZvcmNlOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIHRvcnF1ZTogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZTogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICBjb25zdHJhaW50SW1wdWxzZTogeyB4OiAwLCB5OiAwLCBhbmdsZTogMCB9LFxuICAgICAgICAgICAgdG90YWxDb250YWN0czogMCxcbiAgICAgICAgICAgIHNwZWVkOiAwLFxuICAgICAgICAgICAgYW5ndWxhclNwZWVkOiAwLFxuICAgICAgICAgICAgdmVsb2NpdHk6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgYW5ndWxhclZlbG9jaXR5OiAwLFxuICAgICAgICAgICAgaXNTZW5zb3I6IGZhbHNlLFxuICAgICAgICAgICAgaXNTdGF0aWM6IGZhbHNlLFxuICAgICAgICAgICAgaXNTbGVlcGluZzogZmFsc2UsXG4gICAgICAgICAgICBtb3Rpb246IDAsXG4gICAgICAgICAgICBzbGVlcFRocmVzaG9sZDogNjAsXG4gICAgICAgICAgICBkZW5zaXR5OiAwLjAwMSxcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiAwLFxuICAgICAgICAgICAgZnJpY3Rpb246IDAuMSxcbiAgICAgICAgICAgIGZyaWN0aW9uU3RhdGljOiAwLjUsXG4gICAgICAgICAgICBmcmljdGlvbkFpcjogMC4wMSxcbiAgICAgICAgICAgIGNvbGxpc2lvbkZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAweDAwMDEsXG4gICAgICAgICAgICAgICAgbWFzazogMHhGRkZGRkZGRixcbiAgICAgICAgICAgICAgICBncm91cDogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsb3A6IDAuMDUsXG4gICAgICAgICAgICB0aW1lU2NhbGU6IDEsXG4gICAgICAgICAgICByZW5kZXI6IHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgc3ByaXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHhTY2FsZTogMSxcbiAgICAgICAgICAgICAgICAgICAgeVNjYWxlOiAxLFxuICAgICAgICAgICAgICAgICAgICB4T2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgICAgICB5T2Zmc2V0OiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYm9keSA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIF9pbml0UHJvcGVydGllcyhib2R5LCBvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gYm9keTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCB1bmlxdWUgZ3JvdXAgaW5kZXggZm9yIHdoaWNoIGJvZGllcyB3aWxsIGNvbGxpZGUuXG4gICAgICogSWYgYGlzTm9uQ29sbGlkaW5nYCBpcyBgdHJ1ZWAsIHJldHVybnMgdGhlIG5leHQgdW5pcXVlIGdyb3VwIGluZGV4IGZvciB3aGljaCBib2RpZXMgd2lsbCBfbm90XyBjb2xsaWRlLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqIEBtZXRob2QgbmV4dEdyb3VwXG4gICAgICogQHBhcmFtIHtib29sfSBbaXNOb25Db2xsaWRpbmc9ZmFsc2VdXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgZ3JvdXAgaW5kZXhcbiAgICAgKi9cbiAgICBCb2R5Lm5leHRHcm91cCA9IGZ1bmN0aW9uKGlzTm9uQ29sbGlkaW5nKSB7XG4gICAgICAgIGlmIChpc05vbkNvbGxpZGluZylcbiAgICAgICAgICAgIHJldHVybiBCb2R5Ll9uZXh0Tm9uQ29sbGlkaW5nR3JvdXBJZC0tO1xuXG4gICAgICAgIHJldHVybiBCb2R5Ll9uZXh0Q29sbGlkaW5nR3JvdXBJZCsrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IHVuaXF1ZSBjYXRlZ29yeSBiaXRmaWVsZCAoc3RhcnRpbmcgYWZ0ZXIgdGhlIGluaXRpYWwgZGVmYXVsdCBjYXRlZ29yeSBgMHgwMDAxYCkuXG4gICAgICogVGhlcmUgYXJlIDMyIGF2YWlsYWJsZS4gU2VlIGBib2R5LmNvbGxpc2lvbkZpbHRlcmAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogQG1ldGhvZCBuZXh0Q2F0ZWdvcnlcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFVuaXF1ZSBjYXRlZ29yeSBiaXRmaWVsZFxuICAgICAqL1xuICAgIEJvZHkubmV4dENhdGVnb3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIEJvZHkuX25leHRDYXRlZ29yeSA9IEJvZHkuX25leHRDYXRlZ29yeSA8PCAxO1xuICAgICAgICByZXR1cm4gQm9keS5fbmV4dENhdGVnb3J5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlcyBib2R5IHByb3BlcnRpZXMuXG4gICAgICogQG1ldGhvZCBfaW5pdFByb3BlcnRpZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7fSBbb3B0aW9uc11cbiAgICAgKi9cbiAgICB2YXIgX2luaXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24oYm9keSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAvLyBpbml0IHJlcXVpcmVkIHByb3BlcnRpZXMgKG9yZGVyIGlzIGltcG9ydGFudClcbiAgICAgICAgQm9keS5zZXQoYm9keSwge1xuICAgICAgICAgICAgYm91bmRzOiBib2R5LmJvdW5kcyB8fCBCb3VuZHMuY3JlYXRlKGJvZHkudmVydGljZXMpLFxuICAgICAgICAgICAgcG9zaXRpb25QcmV2OiBib2R5LnBvc2l0aW9uUHJldiB8fCBWZWN0b3IuY2xvbmUoYm9keS5wb3NpdGlvbiksXG4gICAgICAgICAgICBhbmdsZVByZXY6IGJvZHkuYW5nbGVQcmV2IHx8IGJvZHkuYW5nbGUsXG4gICAgICAgICAgICB2ZXJ0aWNlczogYm9keS52ZXJ0aWNlcyxcbiAgICAgICAgICAgIHBhcnRzOiBib2R5LnBhcnRzIHx8IFtib2R5XSxcbiAgICAgICAgICAgIGlzU3RhdGljOiBib2R5LmlzU3RhdGljLFxuICAgICAgICAgICAgaXNTbGVlcGluZzogYm9keS5pc1NsZWVwaW5nLFxuICAgICAgICAgICAgcGFyZW50OiBib2R5LnBhcmVudCB8fCBib2R5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIFZlcnRpY2VzLnJvdGF0ZShib2R5LnZlcnRpY2VzLCBib2R5LmFuZ2xlLCBib2R5LnBvc2l0aW9uKTtcbiAgICAgICAgQXhlcy5yb3RhdGUoYm9keS5heGVzLCBib2R5LmFuZ2xlKTtcbiAgICAgICAgQm91bmRzLnVwZGF0ZShib2R5LmJvdW5kcywgYm9keS52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG5cbiAgICAgICAgLy8gYWxsb3cgb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIHByb3BlcnRpZXNcbiAgICAgICAgQm9keS5zZXQoYm9keSwge1xuICAgICAgICAgICAgYXhlczogb3B0aW9ucy5heGVzIHx8IGJvZHkuYXhlcyxcbiAgICAgICAgICAgIGFyZWE6IG9wdGlvbnMuYXJlYSB8fCBib2R5LmFyZWEsXG4gICAgICAgICAgICBtYXNzOiBvcHRpb25zLm1hc3MgfHwgYm9keS5tYXNzLFxuICAgICAgICAgICAgaW5lcnRpYTogb3B0aW9ucy5pbmVydGlhIHx8IGJvZHkuaW5lcnRpYVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXIgcHJvcGVydGllc1xuICAgICAgICB2YXIgZGVmYXVsdEZpbGxTdHlsZSA9IChib2R5LmlzU3RhdGljID8gJyMyZTJiNDQnIDogQ29tbW9uLmNob29zZShbJyMwMDZCQTYnLCAnIzA0OTZGRicsICcjRkZCQzQyJywgJyNEODExNTknLCAnIzhGMkQ1NiddKSksXG4gICAgICAgICAgICBkZWZhdWx0U3Ryb2tlU3R5bGUgPSAnIzAwMCc7XG4gICAgICAgIGJvZHkucmVuZGVyLmZpbGxTdHlsZSA9IGJvZHkucmVuZGVyLmZpbGxTdHlsZSB8fCBkZWZhdWx0RmlsbFN0eWxlO1xuICAgICAgICBib2R5LnJlbmRlci5zdHJva2VTdHlsZSA9IGJvZHkucmVuZGVyLnN0cm9rZVN0eWxlIHx8IGRlZmF1bHRTdHJva2VTdHlsZTtcbiAgICAgICAgYm9keS5yZW5kZXIuc3ByaXRlLnhPZmZzZXQgKz0gLShib2R5LmJvdW5kcy5taW4ueCAtIGJvZHkucG9zaXRpb24ueCkgLyAoYm9keS5ib3VuZHMubWF4LnggLSBib2R5LmJvdW5kcy5taW4ueCk7XG4gICAgICAgIGJvZHkucmVuZGVyLnNwcml0ZS55T2Zmc2V0ICs9IC0oYm9keS5ib3VuZHMubWluLnkgLSBib2R5LnBvc2l0aW9uLnkpIC8gKGJvZHkuYm91bmRzLm1heC55IC0gYm9keS5ib3VuZHMubWluLnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHByb3BlcnR5IGFuZCBhIHZhbHVlIChvciBtYXAgb2YpLCBzZXRzIHRoZSBwcm9wZXJ0eShzKSBvbiB0aGUgYm9keSwgdXNpbmcgdGhlIGFwcHJvcHJpYXRlIHNldHRlciBmdW5jdGlvbnMgaWYgdGhleSBleGlzdC5cbiAgICAgKiBQcmVmZXIgdG8gdXNlIHRoZSBhY3R1YWwgc2V0dGVyIGZ1bmN0aW9ucyBpbiBwZXJmb3JtYW5jZSBjcml0aWNhbCBzaXR1YXRpb25zLlxuICAgICAqIEBtZXRob2Qgc2V0XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt9IHNldHRpbmdzIEEgcHJvcGVydHkgbmFtZSAob3IgbWFwIG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcykgdG8gc2V0IG9uIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSB7fSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0IGlmIGBzZXR0aW5nc2AgaXMgYSBzaW5nbGUgcHJvcGVydHkgbmFtZS5cbiAgICAgKi9cbiAgICBCb2R5LnNldCA9IGZ1bmN0aW9uKGJvZHksIHNldHRpbmdzLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcHJvcGVydHk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gc2V0dGluZ3M7XG4gICAgICAgICAgICBzZXR0aW5ncyA9IHt9O1xuICAgICAgICAgICAgc2V0dGluZ3NbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHByb3BlcnR5IGluIHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHNldHRpbmdzW3Byb3BlcnR5XTtcblxuICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHkpIHtcblxuICAgICAgICAgICAgY2FzZSAnaXNTdGF0aWMnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0U3RhdGljKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzU2xlZXBpbmcnOlxuICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXNzJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGVuc2l0eSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXREZW5zaXR5KGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2luZXJ0aWEnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0SW5lcnRpYShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2ZXJ0aWNlcyc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRWZXJ0aWNlcyhib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwb3NpdGlvbic6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbmdsZSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRBbmdsZShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2ZWxvY2l0eSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRWZWxvY2l0eShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbmd1bGFyVmVsb2NpdHknOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0QW5ndWxhclZlbG9jaXR5KGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BhcnRzJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldFBhcnRzKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYm9keVtwcm9wZXJ0eV0gPSB2YWx1ZTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJvZHkgYXMgc3RhdGljLCBpbmNsdWRpbmcgaXNTdGF0aWMgZmxhZyBhbmQgc2V0dGluZyBtYXNzIGFuZCBpbmVydGlhIHRvIEluZmluaXR5LlxuICAgICAqIEBtZXRob2Qgc2V0U3RhdGljXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtib29sfSBpc1N0YXRpY1xuICAgICAqL1xuICAgIEJvZHkuc2V0U3RhdGljID0gZnVuY3Rpb24oYm9keSwgaXNTdGF0aWMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5LnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbaV07XG4gICAgICAgICAgICBwYXJ0LmlzU3RhdGljID0gaXNTdGF0aWM7XG5cbiAgICAgICAgICAgIGlmIChpc1N0YXRpYykge1xuICAgICAgICAgICAgICAgIHBhcnQuX29yaWdpbmFsID0ge1xuICAgICAgICAgICAgICAgICAgICByZXN0aXR1dGlvbjogcGFydC5yZXN0aXR1dGlvbixcbiAgICAgICAgICAgICAgICAgICAgZnJpY3Rpb246IHBhcnQuZnJpY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIG1hc3M6IHBhcnQubWFzcyxcbiAgICAgICAgICAgICAgICAgICAgaW5lcnRpYTogcGFydC5pbmVydGlhLFxuICAgICAgICAgICAgICAgICAgICBkZW5zaXR5OiBwYXJ0LmRlbnNpdHksXG4gICAgICAgICAgICAgICAgICAgIGludmVyc2VNYXNzOiBwYXJ0LmludmVyc2VNYXNzLFxuICAgICAgICAgICAgICAgICAgICBpbnZlcnNlSW5lcnRpYTogcGFydC5pbnZlcnNlSW5lcnRpYVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBwYXJ0LnJlc3RpdHV0aW9uID0gMDtcbiAgICAgICAgICAgICAgICBwYXJ0LmZyaWN0aW9uID0gMTtcbiAgICAgICAgICAgICAgICBwYXJ0Lm1hc3MgPSBwYXJ0LmluZXJ0aWEgPSBwYXJ0LmRlbnNpdHkgPSBJbmZpbml0eTtcbiAgICAgICAgICAgICAgICBwYXJ0LmludmVyc2VNYXNzID0gcGFydC5pbnZlcnNlSW5lcnRpYSA9IDA7XG5cbiAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uUHJldi54ID0gcGFydC5wb3NpdGlvbi54O1xuICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb25QcmV2LnkgPSBwYXJ0LnBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgcGFydC5hbmdsZVByZXYgPSBwYXJ0LmFuZ2xlO1xuICAgICAgICAgICAgICAgIHBhcnQuYW5ndWxhclZlbG9jaXR5ID0gMDtcbiAgICAgICAgICAgICAgICBwYXJ0LnNwZWVkID0gMDtcbiAgICAgICAgICAgICAgICBwYXJ0LmFuZ3VsYXJTcGVlZCA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5tb3Rpb24gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0Ll9vcmlnaW5hbCkge1xuICAgICAgICAgICAgICAgIHBhcnQucmVzdGl0dXRpb24gPSBwYXJ0Ll9vcmlnaW5hbC5yZXN0aXR1dGlvbjtcbiAgICAgICAgICAgICAgICBwYXJ0LmZyaWN0aW9uID0gcGFydC5fb3JpZ2luYWwuZnJpY3Rpb247XG4gICAgICAgICAgICAgICAgcGFydC5tYXNzID0gcGFydC5fb3JpZ2luYWwubWFzcztcbiAgICAgICAgICAgICAgICBwYXJ0LmluZXJ0aWEgPSBwYXJ0Ll9vcmlnaW5hbC5pbmVydGlhO1xuICAgICAgICAgICAgICAgIHBhcnQuZGVuc2l0eSA9IHBhcnQuX29yaWdpbmFsLmRlbnNpdHk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnZlcnNlTWFzcyA9IHBhcnQuX29yaWdpbmFsLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgIHBhcnQuaW52ZXJzZUluZXJ0aWEgPSBwYXJ0Ll9vcmlnaW5hbC5pbnZlcnNlSW5lcnRpYTtcblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJ0Ll9vcmlnaW5hbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXNzIG9mIHRoZSBib2R5LiBJbnZlcnNlIG1hc3MsIGRlbnNpdHkgYW5kIGluZXJ0aWEgYXJlIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBjaGFuZ2UuXG4gICAgICogQG1ldGhvZCBzZXRNYXNzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1hc3NcbiAgICAgKi9cbiAgICBCb2R5LnNldE1hc3MgPSBmdW5jdGlvbihib2R5LCBtYXNzKSB7XG4gICAgICAgIHZhciBtb21lbnQgPSBib2R5LmluZXJ0aWEgLyAoYm9keS5tYXNzIC8gNik7XG4gICAgICAgIGJvZHkuaW5lcnRpYSA9IG1vbWVudCAqIChtYXNzIC8gNik7XG4gICAgICAgIGJvZHkuaW52ZXJzZUluZXJ0aWEgPSAxIC8gYm9keS5pbmVydGlhO1xuXG4gICAgICAgIGJvZHkubWFzcyA9IG1hc3M7XG4gICAgICAgIGJvZHkuaW52ZXJzZU1hc3MgPSAxIC8gYm9keS5tYXNzO1xuICAgICAgICBib2R5LmRlbnNpdHkgPSBib2R5Lm1hc3MgLyBib2R5LmFyZWE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRlbnNpdHkgb2YgdGhlIGJvZHkuIE1hc3MgYW5kIGluZXJ0aWEgYXJlIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBjaGFuZ2UuXG4gICAgICogQG1ldGhvZCBzZXREZW5zaXR5XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbnNpdHlcbiAgICAgKi9cbiAgICBCb2R5LnNldERlbnNpdHkgPSBmdW5jdGlvbihib2R5LCBkZW5zaXR5KSB7XG4gICAgICAgIEJvZHkuc2V0TWFzcyhib2R5LCBkZW5zaXR5ICogYm9keS5hcmVhKTtcbiAgICAgICAgYm9keS5kZW5zaXR5ID0gZGVuc2l0eTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbW9tZW50IG9mIGluZXJ0aWEgKGkuZS4gc2Vjb25kIG1vbWVudCBvZiBhcmVhKSBvZiB0aGUgYm9keSBvZiB0aGUgYm9keS4gXG4gICAgICogSW52ZXJzZSBpbmVydGlhIGlzIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBjaGFuZ2UuIE1hc3MgaXMgbm90IGNoYW5nZWQuXG4gICAgICogQG1ldGhvZCBzZXRJbmVydGlhXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZXJ0aWFcbiAgICAgKi9cbiAgICBCb2R5LnNldEluZXJ0aWEgPSBmdW5jdGlvbihib2R5LCBpbmVydGlhKSB7XG4gICAgICAgIGJvZHkuaW5lcnRpYSA9IGluZXJ0aWE7XG4gICAgICAgIGJvZHkuaW52ZXJzZUluZXJ0aWEgPSAxIC8gYm9keS5pbmVydGlhO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBib2R5J3MgdmVydGljZXMgYW5kIHVwZGF0ZXMgYm9keSBwcm9wZXJ0aWVzIGFjY29yZGluZ2x5LCBpbmNsdWRpbmcgaW5lcnRpYSwgYXJlYSBhbmQgbWFzcyAod2l0aCByZXNwZWN0IHRvIGBib2R5LmRlbnNpdHlgKS5cbiAgICAgKiBWZXJ0aWNlcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdHJhbnNmb3JtZWQgdG8gYmUgb3JpZW50YXRlZCBhcm91bmQgdGhlaXIgY2VudHJlIG9mIG1hc3MgYXMgdGhlIG9yaWdpbi5cbiAgICAgKiBUaGV5IGFyZSB0aGVuIGF1dG9tYXRpY2FsbHkgdHJhbnNsYXRlZCB0byB3b3JsZCBzcGFjZSBiYXNlZCBvbiBgYm9keS5wb3NpdGlvbmAuXG4gICAgICpcbiAgICAgKiBUaGUgYHZlcnRpY2VzYCBhcmd1bWVudCBzaG91bGQgYmUgcGFzc2VkIGFzIGFuIGFycmF5IG9mIGBNYXR0ZXIuVmVjdG9yYCBwb2ludHMgKG9yIGEgYE1hdHRlci5WZXJ0aWNlc2AgYXJyYXkpLlxuICAgICAqIFZlcnRpY2VzIG11c3QgZm9ybSBhIGNvbnZleCBodWxsLCBjb25jYXZlIGh1bGxzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZXRWZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yW119IHZlcnRpY2VzXG4gICAgICovXG4gICAgQm9keS5zZXRWZXJ0aWNlcyA9IGZ1bmN0aW9uKGJvZHksIHZlcnRpY2VzKSB7XG4gICAgICAgIC8vIGNoYW5nZSB2ZXJ0aWNlc1xuICAgICAgICBpZiAodmVydGljZXNbMF0uYm9keSA9PT0gYm9keSkge1xuICAgICAgICAgICAgYm9keS52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keS52ZXJ0aWNlcyA9IFZlcnRpY2VzLmNyZWF0ZSh2ZXJ0aWNlcywgYm9keSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgcHJvcGVydGllc1xuICAgICAgICBib2R5LmF4ZXMgPSBBeGVzLmZyb21WZXJ0aWNlcyhib2R5LnZlcnRpY2VzKTtcbiAgICAgICAgYm9keS5hcmVhID0gVmVydGljZXMuYXJlYShib2R5LnZlcnRpY2VzKTtcbiAgICAgICAgQm9keS5zZXRNYXNzKGJvZHksIGJvZHkuZGVuc2l0eSAqIGJvZHkuYXJlYSk7XG5cbiAgICAgICAgLy8gb3JpZW50IHZlcnRpY2VzIGFyb3VuZCB0aGUgY2VudHJlIG9mIG1hc3MgYXQgb3JpZ2luICgwLCAwKVxuICAgICAgICB2YXIgY2VudHJlID0gVmVydGljZXMuY2VudHJlKGJvZHkudmVydGljZXMpO1xuICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUoYm9keS52ZXJ0aWNlcywgY2VudHJlLCAtMSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGluZXJ0aWEgd2hpbGUgdmVydGljZXMgYXJlIGF0IG9yaWdpbiAoMCwgMClcbiAgICAgICAgQm9keS5zZXRJbmVydGlhKGJvZHksIEJvZHkuX2luZXJ0aWFTY2FsZSAqIFZlcnRpY2VzLmluZXJ0aWEoYm9keS52ZXJ0aWNlcywgYm9keS5tYXNzKSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGdlb21ldHJ5XG4gICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShib2R5LnZlcnRpY2VzLCBib2R5LnBvc2l0aW9uKTtcbiAgICAgICAgQm91bmRzLnVwZGF0ZShib2R5LmJvdW5kcywgYm9keS52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBhcnRzIG9mIHRoZSBgYm9keWAgYW5kIHVwZGF0ZXMgbWFzcywgaW5lcnRpYSBhbmQgY2VudHJvaWQuXG4gICAgICogRWFjaCBwYXJ0IHdpbGwgaGF2ZSBpdHMgcGFyZW50IHNldCB0byBgYm9keWAuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgY29udmV4IGh1bGwgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNvbXB1dGVkIGFuZCBzZXQgb24gYGJvZHlgLCB1bmxlc3MgYGF1dG9IdWxsYCBpcyBzZXQgdG8gYGZhbHNlLmBcbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBtZXRob2Qgd2lsbCBlbnN1cmUgdGhhdCB0aGUgZmlyc3QgcGFydCBpbiBgYm9keS5wYXJ0c2Agd2lsbCBhbHdheXMgYmUgdGhlIGBib2R5YC5cbiAgICAgKiBAbWV0aG9kIHNldFBhcnRzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIFtib2R5XSBwYXJ0c1xuICAgICAqIEBwYXJhbSB7Ym9vbH0gW2F1dG9IdWxsPXRydWVdXG4gICAgICovXG4gICAgQm9keS5zZXRQYXJ0cyA9IGZ1bmN0aW9uKGJvZHksIHBhcnRzLCBhdXRvSHVsbCkge1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICAvLyBhZGQgYWxsIHRoZSBwYXJ0cywgZW5zdXJpbmcgdGhhdCB0aGUgZmlyc3QgcGFydCBpcyBhbHdheXMgdGhlIHBhcmVudCBib2R5XG4gICAgICAgIHBhcnRzID0gcGFydHMuc2xpY2UoMCk7XG4gICAgICAgIGJvZHkucGFydHMubGVuZ3RoID0gMDtcbiAgICAgICAgYm9keS5wYXJ0cy5wdXNoKGJvZHkpO1xuICAgICAgICBib2R5LnBhcmVudCA9IGJvZHk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuICAgICAgICAgICAgaWYgKHBhcnQgIT09IGJvZHkpIHtcbiAgICAgICAgICAgICAgICBwYXJ0LnBhcmVudCA9IGJvZHk7XG4gICAgICAgICAgICAgICAgYm9keS5wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHkucGFydHMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGF1dG9IdWxsID0gdHlwZW9mIGF1dG9IdWxsICE9PSAndW5kZWZpbmVkJyA/IGF1dG9IdWxsIDogdHJ1ZTtcblxuICAgICAgICAvLyBmaW5kIHRoZSBjb252ZXggaHVsbCBvZiBhbGwgcGFydHMgdG8gc2V0IG9uIHRoZSBwYXJlbnQgYm9keVxuICAgICAgICBpZiAoYXV0b0h1bGwpIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVydGljZXMgPSB2ZXJ0aWNlcy5jb25jYXQocGFydHNbaV0udmVydGljZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBWZXJ0aWNlcy5jbG9ja3dpc2VTb3J0KHZlcnRpY2VzKTtcblxuICAgICAgICAgICAgdmFyIGh1bGwgPSBWZXJ0aWNlcy5odWxsKHZlcnRpY2VzKSxcbiAgICAgICAgICAgICAgICBodWxsQ2VudHJlID0gVmVydGljZXMuY2VudHJlKGh1bGwpO1xuXG4gICAgICAgICAgICBCb2R5LnNldFZlcnRpY2VzKGJvZHksIGh1bGwpO1xuICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKGJvZHkudmVydGljZXMsIGh1bGxDZW50cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3VtIHRoZSBwcm9wZXJ0aWVzIG9mIGFsbCBjb21wb3VuZCBwYXJ0cyBvZiB0aGUgcGFyZW50IGJvZHlcbiAgICAgICAgdmFyIHRvdGFsID0gQm9keS5fdG90YWxQcm9wZXJ0aWVzKGJvZHkpO1xuXG4gICAgICAgIGJvZHkuYXJlYSA9IHRvdGFsLmFyZWE7XG4gICAgICAgIGJvZHkucGFyZW50ID0gYm9keTtcbiAgICAgICAgYm9keS5wb3NpdGlvbi54ID0gdG90YWwuY2VudHJlLng7XG4gICAgICAgIGJvZHkucG9zaXRpb24ueSA9IHRvdGFsLmNlbnRyZS55O1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gdG90YWwuY2VudHJlLng7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgPSB0b3RhbC5jZW50cmUueTtcblxuICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgdG90YWwubWFzcyk7XG4gICAgICAgIEJvZHkuc2V0SW5lcnRpYShib2R5LCB0b3RhbC5pbmVydGlhKTtcbiAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB0b3RhbC5jZW50cmUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgYm9keSBpbnN0YW50bHkuIFZlbG9jaXR5LCBhbmdsZSwgZm9yY2UgZXRjLiBhcmUgdW5jaGFuZ2VkLlxuICAgICAqIEBtZXRob2Qgc2V0UG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9zaXRpb25cbiAgICAgKi9cbiAgICBCb2R5LnNldFBvc2l0aW9uID0gZnVuY3Rpb24oYm9keSwgcG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGRlbHRhID0gVmVjdG9yLnN1Yihwb3NpdGlvbiwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnggKz0gZGVsdGEueDtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSArPSBkZWx0YS55O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuICAgICAgICAgICAgcGFydC5wb3NpdGlvbi54ICs9IGRlbHRhLng7XG4gICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnkgKz0gZGVsdGEueTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCBkZWx0YSk7XG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKHBhcnQuYm91bmRzLCBwYXJ0LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhbmdsZSBvZiB0aGUgYm9keSBpbnN0YW50bHkuIEFuZ3VsYXIgdmVsb2NpdHksIHBvc2l0aW9uLCBmb3JjZSBldGMuIGFyZSB1bmNoYW5nZWQuXG4gICAgICogQG1ldGhvZCBzZXRBbmdsZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqL1xuICAgIEJvZHkuc2V0QW5nbGUgPSBmdW5jdGlvbihib2R5LCBhbmdsZSkge1xuICAgICAgICB2YXIgZGVsdGEgPSBhbmdsZSAtIGJvZHkuYW5nbGU7XG4gICAgICAgIGJvZHkuYW5nbGVQcmV2ICs9IGRlbHRhO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuICAgICAgICAgICAgcGFydC5hbmdsZSArPSBkZWx0YTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnJvdGF0ZShwYXJ0LnZlcnRpY2VzLCBkZWx0YSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgICAgICBBeGVzLnJvdGF0ZShwYXJ0LmF4ZXMsIGRlbHRhKTtcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZUFib3V0KHBhcnQucG9zaXRpb24sIGRlbHRhLCBib2R5LnBvc2l0aW9uLCBwYXJ0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaW5lYXIgdmVsb2NpdHkgb2YgdGhlIGJvZHkgaW5zdGFudGx5LiBQb3NpdGlvbiwgYW5nbGUsIGZvcmNlIGV0Yy4gYXJlIHVuY2hhbmdlZC4gU2VlIGFsc28gYEJvZHkuYXBwbHlGb3JjZWAuXG4gICAgICogQG1ldGhvZCBzZXRWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWxvY2l0eVxuICAgICAqL1xuICAgIEJvZHkuc2V0VmVsb2NpdHkgPSBmdW5jdGlvbihib2R5LCB2ZWxvY2l0eSkge1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gYm9keS5wb3NpdGlvbi54IC0gdmVsb2NpdHkueDtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSA9IGJvZHkucG9zaXRpb24ueSAtIHZlbG9jaXR5Lnk7XG4gICAgICAgIGJvZHkudmVsb2NpdHkueCA9IHZlbG9jaXR5Lng7XG4gICAgICAgIGJvZHkudmVsb2NpdHkueSA9IHZlbG9jaXR5Lnk7XG4gICAgICAgIGJvZHkuc3BlZWQgPSBWZWN0b3IubWFnbml0dWRlKGJvZHkudmVsb2NpdHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhbmd1bGFyIHZlbG9jaXR5IG9mIHRoZSBib2R5IGluc3RhbnRseS4gUG9zaXRpb24sIGFuZ2xlLCBmb3JjZSBldGMuIGFyZSB1bmNoYW5nZWQuIFNlZSBhbHNvIGBCb2R5LmFwcGx5Rm9yY2VgLlxuICAgICAqIEBtZXRob2Qgc2V0QW5ndWxhclZlbG9jaXR5XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZlbG9jaXR5XG4gICAgICovXG4gICAgQm9keS5zZXRBbmd1bGFyVmVsb2NpdHkgPSBmdW5jdGlvbihib2R5LCB2ZWxvY2l0eSkge1xuICAgICAgICBib2R5LmFuZ2xlUHJldiA9IGJvZHkuYW5nbGUgLSB2ZWxvY2l0eTtcbiAgICAgICAgYm9keS5hbmd1bGFyVmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICAgICAgYm9keS5hbmd1bGFyU3BlZWQgPSBNYXRoLmFicyhib2R5LmFuZ3VsYXJWZWxvY2l0eSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgYm9keSBieSBhIGdpdmVuIHZlY3RvciByZWxhdGl2ZSB0byBpdHMgY3VycmVudCBwb3NpdGlvbiwgd2l0aG91dCBpbXBhcnRpbmcgYW55IHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2QgdHJhbnNsYXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHRyYW5zbGF0aW9uXG4gICAgICovXG4gICAgQm9keS50cmFuc2xhdGUgPSBmdW5jdGlvbihib2R5LCB0cmFuc2xhdGlvbikge1xuICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIFZlY3Rvci5hZGQoYm9keS5wb3NpdGlvbiwgdHJhbnNsYXRpb24pKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIGJvZHkgYnkgYSBnaXZlbiBhbmdsZSByZWxhdGl2ZSB0byBpdHMgY3VycmVudCBhbmdsZSwgd2l0aG91dCBpbXBhcnRpbmcgYW55IGFuZ3VsYXIgdmVsb2NpdHkuXG4gICAgICogQG1ldGhvZCByb3RhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm90YXRpb25cbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gW3BvaW50XVxuICAgICAqL1xuICAgIEJvZHkucm90YXRlID0gZnVuY3Rpb24oYm9keSwgcm90YXRpb24sIHBvaW50KSB7XG4gICAgICAgIGlmICghcG9pbnQpIHtcbiAgICAgICAgICAgIEJvZHkuc2V0QW5nbGUoYm9keSwgYm9keS5hbmdsZSArIHJvdGF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhyb3RhdGlvbiksXG4gICAgICAgICAgICAgICAgc2luID0gTWF0aC5zaW4ocm90YXRpb24pLFxuICAgICAgICAgICAgICAgIGR4ID0gYm9keS5wb3NpdGlvbi54IC0gcG9pbnQueCxcbiAgICAgICAgICAgICAgICBkeSA9IGJvZHkucG9zaXRpb24ueSAtIHBvaW50Lnk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIHtcbiAgICAgICAgICAgICAgICB4OiBwb2ludC54ICsgKGR4ICogY29zIC0gZHkgKiBzaW4pLFxuICAgICAgICAgICAgICAgIHk6IHBvaW50LnkgKyAoZHggKiBzaW4gKyBkeSAqIGNvcylcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBCb2R5LnNldEFuZ2xlKGJvZHksIGJvZHkuYW5nbGUgKyByb3RhdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2NhbGVzIHRoZSBib2R5LCBpbmNsdWRpbmcgdXBkYXRpbmcgcGh5c2ljYWwgcHJvcGVydGllcyAobWFzcywgYXJlYSwgYXhlcywgaW5lcnRpYSksIGZyb20gYSB3b3JsZC1zcGFjZSBwb2ludCAoZGVmYXVsdCBpcyBib2R5IGNlbnRyZSkuXG4gICAgICogQG1ldGhvZCBzY2FsZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtwb2ludF1cbiAgICAgKi9cbiAgICBCb2R5LnNjYWxlID0gZnVuY3Rpb24oYm9keSwgc2NhbGVYLCBzY2FsZVksIHBvaW50KSB7XG4gICAgICAgIHZhciB0b3RhbEFyZWEgPSAwLFxuICAgICAgICAgICAgdG90YWxJbmVydGlhID0gMDtcblxuICAgICAgICBwb2ludCA9IHBvaW50IHx8IGJvZHkucG9zaXRpb247XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5LnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbaV07XG5cbiAgICAgICAgICAgIC8vIHNjYWxlIHZlcnRpY2VzXG4gICAgICAgICAgICBWZXJ0aWNlcy5zY2FsZShwYXJ0LnZlcnRpY2VzLCBzY2FsZVgsIHNjYWxlWSwgcG9pbnQpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgcHJvcGVydGllc1xuICAgICAgICAgICAgcGFydC5heGVzID0gQXhlcy5mcm9tVmVydGljZXMocGFydC52ZXJ0aWNlcyk7XG4gICAgICAgICAgICBwYXJ0LmFyZWEgPSBWZXJ0aWNlcy5hcmVhKHBhcnQudmVydGljZXMpO1xuICAgICAgICAgICAgQm9keS5zZXRNYXNzKHBhcnQsIGJvZHkuZGVuc2l0eSAqIHBhcnQuYXJlYSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBpbmVydGlhIChyZXF1aXJlcyB2ZXJ0aWNlcyB0byBiZSBhdCBvcmlnaW4pXG4gICAgICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUocGFydC52ZXJ0aWNlcywgeyB4OiAtcGFydC5wb3NpdGlvbi54LCB5OiAtcGFydC5wb3NpdGlvbi55IH0pO1xuICAgICAgICAgICAgQm9keS5zZXRJbmVydGlhKHBhcnQsIEJvZHkuX2luZXJ0aWFTY2FsZSAqIFZlcnRpY2VzLmluZXJ0aWEocGFydC52ZXJ0aWNlcywgcGFydC5tYXNzKSk7XG4gICAgICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUocGFydC52ZXJ0aWNlcywgeyB4OiBwYXJ0LnBvc2l0aW9uLngsIHk6IHBhcnQucG9zaXRpb24ueSB9KTtcblxuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgdG90YWxBcmVhICs9IHBhcnQuYXJlYTtcbiAgICAgICAgICAgICAgICB0b3RhbEluZXJ0aWEgKz0gcGFydC5pbmVydGlhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzY2FsZSBwb3NpdGlvblxuICAgICAgICAgICAgcGFydC5wb3NpdGlvbi54ID0gcG9pbnQueCArIChwYXJ0LnBvc2l0aW9uLnggLSBwb2ludC54KSAqIHNjYWxlWDtcbiAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueSA9IHBvaW50LnkgKyAocGFydC5wb3NpdGlvbi55IC0gcG9pbnQueSkgKiBzY2FsZVk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBib3VuZHNcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIHBhcmVudCBib2R5XG4gICAgICAgIGlmIChib2R5LnBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGJvZHkuYXJlYSA9IHRvdGFsQXJlYTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LmlzU3RhdGljKSB7XG4gICAgICAgICAgICAgICAgQm9keS5zZXRNYXNzKGJvZHksIGJvZHkuZGVuc2l0eSAqIHRvdGFsQXJlYSk7XG4gICAgICAgICAgICAgICAgQm9keS5zZXRJbmVydGlhKGJvZHksIHRvdGFsSW5lcnRpYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgY2lyY2xlc1xuICAgICAgICBpZiAoYm9keS5jaXJjbGVSYWRpdXMpIHsgXG4gICAgICAgICAgICBpZiAoc2NhbGVYID09PSBzY2FsZVkpIHtcbiAgICAgICAgICAgICAgICBib2R5LmNpcmNsZVJhZGl1cyAqPSBzY2FsZVg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGJvZHkgaXMgbm8gbG9uZ2VyIGEgY2lyY2xlXG4gICAgICAgICAgICAgICAgYm9keS5jaXJjbGVSYWRpdXMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgc2ltdWxhdGlvbiBzdGVwIGZvciB0aGUgZ2l2ZW4gYGJvZHlgLCBpbmNsdWRpbmcgdXBkYXRpbmcgcG9zaXRpb24gYW5kIGFuZ2xlIHVzaW5nIFZlcmxldCBpbnRlZ3JhdGlvbi5cbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWx0YVRpbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNjYWxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvcnJlY3Rpb25cbiAgICAgKi9cbiAgICBCb2R5LnVwZGF0ZSA9IGZ1bmN0aW9uKGJvZHksIGRlbHRhVGltZSwgdGltZVNjYWxlLCBjb3JyZWN0aW9uKSB7XG4gICAgICAgIHZhciBkZWx0YVRpbWVTcXVhcmVkID0gTWF0aC5wb3coZGVsdGFUaW1lICogdGltZVNjYWxlICogYm9keS50aW1lU2NhbGUsIDIpO1xuXG4gICAgICAgIC8vIGZyb20gdGhlIHByZXZpb3VzIHN0ZXBcbiAgICAgICAgdmFyIGZyaWN0aW9uQWlyID0gMSAtIGJvZHkuZnJpY3Rpb25BaXIgKiB0aW1lU2NhbGUgKiBib2R5LnRpbWVTY2FsZSxcbiAgICAgICAgICAgIHZlbG9jaXR5UHJldlggPSBib2R5LnBvc2l0aW9uLnggLSBib2R5LnBvc2l0aW9uUHJldi54LFxuICAgICAgICAgICAgdmVsb2NpdHlQcmV2WSA9IGJvZHkucG9zaXRpb24ueSAtIGJvZHkucG9zaXRpb25QcmV2Lnk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHZlbG9jaXR5IHdpdGggVmVybGV0IGludGVncmF0aW9uXG4gICAgICAgIGJvZHkudmVsb2NpdHkueCA9ICh2ZWxvY2l0eVByZXZYICogZnJpY3Rpb25BaXIgKiBjb3JyZWN0aW9uKSArIChib2R5LmZvcmNlLnggLyBib2R5Lm1hc3MpICogZGVsdGFUaW1lU3F1YXJlZDtcbiAgICAgICAgYm9keS52ZWxvY2l0eS55ID0gKHZlbG9jaXR5UHJldlkgKiBmcmljdGlvbkFpciAqIGNvcnJlY3Rpb24pICsgKGJvZHkuZm9yY2UueSAvIGJvZHkubWFzcykgKiBkZWx0YVRpbWVTcXVhcmVkO1xuXG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnggPSBib2R5LnBvc2l0aW9uLng7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgPSBib2R5LnBvc2l0aW9uLnk7XG4gICAgICAgIGJvZHkucG9zaXRpb24ueCArPSBib2R5LnZlbG9jaXR5Lng7XG4gICAgICAgIGJvZHkucG9zaXRpb24ueSArPSBib2R5LnZlbG9jaXR5Lnk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGFuZ3VsYXIgdmVsb2NpdHkgd2l0aCBWZXJsZXQgaW50ZWdyYXRpb25cbiAgICAgICAgYm9keS5hbmd1bGFyVmVsb2NpdHkgPSAoKGJvZHkuYW5nbGUgLSBib2R5LmFuZ2xlUHJldikgKiBmcmljdGlvbkFpciAqIGNvcnJlY3Rpb24pICsgKGJvZHkudG9ycXVlIC8gYm9keS5pbmVydGlhKSAqIGRlbHRhVGltZVNxdWFyZWQ7XG4gICAgICAgIGJvZHkuYW5nbGVQcmV2ID0gYm9keS5hbmdsZTtcbiAgICAgICAgYm9keS5hbmdsZSArPSBib2R5LmFuZ3VsYXJWZWxvY2l0eTtcblxuICAgICAgICAvLyB0cmFjayBzcGVlZCBhbmQgYWNjZWxlcmF0aW9uXG4gICAgICAgIGJvZHkuc3BlZWQgPSBWZWN0b3IubWFnbml0dWRlKGJvZHkudmVsb2NpdHkpO1xuICAgICAgICBib2R5LmFuZ3VsYXJTcGVlZCA9IE1hdGguYWJzKGJvZHkuYW5ndWxhclZlbG9jaXR5KTtcblxuICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIGJvZHkgZ2VvbWV0cnlcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5LnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbaV07XG5cbiAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi54ICs9IGJvZHkudmVsb2NpdHkueDtcbiAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnkgKz0gYm9keS52ZWxvY2l0eS55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYm9keS5hbmd1bGFyVmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBWZXJ0aWNlcy5yb3RhdGUocGFydC52ZXJ0aWNlcywgYm9keS5hbmd1bGFyVmVsb2NpdHksIGJvZHkucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIEF4ZXMucm90YXRlKHBhcnQuYXhlcywgYm9keS5hbmd1bGFyVmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBWZWN0b3Iucm90YXRlQWJvdXQocGFydC5wb3NpdGlvbiwgYm9keS5hbmd1bGFyVmVsb2NpdHksIGJvZHkucG9zaXRpb24sIHBhcnQucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShwYXJ0LmJvdW5kcywgcGFydC52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBhIGZvcmNlIHRvIGEgYm9keSBmcm9tIGEgZ2l2ZW4gd29ybGQtc3BhY2UgcG9zaXRpb24sIGluY2x1ZGluZyByZXN1bHRpbmcgdG9ycXVlLlxuICAgICAqIEBtZXRob2QgYXBwbHlGb3JjZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBmb3JjZVxuICAgICAqL1xuICAgIEJvZHkuYXBwbHlGb3JjZSA9IGZ1bmN0aW9uKGJvZHksIHBvc2l0aW9uLCBmb3JjZSkge1xuICAgICAgICBib2R5LmZvcmNlLnggKz0gZm9yY2UueDtcbiAgICAgICAgYm9keS5mb3JjZS55ICs9IGZvcmNlLnk7XG4gICAgICAgIHZhciBvZmZzZXQgPSB7IHg6IHBvc2l0aW9uLnggLSBib2R5LnBvc2l0aW9uLngsIHk6IHBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uLnkgfTtcbiAgICAgICAgYm9keS50b3JxdWUgKz0gb2Zmc2V0LnggKiBmb3JjZS55IC0gb2Zmc2V0LnkgKiBmb3JjZS54O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdW1zIG9mIHRoZSBwcm9wZXJ0aWVzIG9mIGFsbCBjb21wb3VuZCBwYXJ0cyBvZiB0aGUgcGFyZW50IGJvZHkuXG4gICAgICogQG1ldGhvZCBfdG90YWxQcm9wZXJ0aWVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHt9XG4gICAgICovXG4gICAgQm9keS5fdG90YWxQcm9wZXJ0aWVzID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgICAvLyBmcm9tIGVxdWF0aW9ucyBhdDpcbiAgICAgICAgLy8gaHR0cHM6Ly9lY291cnNlcy5vdS5lZHUvY2dpLWJpbi9lYm9vay5jZ2k/ZG9jPSZ0b3BpYz1zdCZjaGFwX3NlYz0wNy4yJnBhZ2U9dGhlb3J5XG4gICAgICAgIC8vIGh0dHA6Ly9vdXRwdXQudG8vc2lkZXdheS9kZWZhdWx0LmFzcD9xbm89MTIxMTAwMDg3XG5cbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBtYXNzOiAwLFxuICAgICAgICAgICAgYXJlYTogMCxcbiAgICAgICAgICAgIGluZXJ0aWE6IDAsXG4gICAgICAgICAgICBjZW50cmU6IHsgeDogMCwgeTogMCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3VtIHRoZSBwcm9wZXJ0aWVzIG9mIGFsbCBjb21wb3VuZCBwYXJ0cyBvZiB0aGUgcGFyZW50IGJvZHlcbiAgICAgICAgZm9yICh2YXIgaSA9IGJvZHkucGFydHMubGVuZ3RoID09PSAxID8gMCA6IDE7IGkgPCBib2R5LnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbaV0sXG4gICAgICAgICAgICAgICAgbWFzcyA9IHBhcnQubWFzcyAhPT0gSW5maW5pdHkgPyBwYXJ0Lm1hc3MgOiAxO1xuXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLm1hc3MgKz0gbWFzcztcbiAgICAgICAgICAgIHByb3BlcnRpZXMuYXJlYSArPSBwYXJ0LmFyZWE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmluZXJ0aWEgKz0gcGFydC5pbmVydGlhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5jZW50cmUgPSBWZWN0b3IuYWRkKHByb3BlcnRpZXMuY2VudHJlLCBWZWN0b3IubXVsdChwYXJ0LnBvc2l0aW9uLCBtYXNzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wZXJ0aWVzLmNlbnRyZSA9IFZlY3Rvci5kaXYocHJvcGVydGllcy5jZW50cmUsIHByb3BlcnRpZXMubWFzcyk7XG5cbiAgICAgICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIEV2ZW50cyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBib2R5IHN0YXJ0cyBzbGVlcGluZyAod2hlcmUgYHRoaXNgIGlzIHRoZSBib2R5KS5cbiAgICAqXG4gICAgKiBAZXZlbnQgc2xlZXBTdGFydFxuICAgICogQHRoaXMge2JvZHl9IFRoZSBib2R5IHRoYXQgaGFzIHN0YXJ0ZWQgc2xlZXBpbmdcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIGEgYm9keSBlbmRzIHNsZWVwaW5nICh3aGVyZSBgdGhpc2AgaXMgdGhlIGJvZHkpLlxuICAgICpcbiAgICAqIEBldmVudCBzbGVlcEVuZFxuICAgICogQHRoaXMge2JvZHl9IFRoZSBib2R5IHRoYXQgaGFzIGVuZGVkIHNsZWVwaW5nXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZWdlciBgTnVtYmVyYCB1bmlxdWVseSBpZGVudGlmeWluZyBudW1iZXIgZ2VuZXJhdGVkIGluIGBCb2R5LmNyZWF0ZWAgYnkgYENvbW1vbi5uZXh0SWRgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIGRlbm90aW5nIHRoZSB0eXBlIG9mIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0eXBlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJib2R5XCJcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFyYml0cmFyeSBgU3RyaW5nYCBuYW1lIHRvIGhlbHAgdGhlIHVzZXIgaWRlbnRpZnkgYW5kIG1hbmFnZSBib2RpZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbGFiZWxcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcIkJvZHlcIlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgYm9kaWVzIHRoYXQgbWFrZSB1cCB0aGlzIGJvZHkuIFxuICAgICAqIFRoZSBmaXJzdCBib2R5IGluIHRoZSBhcnJheSBtdXN0IGFsd2F5cyBiZSBhIHNlbGYgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGJvZHkgaW5zdGFuY2UuXG4gICAgICogQWxsIGJvZGllcyBpbiB0aGUgYHBhcnRzYCBhcnJheSB0b2dldGhlciBmb3JtIGEgc2luZ2xlIHJpZ2lkIGNvbXBvdW5kIGJvZHkuXG4gICAgICogUGFydHMgYXJlIGFsbG93ZWQgdG8gb3ZlcmxhcCwgaGF2ZSBnYXBzIG9yIGhvbGVzIG9yIGV2ZW4gZm9ybSBjb25jYXZlIGJvZGllcy5cbiAgICAgKiBQYXJ0cyB0aGVtc2VsdmVzIHNob3VsZCBuZXZlciBiZSBhZGRlZCB0byBhIGBXb3JsZGAsIG9ubHkgdGhlIHBhcmVudCBib2R5IHNob3VsZCBiZS5cbiAgICAgKiBVc2UgYEJvZHkuc2V0UGFydHNgIHdoZW4gc2V0dGluZyBwYXJ0cyB0byBlbnN1cmUgY29ycmVjdCB1cGRhdGVzIG9mIGFsbCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBhcnRzXG4gICAgICogQHR5cGUgYm9keVtdXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgcmVzZXJ2ZWQgZm9yIHN0b3JpbmcgcGx1Z2luLXNwZWNpZmljIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGx1Z2luXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgc2VsZiByZWZlcmVuY2UgaWYgdGhlIGJvZHkgaXMgX25vdF8gYSBwYXJ0IG9mIGFub3RoZXIgYm9keS5cbiAgICAgKiBPdGhlcndpc2UgdGhpcyBpcyBhIHJlZmVyZW5jZSB0byB0aGUgYm9keSB0aGF0IHRoaXMgaXMgYSBwYXJ0IG9mLlxuICAgICAqIFNlZSBgYm9keS5wYXJ0c2AuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGFyZW50XG4gICAgICogQHR5cGUgYm9keVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCBzcGVjaWZ5aW5nIHRoZSBhbmdsZSBvZiB0aGUgYm9keSwgaW4gcmFkaWFucy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBhbmdsZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGBWZWN0b3JgIG9iamVjdHMgdGhhdCBzcGVjaWZ5IHRoZSBjb252ZXggaHVsbCBvZiB0aGUgcmlnaWQgYm9keS5cbiAgICAgKiBUaGVzZSBzaG91bGQgYmUgcHJvdmlkZWQgYWJvdXQgdGhlIG9yaWdpbiBgKDAsIDApYC4gRS5nLlxuICAgICAqXG4gICAgICogICAgIFt7IHg6IDAsIHk6IDAgfSwgeyB4OiAyNSwgeTogNTAgfSwgeyB4OiA1MCwgeTogMCB9XVxuICAgICAqXG4gICAgICogV2hlbiBwYXNzZWQgdmlhIGBCb2R5LmNyZWF0ZWAsIHRoZSB2ZXJ0aWNlcyBhcmUgdHJhbnNsYXRlZCByZWxhdGl2ZSB0byBgYm9keS5wb3NpdGlvbmAgKGkuZS4gd29ybGQtc3BhY2UsIGFuZCBjb25zdGFudGx5IHVwZGF0ZWQgYnkgYEJvZHkudXBkYXRlYCBkdXJpbmcgc2ltdWxhdGlvbikuXG4gICAgICogVGhlIGBWZWN0b3JgIG9iamVjdHMgYXJlIGFsc28gYXVnbWVudGVkIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHJlcXVpcmVkIGZvciBlZmZpY2llbnQgY29sbGlzaW9uIGRldGVjdGlvbi4gXG4gICAgICpcbiAgICAgKiBPdGhlciBwcm9wZXJ0aWVzIHN1Y2ggYXMgYGluZXJ0aWFgIGFuZCBgYm91bmRzYCBhcmUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGZyb20gdGhlIHBhc3NlZCB2ZXJ0aWNlcyAodW5sZXNzIHByb3ZpZGVkIHZpYSBgb3B0aW9uc2ApLlxuICAgICAqIENvbmNhdmUgaHVsbHMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLiBUaGUgbW9kdWxlIGBNYXR0ZXIuVmVydGljZXNgIGNvbnRhaW5zIHVzZWZ1bCBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdmVydGljZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdmVydGljZXNcbiAgICAgKiBAdHlwZSB2ZWN0b3JbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IHNwZWNpZmllcyB0aGUgY3VycmVudCB3b3JsZC1zcGFjZSBwb3NpdGlvbiBvZiB0aGUgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwb3NpdGlvblxuICAgICAqIEB0eXBlIHZlY3RvclxuICAgICAqIEBkZWZhdWx0IHsgeDogMCwgeTogMCB9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBWZWN0b3JgIHRoYXQgc3BlY2lmaWVzIHRoZSBmb3JjZSB0byBhcHBseSBpbiB0aGUgY3VycmVudCBzdGVwLiBJdCBpcyB6ZXJvZWQgYWZ0ZXIgZXZlcnkgYEJvZHkudXBkYXRlYC4gU2VlIGFsc28gYEJvZHkuYXBwbHlGb3JjZWAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZm9yY2VcbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgdG9ycXVlICh0dXJuaW5nIGZvcmNlKSB0byBhcHBseSBpbiB0aGUgY3VycmVudCBzdGVwLiBJdCBpcyB6ZXJvZWQgYWZ0ZXIgZXZlcnkgYEJvZHkudXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0b3JxdWVcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgY3VycmVudCBzcGVlZCBvZiB0aGUgYm9keSBhZnRlciB0aGUgbGFzdCBgQm9keS51cGRhdGVgLiBJdCBpcyByZWFkLW9ubHkgYW5kIGFsd2F5cyBwb3NpdGl2ZSAoaXQncyB0aGUgbWFnbml0dWRlIG9mIGBib2R5LnZlbG9jaXR5YCkuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgc3BlZWRcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgY3VycmVudCBhbmd1bGFyIHNwZWVkIG9mIHRoZSBib2R5IGFmdGVyIHRoZSBsYXN0IGBCb2R5LnVwZGF0ZWAuIEl0IGlzIHJlYWQtb25seSBhbmQgYWx3YXlzIHBvc2l0aXZlIChpdCdzIHRoZSBtYWduaXR1ZGUgb2YgYGJvZHkuYW5ndWxhclZlbG9jaXR5YCkuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgYW5ndWxhclNwZWVkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IF9tZWFzdXJlc18gdGhlIGN1cnJlbnQgdmVsb2NpdHkgb2YgdGhlIGJvZHkgYWZ0ZXIgdGhlIGxhc3QgYEJvZHkudXBkYXRlYC4gSXQgaXMgcmVhZC1vbmx5LiBcbiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgYSBib2R5J3MgdmVsb2NpdHkgZGlyZWN0bHksIHlvdSBzaG91bGQgZWl0aGVyIGFwcGx5IGEgZm9yY2Ugb3Igc2ltcGx5IGNoYW5nZSB0aGUgYm9keSdzIGBwb3NpdGlvbmAgKGFzIHRoZSBlbmdpbmUgdXNlcyBwb3NpdGlvbi1WZXJsZXQgaW50ZWdyYXRpb24pLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IHZlbG9jaXR5XG4gICAgICogQHR5cGUgdmVjdG9yXG4gICAgICogQGRlZmF1bHQgeyB4OiAwLCB5OiAwIH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBfbWVhc3VyZXNfIHRoZSBjdXJyZW50IGFuZ3VsYXIgdmVsb2NpdHkgb2YgdGhlIGJvZHkgYWZ0ZXIgdGhlIGxhc3QgYEJvZHkudXBkYXRlYC4gSXQgaXMgcmVhZC1vbmx5LiBcbiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgYSBib2R5J3MgYW5ndWxhciB2ZWxvY2l0eSBkaXJlY3RseSwgeW91IHNob3VsZCBhcHBseSBhIHRvcnF1ZSBvciBzaW1wbHkgY2hhbmdlIHRoZSBib2R5J3MgYGFuZ2xlYCAoYXMgdGhlIGVuZ2luZSB1c2VzIHBvc2l0aW9uLVZlcmxldCBpbnRlZ3JhdGlvbikuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgYW5ndWxhclZlbG9jaXR5XG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgYSBib2R5IGlzIGNvbnNpZGVyZWQgc3RhdGljLiBBIHN0YXRpYyBib2R5IGNhbiBuZXZlciBjaGFuZ2UgcG9zaXRpb24gb3IgYW5nbGUgYW5kIGlzIGNvbXBsZXRlbHkgZml4ZWQuXG4gICAgICogSWYgeW91IG5lZWQgdG8gc2V0IGEgYm9keSBhcyBzdGF0aWMgYWZ0ZXIgaXRzIGNyZWF0aW9uLCB5b3Ugc2hvdWxkIHVzZSBgQm9keS5zZXRTdGF0aWNgIGFzIHRoaXMgcmVxdWlyZXMgbW9yZSB0aGFuIGp1c3Qgc2V0dGluZyB0aGlzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNTdGF0aWNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGEgYm9keSBpcyBhIHNlbnNvci4gU2Vuc29yIHRyaWdnZXJzIGNvbGxpc2lvbiBldmVudHMsIGJ1dCBkb2Vzbid0IHJlYWN0IHdpdGggY29sbGlkaW5nIGJvZHkgcGh5c2ljYWxseS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpc1NlbnNvclxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGJvZHkgaXMgY29uc2lkZXJlZCBzbGVlcGluZy4gQSBzbGVlcGluZyBib2R5IGFjdHMgc2ltaWxhciB0byBhIHN0YXRpYyBib2R5LCBleGNlcHQgaXQgaXMgb25seSB0ZW1wb3JhcnkgYW5kIGNhbiBiZSBhd29rZW4uXG4gICAgICogSWYgeW91IG5lZWQgdG8gc2V0IGEgYm9keSBhcyBzbGVlcGluZywgeW91IHNob3VsZCB1c2UgYFNsZWVwaW5nLnNldGAgYXMgdGhpcyByZXF1aXJlcyBtb3JlIHRoYW4ganVzdCBzZXR0aW5nIHRoaXMgZmxhZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpc1NsZWVwaW5nXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgYW1vdW50IG9mIG1vdmVtZW50IGEgYm9keSBjdXJyZW50bHkgaGFzIChhIGNvbWJpbmF0aW9uIG9mIGBzcGVlZGAgYW5kIGBhbmd1bGFyU3BlZWRgKS4gSXQgaXMgcmVhZC1vbmx5IGFuZCBhbHdheXMgcG9zaXRpdmUuXG4gICAgICogSXQgaXMgdXNlZCBhbmQgdXBkYXRlZCBieSB0aGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlIGR1cmluZyBzaW11bGF0aW9uIHRvIGRlY2lkZSBpZiBhIGJvZHkgaGFzIGNvbWUgdG8gcmVzdC5cbiAgICAgKlxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSBtb3Rpb25cbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgbnVtYmVyIG9mIHVwZGF0ZXMgaW4gd2hpY2ggdGhpcyBib2R5IG11c3QgaGF2ZSBuZWFyLXplcm8gdmVsb2NpdHkgYmVmb3JlIGl0IGlzIHNldCBhcyBzbGVlcGluZyBieSB0aGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlIChpZiBzbGVlcGluZyBpcyBlbmFibGVkIGJ5IHRoZSBlbmdpbmUpLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHNsZWVwVGhyZXNob2xkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgNjBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBkZW5zaXR5IG9mIHRoZSBib2R5LCB0aGF0IGlzIGl0cyBtYXNzIHBlciB1bml0IGFyZWEuXG4gICAgICogSWYgeW91IHBhc3MgdGhlIGRlbnNpdHkgdmlhIGBCb2R5LmNyZWF0ZWAgdGhlIGBtYXNzYCBwcm9wZXJ0eSBpcyBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgZm9yIHlvdSBiYXNlZCBvbiB0aGUgc2l6ZSAoYXJlYSkgb2YgdGhlIG9iamVjdC5cbiAgICAgKiBUaGlzIGlzIGdlbmVyYWxseSBwcmVmZXJhYmxlIHRvIHNpbXBseSBzZXR0aW5nIG1hc3MgYW5kIGFsbG93cyBmb3IgbW9yZSBpbnR1aXRpdmUgZGVmaW5pdGlvbiBvZiBtYXRlcmlhbHMgKGUuZy4gcm9jayBoYXMgYSBoaWdoZXIgZGVuc2l0eSB0aGFuIHdvb2QpLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGRlbnNpdHlcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwLjAwMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIG1hc3Mgb2YgdGhlIGJvZHksIGFsdGhvdWdoIGl0IG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlIHRvIHNwZWNpZnkgdGhlIGBkZW5zaXR5YCBwcm9wZXJ0eSBpbnN0ZWFkLlxuICAgICAqIElmIHlvdSBtb2RpZnkgdGhpcyB2YWx1ZSwgeW91IG11c3QgYWxzbyBtb2RpZnkgdGhlIGBib2R5LmludmVyc2VNYXNzYCBwcm9wZXJ0eSAoYDEgLyBtYXNzYCkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbWFzc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGludmVyc2UgbWFzcyBvZiB0aGUgYm9keSAoYDEgLyBtYXNzYCkuXG4gICAgICogSWYgeW91IG1vZGlmeSB0aGlzIHZhbHVlLCB5b3UgbXVzdCBhbHNvIG1vZGlmeSB0aGUgYGJvZHkubWFzc2AgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaW52ZXJzZU1hc3NcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBtb21lbnQgb2YgaW5lcnRpYSAoaS5lLiBzZWNvbmQgbW9tZW50IG9mIGFyZWEpIG9mIHRoZSBib2R5LlxuICAgICAqIEl0IGlzIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBmcm9tIHRoZSBnaXZlbiBjb252ZXggaHVsbCAoYHZlcnRpY2VzYCBhcnJheSkgYW5kIGRlbnNpdHkgaW4gYEJvZHkuY3JlYXRlYC5cbiAgICAgKiBJZiB5b3UgbW9kaWZ5IHRoaXMgdmFsdWUsIHlvdSBtdXN0IGFsc28gbW9kaWZ5IHRoZSBgYm9keS5pbnZlcnNlSW5lcnRpYWAgcHJvcGVydHkgKGAxIC8gaW5lcnRpYWApLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGluZXJ0aWFcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBpbnZlcnNlIG1vbWVudCBvZiBpbmVydGlhIG9mIHRoZSBib2R5IChgMSAvIGluZXJ0aWFgKS5cbiAgICAgKiBJZiB5b3UgbW9kaWZ5IHRoaXMgdmFsdWUsIHlvdSBtdXN0IGFsc28gbW9kaWZ5IHRoZSBgYm9keS5pbmVydGlhYCBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpbnZlcnNlSW5lcnRpYVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIHJlc3RpdHV0aW9uIChlbGFzdGljaXR5KSBvZiB0aGUgYm9keS4gVGhlIHZhbHVlIGlzIGFsd2F5cyBwb3NpdGl2ZSBhbmQgaXMgaW4gdGhlIHJhbmdlIGAoMCwgMSlgLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIGNvbGxpc2lvbnMgbWF5IGJlIHBlcmZlY3RseSBpbmVsYXN0aWMgYW5kIG5vIGJvdW5jaW5nIG1heSBvY2N1ci4gXG4gICAgICogQSB2YWx1ZSBvZiBgMC44YCBtZWFucyB0aGUgYm9keSBtYXkgYm91bmNlIGJhY2sgd2l0aCBhcHByb3hpbWF0ZWx5IDgwJSBvZiBpdHMga2luZXRpYyBlbmVyZ3kuXG4gICAgICogTm90ZSB0aGF0IGNvbGxpc2lvbiByZXNwb25zZSBpcyBiYXNlZCBvbiBfcGFpcnNfIG9mIGJvZGllcywgYW5kIHRoYXQgYHJlc3RpdHV0aW9uYCB2YWx1ZXMgYXJlIF9jb21iaW5lZF8gd2l0aCB0aGUgZm9sbG93aW5nIGZvcm11bGE6XG4gICAgICpcbiAgICAgKiAgICAgTWF0aC5tYXgoYm9keUEucmVzdGl0dXRpb24sIGJvZHlCLnJlc3RpdHV0aW9uKVxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlc3RpdHV0aW9uXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGZyaWN0aW9uIG9mIHRoZSBib2R5LiBUaGUgdmFsdWUgaXMgYWx3YXlzIHBvc2l0aXZlIGFuZCBpcyBpbiB0aGUgcmFuZ2UgYCgwLCAxKWAuXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgbWVhbnMgdGhhdCB0aGUgYm9keSBtYXkgc2xpZGUgaW5kZWZpbml0ZWx5LlxuICAgICAqIEEgdmFsdWUgb2YgYDFgIG1lYW5zIHRoZSBib2R5IG1heSBjb21lIHRvIGEgc3RvcCBhbG1vc3QgaW5zdGFudGx5IGFmdGVyIGEgZm9yY2UgaXMgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFRoZSBlZmZlY3RzIG9mIHRoZSB2YWx1ZSBtYXkgYmUgbm9uLWxpbmVhci4gXG4gICAgICogSGlnaCB2YWx1ZXMgbWF5IGJlIHVuc3RhYmxlIGRlcGVuZGluZyBvbiB0aGUgYm9keS5cbiAgICAgKiBUaGUgZW5naW5lIHVzZXMgYSBDb3Vsb21iIGZyaWN0aW9uIG1vZGVsIGluY2x1ZGluZyBzdGF0aWMgYW5kIGtpbmV0aWMgZnJpY3Rpb24uXG4gICAgICogTm90ZSB0aGF0IGNvbGxpc2lvbiByZXNwb25zZSBpcyBiYXNlZCBvbiBfcGFpcnNfIG9mIGJvZGllcywgYW5kIHRoYXQgYGZyaWN0aW9uYCB2YWx1ZXMgYXJlIF9jb21iaW5lZF8gd2l0aCB0aGUgZm9sbG93aW5nIGZvcm11bGE6XG4gICAgICpcbiAgICAgKiAgICAgTWF0aC5taW4oYm9keUEuZnJpY3Rpb24sIGJvZHlCLmZyaWN0aW9uKVxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGZyaWN0aW9uXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4xXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgc3RhdGljIGZyaWN0aW9uIG9mIHRoZSBib2R5IChpbiB0aGUgQ291bG9tYiBmcmljdGlvbiBtb2RlbCkuIFxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIHRoZSBib2R5IHdpbGwgbmV2ZXIgJ3N0aWNrJyB3aGVuIGl0IGlzIG5lYXJseSBzdGF0aW9uYXJ5IGFuZCBvbmx5IGR5bmFtaWMgYGZyaWN0aW9uYCBpcyB1c2VkLlxuICAgICAqIFRoZSBoaWdoZXIgdGhlIHZhbHVlIChlLmcuIGAxMGApLCB0aGUgbW9yZSBmb3JjZSBpdCB3aWxsIHRha2UgdG8gaW5pdGlhbGx5IGdldCB0aGUgYm9keSBtb3Zpbmcgd2hlbiBuZWFybHkgc3RhdGlvbmFyeS5cbiAgICAgKiBUaGlzIHZhbHVlIGlzIG11bHRpcGxpZWQgd2l0aCB0aGUgYGZyaWN0aW9uYCBwcm9wZXJ0eSB0byBtYWtlIGl0IGVhc2llciB0byBjaGFuZ2UgYGZyaWN0aW9uYCBhbmQgbWFpbnRhaW4gYW4gYXBwcm9wcmlhdGUgYW1vdW50IG9mIHN0YXRpYyBmcmljdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBmcmljdGlvblN0YXRpY1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuNVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGFpciBmcmljdGlvbiBvZiB0aGUgYm9keSAoYWlyIHJlc2lzdGFuY2UpLiBcbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyB0aGUgYm9keSB3aWxsIG5ldmVyIHNsb3cgYXMgaXQgbW92ZXMgdGhyb3VnaCBzcGFjZS5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIGZhc3RlciBhIGJvZHkgc2xvd3Mgd2hlbiBtb3ZpbmcgdGhyb3VnaCBzcGFjZS5cbiAgICAgKiBUaGUgZWZmZWN0cyBvZiB0aGUgdmFsdWUgYXJlIG5vbi1saW5lYXIuIFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGZyaWN0aW9uQWlyXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4wMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBmaWx0ZXJpbmcgcHJvcGVydGllcyBvZiB0aGlzIGJvZHkuXG4gICAgICpcbiAgICAgKiBDb2xsaXNpb25zIGJldHdlZW4gdHdvIGJvZGllcyB3aWxsIG9iZXkgdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICAgKiAtIElmIHRoZSB0d28gYm9kaWVzIGhhdmUgdGhlIHNhbWUgbm9uLXplcm8gdmFsdWUgb2YgYGNvbGxpc2lvbkZpbHRlci5ncm91cGAsXG4gICAgICogICB0aGV5IHdpbGwgYWx3YXlzIGNvbGxpZGUgaWYgdGhlIHZhbHVlIGlzIHBvc2l0aXZlLCBhbmQgdGhleSB3aWxsIG5ldmVyIGNvbGxpZGVcbiAgICAgKiAgIGlmIHRoZSB2YWx1ZSBpcyBuZWdhdGl2ZS5cbiAgICAgKiAtIElmIHRoZSB0d28gYm9kaWVzIGhhdmUgZGlmZmVyZW50IHZhbHVlcyBvZiBgY29sbGlzaW9uRmlsdGVyLmdyb3VwYCBvciBpZiBvbmVcbiAgICAgKiAgIChvciBib3RoKSBvZiB0aGUgYm9kaWVzIGhhcyBhIHZhbHVlIG9mIDAsIHRoZW4gdGhlIGNhdGVnb3J5L21hc2sgcnVsZXMgYXBwbHkgYXMgZm9sbG93czpcbiAgICAgKlxuICAgICAqIEVhY2ggYm9keSBiZWxvbmdzIHRvIGEgY29sbGlzaW9uIGNhdGVnb3J5LCBnaXZlbiBieSBgY29sbGlzaW9uRmlsdGVyLmNhdGVnb3J5YC4gVGhpc1xuICAgICAqIHZhbHVlIGlzIHVzZWQgYXMgYSBiaXQgZmllbGQgYW5kIHRoZSBjYXRlZ29yeSBzaG91bGQgaGF2ZSBvbmx5IG9uZSBiaXQgc2V0LCBtZWFuaW5nIHRoYXRcbiAgICAgKiB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSBpcyBhIHBvd2VyIG9mIHR3byBpbiB0aGUgcmFuZ2UgWzEsIDJeMzFdLiBUaHVzLCB0aGVyZSBhcmUgMzJcbiAgICAgKiBkaWZmZXJlbnQgY29sbGlzaW9uIGNhdGVnb3JpZXMgYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogRWFjaCBib2R5IGFsc28gZGVmaW5lcyBhIGNvbGxpc2lvbiBiaXRtYXNrLCBnaXZlbiBieSBgY29sbGlzaW9uRmlsdGVyLm1hc2tgIHdoaWNoIHNwZWNpZmllc1xuICAgICAqIHRoZSBjYXRlZ29yaWVzIGl0IGNvbGxpZGVzIHdpdGggKHRoZSB2YWx1ZSBpcyB0aGUgYml0d2lzZSBBTkQgdmFsdWUgb2YgYWxsIHRoZXNlIGNhdGVnb3JpZXMpLlxuICAgICAqXG4gICAgICogVXNpbmcgdGhlIGNhdGVnb3J5L21hc2sgcnVsZXMsIHR3byBib2RpZXMgYEFgIGFuZCBgQmAgY29sbGlkZSBpZiBlYWNoIGluY2x1ZGVzIHRoZSBvdGhlcidzXG4gICAgICogY2F0ZWdvcnkgaW4gaXRzIG1hc2ssIGkuZS4gYChjYXRlZ29yeUEgJiBtYXNrQikgIT09IDBgIGFuZCBgKGNhdGVnb3J5QiAmIG1hc2tBKSAhPT0gMGBcbiAgICAgKiBhcmUgYm90aCB0cnVlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gSW50ZWdlciBgTnVtYmVyYCwgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBncm91cCB0aGlzIGJvZHkgYmVsb25ncyB0by5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb2xsaXNpb25GaWx0ZXIuZ3JvdXBcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGJpdCBmaWVsZCB0aGF0IHNwZWNpZmllcyB0aGUgY29sbGlzaW9uIGNhdGVnb3J5IHRoaXMgYm9keSBiZWxvbmdzIHRvLlxuICAgICAqIFRoZSBjYXRlZ29yeSB2YWx1ZSBzaG91bGQgaGF2ZSBvbmx5IG9uZSBiaXQgc2V0LCBmb3IgZXhhbXBsZSBgMHgwMDAxYC5cbiAgICAgKiBUaGlzIG1lYW5zIHRoZXJlIGFyZSB1cCB0byAzMiB1bmlxdWUgY29sbGlzaW9uIGNhdGVnb3JpZXMgYXZhaWxhYmxlLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlci5jYXRlZ29yeVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYml0IG1hc2sgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBjYXRlZ29yaWVzIHRoaXMgYm9keSBtYXkgY29sbGlkZSB3aXRoLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlci5tYXNrXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgLTFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgYSB0b2xlcmFuY2Ugb24gaG93IGZhciBhIGJvZHkgaXMgYWxsb3dlZCB0byAnc2luaycgb3Igcm90YXRlIGludG8gb3RoZXIgYm9kaWVzLlxuICAgICAqIEF2b2lkIGNoYW5naW5nIHRoaXMgdmFsdWUgdW5sZXNzIHlvdSB1bmRlcnN0YW5kIHRoZSBwdXJwb3NlIG9mIGBzbG9wYCBpbiBwaHlzaWNzIGVuZ2luZXMuXG4gICAgICogVGhlIGRlZmF1bHQgc2hvdWxkIGdlbmVyYWxseSBzdWZmaWNlLCBhbHRob3VnaCB2ZXJ5IGxhcmdlIGJvZGllcyBtYXkgcmVxdWlyZSBsYXJnZXIgdmFsdWVzIGZvciBzdGFibGUgc3RhY2tpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgc2xvcFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuMDVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBhbGxvd3MgcGVyLWJvZHkgdGltZSBzY2FsaW5nLCBlLmcuIGEgZm9yY2UtZmllbGQgd2hlcmUgYm9kaWVzIGluc2lkZSBhcmUgaW4gc2xvdy1tb3Rpb24sIHdoaWxlIG90aGVycyBhcmUgYXQgZnVsbCBzcGVlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0aW1lU2NhbGVcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBgT2JqZWN0YCB0aGF0IGRlZmluZXMgdGhlIHJlbmRlcmluZyBwcm9wZXJ0aWVzIHRvIGJlIGNvbnN1bWVkIGJ5IHRoZSBtb2R1bGUgYE1hdHRlci5SZW5kZXJgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBib2R5IHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIudmlzaWJsZVxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBvcGFjaXR5IHRvIHVzZSB3aGVuIHJlbmRlcmluZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIub3BhY2l0eVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBkZWZpbmVzIHRoZSBzcHJpdGUgcHJvcGVydGllcyB0byB1c2Ugd2hlbiByZW5kZXJpbmcsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBgU3RyaW5nYCB0aGF0IGRlZmluZXMgdGhlIHBhdGggdG8gdGhlIGltYWdlIHRvIHVzZSBhcyB0aGUgc3ByaXRlIHRleHR1cmUsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnRleHR1cmVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKi9cbiAgICAgXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIHNjYWxpbmcgaW4gdGhlIHgtYXhpcyBmb3IgdGhlIHNwcml0ZSwgaWYgYW55LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5zcHJpdGUueFNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIHNjYWxpbmcgaW4gdGhlIHktYXhpcyBmb3IgdGhlIHNwcml0ZSwgaWYgYW55LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5zcHJpdGUueVNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSB4LWF4aXMgZm9yIHRoZSBzcHJpdGUgKG5vcm1hbGlzZWQgYnkgdGV4dHVyZSB3aWR0aCkuXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnhPZmZzZXRcbiAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHktYXhpcyBmb3IgdGhlIHNwcml0ZSAobm9ybWFsaXNlZCBieSB0ZXh0dXJlIGhlaWdodCkuXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnlPZmZzZXRcbiAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgbGluZSB3aWR0aCB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGJvZHkgb3V0bGluZSAoaWYgYSBzcHJpdGUgaXMgbm90IGRlZmluZWQpLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIG5vIG91dGxpbmUgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIubGluZVdpZHRoXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCB0aGF0IGRlZmluZXMgdGhlIGZpbGwgc3R5bGUgdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRoZSBib2R5IChpZiBhIHNwcml0ZSBpcyBub3QgZGVmaW5lZCkuXG4gICAgICogSXQgaXMgdGhlIHNhbWUgYXMgd2hlbiB1c2luZyBhIGNhbnZhcywgc28gaXQgYWNjZXB0cyBDU1Mgc3R5bGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5maWxsU3R5bGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBhIHJhbmRvbSBjb2xvdXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgdGhhdCBkZWZpbmVzIHRoZSBzdHJva2Ugc3R5bGUgdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRoZSBib2R5IG91dGxpbmUgKGlmIGEgc3ByaXRlIGlzIG5vdCBkZWZpbmVkKS5cbiAgICAgKiBJdCBpcyB0aGUgc2FtZSBhcyB3aGVuIHVzaW5nIGEgY2FudmFzLCBzbyBpdCBhY2NlcHRzIENTUyBzdHlsZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnN0cm9rZVN0eWxlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgYSByYW5kb20gY29sb3VyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiB1bmlxdWUgYXhpcyB2ZWN0b3JzIChlZGdlIG5vcm1hbHMpIHVzZWQgZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24uXG4gICAgICogVGhlc2UgYXJlIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBmcm9tIHRoZSBnaXZlbiBjb252ZXggaHVsbCAoYHZlcnRpY2VzYCBhcnJheSkgaW4gYEJvZHkuY3JlYXRlYC5cbiAgICAgKiBUaGV5IGFyZSBjb25zdGFudGx5IHVwZGF0ZWQgYnkgYEJvZHkudXBkYXRlYCBkdXJpbmcgdGhlIHNpbXVsYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYXhlc1xuICAgICAqIEB0eXBlIHZlY3RvcltdXG4gICAgICovXG4gICAgIFxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBfbWVhc3VyZXNfIHRoZSBhcmVhIG9mIHRoZSBib2R5J3MgY29udmV4IGh1bGwsIGNhbGN1bGF0ZWQgYXQgY3JlYXRpb24gYnkgYEJvZHkuY3JlYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBhcmVhXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBCb3VuZHNgIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIEFBQkIgcmVnaW9uIGZvciB0aGUgYm9keS5cbiAgICAgKiBJdCBpcyBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgZnJvbSB0aGUgZ2l2ZW4gY29udmV4IGh1bGwgKGB2ZXJ0aWNlc2AgYXJyYXkpIGluIGBCb2R5LmNyZWF0ZWAgYW5kIGNvbnN0YW50bHkgdXBkYXRlZCBieSBgQm9keS51cGRhdGVgIGR1cmluZyBzaW11bGF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvdW5kc1xuICAgICAqIEB0eXBlIGJvdW5kc1xuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL1NsZWVwaW5nXCI6MjIsXCIuLi9nZW9tZXRyeS9BeGVzXCI6MjUsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOSxcIi4uL3JlbmRlci9SZW5kZXJcIjozMX1dLDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbXBvc2l0ZWAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgY29tcG9zaXRlIGJvZGllcy5cbiogQSBjb21wb3NpdGUgYm9keSBpcyBhIGNvbGxlY3Rpb24gb2YgYE1hdHRlci5Cb2R5YCwgYE1hdHRlci5Db25zdHJhaW50YCBhbmQgb3RoZXIgYE1hdHRlci5Db21wb3NpdGVgLCB0aGVyZWZvcmUgY29tcG9zaXRlcyBmb3JtIGEgdHJlZSBzdHJ1Y3R1cmUuXG4qIEl0IGlzIGltcG9ydGFudCB0byB1c2UgdGhlIGZ1bmN0aW9ucyBpbiB0aGlzIG1vZHVsZSB0byBtb2RpZnkgY29tcG9zaXRlcywgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoZWlyIHByb3BlcnRpZXMuXG4qIE5vdGUgdGhhdCB0aGUgYE1hdHRlci5Xb3JsZGAgb2JqZWN0IGlzIGFsc28gYSB0eXBlIG9mIGBNYXR0ZXIuQ29tcG9zaXRlYCBhbmQgYXMgc3VjaCBhbGwgY29tcG9zaXRlIG1ldGhvZHMgaGVyZSBjYW4gYWxzbyBvcGVyYXRlIG9uIGEgYE1hdHRlci5Xb3JsZGAuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBDb21wb3NpdGVcbiovXG5cbnZhciBDb21wb3NpdGUgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb3NpdGU7XG5cbnZhciBFdmVudHMgPSBfZGVyZXFfKCcuLi9jb3JlL0V2ZW50cycpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG52YXIgQm9keSA9IF9kZXJlcV8oJy4vQm9keScpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbXBvc2l0ZS4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJpdGVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uZXh0ZW5kKHsgXG4gICAgICAgICAgICBpZDogQ29tbW9uLm5leHRJZCgpLFxuICAgICAgICAgICAgdHlwZTogJ2NvbXBvc2l0ZScsXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICBpc01vZGlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIGJvZGllczogW10sIFxuICAgICAgICAgICAgY29uc3RyYWludHM6IFtdLCBcbiAgICAgICAgICAgIGNvbXBvc2l0ZXM6IFtdLFxuICAgICAgICAgICAgbGFiZWw6ICdDb21wb3NpdGUnLFxuICAgICAgICAgICAgcGx1Z2luOiB7fVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29tcG9zaXRlJ3MgYGlzTW9kaWZpZWRgIGZsYWcuIFxuICAgICAqIElmIGB1cGRhdGVQYXJlbnRzYCBpcyB0cnVlLCBhbGwgcGFyZW50cyB3aWxsIGJlIHNldCAoZGVmYXVsdDogZmFsc2UpLlxuICAgICAqIElmIGB1cGRhdGVDaGlsZHJlbmAgaXMgdHJ1ZSwgYWxsIGNoaWxkcmVuIHdpbGwgYmUgc2V0IChkZWZhdWx0OiBmYWxzZSkuXG4gICAgICogQG1ldGhvZCBzZXRNb2RpZmllZFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTW9kaWZpZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVQYXJlbnRzPWZhbHNlXVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZUNoaWxkcmVuPWZhbHNlXVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgaXNNb2RpZmllZCwgdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4pIHtcbiAgICAgICAgY29tcG9zaXRlLmlzTW9kaWZpZWQgPSBpc01vZGlmaWVkO1xuXG4gICAgICAgIGlmICh1cGRhdGVQYXJlbnRzICYmIGNvbXBvc2l0ZS5wYXJlbnQpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUucGFyZW50LCBpc01vZGlmaWVkLCB1cGRhdGVQYXJlbnRzLCB1cGRhdGVDaGlsZHJlbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXBkYXRlQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZENvbXBvc2l0ZSA9IGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldO1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjaGlsZENvbXBvc2l0ZSwgaXNNb2RpZmllZCwgdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyaWMgYWRkIGZ1bmN0aW9uLiBBZGRzIG9uZSBvciBtYW55IGJvZHkocyksIGNvbnN0cmFpbnQocykgb3IgYSBjb21wb3NpdGUocykgdG8gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBUcmlnZ2VycyBgYmVmb3JlQWRkYCBhbmQgYGFmdGVyQWRkYCBldmVudHMgb24gdGhlIGBjb21wb3NpdGVgLlxuICAgICAqIEBtZXRob2QgYWRkXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgb2JqZWN0cyBhZGRlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hZGQgPSBmdW5jdGlvbihjb21wb3NpdGUsIG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqZWN0cyA9IFtdLmNvbmNhdChvYmplY3QpO1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGNvbXBvc2l0ZSwgJ2JlZm9yZUFkZCcsIHsgb2JqZWN0OiBvYmplY3QgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gb2JqZWN0c1tpXTtcblxuICAgICAgICAgICAgc3dpdGNoIChvYmoudHlwZSkge1xuXG4gICAgICAgICAgICBjYXNlICdib2R5JzpcbiAgICAgICAgICAgICAgICAvLyBza2lwIGFkZGluZyBjb21wb3VuZCBwYXJ0c1xuICAgICAgICAgICAgICAgIGlmIChvYmoucGFyZW50ICE9PSBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgQ29tbW9uLndhcm4oJ0NvbXBvc2l0ZS5hZGQ6IHNraXBwZWQgYWRkaW5nIGEgY29tcG91bmQgYm9keSBwYXJ0ICh5b3UgbXVzdCBhZGQgaXRzIHBhcmVudCBpbnN0ZWFkKScpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQm9keShjb21wb3NpdGUsIG9iaik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb25zdHJhaW50JzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIG9iaik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21wb3NpdGUnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb21wb3NpdGUoY29tcG9zaXRlLCBvYmopO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW91c2VDb25zdHJhaW50JzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIG9iai5jb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoY29tcG9zaXRlLCAnYWZ0ZXJBZGQnLCB7IG9iamVjdDogb2JqZWN0IH0pO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyaWMgcmVtb3ZlIGZ1bmN0aW9uLiBSZW1vdmVzIG9uZSBvciBtYW55IGJvZHkocyksIGNvbnN0cmFpbnQocykgb3IgYSBjb21wb3NpdGUocykgdG8gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBPcHRpb25hbGx5IHNlYXJjaGluZyBpdHMgY2hpbGRyZW4gcmVjdXJzaXZlbHkuXG4gICAgICogVHJpZ2dlcnMgYGJlZm9yZVJlbW92ZWAgYW5kIGBhZnRlclJlbW92ZWAgZXZlbnRzIG9uIHRoZSBgY29tcG9zaXRlYC5cbiAgICAgKiBAbWV0aG9kIHJlbW92ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgb2JqZWN0cyByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgb2JqZWN0LCBkZWVwKSB7XG4gICAgICAgIHZhciBvYmplY3RzID0gW10uY29uY2F0KG9iamVjdCk7XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoY29tcG9zaXRlLCAnYmVmb3JlUmVtb3ZlJywgeyBvYmplY3Q6IG9iamVjdCB9KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBvYmplY3RzW2ldO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG9iai50eXBlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVCb2R5KGNvbXBvc2l0ZSwgb2JqLCBkZWVwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbnN0cmFpbnQnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50KGNvbXBvc2l0ZSwgb2JqLCBkZWVwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBvc2l0ZSc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZShjb21wb3NpdGUsIG9iaiwgZGVlcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb3VzZUNvbnN0cmFpbnQnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50KGNvbXBvc2l0ZSwgb2JqLmNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBFdmVudHMudHJpZ2dlcihjb21wb3NpdGUsICdhZnRlclJlbW92ZScsIHsgb2JqZWN0OiBvYmplY3QgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGNvbXBvc2l0ZSB0byB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBhZGRDb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlQVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVCXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlQSB3aXRoIHRoZSBvYmplY3RzIGZyb20gY29tcG9zaXRlQiBhZGRlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hZGRDb21wb3NpdGUgPSBmdW5jdGlvbihjb21wb3NpdGVBLCBjb21wb3NpdGVCKSB7XG4gICAgICAgIGNvbXBvc2l0ZUEuY29tcG9zaXRlcy5wdXNoKGNvbXBvc2l0ZUIpO1xuICAgICAgICBjb21wb3NpdGVCLnBhcmVudCA9IGNvbXBvc2l0ZUE7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGVBLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGVBO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgY29tcG9zaXRlIGZyb20gdGhlIGdpdmVuIGNvbXBvc2l0ZSwgYW5kIG9wdGlvbmFsbHkgc2VhcmNoaW5nIGl0cyBjaGlsZHJlbiByZWN1cnNpdmVseS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcmVtb3ZlQ29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZUFcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlQlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlZXA9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlQSB3aXRoIHRoZSBjb21wb3NpdGUgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVDb21wb3NpdGUgPSBmdW5jdGlvbihjb21wb3NpdGVBLCBjb21wb3NpdGVCLCBkZWVwKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IENvbW1vbi5pbmRleE9mKGNvbXBvc2l0ZUEuY29tcG9zaXRlcywgY29tcG9zaXRlQik7XG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb21wb3NpdGVBdChjb21wb3NpdGVBLCBwb3NpdGlvbik7XG4gICAgICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlQSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlQS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29tcG9zaXRlKGNvbXBvc2l0ZUEuY29tcG9zaXRlc1tpXSwgY29tcG9zaXRlQiwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlQTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNvbXBvc2l0ZSBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUNvbXBvc2l0ZUF0XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvblxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBjb21wb3NpdGUgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVDb21wb3NpdGVBdCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgcG9zaXRpb24pIHtcbiAgICAgICAgY29tcG9zaXRlLmNvbXBvc2l0ZXMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgYm9keSB0byB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBhZGRCb2R5XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBib2R5IGFkZGVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFkZEJvZHkgPSBmdW5jdGlvbihjb21wb3NpdGUsIGJvZHkpIHtcbiAgICAgICAgY29tcG9zaXRlLmJvZGllcy5wdXNoKGJvZHkpO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBib2R5IGZyb20gdGhlIGdpdmVuIGNvbXBvc2l0ZSwgYW5kIG9wdGlvbmFsbHkgc2VhcmNoaW5nIGl0cyBjaGlsZHJlbiByZWN1cnNpdmVseS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcmVtb3ZlQm9keVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBib2R5IHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlQm9keSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgYm9keSwgZGVlcCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBDb21tb24uaW5kZXhPZihjb21wb3NpdGUuYm9kaWVzLCBib2R5KTtcbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUJvZHlBdChjb21wb3NpdGUsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQm9keShjb21wb3NpdGUuY29tcG9zaXRlc1tpXSwgYm9keSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgYm9keSBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUJvZHlBdFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgYm9keSByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUJvZHlBdCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgcG9zaXRpb24pIHtcbiAgICAgICAgY29tcG9zaXRlLmJvZGllcy5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBjb25zdHJhaW50IHRvIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGFkZENvbnN0cmFpbnRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGNvbnN0cmFpbnQgYWRkZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgY29uc3RyYWludCkge1xuICAgICAgICBjb21wb3NpdGUuY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgY29uc3RyYWludCBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUsIGFuZCBvcHRpb25hbGx5IHNlYXJjaGluZyBpdHMgY2hpbGRyZW4gcmVjdXJzaXZlbHkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUNvbnN0cmFpbnRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgY29uc3RyYWludCByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnQgPSBmdW5jdGlvbihjb21wb3NpdGUsIGNvbnN0cmFpbnQsIGRlZXApIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gQ29tbW9uLmluZGV4T2YoY29tcG9zaXRlLmNvbnN0cmFpbnRzLCBjb25zdHJhaW50KTtcbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnRBdChjb21wb3NpdGUsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29uc3RyYWludChjb21wb3NpdGUuY29tcG9zaXRlc1tpXSwgY29uc3RyYWludCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgYm9keSBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUNvbnN0cmFpbnRBdFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgY29uc3RyYWludCByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnRBdCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgcG9zaXRpb24pIHtcbiAgICAgICAgY29tcG9zaXRlLmNvbnN0cmFpbnRzLnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgYm9kaWVzLCBjb25zdHJhaW50cyBhbmQgY29tcG9zaXRlcyBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogT3B0aW9uYWxseSBjbGVhcmluZyBpdHMgY2hpbGRyZW4gcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGtlZXBTdGF0aWNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwPWZhbHNlXVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5jbGVhciA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwga2VlcFN0YXRpYywgZGVlcCkge1xuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLmNsZWFyKGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldLCBrZWVwU3RhdGljLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGtlZXBTdGF0aWMpIHtcbiAgICAgICAgICAgIGNvbXBvc2l0ZS5ib2RpZXMgPSBjb21wb3NpdGUuYm9kaWVzLmZpbHRlcihmdW5jdGlvbihib2R5KSB7IHJldHVybiBib2R5LmlzU3RhdGljOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBvc2l0ZS5ib2RpZXMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBvc2l0ZS5jb25zdHJhaW50cy5sZW5ndGggPSAwO1xuICAgICAgICBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGggPSAwO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgYm9kaWVzIGluIHRoZSBnaXZlbiBjb21wb3NpdGUsIGluY2x1ZGluZyBhbGwgYm9kaWVzIGluIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCBhbGxCb2RpZXNcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHJldHVybiB7Ym9keVtdfSBBbGwgdGhlIGJvZGllc1xuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hbGxCb2RpZXMgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgdmFyIGJvZGllcyA9IFtdLmNvbmNhdChjb21wb3NpdGUuYm9kaWVzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgYm9kaWVzID0gYm9kaWVzLmNvbmNhdChDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldKSk7XG5cbiAgICAgICAgcmV0dXJuIGJvZGllcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgY29uc3RyYWludHMgaW4gdGhlIGdpdmVuIGNvbXBvc2l0ZSwgaW5jbHVkaW5nIGFsbCBjb25zdHJhaW50cyBpbiBpdHMgY2hpbGRyZW4sIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBtZXRob2QgYWxsQ29uc3RyYWludHNcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHJldHVybiB7Y29uc3RyYWludFtdfSBBbGwgdGhlIGNvbnN0cmFpbnRzXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzID0gZnVuY3Rpb24oY29tcG9zaXRlKSB7XG4gICAgICAgIHZhciBjb25zdHJhaW50cyA9IFtdLmNvbmNhdChjb21wb3NpdGUuY29uc3RyYWludHMpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBjb25zdHJhaW50cyA9IGNvbnN0cmFpbnRzLmNvbmNhdChDb21wb3NpdGUuYWxsQ29uc3RyYWludHMoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0pKTtcblxuICAgICAgICByZXR1cm4gY29uc3RyYWludHM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGNvbXBvc2l0ZXMgaW4gdGhlIGdpdmVuIGNvbXBvc2l0ZSwgaW5jbHVkaW5nIGFsbCBjb21wb3NpdGVzIGluIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCBhbGxDb21wb3NpdGVzXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZVtdfSBBbGwgdGhlIGNvbXBvc2l0ZXNcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWxsQ29tcG9zaXRlcyA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSkge1xuICAgICAgICB2YXIgY29tcG9zaXRlcyA9IFtdLmNvbmNhdChjb21wb3NpdGUuY29tcG9zaXRlcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGNvbXBvc2l0ZXMgPSBjb21wb3NpdGVzLmNvbmNhdChDb21wb3NpdGUuYWxsQ29tcG9zaXRlcyhjb21wb3NpdGUuY29tcG9zaXRlc1tpXSkpO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyB0aGUgY29tcG9zaXRlIHJlY3Vyc2l2ZWx5IGZvciBhbiBvYmplY3QgbWF0Y2hpbmcgdGhlIHR5cGUgYW5kIGlkIHN1cHBsaWVkLCBudWxsIGlmIG5vdCBmb3VuZC5cbiAgICAgKiBAbWV0aG9kIGdldFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHJlcXVlc3RlZCBvYmplY3QsIGlmIGZvdW5kXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmdldCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgaWQsIHR5cGUpIHtcbiAgICAgICAgdmFyIG9iamVjdHMsXG4gICAgICAgICAgICBvYmplY3Q7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAgICAgb2JqZWN0cyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjb25zdHJhaW50JzpcbiAgICAgICAgICAgIG9iamVjdHMgPSBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMoY29tcG9zaXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjb21wb3NpdGUnOlxuICAgICAgICAgICAgb2JqZWN0cyA9IENvbXBvc2l0ZS5hbGxDb21wb3NpdGVzKGNvbXBvc2l0ZSkuY29uY2F0KGNvbXBvc2l0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2JqZWN0cylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIG9iamVjdCA9IG9iamVjdHMuZmlsdGVyKGZ1bmN0aW9uKG9iamVjdCkgeyBcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QuaWQudG9TdHJpbmcoKSA9PT0gaWQudG9TdHJpbmcoKTsgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvYmplY3QubGVuZ3RoID09PSAwID8gbnVsbCA6IG9iamVjdFswXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW92ZXMgdGhlIGdpdmVuIG9iamVjdChzKSBmcm9tIGNvbXBvc2l0ZUEgdG8gY29tcG9zaXRlQiAoZXF1YWwgdG8gYSByZW1vdmUgZm9sbG93ZWQgYnkgYW4gYWRkKS5cbiAgICAgKiBAbWV0aG9kIG1vdmVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZUF9IGNvbXBvc2l0ZUFcbiAgICAgKiBAcGFyYW0ge29iamVjdFtdfSBvYmplY3RzXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGVCfSBjb21wb3NpdGVCXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBSZXR1cm5zIGNvbXBvc2l0ZUFcbiAgICAgKi9cbiAgICBDb21wb3NpdGUubW92ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZUEsIG9iamVjdHMsIGNvbXBvc2l0ZUIpIHtcbiAgICAgICAgQ29tcG9zaXRlLnJlbW92ZShjb21wb3NpdGVBLCBvYmplY3RzKTtcbiAgICAgICAgQ29tcG9zaXRlLmFkZChjb21wb3NpdGVCLCBvYmplY3RzKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZUE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgbmV3IGlkcyBmb3IgYWxsIG9iamVjdHMgaW4gdGhlIGNvbXBvc2l0ZSwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCByZWJhc2VcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBSZXR1cm5zIGNvbXBvc2l0ZVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZWJhc2UgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKGNvbXBvc2l0ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KENvbXBvc2l0ZS5hbGxDb21wb3NpdGVzKGNvbXBvc2l0ZSkpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb2JqZWN0c1tpXS5pZCA9IENvbW1vbi5uZXh0SWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIGFsbCBjaGlsZHJlbiBpbiB0aGUgY29tcG9zaXRlIGJ5IGEgZ2l2ZW4gdmVjdG9yIHJlbGF0aXZlIHRvIHRoZWlyIGN1cnJlbnQgcG9zaXRpb25zLCBcbiAgICAgKiB3aXRob3V0IGltcGFydGluZyBhbnkgdmVsb2NpdHkuXG4gICAgICogQG1ldGhvZCB0cmFuc2xhdGVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHtib29sfSBbcmVjdXJzaXZlPXRydWVdXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgdHJhbnNsYXRpb24sIHJlY3Vyc2l2ZSkge1xuICAgICAgICB2YXIgYm9kaWVzID0gcmVjdXJzaXZlID8gQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUpIDogY29tcG9zaXRlLmJvZGllcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgQm9keS50cmFuc2xhdGUoYm9kaWVzW2ldLCB0cmFuc2xhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhbGwgY2hpbGRyZW4gaW4gdGhlIGNvbXBvc2l0ZSBieSBhIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBnaXZlbiBwb2ludCwgd2l0aG91dCBpbXBhcnRpbmcgYW55IGFuZ3VsYXIgdmVsb2NpdHkuXG4gICAgICogQG1ldGhvZCByb3RhdGVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHBhcmFtIHtib29sfSBbcmVjdXJzaXZlPXRydWVdXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJvdGF0ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgcm90YXRpb24sIHBvaW50LCByZWN1cnNpdmUpIHtcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKHJvdGF0aW9uKSxcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKHJvdGF0aW9uKSxcbiAgICAgICAgICAgIGJvZGllcyA9IHJlY3Vyc2l2ZSA/IENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlKSA6IGNvbXBvc2l0ZS5ib2RpZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIGR4ID0gYm9keS5wb3NpdGlvbi54IC0gcG9pbnQueCxcbiAgICAgICAgICAgICAgICBkeSA9IGJvZHkucG9zaXRpb24ueSAtIHBvaW50Lnk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIHtcbiAgICAgICAgICAgICAgICB4OiBwb2ludC54ICsgKGR4ICogY29zIC0gZHkgKiBzaW4pLFxuICAgICAgICAgICAgICAgIHk6IHBvaW50LnkgKyAoZHggKiBzaW4gKyBkeSAqIGNvcylcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBCb2R5LnJvdGF0ZShib2R5LCByb3RhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2NhbGVzIGFsbCBjaGlsZHJlbiBpbiB0aGUgY29tcG9zaXRlLCBpbmNsdWRpbmcgdXBkYXRpbmcgcGh5c2ljYWwgcHJvcGVydGllcyAobWFzcywgYXJlYSwgYXhlcywgaW5lcnRpYSksIGZyb20gYSB3b3JsZC1zcGFjZSBwb2ludC5cbiAgICAgKiBAbWV0aG9kIHNjYWxlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHBhcmFtIHtib29sfSBbcmVjdXJzaXZlPXRydWVdXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnNjYWxlID0gZnVuY3Rpb24oY29tcG9zaXRlLCBzY2FsZVgsIHNjYWxlWSwgcG9pbnQsIHJlY3Vyc2l2ZSkge1xuICAgICAgICB2YXIgYm9kaWVzID0gcmVjdXJzaXZlID8gQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUpIDogY29tcG9zaXRlLmJvZGllcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgZHggPSBib2R5LnBvc2l0aW9uLnggLSBwb2ludC54LFxuICAgICAgICAgICAgICAgIGR5ID0gYm9keS5wb3NpdGlvbi55IC0gcG9pbnQueTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwge1xuICAgICAgICAgICAgICAgIHg6IHBvaW50LnggKyBkeCAqIHNjYWxlWCxcbiAgICAgICAgICAgICAgICB5OiBwb2ludC55ICsgZHkgKiBzY2FsZVlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBCb2R5LnNjYWxlKGJvZHksIHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmlvbiBvZiB0aGUgYm91bmRzIG9mIGFsbCBvZiB0aGUgY29tcG9zaXRlJ3MgYm9kaWVzLlxuICAgICAqIEBtZXRob2QgYm91bmRzXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZSBUaGUgY29tcG9zaXRlLlxuICAgICAqIEByZXR1cm5zIHtib3VuZHN9IFRoZSBjb21wb3NpdGUgYm91bmRzLlxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5ib3VuZHMgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgdmFyIGJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlKSxcbiAgICAgICAgICAgIHZlcnRpY2VzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgdmVydGljZXMucHVzaChib2R5LmJvdW5kcy5taW4sIGJvZHkuYm91bmRzLm1heCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQm91bmRzLmNyZWF0ZSh2ZXJ0aWNlcyk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIEV2ZW50cyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBjYWxsIHRvIGBDb21wb3NpdGUuYWRkYCBpcyBtYWRlLCBiZWZvcmUgb2JqZWN0cyBoYXZlIGJlZW4gYWRkZWQuXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZUFkZFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm9iamVjdCBUaGUgb2JqZWN0KHMpIHRvIGJlIGFkZGVkIChtYXkgYmUgYSBzaW5nbGUgYm9keSwgY29uc3RyYWludCwgY29tcG9zaXRlIG9yIGEgbWl4ZWQgYXJyYXkgb2YgdGhlc2UpXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGNhbGwgdG8gYENvbXBvc2l0ZS5hZGRgIGlzIG1hZGUsIGFmdGVyIG9iamVjdHMgaGF2ZSBiZWVuIGFkZGVkLlxuICAgICpcbiAgICAqIEBldmVudCBhZnRlckFkZFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm9iamVjdCBUaGUgb2JqZWN0KHMpIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIChtYXkgYmUgYSBzaW5nbGUgYm9keSwgY29uc3RyYWludCwgY29tcG9zaXRlIG9yIGEgbWl4ZWQgYXJyYXkgb2YgdGhlc2UpXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGNhbGwgdG8gYENvbXBvc2l0ZS5yZW1vdmVgIGlzIG1hZGUsIGJlZm9yZSBvYmplY3RzIGhhdmUgYmVlbiByZW1vdmVkLlxuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVSZW1vdmVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5vYmplY3QgVGhlIG9iamVjdChzKSB0byBiZSByZW1vdmVkIChtYXkgYmUgYSBzaW5nbGUgYm9keSwgY29uc3RyYWludCwgY29tcG9zaXRlIG9yIGEgbWl4ZWQgYXJyYXkgb2YgdGhlc2UpXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGNhbGwgdG8gYENvbXBvc2l0ZS5yZW1vdmVgIGlzIG1hZGUsIGFmdGVyIG9iamVjdHMgaGF2ZSBiZWVuIHJlbW92ZWQuXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyUmVtb3ZlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQub2JqZWN0IFRoZSBvYmplY3QocykgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZCAobWF5IGJlIGEgc2luZ2xlIGJvZHksIGNvbnN0cmFpbnQsIGNvbXBvc2l0ZSBvciBhIG1peGVkIGFycmF5IG9mIHRoZXNlKVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdW5pcXVlbHkgaWRlbnRpZnlpbmcgbnVtYmVyIGdlbmVyYXRlZCBpbiBgQ29tcG9zaXRlLmNyZWF0ZWAgYnkgYENvbW1vbi5uZXh0SWRgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIGRlbm90aW5nIHRoZSB0eXBlIG9mIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0eXBlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJjb21wb3NpdGVcIlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJiaXRyYXJ5IGBTdHJpbmdgIG5hbWUgdG8gaGVscCB0aGUgdXNlciBpZGVudGlmeSBhbmQgbWFuYWdlIGNvbXBvc2l0ZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbGFiZWxcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcIkNvbXBvc2l0ZVwiXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgY29tcG9zaXRlIGhhcyBiZWVuIG1vZGlmaWVkIGR1cmluZyB0aGUgY3VycmVudCBzdGVwLlxuICAgICAqIE1vc3QgYE1hdHRlci5Db21wb3NpdGVgIG1ldGhvZHMgd2lsbCBhdXRvbWF0aWNhbGx5IHNldCB0aGlzIGZsYWcgdG8gYHRydWVgIHRvIGluZm9ybSB0aGUgZW5naW5lIG9mIGNoYW5nZXMgdG8gYmUgaGFuZGxlZC5cbiAgICAgKiBJZiB5b3UgbmVlZCB0byBjaGFuZ2UgaXQgbWFudWFsbHksIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLnNldE1vZGlmaWVkYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNNb2RpZmllZFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGBDb21wb3NpdGVgIHRoYXQgaXMgdGhlIHBhcmVudCBvZiB0aGlzIGNvbXBvc2l0ZS4gSXQgaXMgYXV0b21hdGljYWxseSBtYW5hZ2VkIGJ5IHRoZSBgTWF0dGVyLkNvbXBvc2l0ZWAgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwYXJlbnRcbiAgICAgKiBAdHlwZSBjb21wb3NpdGVcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBgQm9keWAgdGhhdCBhcmUgX2RpcmVjdF8gY2hpbGRyZW4gb2YgdGhpcyBjb21wb3NpdGUuXG4gICAgICogVG8gYWRkIG9yIHJlbW92ZSBib2RpZXMgeW91IHNob3VsZCB1c2UgYENvbXBvc2l0ZS5hZGRgIGFuZCBgQ29tcG9zaXRlLnJlbW92ZWAgbWV0aG9kcyByYXRoZXIgdGhhbiBkaXJlY3RseSBtb2RpZnlpbmcgdGhpcyBwcm9wZXJ0eS5cbiAgICAgKiBJZiB5b3Ugd2lzaCB0byByZWN1cnNpdmVseSBmaW5kIGFsbCBkZXNjZW5kYW50cywgeW91IHNob3VsZCB1c2UgdGhlIGBDb21wb3NpdGUuYWxsQm9kaWVzYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm9kaWVzXG4gICAgICogQHR5cGUgYm9keVtdXG4gICAgICogQGRlZmF1bHQgW11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGBDb25zdHJhaW50YCB0aGF0IGFyZSBfZGlyZWN0XyBjaGlsZHJlbiBvZiB0aGlzIGNvbXBvc2l0ZS5cbiAgICAgKiBUbyBhZGQgb3IgcmVtb3ZlIGNvbnN0cmFpbnRzIHlvdSBzaG91bGQgdXNlIGBDb21wb3NpdGUuYWRkYCBhbmQgYENvbXBvc2l0ZS5yZW1vdmVgIG1ldGhvZHMgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICogSWYgeW91IHdpc2ggdG8gcmVjdXJzaXZlbHkgZmluZCBhbGwgZGVzY2VuZGFudHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29uc3RyYWludHNcbiAgICAgKiBAdHlwZSBjb25zdHJhaW50W11cbiAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgYENvbXBvc2l0ZWAgdGhhdCBhcmUgX2RpcmVjdF8gY2hpbGRyZW4gb2YgdGhpcyBjb21wb3NpdGUuXG4gICAgICogVG8gYWRkIG9yIHJlbW92ZSBjb21wb3NpdGVzIHlvdSBzaG91bGQgdXNlIGBDb21wb3NpdGUuYWRkYCBhbmQgYENvbXBvc2l0ZS5yZW1vdmVgIG1ldGhvZHMgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICogSWYgeW91IHdpc2ggdG8gcmVjdXJzaXZlbHkgZmluZCBhbGwgZGVzY2VuZGFudHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXNgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb21wb3NpdGVzXG4gICAgICogQHR5cGUgY29tcG9zaXRlW11cbiAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHJlc2VydmVkIGZvciBzdG9yaW5nIHBsdWdpbi1zcGVjaWZpYyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBsdWdpblxuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvRXZlbnRzXCI6MTYsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4vQm9keVwiOjF9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Xb3JsZGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgdGhlIHdvcmxkIGNvbXBvc2l0ZS5cbiogQSBgTWF0dGVyLldvcmxkYCBpcyBhIGBNYXR0ZXIuQ29tcG9zaXRlYCBib2R5LCB3aGljaCBpcyBhIGNvbGxlY3Rpb24gb2YgYE1hdHRlci5Cb2R5YCwgYE1hdHRlci5Db25zdHJhaW50YCBhbmQgb3RoZXIgYE1hdHRlci5Db21wb3NpdGVgLlxuKiBBIGBNYXR0ZXIuV29ybGRgIGhhcyBhIGZldyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgaW5jbHVkaW5nIGBncmF2aXR5YCBhbmQgYGJvdW5kc2AuXG4qIEl0IGlzIGltcG9ydGFudCB0byB1c2UgdGhlIGZ1bmN0aW9ucyBpbiB0aGUgYE1hdHRlci5Db21wb3NpdGVgIG1vZHVsZSB0byBtb2RpZnkgdGhlIHdvcmxkIGNvbXBvc2l0ZSwgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIGl0cyBwcm9wZXJ0aWVzLlxuKiBUaGVyZSBhcmUgYWxzbyBhIGZldyBtZXRob2RzIGhlcmUgdGhhdCBhbGlhcyB0aG9zZSBpbiBgTWF0dGVyLkNvbXBvc2l0ZWAgZm9yIGVhc2llciByZWFkYWJpbGl0eS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIFdvcmxkXG4qIEBleHRlbmRzIENvbXBvc2l0ZVxuKi9cblxudmFyIFdvcmxkID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gV29ybGQ7XG5cbnZhciBDb21wb3NpdGUgPSBfZGVyZXFfKCcuL0NvbXBvc2l0ZScpO1xudmFyIENvbnN0cmFpbnQgPSBfZGVyZXFfKCcuLi9jb25zdHJhaW50L0NvbnN0cmFpbnQnKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHdvcmxkIGNvbXBvc2l0ZS4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7d29ybGR9IEEgbmV3IHdvcmxkXG4gICAgICovXG4gICAgV29ybGQuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgY29tcG9zaXRlID0gQ29tcG9zaXRlLmNyZWF0ZSgpO1xuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGxhYmVsOiAnV29ybGQnLFxuICAgICAgICAgICAgZ3Jhdml0eToge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMSxcbiAgICAgICAgICAgICAgICBzY2FsZTogMC4wMDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib3VuZHM6IHsgXG4gICAgICAgICAgICAgICAgbWluOiB7IHg6IC1JbmZpbml0eSwgeTogLUluZmluaXR5IH0sIFxuICAgICAgICAgICAgICAgIG1heDogeyB4OiBJbmZpbml0eSwgeTogSW5maW5pdHkgfSBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBDb21tb24uZXh0ZW5kKGNvbXBvc2l0ZSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBncmF2aXR5IHRvIGFwcGx5IG9uIHRoZSB3b3JsZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBncmF2aXR5XG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ3Jhdml0eSB4IGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBncmF2aXR5LnhcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ3Jhdml0eSB5IGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBncmF2aXR5LnlcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ3Jhdml0eSBzY2FsZSBmYWN0b3IuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZ3Jhdml0eS5zY2FsZVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IDAuMDAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBCb3VuZHNgIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIHdvcmxkIGJvdW5kcyBmb3IgY29sbGlzaW9uIGRldGVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib3VuZHNcbiAgICAgKiBAdHlwZSBib3VuZHNcbiAgICAgKiBAZGVmYXVsdCB7IG1pbjogeyB4OiAtSW5maW5pdHksIHk6IC1JbmZpbml0eSB9LCBtYXg6IHsgeDogSW5maW5pdHksIHk6IEluZmluaXR5IH0gfVxuICAgICAqL1xuXG4gICAgLy8gV29ybGQgaXMgYSBDb21wb3NpdGUgYm9keVxuICAgIC8vIHNlZSBzcmMvbW9kdWxlL091dHJvLmpzIGZvciB0aGVzZSBhbGlhc2VzOlxuICAgIFxuICAgIC8qKlxuICAgICAqIEFuIGFsaWFzIGZvciBDb21wb3NpdGUuYWRkXG4gICAgICogQG1ldGhvZCBhZGRcbiAgICAgKiBAcGFyYW0ge3dvcmxkfSB3b3JsZFxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCB3b3JsZCB3aXRoIHRoZSBvYmplY3RzIGFkZGVkXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhbGlhcyBmb3IgQ29tcG9zaXRlLnJlbW92ZVxuICAgICAqIEBtZXRob2QgcmVtb3ZlXG4gICAgICogQHBhcmFtIHt3b3JsZH0gd29ybGRcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCB3b3JsZCB3aXRoIHRoZSBvYmplY3RzIHJlbW92ZWRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFsaWFzIGZvciBDb21wb3NpdGUuY2xlYXJcbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHt3b3JsZH0gd29ybGRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGtlZXBTdGF0aWNcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFsaWFzIGZvciBDb21wb3NpdGUuYWRkQ29tcG9zaXRlXG4gICAgICogQG1ldGhvZCBhZGRDb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge3dvcmxkfSB3b3JsZFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcmV0dXJuIHt3b3JsZH0gVGhlIG9yaWdpbmFsIHdvcmxkIHdpdGggdGhlIG9iamVjdHMgZnJvbSBjb21wb3NpdGUgYWRkZWRcbiAgICAgKi9cbiAgICBcbiAgICAgLyoqXG4gICAgICAqIEFuIGFsaWFzIGZvciBDb21wb3NpdGUuYWRkQm9keVxuICAgICAgKiBAbWV0aG9kIGFkZEJvZHlcbiAgICAgICogQHBhcmFtIHt3b3JsZH0gd29ybGRcbiAgICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICAqIEByZXR1cm4ge3dvcmxkfSBUaGUgb3JpZ2luYWwgd29ybGQgd2l0aCB0aGUgYm9keSBhZGRlZFxuICAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQW4gYWxpYXMgZm9yIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50XG4gICAgICAqIEBtZXRob2QgYWRkQ29uc3RyYWludFxuICAgICAgKiBAcGFyYW0ge3dvcmxkfSB3b3JsZFxuICAgICAgKiBAcGFyYW0ge2NvbnN0cmFpbnR9IGNvbnN0cmFpbnRcbiAgICAgICogQHJldHVybiB7d29ybGR9IFRoZSBvcmlnaW5hbCB3b3JsZCB3aXRoIHRoZSBjb25zdHJhaW50IGFkZGVkXG4gICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vQ29tcG9zaXRlXCI6Mn1dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbnRhY3RgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGNvbGxpc2lvbiBjb250YWN0cy5cbipcbiogQGNsYXNzIENvbnRhY3RcbiovXG5cbnZhciBDb250YWN0ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGFjdDtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb250YWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt2ZXJ0ZXh9IHZlcnRleFxuICAgICAqIEByZXR1cm4ge2NvbnRhY3R9IEEgbmV3IGNvbnRhY3RcbiAgICAgKi9cbiAgICBDb250YWN0LmNyZWF0ZSA9IGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IENvbnRhY3QuaWQodmVydGV4KSxcbiAgICAgICAgICAgIHZlcnRleDogdmVydGV4LFxuICAgICAgICAgICAgbm9ybWFsSW1wdWxzZTogMCxcbiAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlOiAwXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBjb250YWN0IGlkLlxuICAgICAqIEBtZXRob2QgaWRcbiAgICAgKiBAcGFyYW0ge3ZlcnRleH0gdmVydGV4XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBVbmlxdWUgY29udGFjdElEXG4gICAgICovXG4gICAgQ29udGFjdC5pZCA9IGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgICByZXR1cm4gdmVydGV4LmJvZHkuaWQgKyAnXycgKyB2ZXJ0ZXguaW5kZXg7XG4gICAgfTtcblxufSkoKTtcblxufSx7fV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuRGV0ZWN0b3JgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBkZXRlY3RpbmcgY29sbGlzaW9ucyBnaXZlbiBhIHNldCBvZiBwYWlycy5cbipcbiogQGNsYXNzIERldGVjdG9yXG4qL1xuXG4vLyBUT0RPOiBzcGVjdWxhdGl2ZSBjb250YWN0c1xuXG52YXIgRGV0ZWN0b3IgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXRlY3RvcjtcblxudmFyIFNBVCA9IF9kZXJlcV8oJy4vU0FUJyk7XG52YXIgUGFpciA9IF9kZXJlcV8oJy4vUGFpcicpO1xudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhbGwgY29sbGlzaW9ucyBnaXZlbiBhIGxpc3Qgb2YgcGFpcnMuXG4gICAgICogQG1ldGhvZCBjb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtwYWlyW119IGJyb2FkcGhhc2VQYWlyc1xuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gY29sbGlzaW9uc1xuICAgICAqL1xuICAgIERldGVjdG9yLmNvbGxpc2lvbnMgPSBmdW5jdGlvbihicm9hZHBoYXNlUGFpcnMsIGVuZ2luZSkge1xuICAgICAgICB2YXIgY29sbGlzaW9ucyA9IFtdLFxuICAgICAgICAgICAgcGFpcnNUYWJsZSA9IGVuZ2luZS5wYWlycy50YWJsZTtcblxuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBicm9hZHBoYXNlUGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5QSA9IGJyb2FkcGhhc2VQYWlyc1tpXVswXSwgXG4gICAgICAgICAgICAgICAgYm9keUIgPSBicm9hZHBoYXNlUGFpcnNbaV1bMV07XG5cbiAgICAgICAgICAgIGlmICgoYm9keUEuaXNTdGF0aWMgfHwgYm9keUEuaXNTbGVlcGluZykgJiYgKGJvZHlCLmlzU3RhdGljIHx8IGJvZHlCLmlzU2xlZXBpbmcpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIURldGVjdG9yLmNhbkNvbGxpZGUoYm9keUEuY29sbGlzaW9uRmlsdGVyLCBib2R5Qi5jb2xsaXNpb25GaWx0ZXIpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG5cbiAgICAgICAgICAgIC8vIG1pZCBwaGFzZVxuICAgICAgICAgICAgaWYgKEJvdW5kcy5vdmVybGFwcyhib2R5QS5ib3VuZHMsIGJvZHlCLmJvdW5kcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gYm9keUEucGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBqIDwgYm9keUEucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRBID0gYm9keUEucGFydHNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IGJvZHlCLnBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgayA8IGJvZHlCLnBhcnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydEIgPSBib2R5Qi5wYXJ0c1trXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwYXJ0QSA9PT0gYm9keUEgJiYgcGFydEIgPT09IGJvZHlCKSB8fCBCb3VuZHMub3ZlcmxhcHMocGFydEEuYm91bmRzLCBwYXJ0Qi5ib3VuZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmluZCBhIHByZXZpb3VzIGNvbGxpc2lvbiB3ZSBjb3VsZCByZXVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWlySWQgPSBQYWlyLmlkKHBhcnRBLCBwYXJ0QiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhaXIgPSBwYWlyc1RhYmxlW3BhaXJJZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29sbGlzaW9uO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhaXIgJiYgcGFpci5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbGxpc2lvbiA9IHBhaXIuY29sbGlzaW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29sbGlzaW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuYXJyb3cgcGhhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gU0FULmNvbGxpZGVzKHBhcnRBLCBwYXJ0QiwgcHJldmlvdXNDb2xsaXNpb24pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uLmNvbGxpZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbnMucHVzaChjb2xsaXNpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2xsaXNpb25zO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBib3RoIHN1cHBsaWVkIGNvbGxpc2lvbiBmaWx0ZXJzIHdpbGwgYWxsb3cgYSBjb2xsaXNpb24gdG8gb2NjdXIuXG4gICAgICogU2VlIGBib2R5LmNvbGxpc2lvbkZpbHRlcmAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogQG1ldGhvZCBjYW5Db2xsaWRlXG4gICAgICogQHBhcmFtIHt9IGZpbHRlckFcbiAgICAgKiBAcGFyYW0ge30gZmlsdGVyQlxuICAgICAqIEByZXR1cm4ge2Jvb2x9IGB0cnVlYCBpZiBjb2xsaXNpb24gY2FuIG9jY3VyXG4gICAgICovXG4gICAgRGV0ZWN0b3IuY2FuQ29sbGlkZSA9IGZ1bmN0aW9uKGZpbHRlckEsIGZpbHRlckIpIHtcbiAgICAgICAgaWYgKGZpbHRlckEuZ3JvdXAgPT09IGZpbHRlckIuZ3JvdXAgJiYgZmlsdGVyQS5ncm91cCAhPT0gMClcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJBLmdyb3VwID4gMDtcblxuICAgICAgICByZXR1cm4gKGZpbHRlckEubWFzayAmIGZpbHRlckIuY2F0ZWdvcnkpICE9PSAwICYmIChmaWx0ZXJCLm1hc2sgJiBmaWx0ZXJBLmNhdGVnb3J5KSAhPT0gMDtcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi9QYWlyXCI6NyxcIi4vU0FUXCI6MTF9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5HcmlkYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb2xsaXNpb24gYnJvYWRwaGFzZSBncmlkIHN0cnVjdHVyZXMuXG4qXG4qIEBjbGFzcyBHcmlkXG4qL1xuXG52YXIgR3JpZCA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWQ7XG5cbnZhciBQYWlyID0gX2RlcmVxXygnLi9QYWlyJyk7XG52YXIgRGV0ZWN0b3IgPSBfZGVyZXFfKCcuL0RldGVjdG9yJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBncmlkLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtncmlkfSBBIG5ldyBncmlkXG4gICAgICovXG4gICAgR3JpZC5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IEdyaWQsXG4gICAgICAgICAgICBkZXRlY3RvcjogRGV0ZWN0b3IuY29sbGlzaW9ucyxcbiAgICAgICAgICAgIGJ1Y2tldHM6IHt9LFxuICAgICAgICAgICAgcGFpcnM6IHt9LFxuICAgICAgICAgICAgcGFpcnNMaXN0OiBbXSxcbiAgICAgICAgICAgIGJ1Y2tldFdpZHRoOiA0OCxcbiAgICAgICAgICAgIGJ1Y2tldEhlaWdodDogNDhcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB3aWR0aCBvZiBhIHNpbmdsZSBncmlkIGJ1Y2tldC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBidWNrZXRXaWR0aFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDQ4XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGVpZ2h0IG9mIGEgc2luZ2xlIGdyaWQgYnVja2V0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJ1Y2tldEhlaWdodFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDQ4XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBncmlkLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtncmlkfSBncmlkXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlVXBkYXRlXG4gICAgICovXG4gICAgR3JpZC51cGRhdGUgPSBmdW5jdGlvbihncmlkLCBib2RpZXMsIGVuZ2luZSwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgdmFyIGksIGNvbCwgcm93LFxuICAgICAgICAgICAgd29ybGQgPSBlbmdpbmUud29ybGQsXG4gICAgICAgICAgICBidWNrZXRzID0gZ3JpZC5idWNrZXRzLFxuICAgICAgICAgICAgYnVja2V0LFxuICAgICAgICAgICAgYnVja2V0SWQsXG4gICAgICAgICAgICBncmlkQ2hhbmdlZCA9IGZhbHNlO1xuXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChib2R5LmlzU2xlZXBpbmcgJiYgIWZvcmNlVXBkYXRlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBkb24ndCB1cGRhdGUgb3V0IG9mIHdvcmxkIGJvZGllc1xuICAgICAgICAgICAgaWYgKGJvZHkuYm91bmRzLm1heC54IDwgd29ybGQuYm91bmRzLm1pbi54IHx8IGJvZHkuYm91bmRzLm1pbi54ID4gd29ybGQuYm91bmRzLm1heC54XG4gICAgICAgICAgICAgICAgfHwgYm9keS5ib3VuZHMubWF4LnkgPCB3b3JsZC5ib3VuZHMubWluLnkgfHwgYm9keS5ib3VuZHMubWluLnkgPiB3b3JsZC5ib3VuZHMubWF4LnkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBuZXdSZWdpb24gPSBHcmlkLl9nZXRSZWdpb24oZ3JpZCwgYm9keSk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBib2R5IGhhcyBjaGFuZ2VkIGdyaWQgcmVnaW9uXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVnaW9uIHx8IG5ld1JlZ2lvbi5pZCAhPT0gYm9keS5yZWdpb24uaWQgfHwgZm9yY2VVcGRhdGUpIHtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCFib2R5LnJlZ2lvbiB8fCBmb3JjZVVwZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgYm9keS5yZWdpb24gPSBuZXdSZWdpb247XG5cbiAgICAgICAgICAgICAgICB2YXIgdW5pb24gPSBHcmlkLl9yZWdpb25VbmlvbihuZXdSZWdpb24sIGJvZHkucmVnaW9uKTtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBncmlkIGJ1Y2tldHMgYWZmZWN0ZWQgYnkgcmVnaW9uIGNoYW5nZVxuICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgdW5pb24gb2YgYm90aCByZWdpb25zXG4gICAgICAgICAgICAgICAgZm9yIChjb2wgPSB1bmlvbi5zdGFydENvbDsgY29sIDw9IHVuaW9uLmVuZENvbDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChyb3cgPSB1bmlvbi5zdGFydFJvdzsgcm93IDw9IHVuaW9uLmVuZFJvdzsgcm93KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldElkID0gR3JpZC5fZ2V0QnVja2V0SWQoY29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0ID0gYnVja2V0c1tidWNrZXRJZF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0luc2lkZU5ld1JlZ2lvbiA9IChjb2wgPj0gbmV3UmVnaW9uLnN0YXJ0Q29sICYmIGNvbCA8PSBuZXdSZWdpb24uZW5kQ29sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiByb3cgPj0gbmV3UmVnaW9uLnN0YXJ0Um93ICYmIHJvdyA8PSBuZXdSZWdpb24uZW5kUm93KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzSW5zaWRlT2xkUmVnaW9uID0gKGNvbCA+PSBib2R5LnJlZ2lvbi5zdGFydENvbCAmJiBjb2wgPD0gYm9keS5yZWdpb24uZW5kQ29sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiByb3cgPj0gYm9keS5yZWdpb24uc3RhcnRSb3cgJiYgcm93IDw9IGJvZHkucmVnaW9uLmVuZFJvdyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBmcm9tIG9sZCByZWdpb24gYnVja2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0luc2lkZU5ld1JlZ2lvbiAmJiBpc0luc2lkZU9sZFJlZ2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0luc2lkZU9sZFJlZ2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVja2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JpZC5fYnVja2V0UmVtb3ZlQm9keShncmlkLCBidWNrZXQsIGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRvIG5ldyByZWdpb24gYnVja2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkucmVnaW9uID09PSBuZXdSZWdpb24gfHwgKGlzSW5zaWRlTmV3UmVnaW9uICYmICFpc0luc2lkZU9sZFJlZ2lvbikgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJ1Y2tldClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0ID0gR3JpZC5fY3JlYXRlQnVja2V0KGJ1Y2tldHMsIGJ1Y2tldElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmlkLl9idWNrZXRBZGRCb2R5KGdyaWQsIGJ1Y2tldCwgYm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIG5ldyByZWdpb25cbiAgICAgICAgICAgICAgICBib2R5LnJlZ2lvbiA9IG5ld1JlZ2lvbjtcblxuICAgICAgICAgICAgICAgIC8vIGZsYWcgY2hhbmdlcyBzbyB3ZSBjYW4gdXBkYXRlIHBhaXJzXG4gICAgICAgICAgICAgICAgZ3JpZENoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhaXJzIGxpc3Qgb25seSBpZiBwYWlycyBjaGFuZ2VkIChpLmUuIGEgYm9keSBjaGFuZ2VkIHJlZ2lvbilcbiAgICAgICAgaWYgKGdyaWRDaGFuZ2VkKVxuICAgICAgICAgICAgZ3JpZC5wYWlyc0xpc3QgPSBHcmlkLl9jcmVhdGVBY3RpdmVQYWlyc0xpc3QoZ3JpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgZ3JpZC5cbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtncmlkfSBncmlkXG4gICAgICovXG4gICAgR3JpZC5jbGVhciA9IGZ1bmN0aW9uKGdyaWQpIHtcbiAgICAgICAgZ3JpZC5idWNrZXRzID0ge307XG4gICAgICAgIGdyaWQucGFpcnMgPSB7fTtcbiAgICAgICAgZ3JpZC5wYWlyc0xpc3QgPSBbXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIHVuaW9uIG9mIHR3byByZWdpb25zLlxuICAgICAqIEBtZXRob2QgX3JlZ2lvblVuaW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gcmVnaW9uQVxuICAgICAqIEBwYXJhbSB7fSByZWdpb25CXG4gICAgICogQHJldHVybiB7fSByZWdpb25cbiAgICAgKi9cbiAgICBHcmlkLl9yZWdpb25VbmlvbiA9IGZ1bmN0aW9uKHJlZ2lvbkEsIHJlZ2lvbkIpIHtcbiAgICAgICAgdmFyIHN0YXJ0Q29sID0gTWF0aC5taW4ocmVnaW9uQS5zdGFydENvbCwgcmVnaW9uQi5zdGFydENvbCksXG4gICAgICAgICAgICBlbmRDb2wgPSBNYXRoLm1heChyZWdpb25BLmVuZENvbCwgcmVnaW9uQi5lbmRDb2wpLFxuICAgICAgICAgICAgc3RhcnRSb3cgPSBNYXRoLm1pbihyZWdpb25BLnN0YXJ0Um93LCByZWdpb25CLnN0YXJ0Um93KSxcbiAgICAgICAgICAgIGVuZFJvdyA9IE1hdGgubWF4KHJlZ2lvbkEuZW5kUm93LCByZWdpb25CLmVuZFJvdyk7XG5cbiAgICAgICAgcmV0dXJuIEdyaWQuX2NyZWF0ZVJlZ2lvbihzdGFydENvbCwgZW5kQ29sLCBzdGFydFJvdywgZW5kUm93KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmVnaW9uIGEgZ2l2ZW4gYm9keSBmYWxscyBpbiBmb3IgYSBnaXZlbiBncmlkLlxuICAgICAqIEBtZXRob2QgX2dldFJlZ2lvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGdyaWRcbiAgICAgKiBAcGFyYW0ge30gYm9keVxuICAgICAqIEByZXR1cm4ge30gcmVnaW9uXG4gICAgICovXG4gICAgR3JpZC5fZ2V0UmVnaW9uID0gZnVuY3Rpb24oZ3JpZCwgYm9keSkge1xuICAgICAgICB2YXIgYm91bmRzID0gYm9keS5ib3VuZHMsXG4gICAgICAgICAgICBzdGFydENvbCA9IE1hdGguZmxvb3IoYm91bmRzLm1pbi54IC8gZ3JpZC5idWNrZXRXaWR0aCksXG4gICAgICAgICAgICBlbmRDb2wgPSBNYXRoLmZsb29yKGJvdW5kcy5tYXgueCAvIGdyaWQuYnVja2V0V2lkdGgpLFxuICAgICAgICAgICAgc3RhcnRSb3cgPSBNYXRoLmZsb29yKGJvdW5kcy5taW4ueSAvIGdyaWQuYnVja2V0SGVpZ2h0KSxcbiAgICAgICAgICAgIGVuZFJvdyA9IE1hdGguZmxvb3IoYm91bmRzLm1heC55IC8gZ3JpZC5idWNrZXRIZWlnaHQpO1xuXG4gICAgICAgIHJldHVybiBHcmlkLl9jcmVhdGVSZWdpb24oc3RhcnRDb2wsIGVuZENvbCwgc3RhcnRSb3csIGVuZFJvdyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZWdpb24uXG4gICAgICogQG1ldGhvZCBfY3JlYXRlUmVnaW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gc3RhcnRDb2xcbiAgICAgKiBAcGFyYW0ge30gZW5kQ29sXG4gICAgICogQHBhcmFtIHt9IHN0YXJ0Um93XG4gICAgICogQHBhcmFtIHt9IGVuZFJvd1xuICAgICAqIEByZXR1cm4ge30gcmVnaW9uXG4gICAgICovXG4gICAgR3JpZC5fY3JlYXRlUmVnaW9uID0gZnVuY3Rpb24oc3RhcnRDb2wsIGVuZENvbCwgc3RhcnRSb3csIGVuZFJvdykge1xuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIGlkOiBzdGFydENvbCArICcsJyArIGVuZENvbCArICcsJyArIHN0YXJ0Um93ICsgJywnICsgZW5kUm93LFxuICAgICAgICAgICAgc3RhcnRDb2w6IHN0YXJ0Q29sLCBcbiAgICAgICAgICAgIGVuZENvbDogZW5kQ29sLCBcbiAgICAgICAgICAgIHN0YXJ0Um93OiBzdGFydFJvdywgXG4gICAgICAgICAgICBlbmRSb3c6IGVuZFJvdyBcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYnVja2V0IGlkIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAgKiBAbWV0aG9kIF9nZXRCdWNrZXRJZFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGNvbHVtblxuICAgICAqIEBwYXJhbSB7fSByb3dcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGJ1Y2tldCBpZFxuICAgICAqL1xuICAgIEdyaWQuX2dldEJ1Y2tldElkID0gZnVuY3Rpb24oY29sdW1uLCByb3cpIHtcbiAgICAgICAgcmV0dXJuICdDJyArIGNvbHVtbiArICdSJyArIHJvdztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJ1Y2tldC5cbiAgICAgKiBAbWV0aG9kIF9jcmVhdGVCdWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBidWNrZXRzXG4gICAgICogQHBhcmFtIHt9IGJ1Y2tldElkXG4gICAgICogQHJldHVybiB7fSBidWNrZXRcbiAgICAgKi9cbiAgICBHcmlkLl9jcmVhdGVCdWNrZXQgPSBmdW5jdGlvbihidWNrZXRzLCBidWNrZXRJZCkge1xuICAgICAgICB2YXIgYnVja2V0ID0gYnVja2V0c1tidWNrZXRJZF0gPSBbXTtcbiAgICAgICAgcmV0dXJuIGJ1Y2tldDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGJvZHkgdG8gYSBidWNrZXQuXG4gICAgICogQG1ldGhvZCBfYnVja2V0QWRkQm9keVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGdyaWRcbiAgICAgKiBAcGFyYW0ge30gYnVja2V0XG4gICAgICogQHBhcmFtIHt9IGJvZHlcbiAgICAgKi9cbiAgICBHcmlkLl9idWNrZXRBZGRCb2R5ID0gZnVuY3Rpb24oZ3JpZCwgYnVja2V0LCBib2R5KSB7XG4gICAgICAgIC8vIGFkZCBuZXcgcGFpcnNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWNrZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5QiA9IGJ1Y2tldFtpXTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaWQgPT09IGJvZHlCLmlkIHx8IChib2R5LmlzU3RhdGljICYmIGJvZHlCLmlzU3RhdGljKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgbnVtYmVyIG9mIGJ1Y2tldHMgdGhlIHBhaXIgZXhpc3RzIGluXG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQgZm9yIEdyaWQudXBkYXRlIHRvIHdvcmtcbiAgICAgICAgICAgIHZhciBwYWlySWQgPSBQYWlyLmlkKGJvZHksIGJvZHlCKSxcbiAgICAgICAgICAgICAgICBwYWlyID0gZ3JpZC5wYWlyc1twYWlySWRdO1xuXG4gICAgICAgICAgICBpZiAocGFpcikge1xuICAgICAgICAgICAgICAgIHBhaXJbMl0gKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ3JpZC5wYWlyc1twYWlySWRdID0gW2JvZHksIGJvZHlCLCAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCB0byBib2RpZXMgKGFmdGVyIHBhaXJzLCBvdGhlcndpc2UgcGFpcnMgd2l0aCBzZWxmKVxuICAgICAgICBidWNrZXQucHVzaChib2R5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSBhIGJ1Y2tldC5cbiAgICAgKiBAbWV0aG9kIF9idWNrZXRSZW1vdmVCb2R5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZ3JpZFxuICAgICAqIEBwYXJhbSB7fSBidWNrZXRcbiAgICAgKiBAcGFyYW0ge30gYm9keVxuICAgICAqL1xuICAgIEdyaWQuX2J1Y2tldFJlbW92ZUJvZHkgPSBmdW5jdGlvbihncmlkLCBidWNrZXQsIGJvZHkpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGZyb20gYnVja2V0XG4gICAgICAgIGJ1Y2tldC5zcGxpY2UoQ29tbW9uLmluZGV4T2YoYnVja2V0LCBib2R5KSwgMSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhaXIgY291bnRzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVja2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBudW1iZXIgb2YgYnVja2V0cyB0aGUgcGFpciBleGlzdHMgaW5cbiAgICAgICAgICAgIC8vIGltcG9ydGFudCBmb3IgX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdCB0byB3b3JrXG4gICAgICAgICAgICB2YXIgYm9keUIgPSBidWNrZXRbaV0sXG4gICAgICAgICAgICAgICAgcGFpcklkID0gUGFpci5pZChib2R5LCBib2R5QiksXG4gICAgICAgICAgICAgICAgcGFpciA9IGdyaWQucGFpcnNbcGFpcklkXTtcblxuICAgICAgICAgICAgaWYgKHBhaXIpXG4gICAgICAgICAgICAgICAgcGFpclsyXSAtPSAxO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGxpc3Qgb2YgdGhlIGFjdGl2ZSBwYWlycyBpbiB0aGUgZ3JpZC5cbiAgICAgKiBAbWV0aG9kIF9jcmVhdGVBY3RpdmVQYWlyc0xpc3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBncmlkXG4gICAgICogQHJldHVybiBbXSBwYWlyc1xuICAgICAqL1xuICAgIEdyaWQuX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdCA9IGZ1bmN0aW9uKGdyaWQpIHtcbiAgICAgICAgdmFyIHBhaXJLZXlzLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIHBhaXJzID0gW107XG5cbiAgICAgICAgLy8gZ3JpZC5wYWlycyBpcyB1c2VkIGFzIGEgaGFzaG1hcFxuICAgICAgICBwYWlyS2V5cyA9IENvbW1vbi5rZXlzKGdyaWQucGFpcnMpO1xuXG4gICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBncmlkLnBhaXJzXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcGFpcktleXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBncmlkLnBhaXJzW3BhaXJLZXlzW2tdXTtcblxuICAgICAgICAgICAgLy8gaWYgcGFpciBleGlzdHMgaW4gYXQgbGVhc3Qgb25lIGJ1Y2tldFxuICAgICAgICAgICAgLy8gaXQgaXMgYSBwYWlyIHRoYXQgbmVlZHMgZnVydGhlciBjb2xsaXNpb24gdGVzdGluZyBzbyBwdXNoIGl0XG4gICAgICAgICAgICBpZiAocGFpclsyXSA+IDApIHtcbiAgICAgICAgICAgICAgICBwYWlycy5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZ3JpZC5wYWlyc1twYWlyS2V5c1trXV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFpcnM7XG4gICAgfTtcbiAgICBcbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vRGV0ZWN0b3JcIjo1LFwiLi9QYWlyXCI6N31dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlBhaXJgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGNvbGxpc2lvbiBwYWlycy5cbipcbiogQGNsYXNzIFBhaXJcbiovXG5cbnZhciBQYWlyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUGFpcjtcblxudmFyIENvbnRhY3QgPSBfZGVyZXFfKCcuL0NvbnRhY3QnKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwYWlyLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtjb2xsaXNpb259IGNvbGxpc2lvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKiBAcmV0dXJuIHtwYWlyfSBBIG5ldyBwYWlyXG4gICAgICovXG4gICAgUGFpci5jcmVhdGUgPSBmdW5jdGlvbihjb2xsaXNpb24sIHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgYm9keUEgPSBjb2xsaXNpb24uYm9keUEsXG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5ib2R5QixcbiAgICAgICAgICAgIHBhcmVudEEgPSBjb2xsaXNpb24ucGFyZW50QSxcbiAgICAgICAgICAgIHBhcmVudEIgPSBjb2xsaXNpb24ucGFyZW50QjtcblxuICAgICAgICB2YXIgcGFpciA9IHtcbiAgICAgICAgICAgIGlkOiBQYWlyLmlkKGJvZHlBLCBib2R5QiksXG4gICAgICAgICAgICBib2R5QTogYm9keUEsXG4gICAgICAgICAgICBib2R5QjogYm9keUIsXG4gICAgICAgICAgICBjb250YWN0czoge30sXG4gICAgICAgICAgICBhY3RpdmVDb250YWN0czogW10sXG4gICAgICAgICAgICBzZXBhcmF0aW9uOiAwLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBpc1NlbnNvcjogYm9keUEuaXNTZW5zb3IgfHwgYm9keUIuaXNTZW5zb3IsXG4gICAgICAgICAgICB0aW1lQ3JlYXRlZDogdGltZXN0YW1wLFxuICAgICAgICAgICAgdGltZVVwZGF0ZWQ6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgIGludmVyc2VNYXNzOiBwYXJlbnRBLmludmVyc2VNYXNzICsgcGFyZW50Qi5pbnZlcnNlTWFzcyxcbiAgICAgICAgICAgIGZyaWN0aW9uOiBNYXRoLm1pbihwYXJlbnRBLmZyaWN0aW9uLCBwYXJlbnRCLmZyaWN0aW9uKSxcbiAgICAgICAgICAgIGZyaWN0aW9uU3RhdGljOiBNYXRoLm1heChwYXJlbnRBLmZyaWN0aW9uU3RhdGljLCBwYXJlbnRCLmZyaWN0aW9uU3RhdGljKSxcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiBNYXRoLm1heChwYXJlbnRBLnJlc3RpdHV0aW9uLCBwYXJlbnRCLnJlc3RpdHV0aW9uKSxcbiAgICAgICAgICAgIHNsb3A6IE1hdGgubWF4KHBhcmVudEEuc2xvcCwgcGFyZW50Qi5zbG9wKVxuICAgICAgICB9O1xuXG4gICAgICAgIFBhaXIudXBkYXRlKHBhaXIsIGNvbGxpc2lvbiwgdGltZXN0YW1wKTtcblxuICAgICAgICByZXR1cm4gcGFpcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhIHBhaXIgZ2l2ZW4gYSBjb2xsaXNpb24uXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge3BhaXJ9IHBhaXJcbiAgICAgKiBAcGFyYW0ge2NvbGxpc2lvbn0gY29sbGlzaW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIFBhaXIudXBkYXRlID0gZnVuY3Rpb24ocGFpciwgY29sbGlzaW9uLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIGNvbnRhY3RzID0gcGFpci5jb250YWN0cyxcbiAgICAgICAgICAgIHN1cHBvcnRzID0gY29sbGlzaW9uLnN1cHBvcnRzLFxuICAgICAgICAgICAgYWN0aXZlQ29udGFjdHMgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzLFxuICAgICAgICAgICAgcGFyZW50QSA9IGNvbGxpc2lvbi5wYXJlbnRBLFxuICAgICAgICAgICAgcGFyZW50QiA9IGNvbGxpc2lvbi5wYXJlbnRCO1xuICAgICAgICBcbiAgICAgICAgcGFpci5jb2xsaXNpb24gPSBjb2xsaXNpb247XG4gICAgICAgIHBhaXIuaW52ZXJzZU1hc3MgPSBwYXJlbnRBLmludmVyc2VNYXNzICsgcGFyZW50Qi5pbnZlcnNlTWFzcztcbiAgICAgICAgcGFpci5mcmljdGlvbiA9IE1hdGgubWluKHBhcmVudEEuZnJpY3Rpb24sIHBhcmVudEIuZnJpY3Rpb24pO1xuICAgICAgICBwYWlyLmZyaWN0aW9uU3RhdGljID0gTWF0aC5tYXgocGFyZW50QS5mcmljdGlvblN0YXRpYywgcGFyZW50Qi5mcmljdGlvblN0YXRpYyk7XG4gICAgICAgIHBhaXIucmVzdGl0dXRpb24gPSBNYXRoLm1heChwYXJlbnRBLnJlc3RpdHV0aW9uLCBwYXJlbnRCLnJlc3RpdHV0aW9uKTtcbiAgICAgICAgcGFpci5zbG9wID0gTWF0aC5tYXgocGFyZW50QS5zbG9wLCBwYXJlbnRCLnNsb3ApO1xuICAgICAgICBhY3RpdmVDb250YWN0cy5sZW5ndGggPSAwO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbGxpc2lvbi5jb2xsaWRlZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdXBwb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBzdXBwb3J0ID0gc3VwcG9ydHNbaV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3RJZCA9IENvbnRhY3QuaWQoc3VwcG9ydCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QgPSBjb250YWN0c1tjb250YWN0SWRdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ29udGFjdHMucHVzaChjb250YWN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVDb250YWN0cy5wdXNoKGNvbnRhY3RzW2NvbnRhY3RJZF0gPSBDb250YWN0LmNyZWF0ZShzdXBwb3J0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWlyLnNlcGFyYXRpb24gPSBjb2xsaXNpb24uZGVwdGg7XG4gICAgICAgICAgICBQYWlyLnNldEFjdGl2ZShwYWlyLCB0cnVlLCB0aW1lc3RhbXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhaXIuaXNBY3RpdmUgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgUGFpci5zZXRBY3RpdmUocGFpciwgZmFsc2UsIHRpbWVzdGFtcCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFNldCBhIHBhaXIgYXMgYWN0aXZlIG9yIGluYWN0aXZlLlxuICAgICAqIEBtZXRob2Qgc2V0QWN0aXZlXG4gICAgICogQHBhcmFtIHtwYWlyfSBwYWlyXG4gICAgICogQHBhcmFtIHtib29sfSBpc0FjdGl2ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBQYWlyLnNldEFjdGl2ZSA9IGZ1bmN0aW9uKHBhaXIsIGlzQWN0aXZlLCB0aW1lc3RhbXApIHtcbiAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICBwYWlyLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhaXIudGltZVVwZGF0ZWQgPSB0aW1lc3RhbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWlyLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpZCBmb3IgdGhlIGdpdmVuIHBhaXIuXG4gICAgICogQG1ldGhvZCBpZFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUFcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlCXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBVbmlxdWUgcGFpcklkXG4gICAgICovXG4gICAgUGFpci5pZCA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5Qikge1xuICAgICAgICBpZiAoYm9keUEuaWQgPCBib2R5Qi5pZCkge1xuICAgICAgICAgICAgcmV0dXJuICdBJyArIGJvZHlBLmlkICsgJ0InICsgYm9keUIuaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ0EnICsgYm9keUIuaWQgKyAnQicgKyBib2R5QS5pZDtcbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi9Db250YWN0XCI6NH1dLDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlBhaXJzYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb2xsaXNpb24gcGFpciBzZXRzLlxuKlxuKiBAY2xhc3MgUGFpcnNcbiovXG5cbnZhciBQYWlycyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhaXJzO1xuXG52YXIgUGFpciA9IF9kZXJlcV8oJy4vUGFpcicpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcbiAgICBcbiAgICBQYWlycy5fcGFpck1heElkbGVMaWZlID0gMTAwMDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGFpcnMgc3RydWN0dXJlLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtwYWlyc30gQSBuZXcgcGFpcnMgc3RydWN0dXJlXG4gICAgICovXG4gICAgUGFpcnMuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZCh7IFxuICAgICAgICAgICAgdGFibGU6IHt9LFxuICAgICAgICAgICAgbGlzdDogW10sXG4gICAgICAgICAgICBjb2xsaXNpb25TdGFydDogW10sXG4gICAgICAgICAgICBjb2xsaXNpb25BY3RpdmU6IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uRW5kOiBbXVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBwYWlycyBnaXZlbiBhIGxpc3Qgb2YgY29sbGlzaW9ucy5cbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYWlyc1xuICAgICAqIEBwYXJhbSB7Y29sbGlzaW9uW119IGNvbGxpc2lvbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wXG4gICAgICovXG4gICAgUGFpcnMudXBkYXRlID0gZnVuY3Rpb24ocGFpcnMsIGNvbGxpc2lvbnMsIHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgcGFpcnNMaXN0ID0gcGFpcnMubGlzdCxcbiAgICAgICAgICAgIHBhaXJzVGFibGUgPSBwYWlycy50YWJsZSxcbiAgICAgICAgICAgIGNvbGxpc2lvblN0YXJ0ID0gcGFpcnMuY29sbGlzaW9uU3RhcnQsXG4gICAgICAgICAgICBjb2xsaXNpb25FbmQgPSBwYWlycy5jb2xsaXNpb25FbmQsXG4gICAgICAgICAgICBjb2xsaXNpb25BY3RpdmUgPSBwYWlycy5jb2xsaXNpb25BY3RpdmUsXG4gICAgICAgICAgICBhY3RpdmVQYWlySWRzID0gW10sXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBwYWlySWQsXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICAvLyBjbGVhciBjb2xsaXNpb24gc3RhdGUgYXJyYXlzLCBidXQgbWFpbnRhaW4gb2xkIHJlZmVyZW5jZVxuICAgICAgICBjb2xsaXNpb25TdGFydC5sZW5ndGggPSAwO1xuICAgICAgICBjb2xsaXNpb25FbmQubGVuZ3RoID0gMDtcbiAgICAgICAgY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbGxpc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IGNvbGxpc2lvbnNbaV07XG5cbiAgICAgICAgICAgIGlmIChjb2xsaXNpb24uY29sbGlkZWQpIHtcbiAgICAgICAgICAgICAgICBwYWlySWQgPSBQYWlyLmlkKGNvbGxpc2lvbi5ib2R5QSwgY29sbGlzaW9uLmJvZHlCKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVQYWlySWRzLnB1c2gocGFpcklkKTtcblxuICAgICAgICAgICAgICAgIHBhaXIgPSBwYWlyc1RhYmxlW3BhaXJJZF07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHBhaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFpciBhbHJlYWR5IGV4aXN0cyAoYnV0IG1heSBvciBtYXkgbm90IGJlIGFjdGl2ZSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhaXIuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgZXhpc3RzIGFuZCBpcyBhY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbkFjdGl2ZS5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGFpciBleGlzdHMgYnV0IHdhcyBpbmFjdGl2ZSwgc28gYSBjb2xsaXNpb24gaGFzIGp1c3Qgc3RhcnRlZCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uU3RhcnQucHVzaChwYWlyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgcGFpclxuICAgICAgICAgICAgICAgICAgICBQYWlyLnVwZGF0ZShwYWlyLCBjb2xsaXNpb24sIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFpciBkaWQgbm90IGV4aXN0LCBjcmVhdGUgYSBuZXcgcGFpclxuICAgICAgICAgICAgICAgICAgICBwYWlyID0gUGFpci5jcmVhdGUoY29sbGlzaW9uLCB0aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgICAgICBwYWlyc1RhYmxlW3BhaXJJZF0gPSBwYWlyO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggdGhlIG5ldyBwYWlyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvblN0YXJ0LnB1c2gocGFpcik7XG4gICAgICAgICAgICAgICAgICAgIHBhaXJzTGlzdC5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlYWN0aXZhdGUgcHJldmlvdXNseSBhY3RpdmUgcGFpcnMgdGhhdCBhcmUgbm93IGluYWN0aXZlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlyc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc0xpc3RbaV07XG4gICAgICAgICAgICBpZiAocGFpci5pc0FjdGl2ZSAmJiBDb21tb24uaW5kZXhPZihhY3RpdmVQYWlySWRzLCBwYWlyLmlkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBQYWlyLnNldEFjdGl2ZShwYWlyLCBmYWxzZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICBjb2xsaXNpb25FbmQucHVzaChwYWlyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogRmluZHMgYW5kIHJlbW92ZXMgcGFpcnMgdGhhdCBoYXZlIGJlZW4gaW5hY3RpdmUgZm9yIGEgc2V0IGFtb3VudCBvZiB0aW1lLlxuICAgICAqIEBtZXRob2QgcmVtb3ZlT2xkXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhaXJzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIFBhaXJzLnJlbW92ZU9sZCA9IGZ1bmN0aW9uKHBhaXJzLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIHBhaXJzTGlzdCA9IHBhaXJzLmxpc3QsXG4gICAgICAgICAgICBwYWlyc1RhYmxlID0gcGFpcnMudGFibGUsXG4gICAgICAgICAgICBpbmRleGVzVG9SZW1vdmUgPSBbXSxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBwYWlySW5kZXgsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlyc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc0xpc3RbaV07XG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbmV2ZXIgcmVtb3ZlIHNsZWVwaW5nIHBhaXJzXG4gICAgICAgICAgICBpZiAoY29sbGlzaW9uLmJvZHlBLmlzU2xlZXBpbmcgfHwgY29sbGlzaW9uLmJvZHlCLmlzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgICAgICBwYWlyLnRpbWVVcGRhdGVkID0gdGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiBwYWlyIGlzIGluYWN0aXZlIGZvciB0b28gbG9uZywgbWFyayBpdCB0byBiZSByZW1vdmVkXG4gICAgICAgICAgICBpZiAodGltZXN0YW1wIC0gcGFpci50aW1lVXBkYXRlZCA+IFBhaXJzLl9wYWlyTWF4SWRsZUxpZmUpIHtcbiAgICAgICAgICAgICAgICBpbmRleGVzVG9SZW1vdmUucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBtYXJrZWQgcGFpcnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZGV4ZXNUb1JlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpckluZGV4ID0gaW5kZXhlc1RvUmVtb3ZlW2ldIC0gaTtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc0xpc3RbcGFpckluZGV4XTtcbiAgICAgICAgICAgIGRlbGV0ZSBwYWlyc1RhYmxlW3BhaXIuaWRdO1xuICAgICAgICAgICAgcGFpcnNMaXN0LnNwbGljZShwYWlySW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgZ2l2ZW4gcGFpcnMgc3RydWN0dXJlLlxuICAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAgKiBAcGFyYW0ge3BhaXJzfSBwYWlyc1xuICAgICAqIEByZXR1cm4ge3BhaXJzfSBwYWlyc1xuICAgICAqL1xuICAgIFBhaXJzLmNsZWFyID0gZnVuY3Rpb24ocGFpcnMpIHtcbiAgICAgICAgcGFpcnMudGFibGUgPSB7fTtcbiAgICAgICAgcGFpcnMubGlzdC5sZW5ndGggPSAwO1xuICAgICAgICBwYWlycy5jb2xsaXNpb25TdGFydC5sZW5ndGggPSAwO1xuICAgICAgICBwYWlycy5jb2xsaXNpb25BY3RpdmUubGVuZ3RoID0gMDtcbiAgICAgICAgcGFpcnMuY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XG4gICAgICAgIHJldHVybiBwYWlycztcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuL1BhaXJcIjo3fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuUXVlcnlgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBwZXJmb3JtaW5nIGNvbGxpc2lvbiBxdWVyaWVzLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgUXVlcnlcbiovXG5cbnZhciBRdWVyeSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXJ5O1xuXG52YXIgVmVjdG9yID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG52YXIgU0FUID0gX2RlcmVxXygnLi9TQVQnKTtcbnZhciBCb3VuZHMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBCb2RpZXMgPSBfZGVyZXFfKCcuLi9mYWN0b3J5L0JvZGllcycpO1xudmFyIFZlcnRpY2VzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgY29sbGlzaW9ucyBiZXR3ZWVuIGBib2R5YCBhbmQgYGJvZGllc2AuXG4gICAgICogQG1ldGhvZCBjb2xsaWRlc1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gQ29sbGlzaW9uc1xuICAgICAqL1xuICAgIFF1ZXJ5LmNvbGxpZGVzID0gZnVuY3Rpb24oYm9keSwgYm9kaWVzKSB7XG4gICAgICAgIHZhciBjb2xsaXNpb25zID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5QSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKEJvdW5kcy5vdmVybGFwcyhib2R5QS5ib3VuZHMsIGJvZHkuYm91bmRzKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBib2R5QS5wYXJ0cy5sZW5ndGggPT09IDEgPyAwIDogMTsgaiA8IGJvZHlBLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keUEucGFydHNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5vdmVybGFwcyhwYXJ0LmJvdW5kcywgYm9keS5ib3VuZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gU0FULmNvbGxpZGVzKHBhcnQsIGJvZHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uLmNvbGxpZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKGNvbGxpc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sbGlzaW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYSByYXkgc2VnbWVudCBhZ2FpbnN0IGEgc2V0IG9mIGJvZGllcyBhbmQgcmV0dXJucyBhbGwgY29sbGlzaW9ucywgcmF5IHdpZHRoIGlzIG9wdGlvbmFsLiBJbnRlcnNlY3Rpb24gcG9pbnRzIGFyZSBub3QgcHJvdmlkZWQuXG4gICAgICogQG1ldGhvZCByYXlcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHN0YXJ0UG9pbnRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gZW5kUG9pbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JheVdpZHRoXVxuICAgICAqIEByZXR1cm4ge29iamVjdFtdfSBDb2xsaXNpb25zXG4gICAgICovXG4gICAgUXVlcnkucmF5ID0gZnVuY3Rpb24oYm9kaWVzLCBzdGFydFBvaW50LCBlbmRQb2ludCwgcmF5V2lkdGgpIHtcbiAgICAgICAgcmF5V2lkdGggPSByYXlXaWR0aCB8fCAxZS0xMDA7XG5cbiAgICAgICAgdmFyIHJheUFuZ2xlID0gVmVjdG9yLmFuZ2xlKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSxcbiAgICAgICAgICAgIHJheUxlbmd0aCA9IFZlY3Rvci5tYWduaXR1ZGUoVmVjdG9yLnN1YihzdGFydFBvaW50LCBlbmRQb2ludCkpLFxuICAgICAgICAgICAgcmF5WCA9IChlbmRQb2ludC54ICsgc3RhcnRQb2ludC54KSAqIDAuNSxcbiAgICAgICAgICAgIHJheVkgPSAoZW5kUG9pbnQueSArIHN0YXJ0UG9pbnQueSkgKiAwLjUsXG4gICAgICAgICAgICByYXkgPSBCb2RpZXMucmVjdGFuZ2xlKHJheVgsIHJheVksIHJheUxlbmd0aCwgcmF5V2lkdGgsIHsgYW5nbGU6IHJheUFuZ2xlIH0pLFxuICAgICAgICAgICAgY29sbGlzaW9ucyA9IFF1ZXJ5LmNvbGxpZGVzKHJheSwgYm9kaWVzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbGxpc2lvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBjb2xsaXNpb24gPSBjb2xsaXNpb25zW2ldO1xuICAgICAgICAgICAgY29sbGlzaW9uLmJvZHkgPSBjb2xsaXNpb24uYm9keUIgPSBjb2xsaXNpb24uYm9keUE7ICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sbGlzaW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgYm9kaWVzIHdob3NlIGJvdW5kcyBhcmUgaW5zaWRlIChvciBvdXRzaWRlIGlmIHNldCkgdGhlIGdpdmVuIHNldCBvZiBib3VuZHMsIGZyb20gdGhlIGdpdmVuIHNldCBvZiBib2RpZXMuXG4gICAgICogQG1ldGhvZCByZWdpb25cbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc1xuICAgICAqIEBwYXJhbSB7Ym9vbH0gW291dHNpZGU9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Ym9keVtdfSBUaGUgYm9kaWVzIG1hdGNoaW5nIHRoZSBxdWVyeVxuICAgICAqL1xuICAgIFF1ZXJ5LnJlZ2lvbiA9IGZ1bmN0aW9uKGJvZGllcywgYm91bmRzLCBvdXRzaWRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgb3ZlcmxhcHMgPSBCb3VuZHMub3ZlcmxhcHMoYm9keS5ib3VuZHMsIGJvdW5kcyk7XG4gICAgICAgICAgICBpZiAoKG92ZXJsYXBzICYmICFvdXRzaWRlKSB8fCAoIW92ZXJsYXBzICYmIG91dHNpZGUpKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgYm9kaWVzIHdob3NlIHZlcnRpY2VzIGNvbnRhaW4gdGhlIGdpdmVuIHBvaW50LCBmcm9tIHRoZSBnaXZlbiBzZXQgb2YgYm9kaWVzLlxuICAgICAqIEBtZXRob2QgcG9pbnRcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHJldHVybiB7Ym9keVtdfSBUaGUgYm9kaWVzIG1hdGNoaW5nIHRoZSBxdWVyeVxuICAgICAqL1xuICAgIFF1ZXJ5LnBvaW50ID0gZnVuY3Rpb24oYm9kaWVzLCBwb2ludCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoQm91bmRzLmNvbnRhaW5zKGJvZHkuYm91bmRzLCBwb2ludCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gYm9keS5wYXJ0cy5sZW5ndGggPT09IDEgPyAwIDogMTsgaiA8IGJvZHkucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMocGFydC5ib3VuZHMsIHBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgVmVydGljZXMuY29udGFpbnMocGFydC52ZXJ0aWNlcywgcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2ZhY3RvcnkvQm9kaWVzXCI6MjMsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOSxcIi4vU0FUXCI6MTF9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuUmVzb2x2ZXJgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciByZXNvbHZpbmcgY29sbGlzaW9uIHBhaXJzLlxuKlxuKiBAY2xhc3MgUmVzb2x2ZXJcbiovXG5cbnZhciBSZXNvbHZlciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc29sdmVyO1xuXG52YXIgVmVydGljZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZXJ0aWNlcycpO1xudmFyIFZlY3RvciA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIFJlc29sdmVyLl9yZXN0aW5nVGhyZXNoID0gNDtcbiAgICBSZXNvbHZlci5fcmVzdGluZ1RocmVzaFRhbmdlbnQgPSA2O1xuICAgIFJlc29sdmVyLl9wb3NpdGlvbkRhbXBlbiA9IDAuOTtcbiAgICBSZXNvbHZlci5fcG9zaXRpb25XYXJtaW5nID0gMC44O1xuICAgIFJlc29sdmVyLl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXIgPSA1O1xuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBwYWlycyBmb3IgcG9zaXRpb24gc29sdmluZy5cbiAgICAgKiBAbWV0aG9kIHByZVNvbHZlUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKi9cbiAgICBSZXNvbHZlci5wcmVTb2x2ZVBvc2l0aW9uID0gZnVuY3Rpb24ocGFpcnMpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgYWN0aXZlQ291bnQ7XG5cbiAgICAgICAgLy8gZmluZCB0b3RhbCBjb250YWN0cyBvbiBlYWNoIGJvZHlcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYWN0aXZlQ291bnQgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aDtcbiAgICAgICAgICAgIHBhaXIuY29sbGlzaW9uLnBhcmVudEEudG90YWxDb250YWN0cyArPSBhY3RpdmVDb3VudDtcbiAgICAgICAgICAgIHBhaXIuY29sbGlzaW9uLnBhcmVudEIudG90YWxDb250YWN0cyArPSBhY3RpdmVDb3VudDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgc29sdXRpb24gZm9yIHBhaXIgcG9zaXRpb25zLlxuICAgICAqIEBtZXRob2Qgc29sdmVQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBSZXNvbHZlci5zb2x2ZVBvc2l0aW9uID0gZnVuY3Rpb24ocGFpcnMsIHRpbWVTY2FsZSkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBib2R5QSxcbiAgICAgICAgICAgIGJvZHlCLFxuICAgICAgICAgICAgbm9ybWFsLFxuICAgICAgICAgICAgYm9keUJ0b0EsXG4gICAgICAgICAgICBjb250YWN0U2hhcmUsXG4gICAgICAgICAgICBwb3NpdGlvbkltcHVsc2UsXG4gICAgICAgICAgICBjb250YWN0Q291bnQgPSB7fSxcbiAgICAgICAgICAgIHRlbXBBID0gVmVjdG9yLl90ZW1wWzBdLFxuICAgICAgICAgICAgdGVtcEIgPSBWZWN0b3IuX3RlbXBbMV0sXG4gICAgICAgICAgICB0ZW1wQyA9IFZlY3Rvci5fdGVtcFsyXSxcbiAgICAgICAgICAgIHRlbXBEID0gVmVjdG9yLl90ZW1wWzNdO1xuXG4gICAgICAgIC8vIGZpbmQgaW1wdWxzZXMgcmVxdWlyZWQgdG8gcmVzb2x2ZSBwZW5ldHJhdGlvblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlIHx8IHBhaXIuaXNTZW5zb3IpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IHBhaXIuY29sbGlzaW9uO1xuICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24ucGFyZW50QTtcbiAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLnBhcmVudEI7XG4gICAgICAgICAgICBub3JtYWwgPSBjb2xsaXNpb24ubm9ybWFsO1xuXG4gICAgICAgICAgICAvLyBnZXQgY3VycmVudCBzZXBhcmF0aW9uIGJldHdlZW4gYm9keSBlZGdlcyBpbnZvbHZlZCBpbiBjb2xsaXNpb25cbiAgICAgICAgICAgIGJvZHlCdG9BID0gVmVjdG9yLnN1YihWZWN0b3IuYWRkKGJvZHlCLnBvc2l0aW9uSW1wdWxzZSwgYm9keUIucG9zaXRpb24sIHRlbXBBKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZWN0b3IuYWRkKGJvZHlBLnBvc2l0aW9uSW1wdWxzZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnN1Yihib2R5Qi5wb3NpdGlvbiwgY29sbGlzaW9uLnBlbmV0cmF0aW9uLCB0ZW1wQiksIHRlbXBDKSwgdGVtcEQpO1xuXG4gICAgICAgICAgICBwYWlyLnNlcGFyYXRpb24gPSBWZWN0b3IuZG90KG5vcm1hbCwgYm9keUJ0b0EpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlIHx8IHBhaXIuaXNTZW5zb3IpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IHBhaXIuY29sbGlzaW9uO1xuICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24ucGFyZW50QTtcbiAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLnBhcmVudEI7XG4gICAgICAgICAgICBub3JtYWwgPSBjb2xsaXNpb24ubm9ybWFsO1xuICAgICAgICAgICAgcG9zaXRpb25JbXB1bHNlID0gKHBhaXIuc2VwYXJhdGlvbiAtIHBhaXIuc2xvcCkgKiB0aW1lU2NhbGU7XG5cbiAgICAgICAgICAgIGlmIChib2R5QS5pc1N0YXRpYyB8fCBib2R5Qi5pc1N0YXRpYylcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkltcHVsc2UgKj0gMjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCEoYm9keUEuaXNTdGF0aWMgfHwgYm9keUEuaXNTbGVlcGluZykpIHtcbiAgICAgICAgICAgICAgICBjb250YWN0U2hhcmUgPSBSZXNvbHZlci5fcG9zaXRpb25EYW1wZW4gLyBib2R5QS50b3RhbENvbnRhY3RzO1xuICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uSW1wdWxzZS54ICs9IG5vcm1hbC54ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uSW1wdWxzZS55ICs9IG5vcm1hbC55ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShib2R5Qi5pc1N0YXRpYyB8fCBib2R5Qi5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgIGNvbnRhY3RTaGFyZSA9IFJlc29sdmVyLl9wb3NpdGlvbkRhbXBlbiAvIGJvZHlCLnRvdGFsQ29udGFjdHM7XG4gICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25JbXB1bHNlLnggLT0gbm9ybWFsLnggKiBwb3NpdGlvbkltcHVsc2UgKiBjb250YWN0U2hhcmU7XG4gICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25JbXB1bHNlLnkgLT0gbm9ybWFsLnkgKiBwb3NpdGlvbkltcHVsc2UgKiBjb250YWN0U2hhcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbHkgcG9zaXRpb24gcmVzb2x1dGlvbi5cbiAgICAgKiBAbWV0aG9kIHBvc3RTb2x2ZVBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIFJlc29sdmVyLnBvc3RTb2x2ZVBvc2l0aW9uID0gZnVuY3Rpb24oYm9kaWVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgLy8gcmVzZXQgY29udGFjdCBjb3VudFxuICAgICAgICAgICAgYm9keS50b3RhbENvbnRhY3RzID0gMDtcblxuICAgICAgICAgICAgaWYgKGJvZHkucG9zaXRpb25JbXB1bHNlLnggIT09IDAgfHwgYm9keS5wb3NpdGlvbkltcHVsc2UueSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBib2R5IGdlb21ldHJ5XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBib2R5LnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIGJvZHkucG9zaXRpb25JbXB1bHNlKTtcbiAgICAgICAgICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShwYXJ0LmJvdW5kcywgcGFydC52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueCArPSBib2R5LnBvc2l0aW9uSW1wdWxzZS54O1xuICAgICAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnkgKz0gYm9keS5wb3NpdGlvbkltcHVsc2UueTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBtb3ZlIHRoZSBib2R5IHdpdGhvdXQgY2hhbmdpbmcgdmVsb2NpdHlcbiAgICAgICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ICs9IGJvZHkucG9zaXRpb25JbXB1bHNlLng7XG4gICAgICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSArPSBib2R5LnBvc2l0aW9uSW1wdWxzZS55O1xuXG4gICAgICAgICAgICAgICAgaWYgKFZlY3Rvci5kb3QoYm9keS5wb3NpdGlvbkltcHVsc2UsIGJvZHkudmVsb2NpdHkpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBjYWNoZWQgaW1wdWxzZSBpZiB0aGUgYm9keSBoYXMgdmVsb2NpdHkgYWxvbmcgaXRcbiAgICAgICAgICAgICAgICAgICAgYm9keS5wb3NpdGlvbkltcHVsc2UueCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnkgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdhcm0gdGhlIG5leHQgaXRlcmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnggKj0gUmVzb2x2ZXIuX3Bvc2l0aW9uV2FybWluZztcbiAgICAgICAgICAgICAgICAgICAgYm9keS5wb3NpdGlvbkltcHVsc2UueSAqPSBSZXNvbHZlci5fcG9zaXRpb25XYXJtaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHBhaXJzIGZvciB2ZWxvY2l0eSBzb2x2aW5nLlxuICAgICAqIEBtZXRob2QgcHJlU29sdmVWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqL1xuICAgIFJlc29sdmVyLnByZVNvbHZlVmVsb2NpdHkgPSBmdW5jdGlvbihwYWlycykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29udGFjdHMsXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBib2R5QSxcbiAgICAgICAgICAgIGJvZHlCLFxuICAgICAgICAgICAgbm9ybWFsLFxuICAgICAgICAgICAgdGFuZ2VudCxcbiAgICAgICAgICAgIGNvbnRhY3QsXG4gICAgICAgICAgICBjb250YWN0VmVydGV4LFxuICAgICAgICAgICAgbm9ybWFsSW1wdWxzZSxcbiAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgaW1wdWxzZSA9IFZlY3Rvci5fdGVtcFswXSxcbiAgICAgICAgICAgIHRlbXBBID0gVmVjdG9yLl90ZW1wWzFdO1xuICAgICAgICBcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSB8fCBwYWlyLmlzU2Vuc29yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250YWN0cyA9IHBhaXIuYWN0aXZlQ29udGFjdHM7XG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIGJvZHlBID0gY29sbGlzaW9uLnBhcmVudEE7XG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCO1xuICAgICAgICAgICAgbm9ybWFsID0gY29sbGlzaW9uLm5vcm1hbDtcbiAgICAgICAgICAgIHRhbmdlbnQgPSBjb2xsaXNpb24udGFuZ2VudDtcblxuICAgICAgICAgICAgLy8gcmVzb2x2ZSBlYWNoIGNvbnRhY3RcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjb250YWN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnRhY3QgPSBjb250YWN0c1tqXTtcbiAgICAgICAgICAgICAgICBjb250YWN0VmVydGV4ID0gY29udGFjdC52ZXJ0ZXg7XG4gICAgICAgICAgICAgICAgbm9ybWFsSW1wdWxzZSA9IGNvbnRhY3Qubm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICB0YW5nZW50SW1wdWxzZSA9IGNvbnRhY3QudGFuZ2VudEltcHVsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsSW1wdWxzZSAhPT0gMCB8fCB0YW5nZW50SW1wdWxzZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0b3RhbCBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgICAgICBpbXB1bHNlLnggPSAobm9ybWFsLnggKiBub3JtYWxJbXB1bHNlKSArICh0YW5nZW50LnggKiB0YW5nZW50SW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGltcHVsc2UueSA9IChub3JtYWwueSAqIG5vcm1hbEltcHVsc2UpICsgKHRhbmdlbnQueSAqIHRhbmdlbnRJbXB1bHNlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcGx5IGltcHVsc2UgZnJvbSBjb250YWN0XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGJvZHlBLmlzU3RhdGljIHx8IGJvZHlBLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBWZWN0b3Iuc3ViKGNvbnRhY3RWZXJ0ZXgsIGJvZHlBLnBvc2l0aW9uLCB0ZW1wQSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueCArPSBpbXB1bHNlLnggKiBib2R5QS5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uUHJldi55ICs9IGltcHVsc2UueSAqIGJvZHlBLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUEuYW5nbGVQcmV2ICs9IFZlY3Rvci5jcm9zcyhvZmZzZXQsIGltcHVsc2UpICogYm9keUEuaW52ZXJzZUluZXJ0aWE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIShib2R5Qi5pc1N0YXRpYyB8fCBib2R5Qi5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gVmVjdG9yLnN1Yihjb250YWN0VmVydGV4LCBib2R5Qi5wb3NpdGlvbiwgdGVtcEEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25QcmV2LnggLT0gaW1wdWxzZS54ICogYm9keUIuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvblByZXYueSAtPSBpbXB1bHNlLnkgKiBib2R5Qi5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlCLmFuZ2xlUHJldiAtPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0LCBpbXB1bHNlKSAqIGJvZHlCLmludmVyc2VJbmVydGlhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpbmQgYSBzb2x1dGlvbiBmb3IgcGFpciB2ZWxvY2l0aWVzLlxuICAgICAqIEBtZXRob2Qgc29sdmVWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBSZXNvbHZlci5zb2x2ZVZlbG9jaXR5ID0gZnVuY3Rpb24ocGFpcnMsIHRpbWVTY2FsZSkge1xuICAgICAgICB2YXIgdGltZVNjYWxlU3F1YXJlZCA9IHRpbWVTY2FsZSAqIHRpbWVTY2FsZSxcbiAgICAgICAgICAgIGltcHVsc2UgPSBWZWN0b3IuX3RlbXBbMF0sXG4gICAgICAgICAgICB0ZW1wQSA9IFZlY3Rvci5fdGVtcFsxXSxcbiAgICAgICAgICAgIHRlbXBCID0gVmVjdG9yLl90ZW1wWzJdLFxuICAgICAgICAgICAgdGVtcEMgPSBWZWN0b3IuX3RlbXBbM10sXG4gICAgICAgICAgICB0ZW1wRCA9IFZlY3Rvci5fdGVtcFs0XSxcbiAgICAgICAgICAgIHRlbXBFID0gVmVjdG9yLl90ZW1wWzVdO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlIHx8IHBhaXIuaXNTZW5zb3IpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbixcbiAgICAgICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5wYXJlbnRBLFxuICAgICAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLnBhcmVudEIsXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gY29sbGlzaW9uLm5vcm1hbCxcbiAgICAgICAgICAgICAgICB0YW5nZW50ID0gY29sbGlzaW9uLnRhbmdlbnQsXG4gICAgICAgICAgICAgICAgY29udGFjdHMgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzLFxuICAgICAgICAgICAgICAgIGNvbnRhY3RTaGFyZSA9IDEgLyBjb250YWN0cy5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBib2R5IHZlbG9jaXRpZXNcbiAgICAgICAgICAgIGJvZHlBLnZlbG9jaXR5LnggPSBib2R5QS5wb3NpdGlvbi54IC0gYm9keUEucG9zaXRpb25QcmV2Lng7XG4gICAgICAgICAgICBib2R5QS52ZWxvY2l0eS55ID0gYm9keUEucG9zaXRpb24ueSAtIGJvZHlBLnBvc2l0aW9uUHJldi55O1xuICAgICAgICAgICAgYm9keUIudmVsb2NpdHkueCA9IGJvZHlCLnBvc2l0aW9uLnggLSBib2R5Qi5wb3NpdGlvblByZXYueDtcbiAgICAgICAgICAgIGJvZHlCLnZlbG9jaXR5LnkgPSBib2R5Qi5wb3NpdGlvbi55IC0gYm9keUIucG9zaXRpb25QcmV2Lnk7XG4gICAgICAgICAgICBib2R5QS5hbmd1bGFyVmVsb2NpdHkgPSBib2R5QS5hbmdsZSAtIGJvZHlBLmFuZ2xlUHJldjtcbiAgICAgICAgICAgIGJvZHlCLmFuZ3VsYXJWZWxvY2l0eSA9IGJvZHlCLmFuZ2xlIC0gYm9keUIuYW5nbGVQcmV2O1xuXG4gICAgICAgICAgICAvLyByZXNvbHZlIGVhY2ggY29udGFjdFxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb250YWN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWN0ID0gY29udGFjdHNbal0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3RWZXJ0ZXggPSBjb250YWN0LnZlcnRleCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0QSA9IFZlY3Rvci5zdWIoY29udGFjdFZlcnRleCwgYm9keUEucG9zaXRpb24sIHRlbXBBKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0QiA9IFZlY3Rvci5zdWIoY29udGFjdFZlcnRleCwgYm9keUIucG9zaXRpb24sIHRlbXBCKSxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHlQb2ludEEgPSBWZWN0b3IuYWRkKGJvZHlBLnZlbG9jaXR5LCBWZWN0b3IubXVsdChWZWN0b3IucGVycChvZmZzZXRBKSwgYm9keUEuYW5ndWxhclZlbG9jaXR5KSwgdGVtcEMpLFxuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eVBvaW50QiA9IFZlY3Rvci5hZGQoYm9keUIudmVsb2NpdHksIFZlY3Rvci5tdWx0KFZlY3Rvci5wZXJwKG9mZnNldEIpLCBib2R5Qi5hbmd1bGFyVmVsb2NpdHkpLCB0ZW1wRCksIFxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVZlbG9jaXR5ID0gVmVjdG9yLnN1Yih2ZWxvY2l0eVBvaW50QSwgdmVsb2NpdHlQb2ludEIsIHRlbXBFKSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsVmVsb2NpdHkgPSBWZWN0b3IuZG90KG5vcm1hbCwgcmVsYXRpdmVWZWxvY2l0eSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdGFuZ2VudFZlbG9jaXR5ID0gVmVjdG9yLmRvdCh0YW5nZW50LCByZWxhdGl2ZVZlbG9jaXR5KSxcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudFNwZWVkID0gTWF0aC5hYnModGFuZ2VudFZlbG9jaXR5KSxcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudFZlbG9jaXR5RGlyZWN0aW9uID0gQ29tbW9uLnNpZ24odGFuZ2VudFZlbG9jaXR5KTtcblxuICAgICAgICAgICAgICAgIC8vIHJhdyBpbXB1bHNlc1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxJbXB1bHNlID0gKDEgKyBwYWlyLnJlc3RpdHV0aW9uKSAqIG5vcm1hbFZlbG9jaXR5LFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxGb3JjZSA9IENvbW1vbi5jbGFtcChwYWlyLnNlcGFyYXRpb24gKyBub3JtYWxWZWxvY2l0eSwgMCwgMSkgKiBSZXNvbHZlci5fZnJpY3Rpb25Ob3JtYWxNdWx0aXBsaWVyO1xuXG4gICAgICAgICAgICAgICAgLy8gY291bG9tYiBmcmljdGlvblxuICAgICAgICAgICAgICAgIHZhciB0YW5nZW50SW1wdWxzZSA9IHRhbmdlbnRWZWxvY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgbWF4RnJpY3Rpb24gPSBJbmZpbml0eTtcblxuICAgICAgICAgICAgICAgIGlmICh0YW5nZW50U3BlZWQgPiBwYWlyLmZyaWN0aW9uICogcGFpci5mcmljdGlvblN0YXRpYyAqIG5vcm1hbEZvcmNlICogdGltZVNjYWxlU3F1YXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBtYXhGcmljdGlvbiA9IHRhbmdlbnRTcGVlZDtcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudEltcHVsc2UgPSBDb21tb24uY2xhbXAoXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWlyLmZyaWN0aW9uICogdGFuZ2VudFZlbG9jaXR5RGlyZWN0aW9uICogdGltZVNjYWxlU3F1YXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC1tYXhGcmljdGlvbiwgbWF4RnJpY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBtb2RpZnkgaW1wdWxzZXMgYWNjb3VudGluZyBmb3IgbWFzcywgaW5lcnRpYSBhbmQgb2Zmc2V0XG4gICAgICAgICAgICAgICAgdmFyIG9BY04gPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0QSwgbm9ybWFsKSxcbiAgICAgICAgICAgICAgICAgICAgb0JjTiA9IFZlY3Rvci5jcm9zcyhvZmZzZXRCLCBub3JtYWwpLFxuICAgICAgICAgICAgICAgICAgICBzaGFyZSA9IGNvbnRhY3RTaGFyZSAvIChib2R5QS5pbnZlcnNlTWFzcyArIGJvZHlCLmludmVyc2VNYXNzICsgYm9keUEuaW52ZXJzZUluZXJ0aWEgKiBvQWNOICogb0FjTiAgKyBib2R5Qi5pbnZlcnNlSW5lcnRpYSAqIG9CY04gKiBvQmNOKTtcblxuICAgICAgICAgICAgICAgIG5vcm1hbEltcHVsc2UgKj0gc2hhcmU7XG4gICAgICAgICAgICAgICAgdGFuZ2VudEltcHVsc2UgKj0gc2hhcmU7XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgaGlnaCB2ZWxvY2l0eSBhbmQgcmVzdGluZyBjb2xsaXNpb25zIHNlcGFyYXRlbHlcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsVmVsb2NpdHkgPCAwICYmIG5vcm1hbFZlbG9jaXR5ICogbm9ybWFsVmVsb2NpdHkgPiBSZXNvbHZlci5fcmVzdGluZ1RocmVzaCAqIHRpbWVTY2FsZVNxdWFyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGlnaCBub3JtYWwgdmVsb2NpdHkgc28gY2xlYXIgY2FjaGVkIGNvbnRhY3Qgbm9ybWFsIGltcHVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5ub3JtYWxJbXB1bHNlID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBzb2x2ZSByZXN0aW5nIGNvbGxpc2lvbiBjb25zdHJhaW50cyB1c2luZyBFcmluIENhdHRvJ3MgbWV0aG9kIChHREMwOClcbiAgICAgICAgICAgICAgICAgICAgLy8gaW1wdWxzZSBjb25zdHJhaW50IHRlbmRzIHRvIDBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhY3ROb3JtYWxJbXB1bHNlID0gY29udGFjdC5ub3JtYWxJbXB1bHNlO1xuICAgICAgICAgICAgICAgICAgICBjb250YWN0Lm5vcm1hbEltcHVsc2UgPSBNYXRoLm1pbihjb250YWN0Lm5vcm1hbEltcHVsc2UgKyBub3JtYWxJbXB1bHNlLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsSW1wdWxzZSA9IGNvbnRhY3Qubm9ybWFsSW1wdWxzZSAtIGNvbnRhY3ROb3JtYWxJbXB1bHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBoaWdoIHZlbG9jaXR5IGFuZCByZXN0aW5nIGNvbGxpc2lvbnMgc2VwYXJhdGVseVxuICAgICAgICAgICAgICAgIGlmICh0YW5nZW50VmVsb2NpdHkgKiB0YW5nZW50VmVsb2NpdHkgPiBSZXNvbHZlci5fcmVzdGluZ1RocmVzaFRhbmdlbnQgKiB0aW1lU2NhbGVTcXVhcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZ2ggdGFuZ2VudCB2ZWxvY2l0eSBzbyBjbGVhciBjYWNoZWQgY29udGFjdCB0YW5nZW50IGltcHVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC50YW5nZW50SW1wdWxzZSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc29sdmUgcmVzdGluZyBjb2xsaXNpb24gY29uc3RyYWludHMgdXNpbmcgRXJpbiBDYXR0bydzIG1ldGhvZCAoR0RDMDgpXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhbmdlbnQgaW1wdWxzZSB0ZW5kcyB0byAtdGFuZ2VudFNwZWVkIG9yICt0YW5nZW50U3BlZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhY3RUYW5nZW50SW1wdWxzZSA9IGNvbnRhY3QudGFuZ2VudEltcHVsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QudGFuZ2VudEltcHVsc2UgPSBDb21tb24uY2xhbXAoY29udGFjdC50YW5nZW50SW1wdWxzZSArIHRhbmdlbnRJbXB1bHNlLCAtbWF4RnJpY3Rpb24sIG1heEZyaWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudEltcHVsc2UgPSBjb250YWN0LnRhbmdlbnRJbXB1bHNlIC0gY29udGFjdFRhbmdlbnRJbXB1bHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHRvdGFsIGltcHVsc2UgZnJvbSBjb250YWN0XG4gICAgICAgICAgICAgICAgaW1wdWxzZS54ID0gKG5vcm1hbC54ICogbm9ybWFsSW1wdWxzZSkgKyAodGFuZ2VudC54ICogdGFuZ2VudEltcHVsc2UpO1xuICAgICAgICAgICAgICAgIGltcHVsc2UueSA9IChub3JtYWwueSAqIG5vcm1hbEltcHVsc2UpICsgKHRhbmdlbnQueSAqIHRhbmdlbnRJbXB1bHNlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBhcHBseSBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgIGlmICghKGJvZHlBLmlzU3RhdGljIHx8IGJvZHlBLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uUHJldi54ICs9IGltcHVsc2UueCAqIGJvZHlBLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueSArPSBpbXB1bHNlLnkgKiBib2R5QS5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgYm9keUEuYW5nbGVQcmV2ICs9IFZlY3Rvci5jcm9zcyhvZmZzZXRBLCBpbXB1bHNlKSAqIGJvZHlBLmludmVyc2VJbmVydGlhO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghKGJvZHlCLmlzU3RhdGljIHx8IGJvZHlCLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi54IC09IGltcHVsc2UueCAqIGJvZHlCLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvblByZXYueSAtPSBpbXB1bHNlLnkgKiBib2R5Qi5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgYm9keUIuYW5nbGVQcmV2IC09IFZlY3Rvci5jcm9zcyhvZmZzZXRCLCBpbXB1bHNlKSAqIGJvZHlCLmludmVyc2VJbmVydGlhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5fV0sMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlNBVGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGRldGVjdGluZyBjb2xsaXNpb25zIHVzaW5nIHRoZSBTZXBhcmF0aW5nIEF4aXMgVGhlb3JlbS5cbipcbiogQGNsYXNzIFNBVFxuKi9cblxuLy8gVE9ETzogdHJ1ZSBjaXJjbGVzIGFuZCBjdXJ2ZXNcblxudmFyIFNBVCA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNBVDtcblxudmFyIFZlcnRpY2VzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGNvbGxpc2lvbiBiZXR3ZWVuIHR3byBib2RpZXMgdXNpbmcgdGhlIFNlcGFyYXRpbmcgQXhpcyBUaGVvcmVtLlxuICAgICAqIEBtZXRob2QgY29sbGlkZXNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlBXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5QlxuICAgICAqIEBwYXJhbSB7Y29sbGlzaW9ufSBwcmV2aW91c0NvbGxpc2lvblxuICAgICAqIEByZXR1cm4ge2NvbGxpc2lvbn0gY29sbGlzaW9uXG4gICAgICovXG4gICAgU0FULmNvbGxpZGVzID0gZnVuY3Rpb24oYm9keUEsIGJvZHlCLCBwcmV2aW91c0NvbGxpc2lvbikge1xuICAgICAgICB2YXIgb3ZlcmxhcEFCLFxuICAgICAgICAgICAgb3ZlcmxhcEJBLCBcbiAgICAgICAgICAgIG1pbk92ZXJsYXAsXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBjYW5SZXVzZVByZXZDb2wgPSBmYWxzZTtcblxuICAgICAgICBpZiAocHJldmlvdXNDb2xsaXNpb24pIHtcbiAgICAgICAgICAgIC8vIGVzdGltYXRlIHRvdGFsIG1vdGlvblxuICAgICAgICAgICAgdmFyIHBhcmVudEEgPSBib2R5QS5wYXJlbnQsXG4gICAgICAgICAgICAgICAgcGFyZW50QiA9IGJvZHlCLnBhcmVudCxcbiAgICAgICAgICAgICAgICBtb3Rpb24gPSBwYXJlbnRBLnNwZWVkICogcGFyZW50QS5zcGVlZCArIHBhcmVudEEuYW5ndWxhclNwZWVkICogcGFyZW50QS5hbmd1bGFyU3BlZWRcbiAgICAgICAgICAgICAgICAgICAgICAgKyBwYXJlbnRCLnNwZWVkICogcGFyZW50Qi5zcGVlZCArIHBhcmVudEIuYW5ndWxhclNwZWVkICogcGFyZW50Qi5hbmd1bGFyU3BlZWQ7XG5cbiAgICAgICAgICAgIC8vIHdlIG1heSBiZSBhYmxlIHRvIChwYXJ0aWFsbHkpIHJldXNlIGNvbGxpc2lvbiByZXN1bHQgXG4gICAgICAgICAgICAvLyBidXQgb25seSBzYWZlIGlmIGNvbGxpc2lvbiB3YXMgcmVzdGluZ1xuICAgICAgICAgICAgY2FuUmV1c2VQcmV2Q29sID0gcHJldmlvdXNDb2xsaXNpb24gJiYgcHJldmlvdXNDb2xsaXNpb24uY29sbGlkZWQgJiYgbW90aW9uIDwgMC4yO1xuXG4gICAgICAgICAgICAvLyByZXVzZSBjb2xsaXNpb24gb2JqZWN0XG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwcmV2aW91c0NvbGxpc2lvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IHsgY29sbGlkZWQ6IGZhbHNlLCBib2R5QTogYm9keUEsIGJvZHlCOiBib2R5QiB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZpb3VzQ29sbGlzaW9uICYmIGNhblJldXNlUHJldkNvbCkge1xuICAgICAgICAgICAgLy8gaWYgd2UgY2FuIHJldXNlIHRoZSBjb2xsaXNpb24gcmVzdWx0XG4gICAgICAgICAgICAvLyB3ZSBvbmx5IG5lZWQgdG8gdGVzdCB0aGUgcHJldmlvdXNseSBmb3VuZCBheGlzXG4gICAgICAgICAgICB2YXIgYXhpc0JvZHlBID0gY29sbGlzaW9uLmF4aXNCb2R5LFxuICAgICAgICAgICAgICAgIGF4aXNCb2R5QiA9IGF4aXNCb2R5QSA9PT0gYm9keUEgPyBib2R5QiA6IGJvZHlBLFxuICAgICAgICAgICAgICAgIGF4ZXMgPSBbYXhpc0JvZHlBLmF4ZXNbcHJldmlvdXNDb2xsaXNpb24uYXhpc051bWJlcl1dO1xuXG4gICAgICAgICAgICBtaW5PdmVybGFwID0gU0FULl9vdmVybGFwQXhlcyhheGlzQm9keUEudmVydGljZXMsIGF4aXNCb2R5Qi52ZXJ0aWNlcywgYXhlcyk7XG4gICAgICAgICAgICBjb2xsaXNpb24ucmV1c2VkID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKG1pbk92ZXJsYXAub3ZlcmxhcCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmNvbGxpZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxpc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGNhbid0IHJldXNlIGEgcmVzdWx0LCBwZXJmb3JtIGEgZnVsbCBTQVQgdGVzdFxuXG4gICAgICAgICAgICBvdmVybGFwQUIgPSBTQVQuX292ZXJsYXBBeGVzKGJvZHlBLnZlcnRpY2VzLCBib2R5Qi52ZXJ0aWNlcywgYm9keUEuYXhlcyk7XG5cbiAgICAgICAgICAgIGlmIChvdmVybGFwQUIub3ZlcmxhcCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmNvbGxpZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxpc2lvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3ZlcmxhcEJBID0gU0FULl9vdmVybGFwQXhlcyhib2R5Qi52ZXJ0aWNlcywgYm9keUEudmVydGljZXMsIGJvZHlCLmF4ZXMpO1xuXG4gICAgICAgICAgICBpZiAob3ZlcmxhcEJBLm92ZXJsYXAgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNvbGxpc2lvbi5jb2xsaWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsaXNpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvdmVybGFwQUIub3ZlcmxhcCA8IG92ZXJsYXBCQS5vdmVybGFwKSB7XG4gICAgICAgICAgICAgICAgbWluT3ZlcmxhcCA9IG92ZXJsYXBBQjtcbiAgICAgICAgICAgICAgICBjb2xsaXNpb24uYXhpc0JvZHkgPSBib2R5QTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluT3ZlcmxhcCA9IG92ZXJsYXBCQTtcbiAgICAgICAgICAgICAgICBjb2xsaXNpb24uYXhpc0JvZHkgPSBib2R5QjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW1wb3J0YW50IGZvciByZXVzZSBsYXRlclxuICAgICAgICAgICAgY29sbGlzaW9uLmF4aXNOdW1iZXIgPSBtaW5PdmVybGFwLmF4aXNOdW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsaXNpb24uYm9keUEgPSBib2R5QS5pZCA8IGJvZHlCLmlkID8gYm9keUEgOiBib2R5QjtcbiAgICAgICAgY29sbGlzaW9uLmJvZHlCID0gYm9keUEuaWQgPCBib2R5Qi5pZCA/IGJvZHlCIDogYm9keUE7XG4gICAgICAgIGNvbGxpc2lvbi5jb2xsaWRlZCA9IHRydWU7XG4gICAgICAgIGNvbGxpc2lvbi5kZXB0aCA9IG1pbk92ZXJsYXAub3ZlcmxhcDtcbiAgICAgICAgY29sbGlzaW9uLnBhcmVudEEgPSBjb2xsaXNpb24uYm9keUEucGFyZW50O1xuICAgICAgICBjb2xsaXNpb24ucGFyZW50QiA9IGNvbGxpc2lvbi5ib2R5Qi5wYXJlbnQ7XG4gICAgICAgIFxuICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcbiAgICAgICAgYm9keUIgPSBjb2xsaXNpb24uYm9keUI7XG5cbiAgICAgICAgLy8gZW5zdXJlIG5vcm1hbCBpcyBmYWNpbmcgYXdheSBmcm9tIGJvZHlBXG4gICAgICAgIGlmIChWZWN0b3IuZG90KG1pbk92ZXJsYXAuYXhpcywgVmVjdG9yLnN1Yihib2R5Qi5wb3NpdGlvbiwgYm9keUEucG9zaXRpb24pKSA8IDApIHtcbiAgICAgICAgICAgIGNvbGxpc2lvbi5ub3JtYWwgPSB7XG4gICAgICAgICAgICAgICAgeDogbWluT3ZlcmxhcC5heGlzLngsXG4gICAgICAgICAgICAgICAgeTogbWluT3ZlcmxhcC5heGlzLnlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2xsaXNpb24ubm9ybWFsID0ge1xuICAgICAgICAgICAgICAgIHg6IC1taW5PdmVybGFwLmF4aXMueCxcbiAgICAgICAgICAgICAgICB5OiAtbWluT3ZlcmxhcC5heGlzLnlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsaXNpb24udGFuZ2VudCA9IFZlY3Rvci5wZXJwKGNvbGxpc2lvbi5ub3JtYWwpO1xuXG4gICAgICAgIGNvbGxpc2lvbi5wZW5ldHJhdGlvbiA9IGNvbGxpc2lvbi5wZW5ldHJhdGlvbiB8fCB7fTtcbiAgICAgICAgY29sbGlzaW9uLnBlbmV0cmF0aW9uLnggPSBjb2xsaXNpb24ubm9ybWFsLnggKiBjb2xsaXNpb24uZGVwdGg7XG4gICAgICAgIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi55ID0gY29sbGlzaW9uLm5vcm1hbC55ICogY29sbGlzaW9uLmRlcHRoOyBcblxuICAgICAgICAvLyBmaW5kIHN1cHBvcnQgcG9pbnRzLCB0aGVyZSBpcyBhbHdheXMgZWl0aGVyIGV4YWN0bHkgb25lIG9yIHR3b1xuICAgICAgICB2YXIgdmVydGljZXNCID0gU0FULl9maW5kU3VwcG9ydHMoYm9keUEsIGJvZHlCLCBjb2xsaXNpb24ubm9ybWFsKSxcbiAgICAgICAgICAgIHN1cHBvcnRzID0gW107XG5cbiAgICAgICAgLy8gZmluZCB0aGUgc3VwcG9ydHMgZnJvbSBib2R5QiB0aGF0IGFyZSBpbnNpZGUgYm9keUFcbiAgICAgICAgaWYgKFZlcnRpY2VzLmNvbnRhaW5zKGJvZHlBLnZlcnRpY2VzLCB2ZXJ0aWNlc0JbMF0pKVxuICAgICAgICAgICAgc3VwcG9ydHMucHVzaCh2ZXJ0aWNlc0JbMF0pO1xuXG4gICAgICAgIGlmIChWZXJ0aWNlcy5jb250YWlucyhib2R5QS52ZXJ0aWNlcywgdmVydGljZXNCWzFdKSlcbiAgICAgICAgICAgIHN1cHBvcnRzLnB1c2godmVydGljZXNCWzFdKTtcblxuICAgICAgICAvLyBmaW5kIHRoZSBzdXBwb3J0cyBmcm9tIGJvZHlBIHRoYXQgYXJlIGluc2lkZSBib2R5QlxuICAgICAgICBpZiAoc3VwcG9ydHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgdmFyIHZlcnRpY2VzQSA9IFNBVC5fZmluZFN1cHBvcnRzKGJvZHlCLCBib2R5QSwgVmVjdG9yLm5lZyhjb2xsaXNpb24ubm9ybWFsKSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoVmVydGljZXMuY29udGFpbnMoYm9keUIudmVydGljZXMsIHZlcnRpY2VzQVswXSkpXG4gICAgICAgICAgICAgICAgc3VwcG9ydHMucHVzaCh2ZXJ0aWNlc0FbMF0pO1xuXG4gICAgICAgICAgICBpZiAoc3VwcG9ydHMubGVuZ3RoIDwgMiAmJiBWZXJ0aWNlcy5jb250YWlucyhib2R5Qi52ZXJ0aWNlcywgdmVydGljZXNBWzFdKSlcbiAgICAgICAgICAgICAgICBzdXBwb3J0cy5wdXNoKHZlcnRpY2VzQVsxXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhY2NvdW50IGZvciB0aGUgZWRnZSBjYXNlIG9mIG92ZXJsYXBwaW5nIGJ1dCBubyB2ZXJ0ZXggY29udGFpbm1lbnRcbiAgICAgICAgaWYgKHN1cHBvcnRzLmxlbmd0aCA8IDEpXG4gICAgICAgICAgICBzdXBwb3J0cyA9IFt2ZXJ0aWNlc0JbMF1dO1xuICAgICAgICBcbiAgICAgICAgY29sbGlzaW9uLnN1cHBvcnRzID0gc3VwcG9ydHM7XG5cbiAgICAgICAgcmV0dXJuIGNvbGxpc2lvbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmluZCB0aGUgb3ZlcmxhcCBiZXR3ZWVuIHR3byBzZXRzIG9mIHZlcnRpY2VzLlxuICAgICAqIEBtZXRob2QgX292ZXJsYXBBeGVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gdmVydGljZXNBXG4gICAgICogQHBhcmFtIHt9IHZlcnRpY2VzQlxuICAgICAqIEBwYXJhbSB7fSBheGVzXG4gICAgICogQHJldHVybiByZXN1bHRcbiAgICAgKi9cbiAgICBTQVQuX292ZXJsYXBBeGVzID0gZnVuY3Rpb24odmVydGljZXNBLCB2ZXJ0aWNlc0IsIGF4ZXMpIHtcbiAgICAgICAgdmFyIHByb2plY3Rpb25BID0gVmVjdG9yLl90ZW1wWzBdLCBcbiAgICAgICAgICAgIHByb2plY3Rpb25CID0gVmVjdG9yLl90ZW1wWzFdLFxuICAgICAgICAgICAgcmVzdWx0ID0geyBvdmVybGFwOiBOdW1iZXIuTUFYX1ZBTFVFIH0sXG4gICAgICAgICAgICBvdmVybGFwLFxuICAgICAgICAgICAgYXhpcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGF4aXMgPSBheGVzW2ldO1xuXG4gICAgICAgICAgICBTQVQuX3Byb2plY3RUb0F4aXMocHJvamVjdGlvbkEsIHZlcnRpY2VzQSwgYXhpcyk7XG4gICAgICAgICAgICBTQVQuX3Byb2plY3RUb0F4aXMocHJvamVjdGlvbkIsIHZlcnRpY2VzQiwgYXhpcyk7XG5cbiAgICAgICAgICAgIG92ZXJsYXAgPSBNYXRoLm1pbihwcm9qZWN0aW9uQS5tYXggLSBwcm9qZWN0aW9uQi5taW4sIHByb2plY3Rpb25CLm1heCAtIHByb2plY3Rpb25BLm1pbik7XG5cbiAgICAgICAgICAgIGlmIChvdmVybGFwIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQub3ZlcmxhcCA9IG92ZXJsYXA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG92ZXJsYXAgPCByZXN1bHQub3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5vdmVybGFwID0gb3ZlcmxhcDtcbiAgICAgICAgICAgICAgICByZXN1bHQuYXhpcyA9IGF4aXM7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmF4aXNOdW1iZXIgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJvamVjdHMgdmVydGljZXMgb24gYW4gYXhpcyBhbmQgcmV0dXJucyBhbiBpbnRlcnZhbC5cbiAgICAgKiBAbWV0aG9kIF9wcm9qZWN0VG9BeGlzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gcHJvamVjdGlvblxuICAgICAqIEBwYXJhbSB7fSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7fSBheGlzXG4gICAgICovXG4gICAgU0FULl9wcm9qZWN0VG9BeGlzID0gZnVuY3Rpb24ocHJvamVjdGlvbiwgdmVydGljZXMsIGF4aXMpIHtcbiAgICAgICAgdmFyIG1pbiA9IFZlY3Rvci5kb3QodmVydGljZXNbMF0sIGF4aXMpLFxuICAgICAgICAgICAgbWF4ID0gbWluO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBkb3QgPSBWZWN0b3IuZG90KHZlcnRpY2VzW2ldLCBheGlzKTtcblxuICAgICAgICAgICAgaWYgKGRvdCA+IG1heCkgeyBcbiAgICAgICAgICAgICAgICBtYXggPSBkb3Q7IFxuICAgICAgICAgICAgfSBlbHNlIGlmIChkb3QgPCBtaW4pIHsgXG4gICAgICAgICAgICAgICAgbWluID0gZG90OyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByb2plY3Rpb24ubWluID0gbWluO1xuICAgICAgICBwcm9qZWN0aW9uLm1heCA9IG1heDtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEZpbmRzIHN1cHBvcnRpbmcgdmVydGljZXMgZ2l2ZW4gdHdvIGJvZGllcyBhbG9uZyBhIGdpdmVuIGRpcmVjdGlvbiB1c2luZyBoaWxsLWNsaW1iaW5nLlxuICAgICAqIEBtZXRob2QgX2ZpbmRTdXBwb3J0c1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGJvZHlBXG4gICAgICogQHBhcmFtIHt9IGJvZHlCXG4gICAgICogQHBhcmFtIHt9IG5vcm1hbFxuICAgICAqIEByZXR1cm4gW3ZlY3Rvcl1cbiAgICAgKi9cbiAgICBTQVQuX2ZpbmRTdXBwb3J0cyA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5Qiwgbm9ybWFsKSB7XG4gICAgICAgIHZhciBuZWFyZXN0RGlzdGFuY2UgPSBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgICAgdmVydGV4VG9Cb2R5ID0gVmVjdG9yLl90ZW1wWzBdLFxuICAgICAgICAgICAgdmVydGljZXMgPSBib2R5Qi52ZXJ0aWNlcyxcbiAgICAgICAgICAgIGJvZHlBUG9zaXRpb24gPSBib2R5QS5wb3NpdGlvbixcbiAgICAgICAgICAgIGRpc3RhbmNlLFxuICAgICAgICAgICAgdmVydGV4LFxuICAgICAgICAgICAgdmVydGV4QSxcbiAgICAgICAgICAgIHZlcnRleEI7XG5cbiAgICAgICAgLy8gZmluZCBjbG9zZXN0IHZlcnRleCBvbiBib2R5QlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgICAgIHZlcnRleFRvQm9keS54ID0gdmVydGV4LnggLSBib2R5QVBvc2l0aW9uLng7XG4gICAgICAgICAgICB2ZXJ0ZXhUb0JvZHkueSA9IHZlcnRleC55IC0gYm9keUFQb3NpdGlvbi55O1xuICAgICAgICAgICAgZGlzdGFuY2UgPSAtVmVjdG9yLmRvdChub3JtYWwsIHZlcnRleFRvQm9keSk7XG5cbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG5lYXJlc3REaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgIG5lYXJlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgICAgIHZlcnRleEEgPSB2ZXJ0ZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5kIG5leHQgY2xvc2VzdCB2ZXJ0ZXggdXNpbmcgdGhlIHR3byBjb25uZWN0ZWQgdG8gaXRcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IHZlcnRleEEuaW5kZXggLSAxID49IDAgPyB2ZXJ0ZXhBLmluZGV4IC0gMSA6IHZlcnRpY2VzLmxlbmd0aCAtIDE7XG4gICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW3ByZXZJbmRleF07XG4gICAgICAgIHZlcnRleFRvQm9keS54ID0gdmVydGV4LnggLSBib2R5QVBvc2l0aW9uLng7XG4gICAgICAgIHZlcnRleFRvQm9keS55ID0gdmVydGV4LnkgLSBib2R5QVBvc2l0aW9uLnk7XG4gICAgICAgIG5lYXJlc3REaXN0YW5jZSA9IC1WZWN0b3IuZG90KG5vcm1hbCwgdmVydGV4VG9Cb2R5KTtcbiAgICAgICAgdmVydGV4QiA9IHZlcnRleDtcblxuICAgICAgICB2YXIgbmV4dEluZGV4ID0gKHZlcnRleEEuaW5kZXggKyAxKSAlIHZlcnRpY2VzLmxlbmd0aDtcbiAgICAgICAgdmVydGV4ID0gdmVydGljZXNbbmV4dEluZGV4XTtcbiAgICAgICAgdmVydGV4VG9Cb2R5LnggPSB2ZXJ0ZXgueCAtIGJvZHlBUG9zaXRpb24ueDtcbiAgICAgICAgdmVydGV4VG9Cb2R5LnkgPSB2ZXJ0ZXgueSAtIGJvZHlBUG9zaXRpb24ueTtcbiAgICAgICAgZGlzdGFuY2UgPSAtVmVjdG9yLmRvdChub3JtYWwsIHZlcnRleFRvQm9keSk7XG4gICAgICAgIGlmIChkaXN0YW5jZSA8IG5lYXJlc3REaXN0YW5jZSkge1xuICAgICAgICAgICAgdmVydGV4QiA9IHZlcnRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbdmVydGV4QSwgdmVydGV4Ql07XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6Mjl9XSwxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuQ29uc3RyYWludGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgY29uc3RyYWludHMuXG4qIENvbnN0cmFpbnRzIGFyZSB1c2VkIGZvciBzcGVjaWZ5aW5nIHRoYXQgYSBmaXhlZCBkaXN0YW5jZSBtdXN0IGJlIG1haW50YWluZWQgYmV0d2VlbiB0d28gYm9kaWVzIChvciBhIGJvZHkgYW5kIGEgZml4ZWQgd29ybGQtc3BhY2UgcG9zaXRpb24pLlxuKiBUaGUgc3RpZmZuZXNzIG9mIGNvbnN0cmFpbnRzIGNhbiBiZSBtb2RpZmllZCB0byBjcmVhdGUgc3ByaW5ncyBvciBlbGFzdGljLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgQ29uc3RyYWludFxuKi9cblxudmFyIENvbnN0cmFpbnQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb25zdHJhaW50O1xuXG52YXIgVmVydGljZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZXJ0aWNlcycpO1xudmFyIFZlY3RvciA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIFNsZWVwaW5nID0gX2RlcmVxXygnLi4vY29yZS9TbGVlcGluZycpO1xudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xudmFyIEF4ZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9BeGVzJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgQ29uc3RyYWludC5fd2FybWluZyA9IDAuNDtcbiAgICBDb25zdHJhaW50Ll90b3JxdWVEYW1wZW4gPSAxO1xuICAgIENvbnN0cmFpbnQuX21pbkxlbmd0aCA9IDAuMDAwMDAxO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb25zdHJhaW50LlxuICAgICAqIEFsbCBwcm9wZXJ0aWVzIGhhdmUgZGVmYXVsdCB2YWx1ZXMsIGFuZCBtYW55IGFyZSBwcmUtY2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIG90aGVyIHByb3BlcnRpZXMuXG4gICAgICogVG8gc2ltdWxhdGUgYSByZXZvbHV0ZSBjb25zdHJhaW50IChvciBwaW4gam9pbnQpIHNldCBgbGVuZ3RoOiAwYCBhbmQgYSBoaWdoIGBzdGlmZm5lc3NgIHZhbHVlIChlLmcuIGAwLjdgIG9yIGFib3ZlKS5cbiAgICAgKiBJZiB0aGUgY29uc3RyYWludCBpcyB1bnN0YWJsZSwgdHJ5IGxvd2VyaW5nIHRoZSBgc3RpZmZuZXNzYCB2YWx1ZSBhbmQgLyBvciBpbmNyZWFzaW5nIGBlbmdpbmUuY29uc3RyYWludEl0ZXJhdGlvbnNgLlxuICAgICAqIEZvciBjb21wb3VuZCBib2RpZXMsIGNvbnN0cmFpbnRzIG11c3QgYmUgYXBwbGllZCB0byB0aGUgcGFyZW50IGJvZHkgKG5vdCBvbmUgb2YgaXRzIHBhcnRzKS5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICovXG4gICAgQ29uc3RyYWludC5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBjb25zdHJhaW50ID0gb3B0aW9ucztcblxuICAgICAgICAvLyBpZiBib2RpZXMgZGVmaW5lZCBidXQgbm8gcG9pbnRzLCB1c2UgYm9keSBjZW50cmVcbiAgICAgICAgaWYgKGNvbnN0cmFpbnQuYm9keUEgJiYgIWNvbnN0cmFpbnQucG9pbnRBKVxuICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEEgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgaWYgKGNvbnN0cmFpbnQuYm9keUIgJiYgIWNvbnN0cmFpbnQucG9pbnRCKVxuICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEIgPSB7IHg6IDAsIHk6IDAgfTtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgc3RhdGljIGxlbmd0aCB1c2luZyBpbml0aWFsIHdvcmxkIHNwYWNlIHBvaW50c1xuICAgICAgICB2YXIgaW5pdGlhbFBvaW50QSA9IGNvbnN0cmFpbnQuYm9keUEgPyBWZWN0b3IuYWRkKGNvbnN0cmFpbnQuYm9keUEucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRBKSA6IGNvbnN0cmFpbnQucG9pbnRBLFxuICAgICAgICAgICAgaW5pdGlhbFBvaW50QiA9IGNvbnN0cmFpbnQuYm9keUIgPyBWZWN0b3IuYWRkKGNvbnN0cmFpbnQuYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKSA6IGNvbnN0cmFpbnQucG9pbnRCLFxuICAgICAgICAgICAgbGVuZ3RoID0gVmVjdG9yLm1hZ25pdHVkZShWZWN0b3Iuc3ViKGluaXRpYWxQb2ludEEsIGluaXRpYWxQb2ludEIpKTtcbiAgICBcbiAgICAgICAgY29uc3RyYWludC5sZW5ndGggPSB0eXBlb2YgY29uc3RyYWludC5sZW5ndGggIT09ICd1bmRlZmluZWQnID8gY29uc3RyYWludC5sZW5ndGggOiBsZW5ndGg7XG5cbiAgICAgICAgLy8gb3B0aW9uIGRlZmF1bHRzXG4gICAgICAgIGNvbnN0cmFpbnQuaWQgPSBjb25zdHJhaW50LmlkIHx8IENvbW1vbi5uZXh0SWQoKTtcbiAgICAgICAgY29uc3RyYWludC5sYWJlbCA9IGNvbnN0cmFpbnQubGFiZWwgfHwgJ0NvbnN0cmFpbnQnO1xuICAgICAgICBjb25zdHJhaW50LnR5cGUgPSAnY29uc3RyYWludCc7XG4gICAgICAgIGNvbnN0cmFpbnQuc3RpZmZuZXNzID0gY29uc3RyYWludC5zdGlmZm5lc3MgfHwgKGNvbnN0cmFpbnQubGVuZ3RoID4gMCA/IDEgOiAwLjcpO1xuICAgICAgICBjb25zdHJhaW50LmRhbXBpbmcgPSBjb25zdHJhaW50LmRhbXBpbmcgfHwgMDtcbiAgICAgICAgY29uc3RyYWludC5hbmd1bGFyU3RpZmZuZXNzID0gY29uc3RyYWludC5hbmd1bGFyU3RpZmZuZXNzIHx8IDA7XG4gICAgICAgIGNvbnN0cmFpbnQuYW5nbGVBID0gY29uc3RyYWludC5ib2R5QSA/IGNvbnN0cmFpbnQuYm9keUEuYW5nbGUgOiBjb25zdHJhaW50LmFuZ2xlQTtcbiAgICAgICAgY29uc3RyYWludC5hbmdsZUIgPSBjb25zdHJhaW50LmJvZHlCID8gY29uc3RyYWludC5ib2R5Qi5hbmdsZSA6IGNvbnN0cmFpbnQuYW5nbGVCO1xuICAgICAgICBjb25zdHJhaW50LnBsdWdpbiA9IHt9O1xuXG4gICAgICAgIC8vIHJlbmRlclxuICAgICAgICB2YXIgcmVuZGVyID0ge1xuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGxpbmVXaWR0aDogMixcbiAgICAgICAgICAgIHN0cm9rZVN0eWxlOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBhbmNob3JzOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNvbnN0cmFpbnQubGVuZ3RoID09PSAwICYmIGNvbnN0cmFpbnQuc3RpZmZuZXNzID4gMC4xKSB7XG4gICAgICAgICAgICByZW5kZXIudHlwZSA9ICdwaW4nO1xuICAgICAgICAgICAgcmVuZGVyLmFuY2hvcnMgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25zdHJhaW50LnN0aWZmbmVzcyA8IDAuOSkge1xuICAgICAgICAgICAgcmVuZGVyLnR5cGUgPSAnc3ByaW5nJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0cmFpbnQucmVuZGVyID0gQ29tbW9uLmV4dGVuZChyZW5kZXIsIGNvbnN0cmFpbnQucmVuZGVyKTtcblxuICAgICAgICByZXR1cm4gY29uc3RyYWludDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZXMgZm9yIHNvbHZpbmcgYnkgY29uc3RyYWludCB3YXJtaW5nLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBwcmVTb2x2ZUFsbFxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKi9cbiAgICBDb25zdHJhaW50LnByZVNvbHZlQWxsID0gZnVuY3Rpb24oYm9kaWVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBpbXB1bHNlID0gYm9keS5jb25zdHJhaW50SW1wdWxzZTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaXNTdGF0aWMgfHwgKGltcHVsc2UueCA9PT0gMCAmJiBpbXB1bHNlLnkgPT09IDAgJiYgaW1wdWxzZS5hbmdsZSA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYm9keS5wb3NpdGlvbi54ICs9IGltcHVsc2UueDtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb24ueSArPSBpbXB1bHNlLnk7XG4gICAgICAgICAgICBib2R5LmFuZ2xlICs9IGltcHVsc2UuYW5nbGU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU29sdmVzIGFsbCBjb25zdHJhaW50cyBpbiBhIGxpc3Qgb2YgY29sbGlzaW9ucy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2Qgc29sdmVBbGxcbiAgICAgKiBAcGFyYW0ge2NvbnN0cmFpbnRbXX0gY29uc3RyYWludHNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNjYWxlXG4gICAgICovXG4gICAgQ29uc3RyYWludC5zb2x2ZUFsbCA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCB0aW1lU2NhbGUpIHtcbiAgICAgICAgLy8gU29sdmUgZml4ZWQgY29uc3RyYWludHMgZmlyc3QuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc3RyYWludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBjb25zdHJhaW50ID0gY29uc3RyYWludHNbaV0sXG4gICAgICAgICAgICAgICAgZml4ZWRBID0gIWNvbnN0cmFpbnQuYm9keUEgfHwgKGNvbnN0cmFpbnQuYm9keUEgJiYgY29uc3RyYWludC5ib2R5QS5pc1N0YXRpYyksXG4gICAgICAgICAgICAgICAgZml4ZWRCID0gIWNvbnN0cmFpbnQuYm9keUIgfHwgKGNvbnN0cmFpbnQuYm9keUIgJiYgY29uc3RyYWludC5ib2R5Qi5pc1N0YXRpYyk7XG5cbiAgICAgICAgICAgIGlmIChmaXhlZEEgfHwgZml4ZWRCKSB7XG4gICAgICAgICAgICAgICAgQ29uc3RyYWludC5zb2x2ZShjb25zdHJhaW50c1tpXSwgdGltZVNjYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvbHZlIGZyZWUgY29uc3RyYWludHMgbGFzdC5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdHJhaW50ID0gY29uc3RyYWludHNbaV07XG4gICAgICAgICAgICBmaXhlZEEgPSAhY29uc3RyYWludC5ib2R5QSB8fCAoY29uc3RyYWludC5ib2R5QSAmJiBjb25zdHJhaW50LmJvZHlBLmlzU3RhdGljKTtcbiAgICAgICAgICAgIGZpeGVkQiA9ICFjb25zdHJhaW50LmJvZHlCIHx8IChjb25zdHJhaW50LmJvZHlCICYmIGNvbnN0cmFpbnQuYm9keUIuaXNTdGF0aWMpO1xuXG4gICAgICAgICAgICBpZiAoIWZpeGVkQSAmJiAhZml4ZWRCKSB7XG4gICAgICAgICAgICAgICAgQ29uc3RyYWludC5zb2x2ZShjb25zdHJhaW50c1tpXSwgdGltZVNjYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTb2x2ZXMgYSBkaXN0YW5jZSBjb25zdHJhaW50IHdpdGggR2F1c3MtU2llZGVsIG1ldGhvZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2Qgc29sdmVcbiAgICAgKiBAcGFyYW0ge2NvbnN0cmFpbnR9IGNvbnN0cmFpbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNjYWxlXG4gICAgICovXG4gICAgQ29uc3RyYWludC5zb2x2ZSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnQsIHRpbWVTY2FsZSkge1xuICAgICAgICB2YXIgYm9keUEgPSBjb25zdHJhaW50LmJvZHlBLFxuICAgICAgICAgICAgYm9keUIgPSBjb25zdHJhaW50LmJvZHlCLFxuICAgICAgICAgICAgcG9pbnRBID0gY29uc3RyYWludC5wb2ludEEsXG4gICAgICAgICAgICBwb2ludEIgPSBjb25zdHJhaW50LnBvaW50QjtcblxuICAgICAgICBpZiAoIWJvZHlBICYmICFib2R5QilcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAvLyB1cGRhdGUgcmVmZXJlbmNlIGFuZ2xlXG4gICAgICAgIGlmIChib2R5QSAmJiAhYm9keUEuaXNTdGF0aWMpIHtcbiAgICAgICAgICAgIFZlY3Rvci5yb3RhdGUocG9pbnRBLCBib2R5QS5hbmdsZSAtIGNvbnN0cmFpbnQuYW5nbGVBLCBwb2ludEEpO1xuICAgICAgICAgICAgY29uc3RyYWludC5hbmdsZUEgPSBib2R5QS5hbmdsZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gdXBkYXRlIHJlZmVyZW5jZSBhbmdsZVxuICAgICAgICBpZiAoYm9keUIgJiYgIWJvZHlCLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBWZWN0b3Iucm90YXRlKHBvaW50QiwgYm9keUIuYW5nbGUgLSBjb25zdHJhaW50LmFuZ2xlQiwgcG9pbnRCKTtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQuYW5nbGVCID0gYm9keUIuYW5nbGU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcG9pbnRBV29ybGQgPSBwb2ludEEsXG4gICAgICAgICAgICBwb2ludEJXb3JsZCA9IHBvaW50QjtcblxuICAgICAgICBpZiAoYm9keUEpIHBvaW50QVdvcmxkID0gVmVjdG9yLmFkZChib2R5QS5wb3NpdGlvbiwgcG9pbnRBKTtcbiAgICAgICAgaWYgKGJvZHlCKSBwb2ludEJXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb24sIHBvaW50Qik7XG5cbiAgICAgICAgaWYgKCFwb2ludEFXb3JsZCB8fCAhcG9pbnRCV29ybGQpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdmFyIGRlbHRhID0gVmVjdG9yLnN1Yihwb2ludEFXb3JsZCwgcG9pbnRCV29ybGQpLFxuICAgICAgICAgICAgY3VycmVudExlbmd0aCA9IFZlY3Rvci5tYWduaXR1ZGUoZGVsdGEpO1xuXG4gICAgICAgIC8vIHByZXZlbnQgc2luZ3VsYXJpdHlcbiAgICAgICAgaWYgKGN1cnJlbnRMZW5ndGggPCBDb25zdHJhaW50Ll9taW5MZW5ndGgpIHtcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggPSBDb25zdHJhaW50Ll9taW5MZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzb2x2ZSBkaXN0YW5jZSBjb25zdHJhaW50IHdpdGggR2F1c3MtU2llZGVsIG1ldGhvZFxuICAgICAgICB2YXIgZGlmZmVyZW5jZSA9IChjdXJyZW50TGVuZ3RoIC0gY29uc3RyYWludC5sZW5ndGgpIC8gY3VycmVudExlbmd0aCxcbiAgICAgICAgICAgIHN0aWZmbmVzcyA9IGNvbnN0cmFpbnQuc3RpZmZuZXNzIDwgMSA/IGNvbnN0cmFpbnQuc3RpZmZuZXNzICogdGltZVNjYWxlIDogY29uc3RyYWludC5zdGlmZm5lc3MsXG4gICAgICAgICAgICBmb3JjZSA9IFZlY3Rvci5tdWx0KGRlbHRhLCBkaWZmZXJlbmNlICogc3RpZmZuZXNzKSxcbiAgICAgICAgICAgIG1hc3NUb3RhbCA9IChib2R5QSA/IGJvZHlBLmludmVyc2VNYXNzIDogMCkgKyAoYm9keUIgPyBib2R5Qi5pbnZlcnNlTWFzcyA6IDApLFxuICAgICAgICAgICAgaW5lcnRpYVRvdGFsID0gKGJvZHlBID8gYm9keUEuaW52ZXJzZUluZXJ0aWEgOiAwKSArIChib2R5QiA/IGJvZHlCLmludmVyc2VJbmVydGlhIDogMCksXG4gICAgICAgICAgICByZXNpc3RhbmNlVG90YWwgPSBtYXNzVG90YWwgKyBpbmVydGlhVG90YWwsXG4gICAgICAgICAgICB0b3JxdWUsXG4gICAgICAgICAgICBzaGFyZSxcbiAgICAgICAgICAgIG5vcm1hbCxcbiAgICAgICAgICAgIG5vcm1hbFZlbG9jaXR5LFxuICAgICAgICAgICAgcmVsYXRpdmVWZWxvY2l0eTtcblxuICAgICAgICBpZiAoY29uc3RyYWludC5kYW1waW5nKSB7XG4gICAgICAgICAgICB2YXIgemVybyA9IFZlY3Rvci5jcmVhdGUoKTtcbiAgICAgICAgICAgIG5vcm1hbCA9IFZlY3Rvci5kaXYoZGVsdGEsIGN1cnJlbnRMZW5ndGgpO1xuXG4gICAgICAgICAgICByZWxhdGl2ZVZlbG9jaXR5ID0gVmVjdG9yLnN1YihcbiAgICAgICAgICAgICAgICBib2R5QiAmJiBWZWN0b3Iuc3ViKGJvZHlCLnBvc2l0aW9uLCBib2R5Qi5wb3NpdGlvblByZXYpIHx8IHplcm8sXG4gICAgICAgICAgICAgICAgYm9keUEgJiYgVmVjdG9yLnN1Yihib2R5QS5wb3NpdGlvbiwgYm9keUEucG9zaXRpb25QcmV2KSB8fCB6ZXJvXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBub3JtYWxWZWxvY2l0eSA9IFZlY3Rvci5kb3Qobm9ybWFsLCByZWxhdGl2ZVZlbG9jaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5QSAmJiAhYm9keUEuaXNTdGF0aWMpIHtcbiAgICAgICAgICAgIHNoYXJlID0gYm9keUEuaW52ZXJzZU1hc3MgLyBtYXNzVG90YWw7XG5cbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgYXBwbGllZCBpbXB1bHNlcyBmb3IgcG9zdCBzb2x2aW5nXG4gICAgICAgICAgICBib2R5QS5jb25zdHJhaW50SW1wdWxzZS54IC09IGZvcmNlLnggKiBzaGFyZTtcbiAgICAgICAgICAgIGJvZHlBLmNvbnN0cmFpbnRJbXB1bHNlLnkgLT0gZm9yY2UueSAqIHNoYXJlO1xuXG4gICAgICAgICAgICAvLyBhcHBseSBmb3JjZXNcbiAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uLnggLT0gZm9yY2UueCAqIHNoYXJlO1xuICAgICAgICAgICAgYm9keUEucG9zaXRpb24ueSAtPSBmb3JjZS55ICogc2hhcmU7XG5cbiAgICAgICAgICAgIC8vIGFwcGx5IGRhbXBpbmdcbiAgICAgICAgICAgIGlmIChjb25zdHJhaW50LmRhbXBpbmcpIHtcbiAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueCAtPSBjb25zdHJhaW50LmRhbXBpbmcgKiBub3JtYWwueCAqIG5vcm1hbFZlbG9jaXR5ICogc2hhcmU7XG4gICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnkgLT0gY29uc3RyYWludC5kYW1waW5nICogbm9ybWFsLnkgKiBub3JtYWxWZWxvY2l0eSAqIHNoYXJlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhcHBseSB0b3JxdWVcbiAgICAgICAgICAgIHRvcnF1ZSA9IChWZWN0b3IuY3Jvc3MocG9pbnRBLCBmb3JjZSkgLyByZXNpc3RhbmNlVG90YWwpICogQ29uc3RyYWludC5fdG9ycXVlRGFtcGVuICogYm9keUEuaW52ZXJzZUluZXJ0aWEgKiAoMSAtIGNvbnN0cmFpbnQuYW5ndWxhclN0aWZmbmVzcyk7XG4gICAgICAgICAgICBib2R5QS5jb25zdHJhaW50SW1wdWxzZS5hbmdsZSAtPSB0b3JxdWU7XG4gICAgICAgICAgICBib2R5QS5hbmdsZSAtPSB0b3JxdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keUIgJiYgIWJvZHlCLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBzaGFyZSA9IGJvZHlCLmludmVyc2VNYXNzIC8gbWFzc1RvdGFsO1xuXG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGFwcGxpZWQgaW1wdWxzZXMgZm9yIHBvc3Qgc29sdmluZ1xuICAgICAgICAgICAgYm9keUIuY29uc3RyYWludEltcHVsc2UueCArPSBmb3JjZS54ICogc2hhcmU7XG4gICAgICAgICAgICBib2R5Qi5jb25zdHJhaW50SW1wdWxzZS55ICs9IGZvcmNlLnkgKiBzaGFyZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYXBwbHkgZm9yY2VzXG4gICAgICAgICAgICBib2R5Qi5wb3NpdGlvbi54ICs9IGZvcmNlLnggKiBzaGFyZTtcbiAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uLnkgKz0gZm9yY2UueSAqIHNoYXJlO1xuXG4gICAgICAgICAgICAvLyBhcHBseSBkYW1waW5nXG4gICAgICAgICAgICBpZiAoY29uc3RyYWludC5kYW1waW5nKSB7XG4gICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25QcmV2LnggKz0gY29uc3RyYWludC5kYW1waW5nICogbm9ybWFsLnggKiBub3JtYWxWZWxvY2l0eSAqIHNoYXJlO1xuICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi55ICs9IGNvbnN0cmFpbnQuZGFtcGluZyAqIG5vcm1hbC55ICogbm9ybWFsVmVsb2NpdHkgKiBzaGFyZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYXBwbHkgdG9ycXVlXG4gICAgICAgICAgICB0b3JxdWUgPSAoVmVjdG9yLmNyb3NzKHBvaW50QiwgZm9yY2UpIC8gcmVzaXN0YW5jZVRvdGFsKSAqIENvbnN0cmFpbnQuX3RvcnF1ZURhbXBlbiAqIGJvZHlCLmludmVyc2VJbmVydGlhICogKDEgLSBjb25zdHJhaW50LmFuZ3VsYXJTdGlmZm5lc3MpO1xuICAgICAgICAgICAgYm9keUIuY29uc3RyYWludEltcHVsc2UuYW5nbGUgKz0gdG9ycXVlO1xuICAgICAgICAgICAgYm9keUIuYW5nbGUgKz0gdG9ycXVlO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYm9keSB1cGRhdGVzIHJlcXVpcmVkIGFmdGVyIHNvbHZpbmcgY29uc3RyYWludHMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHBvc3RTb2x2ZUFsbFxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKi9cbiAgICBDb25zdHJhaW50LnBvc3RTb2x2ZUFsbCA9IGZ1bmN0aW9uKGJvZGllcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgaW1wdWxzZSA9IGJvZHkuY29uc3RyYWludEltcHVsc2U7XG5cbiAgICAgICAgICAgIGlmIChib2R5LmlzU3RhdGljIHx8IChpbXB1bHNlLnggPT09IDAgJiYgaW1wdWxzZS55ID09PSAwICYmIGltcHVsc2UuYW5nbGUgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBnZW9tZXRyeSBhbmQgcmVzZXRcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUocGFydC52ZXJ0aWNlcywgaW1wdWxzZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi54ICs9IGltcHVsc2UueDtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi55ICs9IGltcHVsc2UueTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1wdWxzZS5hbmdsZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBWZXJ0aWNlcy5yb3RhdGUocGFydC52ZXJ0aWNlcywgaW1wdWxzZS5hbmdsZSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIEF4ZXMucm90YXRlKHBhcnQuYXhlcywgaW1wdWxzZS5hbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZUFib3V0KHBhcnQucG9zaXRpb24sIGltcHVsc2UuYW5nbGUsIGJvZHkucG9zaXRpb24sIHBhcnQucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShwYXJ0LmJvdW5kcywgcGFydC52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRhbXBlbiB0aGUgY2FjaGVkIGltcHVsc2UgZm9yIHdhcm1pbmcgbmV4dCBzdGVwXG4gICAgICAgICAgICBpbXB1bHNlLmFuZ2xlICo9IENvbnN0cmFpbnQuX3dhcm1pbmc7XG4gICAgICAgICAgICBpbXB1bHNlLnggKj0gQ29uc3RyYWludC5fd2FybWluZztcbiAgICAgICAgICAgIGltcHVsc2UueSAqPSBDb25zdHJhaW50Ll93YXJtaW5nO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZWdlciBgTnVtYmVyYCB1bmlxdWVseSBpZGVudGlmeWluZyBudW1iZXIgZ2VuZXJhdGVkIGluIGBDb21wb3NpdGUuY3JlYXRlYCBieSBgQ29tbW9uLm5leHRJZGAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaWRcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgZGVub3RpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcImNvbnN0cmFpbnRcIlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJiaXRyYXJ5IGBTdHJpbmdgIG5hbWUgdG8gaGVscCB0aGUgdXNlciBpZGVudGlmeSBhbmQgbWFuYWdlIGJvZGllcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBsYWJlbFxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiQ29uc3RyYWludFwiXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBgT2JqZWN0YCB0aGF0IGRlZmluZXMgdGhlIHJlbmRlcmluZyBwcm9wZXJ0aWVzIHRvIGJlIGNvbnN1bWVkIGJ5IHRoZSBtb2R1bGUgYE1hdHRlci5SZW5kZXJgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBjb25zdHJhaW50IHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIudmlzaWJsZVxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgbGluZSB3aWR0aCB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGNvbnN0cmFpbnQgb3V0bGluZS5cbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyBubyBvdXRsaW5lIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLmxpbmVXaWR0aFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgdGhhdCBkZWZpbmVzIHRoZSBzdHJva2Ugc3R5bGUgdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRoZSBjb25zdHJhaW50IG91dGxpbmUuXG4gICAgICogSXQgaXMgdGhlIHNhbWUgYXMgd2hlbiB1c2luZyBhIGNhbnZhcywgc28gaXQgYWNjZXB0cyBDU1Mgc3R5bGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5zdHJva2VTdHlsZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IGEgcmFuZG9tIGNvbG91clxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCB0aGF0IGRlZmluZXMgdGhlIGNvbnN0cmFpbnQgcmVuZGVyaW5nIHR5cGUuIFxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlICdsaW5lJywgJ3BpbicsICdzcHJpbmcnLlxuICAgICAqIEFuIGFwcHJvcHJpYXRlIHJlbmRlciB0eXBlIHdpbGwgYmUgYXV0b21hdGljYWxseSBjaG9zZW4gdW5sZXNzIG9uZSBpcyBnaXZlbiBpbiBvcHRpb25zLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci50eXBlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgJ2xpbmUnXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBCb29sZWFuYCB0aGF0IGRlZmluZXMgaWYgdGhlIGNvbnN0cmFpbnQncyBhbmNob3IgcG9pbnRzIHNob3VsZCBiZSByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuYW5jaG9yc1xuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmlyc3QgcG9zc2libGUgYEJvZHlgIHRoYXQgdGhpcyBjb25zdHJhaW50IGlzIGF0dGFjaGVkIHRvLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvZHlBXG4gICAgICogQHR5cGUgYm9keVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWNvbmQgcG9zc2libGUgYEJvZHlgIHRoYXQgdGhpcyBjb25zdHJhaW50IGlzIGF0dGFjaGVkIHRvLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvZHlCXG4gICAgICogQHR5cGUgYm9keVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFZlY3RvcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG9mZnNldCBvZiB0aGUgY29uc3RyYWludCBmcm9tIGNlbnRlciBvZiB0aGUgYGNvbnN0cmFpbnQuYm9keUFgIGlmIGRlZmluZWQsIG90aGVyd2lzZSBhIHdvcmxkLXNwYWNlIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBvaW50QVxuICAgICAqIEB0eXBlIHZlY3RvclxuICAgICAqIEBkZWZhdWx0IHsgeDogMCwgeTogMCB9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBWZWN0b3JgIHRoYXQgc3BlY2lmaWVzIHRoZSBvZmZzZXQgb2YgdGhlIGNvbnN0cmFpbnQgZnJvbSBjZW50ZXIgb2YgdGhlIGBjb25zdHJhaW50LmJvZHlCYCBpZiBkZWZpbmVkLCBvdGhlcndpc2UgYSB3b3JsZC1zcGFjZSBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwb2ludEJcbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgc3RpZmZuZXNzIG9mIHRoZSBjb25zdHJhaW50LCBpLmUuIHRoZSByYXRlIGF0IHdoaWNoIGl0IHJldHVybnMgdG8gaXRzIHJlc3RpbmcgYGNvbnN0cmFpbnQubGVuZ3RoYC5cbiAgICAgKiBBIHZhbHVlIG9mIGAxYCBtZWFucyB0aGUgY29uc3RyYWludCBzaG91bGQgYmUgdmVyeSBzdGlmZi5cbiAgICAgKiBBIHZhbHVlIG9mIGAwLjJgIG1lYW5zIHRoZSBjb25zdHJhaW50IGFjdHMgbGlrZSBhIHNvZnQgc3ByaW5nLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHN0aWZmbmVzc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIGRhbXBpbmcgb2YgdGhlIGNvbnN0cmFpbnQsIFxuICAgICAqIGkuZS4gdGhlIGFtb3VudCBvZiByZXNpc3RhbmNlIGFwcGxpZWQgdG8gZWFjaCBib2R5IGJhc2VkIG9uIHRoZWlyIHZlbG9jaXRpZXMgdG8gbGltaXQgdGhlIGFtb3VudCBvZiBvc2NpbGxhdGlvbi5cbiAgICAgKiBEYW1waW5nIHdpbGwgb25seSBiZSBhcHBhcmVudCB3aGVuIHRoZSBjb25zdHJhaW50IGFsc28gaGFzIGEgdmVyeSBsb3cgYHN0aWZmbmVzc2AuXG4gICAgICogQSB2YWx1ZSBvZiBgMC4xYCBtZWFucyB0aGUgY29uc3RyYWludCB3aWxsIGFwcGx5IGhlYXZ5IGRhbXBpbmcsIHJlc3VsdGluZyBpbiBsaXR0bGUgdG8gbm8gb3NjaWxsYXRpb24uXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgbWVhbnMgdGhlIGNvbnN0cmFpbnQgd2lsbCBhcHBseSBubyBkYW1waW5nLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGRhbXBpbmdcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSB0YXJnZXQgcmVzdGluZyBsZW5ndGggb2YgdGhlIGNvbnN0cmFpbnQuIFxuICAgICAqIEl0IGlzIGNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBpbiBgQ29uc3RyYWludC5jcmVhdGVgIGZyb20gaW5pdGlhbCBwb3NpdGlvbnMgb2YgdGhlIGBjb25zdHJhaW50LmJvZHlBYCBhbmQgYGNvbnN0cmFpbnQuYm9keUJgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGxlbmd0aFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHJlc2VydmVkIGZvciBzdG9yaW5nIHBsdWdpbi1zcGVjaWZpYyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBsdWdpblxuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMixcIi4uL2dlb21ldHJ5L0F4ZXNcIjoyNSxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLk1vdXNlQ29uc3RyYWludGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIG1vdXNlIGNvbnN0cmFpbnRzLlxuKiBNb3VzZSBjb25zdHJhaW50cyBhcmUgdXNlZCBmb3IgYWxsb3dpbmcgdXNlciBpbnRlcmFjdGlvbiwgcHJvdmlkaW5nIHRoZSBhYmlsaXR5IHRvIG1vdmUgYm9kaWVzIHZpYSB0aGUgbW91c2Ugb3IgdG91Y2guXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBNb3VzZUNvbnN0cmFpbnRcbiovXG5cbnZhciBNb3VzZUNvbnN0cmFpbnQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb3VzZUNvbnN0cmFpbnQ7XG5cbnZhciBWZXJ0aWNlcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG52YXIgU2xlZXBpbmcgPSBfZGVyZXFfKCcuLi9jb3JlL1NsZWVwaW5nJyk7XG52YXIgTW91c2UgPSBfZGVyZXFfKCcuLi9jb3JlL01vdXNlJyk7XG52YXIgRXZlbnRzID0gX2RlcmVxXygnLi4vY29yZS9FdmVudHMnKTtcbnZhciBEZXRlY3RvciA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9EZXRlY3RvcicpO1xudmFyIENvbnN0cmFpbnQgPSBfZGVyZXFfKCcuL0NvbnN0cmFpbnQnKTtcbnZhciBDb21wb3NpdGUgPSBfZGVyZXFfKCcuLi9ib2R5L0NvbXBvc2l0ZScpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgbW91c2UgY29uc3RyYWludC5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtNb3VzZUNvbnN0cmFpbnR9IEEgbmV3IE1vdXNlQ29uc3RyYWludFxuICAgICAqL1xuICAgIE1vdXNlQ29uc3RyYWludC5jcmVhdGUgPSBmdW5jdGlvbihlbmdpbmUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG1vdXNlID0gKGVuZ2luZSA/IGVuZ2luZS5tb3VzZSA6IG51bGwpIHx8IChvcHRpb25zID8gb3B0aW9ucy5tb3VzZSA6IG51bGwpO1xuXG4gICAgICAgIGlmICghbW91c2UpIHtcbiAgICAgICAgICAgIGlmIChlbmdpbmUgJiYgZW5naW5lLnJlbmRlciAmJiBlbmdpbmUucmVuZGVyLmNhbnZhcykge1xuICAgICAgICAgICAgICAgIG1vdXNlID0gTW91c2UuY3JlYXRlKGVuZ2luZS5yZW5kZXIuY2FudmFzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtb3VzZSA9IE1vdXNlLmNyZWF0ZShvcHRpb25zLmVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb3VzZSA9IE1vdXNlLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdNb3VzZUNvbnN0cmFpbnQuY3JlYXRlOiBvcHRpb25zLm1vdXNlIHdhcyB1bmRlZmluZWQsIG9wdGlvbnMuZWxlbWVudCB3YXMgdW5kZWZpbmVkLCBtYXkgbm90IGZ1bmN0aW9uIGFzIGV4cGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29uc3RyYWludCA9IENvbnN0cmFpbnQuY3JlYXRlKHsgXG4gICAgICAgICAgICBsYWJlbDogJ01vdXNlIENvbnN0cmFpbnQnLFxuICAgICAgICAgICAgcG9pbnRBOiBtb3VzZS5wb3NpdGlvbixcbiAgICAgICAgICAgIHBvaW50QjogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICBsZW5ndGg6IDAuMDEsIFxuICAgICAgICAgICAgc3RpZmZuZXNzOiAwLjEsXG4gICAgICAgICAgICBhbmd1bGFyU3RpZmZuZXNzOiAxLFxuICAgICAgICAgICAgcmVuZGVyOiB7XG4gICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6ICcjOTBFRTkwJyxcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgdHlwZTogJ21vdXNlQ29uc3RyYWludCcsXG4gICAgICAgICAgICBtb3VzZTogbW91c2UsXG4gICAgICAgICAgICBlbGVtZW50OiBudWxsLFxuICAgICAgICAgICAgYm9keTogbnVsbCxcbiAgICAgICAgICAgIGNvbnN0cmFpbnQ6IGNvbnN0cmFpbnQsXG4gICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogMHgwMDAxLFxuICAgICAgICAgICAgICAgIG1hc2s6IDB4RkZGRkZGRkYsXG4gICAgICAgICAgICAgICAgZ3JvdXA6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbW91c2VDb25zdHJhaW50ID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgRXZlbnRzLm9uKGVuZ2luZSwgJ2JlZm9yZVVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGFsbEJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMoZW5naW5lLndvcmxkKTtcbiAgICAgICAgICAgIE1vdXNlQ29uc3RyYWludC51cGRhdGUobW91c2VDb25zdHJhaW50LCBhbGxCb2RpZXMpO1xuICAgICAgICAgICAgTW91c2VDb25zdHJhaW50Ll90cmlnZ2VyRXZlbnRzKG1vdXNlQ29uc3RyYWludCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtb3VzZUNvbnN0cmFpbnQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIG1vdXNlIGNvbnN0cmFpbnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7TW91c2VDb25zdHJhaW50fSBtb3VzZUNvbnN0cmFpbnRcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgTW91c2VDb25zdHJhaW50LnVwZGF0ZSA9IGZ1bmN0aW9uKG1vdXNlQ29uc3RyYWludCwgYm9kaWVzKSB7XG4gICAgICAgIHZhciBtb3VzZSA9IG1vdXNlQ29uc3RyYWludC5tb3VzZSxcbiAgICAgICAgICAgIGNvbnN0cmFpbnQgPSBtb3VzZUNvbnN0cmFpbnQuY29uc3RyYWludCxcbiAgICAgICAgICAgIGJvZHkgPSBtb3VzZUNvbnN0cmFpbnQuYm9keTtcblxuICAgICAgICBpZiAobW91c2UuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoIWNvbnN0cmFpbnQuYm9keUIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQm91bmRzLmNvbnRhaW5zKGJvZHkuYm91bmRzLCBtb3VzZS5wb3NpdGlvbikgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgRGV0ZWN0b3IuY2FuQ29sbGlkZShib2R5LmNvbGxpc2lvbkZpbHRlciwgbW91c2VDb25zdHJhaW50LmNvbGxpc2lvbkZpbHRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBib2R5LnBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IGJvZHkucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFZlcnRpY2VzLmNvbnRhaW5zKHBhcnQudmVydGljZXMsIG1vdXNlLnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50LnBvaW50QSA9IG1vdXNlLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50LmJvZHlCID0gbW91c2VDb25zdHJhaW50LmJvZHkgPSBib2R5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50LnBvaW50QiA9IHsgeDogbW91c2UucG9zaXRpb24ueCAtIGJvZHkucG9zaXRpb24ueCwgeTogbW91c2UucG9zaXRpb24ueSAtIGJvZHkucG9zaXRpb24ueSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50LmFuZ2xlQiA9IGJvZHkuYW5nbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGJvZHksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnc3RhcnRkcmFnJywgeyBtb3VzZTogbW91c2UsIGJvZHk6IGJvZHkgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoY29uc3RyYWludC5ib2R5QiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRBID0gbW91c2UucG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdHJhaW50LmJvZHlCID0gbW91c2VDb25zdHJhaW50LmJvZHkgPSBudWxsO1xuICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoYm9keSlcbiAgICAgICAgICAgICAgICBFdmVudHMudHJpZ2dlcihtb3VzZUNvbnN0cmFpbnQsICdlbmRkcmFnJywgeyBtb3VzZTogbW91c2UsIGJvZHk6IGJvZHkgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgbW91c2UgY29uc3RyYWludCBldmVudHMuXG4gICAgICogQG1ldGhvZCBfdHJpZ2dlckV2ZW50c1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VDb25zdHJhaW50XG4gICAgICovXG4gICAgTW91c2VDb25zdHJhaW50Ll90cmlnZ2VyRXZlbnRzID0gZnVuY3Rpb24obW91c2VDb25zdHJhaW50KSB7XG4gICAgICAgIHZhciBtb3VzZSA9IG1vdXNlQ29uc3RyYWludC5tb3VzZSxcbiAgICAgICAgICAgIG1vdXNlRXZlbnRzID0gbW91c2Uuc291cmNlRXZlbnRzO1xuXG4gICAgICAgIGlmIChtb3VzZUV2ZW50cy5tb3VzZW1vdmUpXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihtb3VzZUNvbnN0cmFpbnQsICdtb3VzZW1vdmUnLCB7IG1vdXNlOiBtb3VzZSB9KTtcblxuICAgICAgICBpZiAobW91c2VFdmVudHMubW91c2Vkb3duKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnbW91c2Vkb3duJywgeyBtb3VzZTogbW91c2UgfSk7XG5cbiAgICAgICAgaWYgKG1vdXNlRXZlbnRzLm1vdXNldXApXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihtb3VzZUNvbnN0cmFpbnQsICdtb3VzZXVwJywgeyBtb3VzZTogbW91c2UgfSk7XG5cbiAgICAgICAgLy8gcmVzZXQgdGhlIG1vdXNlIHN0YXRlIHJlYWR5IGZvciB0aGUgbmV4dCBzdGVwXG4gICAgICAgIE1vdXNlLmNsZWFyU291cmNlRXZlbnRzKG1vdXNlKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgRXZlbnRzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiB0aGUgbW91c2UgaGFzIG1vdmVkIChvciBhIHRvdWNoIG1vdmVzKSBkdXJpbmcgdGhlIGxhc3Qgc3RlcFxuICAgICpcbiAgICAqIEBldmVudCBtb3VzZW1vdmVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bW91c2V9IGV2ZW50Lm1vdXNlIFRoZSBlbmdpbmUncyBtb3VzZSBpbnN0YW5jZVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIG1vdXNlIGlzIGRvd24gKG9yIGEgdG91Y2ggaGFzIHN0YXJ0ZWQpIGR1cmluZyB0aGUgbGFzdCBzdGVwXG4gICAgKlxuICAgICogQGV2ZW50IG1vdXNlZG93blxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiB0aGUgbW91c2UgaXMgdXAgKG9yIGEgdG91Y2ggaGFzIGVuZGVkKSBkdXJpbmcgdGhlIGxhc3Qgc3RlcFxuICAgICpcbiAgICAqIEBldmVudCBtb3VzZXVwXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge21vdXNlfSBldmVudC5tb3VzZSBUaGUgZW5naW5lJ3MgbW91c2UgaW5zdGFuY2VcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIHRoZSB1c2VyIHN0YXJ0cyBkcmFnZ2luZyBhIGJvZHlcbiAgICAqXG4gICAgKiBAZXZlbnQgc3RhcnRkcmFnXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge21vdXNlfSBldmVudC5tb3VzZSBUaGUgZW5naW5lJ3MgbW91c2UgaW5zdGFuY2VcbiAgICAqIEBwYXJhbSB7Ym9keX0gZXZlbnQuYm9keSBUaGUgYm9keSBiZWluZyBkcmFnZ2VkXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiB0aGUgdXNlciBlbmRzIGRyYWdnaW5nIGEgYm9keVxuICAgICpcbiAgICAqIEBldmVudCBlbmRkcmFnXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge21vdXNlfSBldmVudC5tb3VzZSBUaGUgZW5naW5lJ3MgbW91c2UgaW5zdGFuY2VcbiAgICAqIEBwYXJhbSB7Ym9keX0gZXZlbnQuYm9keSBUaGUgYm9keSB0aGF0IGhhcyBzdG9wcGVkIGJlaW5nIGRyYWdnZWRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIGRlbm90aW5nIHRoZSB0eXBlIG9mIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0eXBlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJjb25zdHJhaW50XCJcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBgTW91c2VgIGluc3RhbmNlIGluIHVzZS4gSWYgbm90IHN1cHBsaWVkIGluIGBNb3VzZUNvbnN0cmFpbnQuY3JlYXRlYCwgb25lIHdpbGwgYmUgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBtb3VzZVxuICAgICAqIEB0eXBlIG1vdXNlXG4gICAgICogQGRlZmF1bHQgbW91c2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBgQm9keWAgdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgbW92ZWQgYnkgdGhlIHVzZXIsIG9yIGBudWxsYCBpZiBubyBib2R5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvZHlcbiAgICAgKiBAdHlwZSBib2R5XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGBDb25zdHJhaW50YCBvYmplY3QgdGhhdCBpcyB1c2VkIHRvIG1vdmUgdGhlIGJvZHkgZHVyaW5nIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbnN0cmFpbnRcbiAgICAgKiBAdHlwZSBjb25zdHJhaW50XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBgT2JqZWN0YCB0aGF0IHNwZWNpZmllcyB0aGUgY29sbGlzaW9uIGZpbHRlciBwcm9wZXJ0aWVzLlxuICAgICAqIFRoZSBjb2xsaXNpb24gZmlsdGVyIGFsbG93cyB0aGUgdXNlciB0byBkZWZpbmUgd2hpY2ggdHlwZXMgb2YgYm9keSB0aGlzIG1vdXNlIGNvbnN0cmFpbnQgY2FuIGludGVyYWN0IHdpdGguXG4gICAgICogU2VlIGBib2R5LmNvbGxpc2lvbkZpbHRlcmAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29sbGlzaW9uRmlsdGVyXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vY29sbGlzaW9uL0RldGVjdG9yXCI6NSxcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFwiLi4vY29yZS9Nb3VzZVwiOjE5LFwiLi4vY29yZS9TbGVlcGluZ1wiOjIyLFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5LFwiLi9Db25zdHJhaW50XCI6MTJ9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4vKipcbiogVGhlIGBNYXR0ZXIuQ29tbW9uYCBtb2R1bGUgY29udGFpbnMgdXRpbGl0eSBmdW5jdGlvbnMgdGhhdCBhcmUgY29tbW9uIHRvIGFsbCBtb2R1bGVzLlxuKlxuKiBAY2xhc3MgQ29tbW9uXG4qL1xuXG52YXIgQ29tbW9uID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbW9uO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICBDb21tb24uX25leHRJZCA9IDA7XG4gICAgQ29tbW9uLl9zZWVkID0gMDtcbiAgICBDb21tb24uX25vd1N0YXJ0VGltZSA9ICsobmV3IERhdGUoKSk7XG5cbiAgICAvKipcbiAgICAgKiBFeHRlbmRzIHRoZSBvYmplY3QgaW4gdGhlIGZpcnN0IGFyZ3VtZW50IHVzaW5nIHRoZSBvYmplY3QgaW4gdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICAgKiBAbWV0aG9kIGV4dGVuZFxuICAgICAqIEBwYXJhbSB7fSBvYmpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZXBcbiAgICAgKiBAcmV0dXJuIHt9IG9iaiBleHRlbmRlZFxuICAgICAqL1xuICAgIENvbW1vbi5leHRlbmQgPSBmdW5jdGlvbihvYmosIGRlZXApIHtcbiAgICAgICAgdmFyIGFyZ3NTdGFydCxcbiAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICBkZWVwQ2xvbmU7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkZWVwID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFyZ3NTdGFydCA9IDI7XG4gICAgICAgICAgICBkZWVwQ2xvbmUgPSBkZWVwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJnc1N0YXJ0ID0gMTtcbiAgICAgICAgICAgIGRlZXBDbG9uZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gYXJnc1N0YXJ0OyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXBDbG9uZSAmJiBzb3VyY2VbcHJvcF0gJiYgc291cmNlW3Byb3BdLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2JqW3Byb3BdIHx8IG9ialtwcm9wXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BdID0gb2JqW3Byb3BdIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW1vbi5leHRlbmQob2JqW3Byb3BdLCBkZWVwQ2xvbmUsIHNvdXJjZVtwcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjbG9uZSBvZiB0aGUgb2JqZWN0LCBpZiBkZWVwIGlzIHRydWUgcmVmZXJlbmNlcyB3aWxsIGFsc28gYmUgY2xvbmVkLlxuICAgICAqIEBtZXRob2QgY2xvbmVcbiAgICAgKiBAcGFyYW0ge30gb2JqXG4gICAgICogQHBhcmFtIHtib29sfSBkZWVwXG4gICAgICogQHJldHVybiB7fSBvYmogY2xvbmVkXG4gICAgICovXG4gICAgQ29tbW9uLmNsb25lID0gZnVuY3Rpb24ob2JqLCBkZWVwKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uZXh0ZW5kKHt9LCBkZWVwLCBvYmopO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGtleXMgZm9yIHRoZSBnaXZlbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCBrZXlzXG4gICAgICogQHBhcmFtIHt9IG9ialxuICAgICAqIEByZXR1cm4ge3N0cmluZ1tdfSBrZXlzXG4gICAgICovXG4gICAgQ29tbW9uLmtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKVxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaik7XG5cbiAgICAgICAgLy8gYXZvaWQgaGFzT3duUHJvcGVydHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopXG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgdmFsdWVzIGZvciB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2QgdmFsdWVzXG4gICAgICogQHBhcmFtIHt9IG9ialxuICAgICAqIEByZXR1cm4ge2FycmF5fSBBcnJheSBvZiB0aGUgb2JqZWN0cyBwcm9wZXJ0eSB2YWx1ZXNcbiAgICAgKi9cbiAgICBDb21tb24udmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gob2JqW2tleXNbaV1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGF2b2lkIGhhc093blByb3BlcnR5IGZvciBwZXJmb3JtYW5jZVxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKVxuICAgICAgICAgICAgdmFsdWVzLnB1c2gob2JqW2tleV0pO1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgdmFsdWUgZnJvbSBgYmFzZWAgcmVsYXRpdmUgdG8gdGhlIGBwYXRoYCBzdHJpbmcuXG4gICAgICogQG1ldGhvZCBnZXRcbiAgICAgKiBAcGFyYW0ge30gb2JqIFRoZSBiYXNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIGBiYXNlYCwgZS5nLiAnRm9vLkJhci5iYXonXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtiZWdpbl0gUGF0aCBzbGljZSBiZWdpblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kXSBQYXRoIHNsaWNlIGVuZFxuICAgICAqIEByZXR1cm4ge30gVGhlIG9iamVjdCBhdCB0aGUgZ2l2ZW4gcGF0aFxuICAgICAqL1xuICAgIENvbW1vbi5nZXQgPSBmdW5jdGlvbihvYmosIHBhdGgsIGJlZ2luLCBlbmQpIHtcbiAgICAgICAgcGF0aCA9IHBhdGguc3BsaXQoJy4nKS5zbGljZShiZWdpbiwgZW5kKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG9iaiA9IG9ialtwYXRoW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBvbiBgYmFzZWAgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIGBwYXRoYCBzdHJpbmcuXG4gICAgICogQG1ldGhvZCBzZXRcbiAgICAgKiBAcGFyYW0ge30gb2JqIFRoZSBiYXNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIGBiYXNlYCwgZS5nLiAnRm9vLkJhci5iYXonXG4gICAgICogQHBhcmFtIHt9IHZhbCBUaGUgdmFsdWUgdG8gc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtiZWdpbl0gUGF0aCBzbGljZSBiZWdpblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kXSBQYXRoIHNsaWNlIGVuZFxuICAgICAqIEByZXR1cm4ge30gUGFzcyB0aHJvdWdoIGB2YWxgIGZvciBjaGFpbmluZ1xuICAgICAqL1xuICAgIENvbW1vbi5zZXQgPSBmdW5jdGlvbihvYmosIHBhdGgsIHZhbCwgYmVnaW4sIGVuZCkge1xuICAgICAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KCcuJykuc2xpY2UoYmVnaW4sIGVuZCk7XG4gICAgICAgIENvbW1vbi5nZXQob2JqLCBwYXRoLCAwLCAtMSlbcGFydHNbcGFydHMubGVuZ3RoIC0gMV1dID0gdmFsO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTaHVmZmxlcyB0aGUgZ2l2ZW4gYXJyYXkgaW4tcGxhY2UuXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgYSBzZWVkZWQgcmFuZG9tIGdlbmVyYXRvci5cbiAgICAgKiBAbWV0aG9kIHNodWZmbGVcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBhcnJheVxuICAgICAqIEByZXR1cm4ge2FycmF5fSBhcnJheSBzaHVmZmxlZCByYW5kb21seVxuICAgICAqL1xuICAgIENvbW1vbi5zaHVmZmxlID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBqID0gTWF0aC5mbG9vcihDb21tb24ucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgICAgICAgIHZhciB0ZW1wID0gYXJyYXlbaV07XG4gICAgICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xuICAgICAgICAgICAgYXJyYXlbal0gPSB0ZW1wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmFuZG9tbHkgY2hvb3NlcyBhIHZhbHVlIGZyb20gYSBsaXN0IHdpdGggZXF1YWwgcHJvYmFiaWxpdHkuXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgYSBzZWVkZWQgcmFuZG9tIGdlbmVyYXRvci5cbiAgICAgKiBAbWV0aG9kIGNob29zZVxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGNob2ljZXNcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IEEgcmFuZG9tIGNob2ljZSBvYmplY3QgZnJvbSB0aGUgYXJyYXlcbiAgICAgKi9cbiAgICBDb21tb24uY2hvb3NlID0gZnVuY3Rpb24oY2hvaWNlcykge1xuICAgICAgICByZXR1cm4gY2hvaWNlc1tNYXRoLmZsb29yKENvbW1vbi5yYW5kb20oKSAqIGNob2ljZXMubGVuZ3RoKV07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgSFRNTEVsZW1lbnQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAgKiBAbWV0aG9kIGlzRWxlbWVudFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYSBIVE1MRWxlbWVudCwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQ29tbW9uLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgJiYgb2JqLm5vZGVOYW1lKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYW4gYXJyYXkuXG4gICAgICogQG1ldGhvZCBpc0FycmF5XG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9ialxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIG9iamVjdCBpcyBhbiBhcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQ29tbW9uLmlzQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBhIGZ1bmN0aW9uLlxuICAgICAqIEBtZXRob2QgaXNGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYSBmdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQ29tbW9uLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBwbGFpbiBvYmplY3QuXG4gICAgICogQG1ldGhvZCBpc1BsYWluT2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9ialxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIG9iamVjdCBpcyBhIHBsYWluIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQ29tbW9uLmlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBhIHN0cmluZy5cbiAgICAgKiBAbWV0aG9kIGlzU3RyaW5nXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9ialxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIG9iamVjdCBpcyBhIHN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQ29tbW9uLmlzU3RyaW5nID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZ2l2ZW4gdmFsdWUgY2xhbXBlZCBiZXR3ZWVuIGEgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAbWV0aG9kIGNsYW1wXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB2YWx1ZSBjbGFtcGVkIGJldHdlZW4gbWluIGFuZCBtYXggaW5jbHVzaXZlXG4gICAgICovXG4gICAgQ29tbW9uLmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IG1pbilcbiAgICAgICAgICAgIHJldHVybiBtaW47XG4gICAgICAgIGlmICh2YWx1ZSA+IG1heClcbiAgICAgICAgICAgIHJldHVybiBtYXg7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNpZ24gb2YgdGhlIGdpdmVuIHZhbHVlLlxuICAgICAqIEBtZXRob2Qgc2lnblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gLTEgaWYgbmVnYXRpdmUsICsxIGlmIDAgb3IgcG9zaXRpdmVcbiAgICAgKi9cbiAgICBDb21tb24uc2lnbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IDAgPyAtMSA6IDE7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHRpbWVzdGFtcCBzaW5jZSB0aGUgdGltZSBvcmlnaW4gKGUuZy4gZnJvbSBwYWdlIGxvYWQpLlxuICAgICAqIFRoZSByZXN1bHQgd2lsbCBiZSBoaWdoLXJlc29sdXRpb24gaW5jbHVkaW5nIGRlY2ltYWwgcGxhY2VzIGlmIGF2YWlsYWJsZS5cbiAgICAgKiBAbWV0aG9kIG5vd1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGN1cnJlbnQgdGltZXN0YW1wXG4gICAgICovXG4gICAgQ29tbW9uLm5vdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAod2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LnBlcmZvcm1hbmNlLm5vdykge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZS53ZWJraXROb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlLndlYmtpdE5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChuZXcgRGF0ZSgpKSAtIENvbW1vbi5fbm93U3RhcnRUaW1lO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJhbmRvbSB2YWx1ZSBiZXR3ZWVuIGEgbWluaW11bSBhbmQgYSBtYXhpbXVtIHZhbHVlIGluY2x1c2l2ZS5cbiAgICAgKiBUaGUgZnVuY3Rpb24gdXNlcyBhIHNlZWRlZCByYW5kb20gZ2VuZXJhdG9yLlxuICAgICAqIEBtZXRob2QgcmFuZG9tXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IEEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluY2x1c2l2ZVxuICAgICAqL1xuICAgIENvbW1vbi5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgICAgICBtaW4gPSAodHlwZW9mIG1pbiAhPT0gXCJ1bmRlZmluZWRcIikgPyBtaW4gOiAwO1xuICAgICAgICBtYXggPSAodHlwZW9mIG1heCAhPT0gXCJ1bmRlZmluZWRcIikgPyBtYXggOiAxO1xuICAgICAgICByZXR1cm4gbWluICsgX3NlZWRlZFJhbmRvbSgpICogKG1heCAtIG1pbik7XG4gICAgfTtcblxuICAgIHZhciBfc2VlZGVkUmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9jb25ncnVlbnRpYWxfZ2VuZXJhdG9yXG4gICAgICAgIENvbW1vbi5fc2VlZCA9IChDb21tb24uX3NlZWQgKiA5MzAxICsgNDkyOTcpICUgMjMzMjgwO1xuICAgICAgICByZXR1cm4gQ29tbW9uLl9zZWVkIC8gMjMzMjgwO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIENTUyBoZXggY29sb3VyIHN0cmluZyBpbnRvIGFuIGludGVnZXIuXG4gICAgICogQG1ldGhvZCBjb2xvclRvTnVtYmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yU3RyaW5nXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgQ1NTIGhleCBzdHJpbmdcbiAgICAgKi9cbiAgICBDb21tb24uY29sb3JUb051bWJlciA9IGZ1bmN0aW9uKGNvbG9yU3RyaW5nKSB7XG4gICAgICAgIGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcucmVwbGFjZSgnIycsJycpO1xuXG4gICAgICAgIGlmIChjb2xvclN0cmluZy5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgY29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5jaGFyQXQoMCkgKyBjb2xvclN0cmluZy5jaGFyQXQoMClcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY29sb3JTdHJpbmcuY2hhckF0KDEpICsgY29sb3JTdHJpbmcuY2hhckF0KDEpXG4gICAgICAgICAgICAgICAgICAgICAgICArIGNvbG9yU3RyaW5nLmNoYXJBdCgyKSArIGNvbG9yU3RyaW5nLmNoYXJBdCgyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvclN0cmluZywgMTYpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uc29sZSBsb2dnaW5nIGxldmVsIHRvIHVzZSwgd2hlcmUgZWFjaCBsZXZlbCBpbmNsdWRlcyBhbGwgbGV2ZWxzIGFib3ZlIGFuZCBleGNsdWRlcyB0aGUgbGV2ZWxzIGJlbG93LlxuICAgICAqIFRoZSBkZWZhdWx0IGxldmVsIGlzICdkZWJ1Zycgd2hpY2ggc2hvd3MgYWxsIGNvbnNvbGUgbWVzc2FnZXMuICBcbiAgICAgKlxuICAgICAqIFBvc3NpYmxlIGxldmVsIHZhbHVlcyBhcmU6XG4gICAgICogLSAwID0gTm9uZVxuICAgICAqIC0gMSA9IERlYnVnXG4gICAgICogLSAyID0gSW5mb1xuICAgICAqIC0gMyA9IFdhcm5cbiAgICAgKiAtIDQgPSBFcnJvclxuICAgICAqIEBwcm9wZXJ0eSBDb21tb24ubG9nTGV2ZWxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBDb21tb24ubG9nTGV2ZWwgPSAxO1xuXG4gICAgLyoqXG4gICAgICogU2hvd3MgYSBgY29uc29sZS5sb2dgIG1lc3NhZ2Ugb25seSBpZiB0aGUgY3VycmVudCBgQ29tbW9uLmxvZ0xldmVsYCBhbGxvd3MgaXQuXG4gICAgICogVGhlIG1lc3NhZ2Ugd2lsbCBiZSBwcmVmaXhlZCB3aXRoICdtYXR0ZXItanMnIHRvIG1ha2UgaXQgZWFzaWx5IGlkZW50aWZpYWJsZS5cbiAgICAgKiBAbWV0aG9kIGxvZ1xuICAgICAqIEBwYXJhbSAuLi5vYmpzIHt9IFRoZSBvYmplY3RzIHRvIGxvZy5cbiAgICAgKi9cbiAgICBDb21tb24ubG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb25zb2xlICYmIENvbW1vbi5sb2dMZXZlbCA+IDAgJiYgQ29tbW9uLmxvZ0xldmVsIDw9IDMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIFsnbWF0dGVyLWpzOiddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2hvd3MgYSBgY29uc29sZS5pbmZvYCBtZXNzYWdlIG9ubHkgaWYgdGhlIGN1cnJlbnQgYENvbW1vbi5sb2dMZXZlbGAgYWxsb3dzIGl0LlxuICAgICAqIFRoZSBtZXNzYWdlIHdpbGwgYmUgcHJlZml4ZWQgd2l0aCAnbWF0dGVyLWpzJyB0byBtYWtlIGl0IGVhc2lseSBpZGVudGlmaWFibGUuXG4gICAgICogQG1ldGhvZCBpbmZvXG4gICAgICogQHBhcmFtIC4uLm9ianMge30gVGhlIG9iamVjdHMgdG8gbG9nLlxuICAgICAqL1xuICAgIENvbW1vbi5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb25zb2xlICYmIENvbW1vbi5sb2dMZXZlbCA+IDAgJiYgQ29tbW9uLmxvZ0xldmVsIDw9IDIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBbJ21hdHRlci1qczonXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3dzIGEgYGNvbnNvbGUud2FybmAgbWVzc2FnZSBvbmx5IGlmIHRoZSBjdXJyZW50IGBDb21tb24ubG9nTGV2ZWxgIGFsbG93cyBpdC5cbiAgICAgKiBUaGUgbWVzc2FnZSB3aWxsIGJlIHByZWZpeGVkIHdpdGggJ21hdHRlci1qcycgdG8gbWFrZSBpdCBlYXNpbHkgaWRlbnRpZmlhYmxlLlxuICAgICAqIEBtZXRob2Qgd2FyblxuICAgICAqIEBwYXJhbSAuLi5vYmpzIHt9IFRoZSBvYmplY3RzIHRvIGxvZy5cbiAgICAgKi9cbiAgICBDb21tb24ud2FybiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY29uc29sZSAmJiBDb21tb24ubG9nTGV2ZWwgPiAwICYmIENvbW1vbi5sb2dMZXZlbCA8PSAzKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgWydtYXR0ZXItanM6J10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IHVuaXF1ZSBzZXF1ZW50aWFsIElELlxuICAgICAqIEBtZXRob2QgbmV4dElkXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgc2VxdWVudGlhbCBJRFxuICAgICAqL1xuICAgIENvbW1vbi5uZXh0SWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5fbmV4dElkKys7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgY3Jvc3MgYnJvd3NlciBjb21wYXRpYmxlIGluZGV4T2YgaW1wbGVtZW50YXRpb24uXG4gICAgICogQG1ldGhvZCBpbmRleE9mXG4gICAgICogQHBhcmFtIHthcnJheX0gaGF5c3RhY2tcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbmVlZGxlXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgcG9zaXRpb24gb2YgbmVlZGxlIGluIGhheXN0YWNrLCBvdGhlcndpc2UgLTEuXG4gICAgICovXG4gICAgQ29tbW9uLmluZGV4T2YgPSBmdW5jdGlvbihoYXlzdGFjaywgbmVlZGxlKSB7XG4gICAgICAgIGlmIChoYXlzdGFjay5pbmRleE9mKVxuICAgICAgICAgICAgcmV0dXJuIGhheXN0YWNrLmluZGV4T2YobmVlZGxlKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhheXN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaGF5c3RhY2tbaV0gPT09IG5lZWRsZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBjcm9zcyBicm93c2VyIGNvbXBhdGlibGUgYXJyYXkgbWFwIGltcGxlbWVudGF0aW9uLlxuICAgICAqIEBtZXRob2QgbWFwXG4gICAgICogQHBhcmFtIHthcnJheX0gbGlzdFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gVmFsdWVzIGZyb20gbGlzdCB0cmFuc2Zvcm1lZCBieSBmdW5jLlxuICAgICAqL1xuICAgIENvbW1vbi5tYXAgPSBmdW5jdGlvbihsaXN0LCBmdW5jKSB7XG4gICAgICAgIGlmIChsaXN0Lm1hcCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3QubWFwKGZ1bmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1hcHBlZCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgbWFwcGVkLnB1c2goZnVuYyhsaXN0W2ldKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFwcGVkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIGRpcmVjdGVkIGdyYXBoIGFuZCByZXR1cm5zIHRoZSBwYXJ0aWFsbHkgb3JkZXJlZCBzZXQgb2YgdmVydGljZXMgaW4gdG9wb2xvZ2ljYWwgb3JkZXIuXG4gICAgICogQ2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFyZSBhbGxvd2VkLlxuICAgICAqIEBtZXRob2QgdG9wb2xvZ2ljYWxTb3J0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGdyYXBoXG4gICAgICogQHJldHVybiB7YXJyYXl9IFBhcnRpYWxseSBvcmRlcmVkIHNldCBvZiB2ZXJ0aWNlcyBpbiB0b3BvbG9naWNhbCBvcmRlci5cbiAgICAgKi9cbiAgICBDb21tb24udG9wb2xvZ2ljYWxTb3J0ID0gZnVuY3Rpb24oZ3JhcGgpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21nZWNoZXYvamF2YXNjcmlwdC1hbGdvcml0aG1zXG4gICAgICAgIC8vIENvcHlyaWdodCAoYykgTWlua28gR2VjaGV2IChNSVQgbGljZW5zZSlcbiAgICAgICAgLy8gTW9kaWZpY2F0aW9uczogdGlkeSBmb3JtYXR0aW5nIGFuZCBuYW1pbmdcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgICAgICAgdmlzaXRlZCA9IFtdLFxuICAgICAgICAgICAgdGVtcCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIG5vZGUgaW4gZ3JhcGgpIHtcbiAgICAgICAgICAgIGlmICghdmlzaXRlZFtub2RlXSAmJiAhdGVtcFtub2RlXSkge1xuICAgICAgICAgICAgICAgIENvbW1vbi5fdG9wb2xvZ2ljYWxTb3J0KG5vZGUsIHZpc2l0ZWQsIHRlbXAsIGdyYXBoLCByZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgQ29tbW9uLl90b3BvbG9naWNhbFNvcnQgPSBmdW5jdGlvbihub2RlLCB2aXNpdGVkLCB0ZW1wLCBncmFwaCwgcmVzdWx0KSB7XG4gICAgICAgIHZhciBuZWlnaGJvcnMgPSBncmFwaFtub2RlXSB8fCBbXTtcbiAgICAgICAgdGVtcFtub2RlXSA9IHRydWU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBuZWlnaGJvciA9IG5laWdoYm9yc1tpXTtcblxuICAgICAgICAgICAgaWYgKHRlbXBbbmVpZ2hib3JdKSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBjaXJjdWxhciBkZXBlbmRlbmNpZXNcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF2aXNpdGVkW25laWdoYm9yXSkge1xuICAgICAgICAgICAgICAgIENvbW1vbi5fdG9wb2xvZ2ljYWxTb3J0KG5laWdoYm9yLCB2aXNpdGVkLCB0ZW1wLCBncmFwaCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRlbXBbbm9kZV0gPSBmYWxzZTtcbiAgICAgICAgdmlzaXRlZFtub2RlXSA9IHRydWU7XG5cbiAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRha2VzIF9uXyBmdW5jdGlvbnMgYXMgYXJndW1lbnRzIGFuZCByZXR1cm5zIGEgbmV3IGZ1bmN0aW9uIHRoYXQgY2FsbHMgdGhlbSBpbiBvcmRlci5cbiAgICAgKiBUaGUgYXJndW1lbnRzIGFwcGxpZWQgd2hlbiBjYWxsaW5nIHRoZSBuZXcgZnVuY3Rpb24gd2lsbCBhbHNvIGJlIGFwcGxpZWQgdG8gZXZlcnkgZnVuY3Rpb24gcGFzc2VkLlxuICAgICAqIFRoZSB2YWx1ZSBvZiBgdGhpc2AgcmVmZXJzIHRvIHRoZSBsYXN0IHZhbHVlIHJldHVybmVkIGluIHRoZSBjaGFpbiB0aGF0IHdhcyBub3QgYHVuZGVmaW5lZGAuXG4gICAgICogVGhlcmVmb3JlIGlmIGEgcGFzc2VkIGZ1bmN0aW9uIGRvZXMgbm90IHJldHVybiBhIHZhbHVlLCB0aGUgcHJldmlvdXNseSByZXR1cm5lZCB2YWx1ZSBpcyBtYWludGFpbmVkLlxuICAgICAqIEFmdGVyIGFsbCBwYXNzZWQgZnVuY3Rpb25zIGhhdmUgYmVlbiBjYWxsZWQgdGhlIG5ldyBmdW5jdGlvbiByZXR1cm5zIHRoZSBsYXN0IHJldHVybmVkIHZhbHVlIChpZiBhbnkpLlxuICAgICAqIElmIGFueSBvZiB0aGUgcGFzc2VkIGZ1bmN0aW9ucyBhcmUgYSBjaGFpbiwgdGhlbiB0aGUgY2hhaW4gd2lsbCBiZSBmbGF0dGVuZWQuXG4gICAgICogQG1ldGhvZCBjaGFpblxuICAgICAqIEBwYXJhbSAuLi5mdW5jcyB7ZnVuY3Rpb259IFRoZSBmdW5jdGlvbnMgdG8gY2hhaW4uXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IEEgbmV3IGZ1bmN0aW9uIHRoYXQgY2FsbHMgdGhlIHBhc3NlZCBmdW5jdGlvbnMgaW4gb3JkZXIuXG4gICAgICovXG4gICAgQ29tbW9uLmNoYWluID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmdW5jcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKGZ1bmMuX2NoYWluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBmbGF0dGVuIGFscmVhZHkgY2hhaW5lZCBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICBmdW5jcy5wdXNoLmFwcGx5KGZ1bmNzLCBmdW5jLl9jaGFpbmVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnVuY3MucHVzaChmdW5jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaGFpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS9kZXZ0b29scy1kb2NzL2lzc3Vlcy81MyNpc3N1ZWNvbW1lbnQtNTE5NDEzNThcbiAgICAgICAgICAgIHZhciBsYXN0UmVzdWx0LFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmdW5jcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jc1tpXS5hcHBseShsYXN0UmVzdWx0LCBhcmdzKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBsYXN0UmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2hhaW4uX2NoYWluZWQgPSBmdW5jcztcblxuICAgICAgICByZXR1cm4gY2hhaW47XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYWlucyBhIGZ1bmN0aW9uIHRvIGV4Y3V0ZSBiZWZvcmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9uIHRoZSBnaXZlbiBgcGF0aGAgcmVsYXRpdmUgdG8gYGJhc2VgLlxuICAgICAqIFNlZSBhbHNvIGRvY3MgZm9yIGBDb21tb24uY2hhaW5gLlxuICAgICAqIEBtZXRob2QgY2hhaW5QYXRoQmVmb3JlXG4gICAgICogQHBhcmFtIHt9IGJhc2UgVGhlIGJhc2Ugb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggcmVsYXRpdmUgdG8gYGJhc2VgXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hhaW4gYmVmb3JlIHRoZSBvcmlnaW5hbFxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgY2hhaW5lZCBmdW5jdGlvbiB0aGF0IHJlcGxhY2VkIHRoZSBvcmlnaW5hbFxuICAgICAqL1xuICAgIENvbW1vbi5jaGFpblBhdGhCZWZvcmUgPSBmdW5jdGlvbihiYXNlLCBwYXRoLCBmdW5jKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uc2V0KGJhc2UsIHBhdGgsIENvbW1vbi5jaGFpbihcbiAgICAgICAgICAgIGZ1bmMsXG4gICAgICAgICAgICBDb21tb24uZ2V0KGJhc2UsIHBhdGgpXG4gICAgICAgICkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFpbnMgYSBmdW5jdGlvbiB0byBleGN1dGUgYWZ0ZXIgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9uIHRoZSBnaXZlbiBgcGF0aGAgcmVsYXRpdmUgdG8gYGJhc2VgLlxuICAgICAqIFNlZSBhbHNvIGRvY3MgZm9yIGBDb21tb24uY2hhaW5gLlxuICAgICAqIEBtZXRob2QgY2hhaW5QYXRoQWZ0ZXJcbiAgICAgKiBAcGFyYW0ge30gYmFzZSBUaGUgYmFzZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgYmFzZWBcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGFpbiBhZnRlciB0aGUgb3JpZ2luYWxcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGNoYWluZWQgZnVuY3Rpb24gdGhhdCByZXBsYWNlZCB0aGUgb3JpZ2luYWxcbiAgICAgKi9cbiAgICBDb21tb24uY2hhaW5QYXRoQWZ0ZXIgPSBmdW5jdGlvbihiYXNlLCBwYXRoLCBmdW5jKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uc2V0KGJhc2UsIHBhdGgsIENvbW1vbi5jaGFpbihcbiAgICAgICAgICAgIENvbW1vbi5nZXQoYmFzZSwgcGF0aCksXG4gICAgICAgICAgICBmdW5jXG4gICAgICAgICkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlcXVpcmUgZXh0ZXJuYWwgbGlicmFyaWVzIG91dHNpZGUgb2YgdGhlIGJ1bmRsZS5cbiAgICAgKiBJdCBmaXJzdCBsb29rcyBmb3IgdGhlIGBnbG9iYWxOYW1lYCBvbiB0aGUgZW52aXJvbm1lbnQncyBnbG9iYWwgbmFtZXNwYWNlLlxuICAgICAqIElmIHRoZSBnbG9iYWwgaXMgbm90IGZvdW5kLCBpdCB3aWxsIGZhbGwgYmFjayB0byB1c2luZyB0aGUgc3RhbmRhcmQgYHJlcXVpcmVgIHVzaW5nIHRoZSBgbW9kdWxlTmFtZWAuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIF9yZXF1aXJlR2xvYmFsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGdsb2JhbE5hbWUgVGhlIGdsb2JhbCBtb2R1bGUgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIFRoZSBmYWxsYmFjayBDb21tb25KUyBtb2R1bGUgbmFtZVxuICAgICAqIEByZXR1cm4ge30gVGhlIGxvYWRlZCBtb2R1bGVcbiAgICAgKi9cbiAgICBDb21tb24uX3JlcXVpcmVHbG9iYWwgPSBmdW5jdGlvbihnbG9iYWxOYW1lLCBtb2R1bGVOYW1lKSB7XG4gICAgICAgIHZhciBvYmogPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3dbZ2xvYmFsTmFtZV0gOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFtnbG9iYWxOYW1lXSA6IG51bGwpO1xuICAgICAgICByZXR1cm4gb2JqIHx8IF9kZXJlcV8obW9kdWxlTmFtZSk7XG4gICAgfTtcbn0pKCk7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7fV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkVuZ2luZWAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgZW5naW5lcy5cbiogQW4gZW5naW5lIGlzIGEgY29udHJvbGxlciB0aGF0IG1hbmFnZXMgdXBkYXRpbmcgdGhlIHNpbXVsYXRpb24gb2YgdGhlIHdvcmxkLlxuKiBTZWUgYE1hdHRlci5SdW5uZXJgIGZvciBhbiBvcHRpb25hbCBnYW1lIGxvb3AgdXRpbGl0eS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIEVuZ2luZVxuKi9cblxudmFyIEVuZ2luZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVuZ2luZTtcblxudmFyIFdvcmxkID0gX2RlcmVxXygnLi4vYm9keS9Xb3JsZCcpO1xudmFyIFNsZWVwaW5nID0gX2RlcmVxXygnLi9TbGVlcGluZycpO1xudmFyIFJlc29sdmVyID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL1Jlc29sdmVyJyk7XG52YXIgUmVuZGVyID0gX2RlcmVxXygnLi4vcmVuZGVyL1JlbmRlcicpO1xudmFyIFBhaXJzID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL1BhaXJzJyk7XG52YXIgTWV0cmljcyA9IF9kZXJlcV8oJy4vTWV0cmljcycpO1xudmFyIEdyaWQgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vR3JpZCcpO1xudmFyIEV2ZW50cyA9IF9kZXJlcV8oJy4vRXZlbnRzJyk7XG52YXIgQ29tcG9zaXRlID0gX2RlcmVxXygnLi4vYm9keS9Db21wb3NpdGUnKTtcbnZhciBDb25zdHJhaW50ID0gX2RlcmVxXygnLi4vY29uc3RyYWludC9Db25zdHJhaW50Jyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi9Db21tb24nKTtcbnZhciBCb2R5ID0gX2RlcmVxXygnLi4vYm9keS9Cb2R5Jyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZW5naW5lLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBFbmdpbmUuY3JlYXRlID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICAvLyBvcHRpb25zIG1heSBiZSBwYXNzZWQgYXMgdGhlIGZpcnN0IChhbmQgb25seSkgYXJndW1lbnRcbiAgICAgICAgb3B0aW9ucyA9IENvbW1vbi5pc0VsZW1lbnQoZWxlbWVudCkgPyBvcHRpb25zIDogZWxlbWVudDtcbiAgICAgICAgZWxlbWVudCA9IENvbW1vbi5pc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogbnVsbDtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgaWYgKGVsZW1lbnQgfHwgb3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuKCdFbmdpbmUuY3JlYXRlOiBlbmdpbmUucmVuZGVyIGlzIGRlcHJlY2F0ZWQgKHNlZSBkb2NzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgcG9zaXRpb25JdGVyYXRpb25zOiA2LFxuICAgICAgICAgICAgdmVsb2NpdHlJdGVyYXRpb25zOiA0LFxuICAgICAgICAgICAgY29uc3RyYWludEl0ZXJhdGlvbnM6IDIsXG4gICAgICAgICAgICBlbmFibGVTbGVlcGluZzogZmFsc2UsXG4gICAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgICAgcGx1Z2luOiB7fSxcbiAgICAgICAgICAgIHRpbWluZzoge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogMCxcbiAgICAgICAgICAgICAgICB0aW1lU2NhbGU6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBicm9hZHBoYXNlOiB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogR3JpZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBlbmdpbmUgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICAvLyBAZGVwcmVjYXRlZFxuICAgICAgICBpZiAoZWxlbWVudCB8fCBlbmdpbmUucmVuZGVyKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyRGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBSZW5kZXJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVuZ2luZS5yZW5kZXIgPSBDb21tb24uZXh0ZW5kKHJlbmRlckRlZmF1bHRzLCBlbmdpbmUucmVuZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEBkZXByZWNhdGVkXG4gICAgICAgIGlmIChlbmdpbmUucmVuZGVyICYmIGVuZ2luZS5yZW5kZXIuY29udHJvbGxlcikge1xuICAgICAgICAgICAgZW5naW5lLnJlbmRlciA9IGVuZ2luZS5yZW5kZXIuY29udHJvbGxlci5jcmVhdGUoZW5naW5lLnJlbmRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBAZGVwcmVjYXRlZFxuICAgICAgICBpZiAoZW5naW5lLnJlbmRlcikge1xuICAgICAgICAgICAgZW5naW5lLnJlbmRlci5lbmdpbmUgPSBlbmdpbmU7XG4gICAgICAgIH1cblxuICAgICAgICBlbmdpbmUud29ybGQgPSBvcHRpb25zLndvcmxkIHx8IFdvcmxkLmNyZWF0ZShlbmdpbmUud29ybGQpO1xuICAgICAgICBlbmdpbmUucGFpcnMgPSBQYWlycy5jcmVhdGUoKTtcbiAgICAgICAgZW5naW5lLmJyb2FkcGhhc2UgPSBlbmdpbmUuYnJvYWRwaGFzZS5jb250cm9sbGVyLmNyZWF0ZShlbmdpbmUuYnJvYWRwaGFzZSk7XG4gICAgICAgIGVuZ2luZS5tZXRyaWNzID0gZW5naW5lLm1ldHJpY3MgfHwgeyBleHRlbmRlZDogZmFsc2UgfTtcblxuXG4gICAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIHRoZSBzaW11bGF0aW9uIGZvcndhcmQgaW4gdGltZSBieSBgZGVsdGFgIG1zLlxuICAgICAqIFRoZSBgY29ycmVjdGlvbmAgYXJndW1lbnQgaXMgYW4gb3B0aW9uYWwgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIHRpbWUgY29ycmVjdGlvbiBmYWN0b3IgdG8gYXBwbHkgdG8gdGhlIHVwZGF0ZS5cbiAgICAgKiBUaGlzIGNhbiBoZWxwIGltcHJvdmUgdGhlIGFjY3VyYWN5IG9mIHRoZSBzaW11bGF0aW9uIGluIGNhc2VzIHdoZXJlIGBkZWx0YWAgaXMgY2hhbmdpbmcgYmV0d2VlbiB1cGRhdGVzLlxuICAgICAqIFRoZSB2YWx1ZSBvZiBgY29ycmVjdGlvbmAgaXMgZGVmaW5lZCBhcyBgZGVsdGEgLyBsYXN0RGVsdGFgLCBpLmUuIHRoZSBwZXJjZW50YWdlIGNoYW5nZSBvZiBgZGVsdGFgIG92ZXIgdGhlIGxhc3Qgc3RlcC5cbiAgICAgKiBUaGVyZWZvcmUgdGhlIHZhbHVlIGlzIGFsd2F5cyBgMWAgKG5vIGNvcnJlY3Rpb24pIHdoZW4gYGRlbHRhYCBjb25zdGFudCAob3Igd2hlbiBubyBjb3JyZWN0aW9uIGlzIGRlc2lyZWQsIHdoaWNoIGlzIHRoZSBkZWZhdWx0KS5cbiAgICAgKiBTZWUgdGhlIHBhcGVyIG9uIDxhIGhyZWY9XCJodHRwOi8vbG9uZXNvY2submV0L2FydGljbGUvdmVybGV0Lmh0bWxcIj5UaW1lIENvcnJlY3RlZCBWZXJsZXQ8L2E+IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogVHJpZ2dlcnMgYGJlZm9yZVVwZGF0ZWAgYW5kIGBhZnRlclVwZGF0ZWAgZXZlbnRzLlxuICAgICAqIFRyaWdnZXJzIGBjb2xsaXNpb25TdGFydGAsIGBjb2xsaXNpb25BY3RpdmVgIGFuZCBgY29sbGlzaW9uRW5kYCBldmVudHMuXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWx0YT0xNi42NjZdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtjb3JyZWN0aW9uPTFdXG4gICAgICovXG4gICAgRW5naW5lLnVwZGF0ZSA9IGZ1bmN0aW9uKGVuZ2luZSwgZGVsdGEsIGNvcnJlY3Rpb24pIHtcbiAgICAgICAgZGVsdGEgPSBkZWx0YSB8fCAxMDAwIC8gNjA7XG4gICAgICAgIGNvcnJlY3Rpb24gPSBjb3JyZWN0aW9uIHx8IDE7XG5cbiAgICAgICAgdmFyIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgdGltaW5nID0gZW5naW5lLnRpbWluZyxcbiAgICAgICAgICAgIGJyb2FkcGhhc2UgPSBlbmdpbmUuYnJvYWRwaGFzZSxcbiAgICAgICAgICAgIGJyb2FkcGhhc2VQYWlycyA9IFtdLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICAvLyBpbmNyZW1lbnQgdGltZXN0YW1wXG4gICAgICAgIHRpbWluZy50aW1lc3RhbXAgKz0gZGVsdGEgKiB0aW1pbmcudGltZVNjYWxlO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhbiBldmVudCBvYmplY3RcbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1pbmcudGltZXN0YW1wXG4gICAgICAgIH07XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnYmVmb3JlVXBkYXRlJywgZXZlbnQpO1xuXG4gICAgICAgIC8vIGdldCBsaXN0cyBvZiBhbGwgYm9kaWVzIGFuZCBjb25zdHJhaW50cywgbm8gbWF0dGVyIHdoYXQgY29tcG9zaXRlcyB0aGV5IGFyZSBpblxuICAgICAgICB2YXIgYWxsQm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCksXG4gICAgICAgICAgICBhbGxDb25zdHJhaW50cyA9IENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyh3b3JsZCk7XG5cblxuICAgICAgICAvLyBpZiBzbGVlcGluZyBlbmFibGVkLCBjYWxsIHRoZSBzbGVlcGluZyBjb250cm9sbGVyXG4gICAgICAgIGlmIChlbmdpbmUuZW5hYmxlU2xlZXBpbmcpXG4gICAgICAgICAgICBTbGVlcGluZy51cGRhdGUoYWxsQm9kaWVzLCB0aW1pbmcudGltZVNjYWxlKTtcblxuICAgICAgICAvLyBhcHBsaWVzIGdyYXZpdHkgdG8gYWxsIGJvZGllc1xuICAgICAgICBFbmdpbmUuX2JvZGllc0FwcGx5R3Jhdml0eShhbGxCb2RpZXMsIHdvcmxkLmdyYXZpdHkpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBhbGwgYm9keSBwb3NpdGlvbiBhbmQgcm90YXRpb24gYnkgaW50ZWdyYXRpb25cbiAgICAgICAgRW5naW5lLl9ib2RpZXNVcGRhdGUoYWxsQm9kaWVzLCBkZWx0YSwgdGltaW5nLnRpbWVTY2FsZSwgY29ycmVjdGlvbiwgd29ybGQuYm91bmRzKTtcblxuICAgICAgICAvLyB1cGRhdGUgYWxsIGNvbnN0cmFpbnRzIChmaXJzdCBwYXNzKVxuICAgICAgICBDb25zdHJhaW50LnByZVNvbHZlQWxsKGFsbEJvZGllcyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbmdpbmUuY29uc3RyYWludEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgQ29uc3RyYWludC5zb2x2ZUFsbChhbGxDb25zdHJhaW50cywgdGltaW5nLnRpbWVTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgQ29uc3RyYWludC5wb3N0U29sdmVBbGwoYWxsQm9kaWVzKTtcblxuICAgICAgICAvLyBicm9hZHBoYXNlIHBhc3M6IGZpbmQgcG90ZW50aWFsIGNvbGxpc2lvbiBwYWlyc1xuICAgICAgICBpZiAoYnJvYWRwaGFzZS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAvLyBpZiB3b3JsZCBpcyBkaXJ0eSwgd2UgbXVzdCBmbHVzaCB0aGUgd2hvbGUgZ3JpZFxuICAgICAgICAgICAgaWYgKHdvcmxkLmlzTW9kaWZpZWQpXG4gICAgICAgICAgICAgICAgYnJvYWRwaGFzZS5jb250cm9sbGVyLmNsZWFyKGJyb2FkcGhhc2UpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGdyaWQgYnVja2V0cyBiYXNlZCBvbiBjdXJyZW50IGJvZGllc1xuICAgICAgICAgICAgYnJvYWRwaGFzZS5jb250cm9sbGVyLnVwZGF0ZShicm9hZHBoYXNlLCBhbGxCb2RpZXMsIGVuZ2luZSwgd29ybGQuaXNNb2RpZmllZCk7XG4gICAgICAgICAgICBicm9hZHBoYXNlUGFpcnMgPSBicm9hZHBoYXNlLnBhaXJzTGlzdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIG5vIGJyb2FkcGhhc2Ugc2V0LCB3ZSBqdXN0IHBhc3MgYWxsIGJvZGllc1xuICAgICAgICAgICAgYnJvYWRwaGFzZVBhaXJzID0gYWxsQm9kaWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgYWxsIGNvbXBvc2l0ZSBtb2RpZmllZCBmbGFnc1xuICAgICAgICBpZiAod29ybGQuaXNNb2RpZmllZCkge1xuICAgICAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKHdvcmxkLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbmFycm93cGhhc2UgcGFzczogZmluZCBhY3R1YWwgY29sbGlzaW9ucywgdGhlbiBjcmVhdGUgb3IgdXBkYXRlIGNvbGxpc2lvbiBwYWlyc1xuICAgICAgICB2YXIgY29sbGlzaW9ucyA9IGJyb2FkcGhhc2UuZGV0ZWN0b3IoYnJvYWRwaGFzZVBhaXJzLCBlbmdpbmUpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBjb2xsaXNpb24gcGFpcnNcbiAgICAgICAgdmFyIHBhaXJzID0gZW5naW5lLnBhaXJzLFxuICAgICAgICAgICAgdGltZXN0YW1wID0gdGltaW5nLnRpbWVzdGFtcDtcbiAgICAgICAgUGFpcnMudXBkYXRlKHBhaXJzLCBjb2xsaXNpb25zLCB0aW1lc3RhbXApO1xuICAgICAgICBQYWlycy5yZW1vdmVPbGQocGFpcnMsIHRpbWVzdGFtcCk7XG5cbiAgICAgICAgLy8gd2FrZSB1cCBib2RpZXMgaW52b2x2ZWQgaW4gY29sbGlzaW9uc1xuICAgICAgICBpZiAoZW5naW5lLmVuYWJsZVNsZWVwaW5nKVxuICAgICAgICAgICAgU2xlZXBpbmcuYWZ0ZXJDb2xsaXNpb25zKHBhaXJzLmxpc3QsIHRpbWluZy50aW1lU2NhbGUpO1xuXG4gICAgICAgIC8vIHRyaWdnZXIgY29sbGlzaW9uIGV2ZW50c1xuICAgICAgICBpZiAocGFpcnMuY29sbGlzaW9uU3RhcnQubGVuZ3RoID4gMClcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2NvbGxpc2lvblN0YXJ0JywgeyBwYWlyczogcGFpcnMuY29sbGlzaW9uU3RhcnQgfSk7XG5cbiAgICAgICAgLy8gaXRlcmF0aXZlbHkgcmVzb2x2ZSBwb3NpdGlvbiBiZXR3ZWVuIGNvbGxpc2lvbnNcbiAgICAgICAgUmVzb2x2ZXIucHJlU29sdmVQb3NpdGlvbihwYWlycy5saXN0KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVuZ2luZS5wb3NpdGlvbkl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgUmVzb2x2ZXIuc29sdmVQb3NpdGlvbihwYWlycy5saXN0LCB0aW1pbmcudGltZVNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgICBSZXNvbHZlci5wb3N0U29sdmVQb3NpdGlvbihhbGxCb2RpZXMpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBhbGwgY29uc3RyYWludHMgKHNlY29uZCBwYXNzKVxuICAgICAgICBDb25zdHJhaW50LnByZVNvbHZlQWxsKGFsbEJvZGllcyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbmdpbmUuY29uc3RyYWludEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgQ29uc3RyYWludC5zb2x2ZUFsbChhbGxDb25zdHJhaW50cywgdGltaW5nLnRpbWVTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgQ29uc3RyYWludC5wb3N0U29sdmVBbGwoYWxsQm9kaWVzKTtcblxuICAgICAgICAvLyBpdGVyYXRpdmVseSByZXNvbHZlIHZlbG9jaXR5IGJldHdlZW4gY29sbGlzaW9uc1xuICAgICAgICBSZXNvbHZlci5wcmVTb2x2ZVZlbG9jaXR5KHBhaXJzLmxpc3QpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5naW5lLnZlbG9jaXR5SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICBSZXNvbHZlci5zb2x2ZVZlbG9jaXR5KHBhaXJzLmxpc3QsIHRpbWluZy50aW1lU2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJpZ2dlciBjb2xsaXNpb24gZXZlbnRzXG4gICAgICAgIGlmIChwYWlycy5jb2xsaXNpb25BY3RpdmUubGVuZ3RoID4gMClcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2NvbGxpc2lvbkFjdGl2ZScsIHsgcGFpcnM6IHBhaXJzLmNvbGxpc2lvbkFjdGl2ZSB9KTtcblxuICAgICAgICBpZiAocGFpcnMuY29sbGlzaW9uRW5kLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdjb2xsaXNpb25FbmQnLCB7IHBhaXJzOiBwYWlycy5jb2xsaXNpb25FbmQgfSk7XG5cblxuICAgICAgICAvLyBjbGVhciBmb3JjZSBidWZmZXJzXG4gICAgICAgIEVuZ2luZS5fYm9kaWVzQ2xlYXJGb3JjZXMoYWxsQm9kaWVzKTtcblxuICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdhZnRlclVwZGF0ZScsIGV2ZW50KTtcblxuICAgICAgICByZXR1cm4gZW5naW5lO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHR3byBlbmdpbmVzIGJ5IGtlZXBpbmcgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYGVuZ2luZUFgIGJ1dCByZXBsYWNpbmcgdGhlIHdvcmxkIHdpdGggdGhlIG9uZSBmcm9tIGBlbmdpbmVCYC5cbiAgICAgKiBAbWV0aG9kIG1lcmdlXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZUFcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lQlxuICAgICAqL1xuICAgIEVuZ2luZS5tZXJnZSA9IGZ1bmN0aW9uKGVuZ2luZUEsIGVuZ2luZUIpIHtcbiAgICAgICAgQ29tbW9uLmV4dGVuZChlbmdpbmVBLCBlbmdpbmVCKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChlbmdpbmVCLndvcmxkKSB7XG4gICAgICAgICAgICBlbmdpbmVBLndvcmxkID0gZW5naW5lQi53b3JsZDtcblxuICAgICAgICAgICAgRW5naW5lLmNsZWFyKGVuZ2luZUEpO1xuXG4gICAgICAgICAgICB2YXIgYm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyhlbmdpbmVBLndvcmxkKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoYm9keSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGJvZHkuaWQgPSBDb21tb24ubmV4dElkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBlbmdpbmUgaW5jbHVkaW5nIHRoZSB3b3JsZCwgcGFpcnMgYW5kIGJyb2FkcGhhc2UuXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBFbmdpbmUuY2xlYXIgPSBmdW5jdGlvbihlbmdpbmUpIHtcbiAgICAgICAgdmFyIHdvcmxkID0gZW5naW5lLndvcmxkO1xuICAgICAgICBcbiAgICAgICAgUGFpcnMuY2xlYXIoZW5naW5lLnBhaXJzKTtcblxuICAgICAgICB2YXIgYnJvYWRwaGFzZSA9IGVuZ2luZS5icm9hZHBoYXNlO1xuICAgICAgICBpZiAoYnJvYWRwaGFzZS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICB2YXIgYm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCk7XG4gICAgICAgICAgICBicm9hZHBoYXNlLmNvbnRyb2xsZXIuY2xlYXIoYnJvYWRwaGFzZSk7XG4gICAgICAgICAgICBicm9hZHBoYXNlLmNvbnRyb2xsZXIudXBkYXRlKGJyb2FkcGhhc2UsIGJvZGllcywgZW5naW5lLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBaZXJvZXMgdGhlIGBib2R5LmZvcmNlYCBhbmQgYGJvZHkudG9ycXVlYCBmb3JjZSBidWZmZXJzLlxuICAgICAqIEBtZXRob2QgX2JvZGllc0NsZWFyRm9yY2VzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgRW5naW5lLl9ib2RpZXNDbGVhckZvcmNlcyA9IGZ1bmN0aW9uKGJvZGllcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIC8vIHJlc2V0IGZvcmNlIGJ1ZmZlcnNcbiAgICAgICAgICAgIGJvZHkuZm9yY2UueCA9IDA7XG4gICAgICAgICAgICBib2R5LmZvcmNlLnkgPSAwO1xuICAgICAgICAgICAgYm9keS50b3JxdWUgPSAwO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGx5cyBhIG1hc3MgZGVwZW5kYW50IGZvcmNlIHRvIGFsbCBnaXZlbiBib2RpZXMuXG4gICAgICogQG1ldGhvZCBfYm9kaWVzQXBwbHlHcmF2aXR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IGdyYXZpdHlcbiAgICAgKi9cbiAgICBFbmdpbmUuX2JvZGllc0FwcGx5R3Jhdml0eSA9IGZ1bmN0aW9uKGJvZGllcywgZ3Jhdml0eSkge1xuICAgICAgICB2YXIgZ3Jhdml0eVNjYWxlID0gdHlwZW9mIGdyYXZpdHkuc2NhbGUgIT09ICd1bmRlZmluZWQnID8gZ3Jhdml0eS5zY2FsZSA6IDAuMDAxO1xuXG4gICAgICAgIGlmICgoZ3Jhdml0eS54ID09PSAwICYmIGdyYXZpdHkueSA9PT0gMCkgfHwgZ3Jhdml0eVNjYWxlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaXNTdGF0aWMgfHwgYm9keS5pc1NsZWVwaW5nKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBhcHBseSBncmF2aXR5XG4gICAgICAgICAgICBib2R5LmZvcmNlLnkgKz0gYm9keS5tYXNzICogZ3Jhdml0eS55ICogZ3Jhdml0eVNjYWxlO1xuICAgICAgICAgICAgYm9keS5mb3JjZS54ICs9IGJvZHkubWFzcyAqIGdyYXZpdHkueCAqIGdyYXZpdHlTY2FsZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBseXMgYEJvZHkudXBkYXRlYCB0byBhbGwgZ2l2ZW4gYGJvZGllc2AuXG4gICAgICogQG1ldGhvZCBfYm9kaWVzVXBkYXRlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZSBcbiAgICAgKiBUaGUgYW1vdW50IG9mIHRpbWUgZWxhcHNlZCBiZXR3ZWVuIHVwZGF0ZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNjYWxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvcnJlY3Rpb24gXG4gICAgICogVGhlIFZlcmxldCBjb3JyZWN0aW9uIGZhY3RvciAoZGVsdGFUaW1lIC8gbGFzdERlbHRhVGltZSlcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gd29ybGRCb3VuZHNcbiAgICAgKi9cbiAgICBFbmdpbmUuX2JvZGllc1VwZGF0ZSA9IGZ1bmN0aW9uKGJvZGllcywgZGVsdGFUaW1lLCB0aW1lU2NhbGUsIGNvcnJlY3Rpb24sIHdvcmxkQm91bmRzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaXNTdGF0aWMgfHwgYm9keS5pc1NsZWVwaW5nKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBCb2R5LnVwZGF0ZShib2R5LCBkZWx0YVRpbWUsIHRpbWVTY2FsZSwgY29ycmVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgZm9yIGBSdW5uZXIucnVuYCwgc2VlIGBNYXR0ZXIuUnVubmVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQganVzdCBiZWZvcmUgYW4gdXBkYXRlXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVVwZGF0ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHVwZGF0ZSBhbmQgYWxsIGNvbGxpc2lvbiBldmVudHNcbiAgICAqXG4gICAgKiBAZXZlbnQgYWZ0ZXJVcGRhdGVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB1cGRhdGUsIHByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgcGFpcnMgdGhhdCBoYXZlIHN0YXJ0ZWQgdG8gY29sbGlkZSBpbiB0aGUgY3VycmVudCB0aWNrIChpZiBhbnkpXG4gICAgKlxuICAgICogQGV2ZW50IGNvbGxpc2lvblN0YXJ0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQucGFpcnMgTGlzdCBvZiBhZmZlY3RlZCBwYWlyc1xuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHVwZGF0ZSwgcHJvdmlkZXMgYSBsaXN0IG9mIGFsbCBwYWlycyB0aGF0IGFyZSBjb2xsaWRpbmcgaW4gdGhlIGN1cnJlbnQgdGljayAoaWYgYW55KVxuICAgICpcbiAgICAqIEBldmVudCBjb2xsaXNpb25BY3RpdmVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5wYWlycyBMaXN0IG9mIGFmZmVjdGVkIHBhaXJzXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhZnRlciBlbmdpbmUgdXBkYXRlLCBwcm92aWRlcyBhIGxpc3Qgb2YgYWxsIHBhaXJzIHRoYXQgaGF2ZSBlbmRlZCBjb2xsaXNpb24gaW4gdGhlIGN1cnJlbnQgdGljayAoaWYgYW55KVxuICAgICpcbiAgICAqIEBldmVudCBjb2xsaXNpb25FbmRcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5wYWlycyBMaXN0IG9mIGFmZmVjdGVkIHBhaXJzXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlZ2VyIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgcG9zaXRpb24gaXRlcmF0aW9ucyB0byBwZXJmb3JtIGVhY2ggdXBkYXRlLlxuICAgICAqIFRoZSBoaWdoZXIgdGhlIHZhbHVlLCB0aGUgaGlnaGVyIHF1YWxpdHkgdGhlIHNpbXVsYXRpb24gd2lsbCBiZSBhdCB0aGUgZXhwZW5zZSBvZiBwZXJmb3JtYW5jZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwb3NpdGlvbkl0ZXJhdGlvbnNcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCA2XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlZ2VyIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgdmVsb2NpdHkgaXRlcmF0aW9ucyB0byBwZXJmb3JtIGVhY2ggdXBkYXRlLlxuICAgICAqIFRoZSBoaWdoZXIgdGhlIHZhbHVlLCB0aGUgaGlnaGVyIHF1YWxpdHkgdGhlIHNpbXVsYXRpb24gd2lsbCBiZSBhdCB0aGUgZXhwZW5zZSBvZiBwZXJmb3JtYW5jZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB2ZWxvY2l0eUl0ZXJhdGlvbnNcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCA0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlZ2VyIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgY29uc3RyYWludCBpdGVyYXRpb25zIHRvIHBlcmZvcm0gZWFjaCB1cGRhdGUuXG4gICAgICogVGhlIGhpZ2hlciB0aGUgdmFsdWUsIHRoZSBoaWdoZXIgcXVhbGl0eSB0aGUgc2ltdWxhdGlvbiB3aWxsIGJlIGF0IHRoZSBleHBlbnNlIG9mIHBlcmZvcm1hbmNlLlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIG9mIGAyYCBpcyB1c3VhbGx5IHZlcnkgYWRlcXVhdGUuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29uc3RyYWludEl0ZXJhdGlvbnNcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgZW5naW5lIHNob3VsZCBhbGxvdyBzbGVlcGluZyB2aWEgdGhlIGBNYXR0ZXIuU2xlZXBpbmdgIG1vZHVsZS5cbiAgICAgKiBTbGVlcGluZyBjYW4gaW1wcm92ZSBzdGFiaWxpdHkgYW5kIHBlcmZvcm1hbmNlLCBidXQgb2Z0ZW4gYXQgdGhlIGV4cGVuc2Ugb2YgYWNjdXJhY3kuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZW5hYmxlU2xlZXBpbmdcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGBPYmplY3RgIGNvbnRhaW5pbmcgcHJvcGVydGllcyByZWdhcmRpbmcgdGhlIHRpbWluZyBzeXN0ZW1zIG9mIHRoZSBlbmdpbmUuIFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHRpbWluZ1xuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgZ2xvYmFsIHNjYWxpbmcgZmFjdG9yIG9mIHRpbWUgZm9yIGFsbCBib2RpZXMuXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgZnJlZXplcyB0aGUgc2ltdWxhdGlvbi5cbiAgICAgKiBBIHZhbHVlIG9mIGAwLjFgIGdpdmVzIGEgc2xvdy1tb3Rpb24gZWZmZWN0LlxuICAgICAqIEEgdmFsdWUgb2YgYDEuMmAgZ2l2ZXMgYSBzcGVlZC11cCBlZmZlY3QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdGltaW5nLnRpbWVTY2FsZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIGN1cnJlbnQgc2ltdWxhdGlvbi10aW1lIGluIG1pbGxpc2Vjb25kcyBzdGFydGluZyBmcm9tIGAwYC4gXG4gICAgICogSXQgaXMgaW5jcmVtZW50ZWQgb24gZXZlcnkgYEVuZ2luZS51cGRhdGVgIGJ5IHRoZSBnaXZlbiBgZGVsdGFgIGFyZ3VtZW50LiBcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0aW1pbmcudGltZXN0YW1wXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW5zdGFuY2Ugb2YgYSBgUmVuZGVyYCBjb250cm9sbGVyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGBNYXR0ZXIuUmVuZGVyYCBpbnN0YW5jZSBjcmVhdGVkIGJ5IGBFbmdpbmUuY3JlYXRlYC5cbiAgICAgKiBPbmUgbWF5IGFsc28gZGV2ZWxvcCBhIGN1c3RvbSByZW5kZXJlciBtb2R1bGUgYmFzZWQgb24gYE1hdHRlci5SZW5kZXJgIGFuZCBwYXNzIGFuIGluc3RhbmNlIG9mIGl0IHRvIGBFbmdpbmUuY3JlYXRlYCB2aWEgYG9wdGlvbnMucmVuZGVyYC5cbiAgICAgKlxuICAgICAqIEEgbWluaW1hbCBjdXN0b20gcmVuZGVyZXIgb2JqZWN0IG11c3QgZGVmaW5lIGF0IGxlYXN0IHRocmVlIGZ1bmN0aW9uczogYGNyZWF0ZWAsIGBjbGVhcmAgYW5kIGB3b3JsZGAgKHNlZSBgTWF0dGVyLlJlbmRlcmApLlxuICAgICAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gaW5zdGVhZCBwYXNzIHRoZSBfbW9kdWxlXyByZWZlcmVuY2UgdmlhIGBvcHRpb25zLnJlbmRlci5jb250cm9sbGVyYCBhbmQgYEVuZ2luZS5jcmVhdGVgIHdpbGwgaW5zdGFudGlhdGUgb25lIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyXG4gICAgICogQHR5cGUgcmVuZGVyXG4gICAgICogQGRlcHJlY2F0ZWQgc2VlIERlbW8uanMgZm9yIGFuIGV4YW1wbGUgb2YgY3JlYXRpbmcgYSByZW5kZXJlclxuICAgICAqIEBkZWZhdWx0IGEgTWF0dGVyLlJlbmRlciBpbnN0YW5jZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW5zdGFuY2Ugb2YgYSBicm9hZHBoYXNlIGNvbnRyb2xsZXIuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgYE1hdHRlci5HcmlkYCBpbnN0YW5jZSBjcmVhdGVkIGJ5IGBFbmdpbmUuY3JlYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBicm9hZHBoYXNlXG4gICAgICogQHR5cGUgZ3JpZFxuICAgICAqIEBkZWZhdWx0IGEgTWF0dGVyLkdyaWQgaW5zdGFuY2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFdvcmxkYCBjb21wb3NpdGUgb2JqZWN0IHRoYXQgd2lsbCBjb250YWluIGFsbCBzaW11bGF0ZWQgYm9kaWVzIGFuZCBjb25zdHJhaW50cy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB3b3JsZFxuICAgICAqIEB0eXBlIHdvcmxkXG4gICAgICogQGRlZmF1bHQgYSBNYXR0ZXIuV29ybGQgaW5zdGFuY2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCByZXNlcnZlZCBmb3Igc3RvcmluZyBwbHVnaW4tc3BlY2lmaWMgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwbHVnaW5cbiAgICAgKiBAdHlwZSB7fVxuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2JvZHkvQm9keVwiOjEsXCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9ib2R5L1dvcmxkXCI6MyxcIi4uL2NvbGxpc2lvbi9HcmlkXCI6NixcIi4uL2NvbGxpc2lvbi9QYWlyc1wiOjgsXCIuLi9jb2xsaXNpb24vUmVzb2x2ZXJcIjoxMCxcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vcmVuZGVyL1JlbmRlclwiOjMxLFwiLi9Db21tb25cIjoxNCxcIi4vRXZlbnRzXCI6MTYsXCIuL01ldHJpY3NcIjoxOCxcIi4vU2xlZXBpbmdcIjoyMn1dLDE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5FdmVudHNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIHRvIGZpcmUgYW5kIGxpc3RlbiB0byBldmVudHMgb24gb3RoZXIgb2JqZWN0cy5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIEV2ZW50c1xuKi9cblxudmFyIEV2ZW50cyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50cztcblxudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4vQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgYSBjYWxsYmFjayBmdW5jdGlvbiB0byB0aGUgZ2l2ZW4gb2JqZWN0J3MgYGV2ZW50TmFtZWAuXG4gICAgICogQG1ldGhvZCBvblxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgRXZlbnRzLm9uID0gZnVuY3Rpb24ob2JqZWN0LCBldmVudE5hbWVzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyksXG4gICAgICAgICAgICBuYW1lO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgICAgIG9iamVjdC5ldmVudHMgPSBvYmplY3QuZXZlbnRzIHx8IHt9O1xuICAgICAgICAgICAgb2JqZWN0LmV2ZW50c1tuYW1lXSA9IG9iamVjdC5ldmVudHNbbmFtZV0gfHwgW107XG4gICAgICAgICAgICBvYmplY3QuZXZlbnRzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBldmVudCBjYWxsYmFjay4gSWYgbm8gY2FsbGJhY2ssIGNsZWFycyBhbGwgY2FsbGJhY2tzIGluIGBldmVudE5hbWVzYC4gSWYgbm8gYGV2ZW50TmFtZXNgLCBjbGVhcnMgYWxsIGV2ZW50cy5cbiAgICAgKiBAbWV0aG9kIG9mZlxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgRXZlbnRzLm9mZiA9IGZ1bmN0aW9uKG9iamVjdCwgZXZlbnROYW1lcywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFldmVudE5hbWVzKSB7XG4gICAgICAgICAgICBvYmplY3QuZXZlbnRzID0ge307XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgRXZlbnRzLm9mZihvYmplY3QsIGNhbGxiYWNrKVxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXZlbnROYW1lcztcbiAgICAgICAgICAgIGV2ZW50TmFtZXMgPSBDb21tb24ua2V5cyhvYmplY3QuZXZlbnRzKS5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IG9iamVjdC5ldmVudHNbbmFtZXNbaV1dLFxuICAgICAgICAgICAgICAgIG5ld0NhbGxiYWNrcyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1tqXSAhPT0gY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDYWxsYmFja3MucHVzaChjYWxsYmFja3Nbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0LmV2ZW50c1tuYW1lc1tpXV0gPSBuZXdDYWxsYmFja3M7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgYWxsIHRoZSBjYWxsYmFja3Mgc3Vic2NyaWJlZCB0byB0aGUgZ2l2ZW4gb2JqZWN0J3MgYGV2ZW50TmFtZWAsIGluIHRoZSBvcmRlciB0aGV5IHN1YnNjcmliZWQsIGlmIGFueS5cbiAgICAgKiBAbWV0aG9kIHRyaWdnZXJcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZXNcbiAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgKi9cbiAgICBFdmVudHMudHJpZ2dlciA9IGZ1bmN0aW9uKG9iamVjdCwgZXZlbnROYW1lcywgZXZlbnQpIHtcbiAgICAgICAgdmFyIG5hbWVzLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrcyxcbiAgICAgICAgICAgIGV2ZW50Q2xvbmU7XG5cbiAgICAgICAgaWYgKG9iamVjdC5ldmVudHMpIHtcbiAgICAgICAgICAgIGlmICghZXZlbnQpXG4gICAgICAgICAgICAgICAgZXZlbnQgPSB7fTtcblxuICAgICAgICAgICAgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzID0gb2JqZWN0LmV2ZW50c1tuYW1lXTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbG9uZSA9IENvbW1vbi5jbG9uZShldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBldmVudENsb25lLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICBldmVudENsb25lLnNvdXJjZSA9IG9iamVjdDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNhbGxiYWNrcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2pdLmFwcGx5KG9iamVjdCwgW2V2ZW50Q2xvbmVdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi9Db21tb25cIjoxNH1dLDE3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlcmAgbW9kdWxlIGlzIHRoZSB0b3AgbGV2ZWwgbmFtZXNwYWNlLiBJdCBhbHNvIGluY2x1ZGVzIGEgZnVuY3Rpb24gZm9yIGluc3RhbGxpbmcgcGx1Z2lucyBvbiB0b3Agb2YgdGhlIGxpYnJhcnkuXG4qXG4qIEBjbGFzcyBNYXR0ZXJcbiovXG5cbnZhciBNYXR0ZXIgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXR0ZXI7XG5cbnZhciBQbHVnaW4gPSBfZGVyZXFfKCcuL1BsdWdpbicpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4vQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsaWJyYXJ5IG5hbWUuXG4gICAgICogQHByb3BlcnR5IG5hbWVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIE1hdHRlci5uYW1lID0gJ21hdHRlci1qcyc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGlicmFyeSB2ZXJzaW9uLlxuICAgICAqIEBwcm9wZXJ0eSB2ZXJzaW9uXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBNYXR0ZXIudmVyc2lvbiA9ICcwLjE0LjInO1xuXG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIHBsdWdpbiBkZXBlbmRlbmNpZXMgdG8gYmUgaW5zdGFsbGVkLiBUaGVzZSBhcmUgbm9ybWFsbHkgc2V0IGFuZCBpbnN0YWxsZWQgdGhyb3VnaCBgTWF0dGVyLnVzZWAuXG4gICAgICogQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHNldCBgTWF0dGVyLnVzZXNgIG1hbnVhbGx5IGFuZCBpbnN0YWxsIHRoZW0gYnkgY2FsbGluZyBgUGx1Z2luLnVzZShNYXR0ZXIpYC5cbiAgICAgKiBAcHJvcGVydHkgdXNlc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICBNYXR0ZXIudXNlcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsdWdpbnMgdGhhdCBoYXZlIGJlZW4gaW5zdGFsbGVkIHRocm91Z2ggYE1hdHRlci5QbHVnaW4uaW5zdGFsbGAuIFJlYWQgb25seS5cbiAgICAgKiBAcHJvcGVydHkgdXNlZFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICBNYXR0ZXIudXNlZCA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogSW5zdGFsbHMgdGhlIGdpdmVuIHBsdWdpbnMgb24gdGhlIGBNYXR0ZXJgIG5hbWVzcGFjZS5cbiAgICAgKiBUaGlzIGlzIGEgc2hvcnQtaGFuZCBmb3IgYFBsdWdpbi51c2VgLCBzZWUgaXQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogQ2FsbCB0aGlzIGZ1bmN0aW9uIG9uY2UgYXQgdGhlIHN0YXJ0IG9mIHlvdXIgY29kZSwgd2l0aCBhbGwgb2YgdGhlIHBsdWdpbnMgeW91IHdpc2ggdG8gaW5zdGFsbCBhcyBhcmd1bWVudHMuXG4gICAgICogQXZvaWQgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIG11bHRpcGxlIHRpbWVzIHVubGVzcyB5b3UgaW50ZW5kIHRvIG1hbnVhbGx5IGNvbnRyb2wgaW5zdGFsbGF0aW9uIG9yZGVyLlxuICAgICAqIEBtZXRob2QgdXNlXG4gICAgICogQHBhcmFtIC4uLnBsdWdpbiB7RnVuY3Rpb259IFRoZSBwbHVnaW4ocykgdG8gaW5zdGFsbCBvbiBgYmFzZWAgKG11bHRpLWFyZ3VtZW50KS5cbiAgICAgKi9cbiAgICBNYXR0ZXIudXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFBsdWdpbi51c2UoTWF0dGVyLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhaW5zIGEgZnVuY3Rpb24gdG8gZXhjdXRlIGJlZm9yZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gb24gdGhlIGdpdmVuIGBwYXRoYCByZWxhdGl2ZSB0byBgTWF0dGVyYC5cbiAgICAgKiBTZWUgYWxzbyBkb2NzIGZvciBgQ29tbW9uLmNoYWluYC5cbiAgICAgKiBAbWV0aG9kIGJlZm9yZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIGBNYXR0ZXJgXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hhaW4gYmVmb3JlIHRoZSBvcmlnaW5hbFxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgY2hhaW5lZCBmdW5jdGlvbiB0aGF0IHJlcGxhY2VkIHRoZSBvcmlnaW5hbFxuICAgICAqL1xuICAgIE1hdHRlci5iZWZvcmUgPSBmdW5jdGlvbihwYXRoLCBmdW5jKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL15NYXR0ZXIuLywgJycpO1xuICAgICAgICByZXR1cm4gQ29tbW9uLmNoYWluUGF0aEJlZm9yZShNYXR0ZXIsIHBhdGgsIGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFpbnMgYSBmdW5jdGlvbiB0byBleGN1dGUgYWZ0ZXIgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9uIHRoZSBnaXZlbiBgcGF0aGAgcmVsYXRpdmUgdG8gYE1hdHRlcmAuXG4gICAgICogU2VlIGFsc28gZG9jcyBmb3IgYENvbW1vbi5jaGFpbmAuXG4gICAgICogQG1ldGhvZCBhZnRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIGBNYXR0ZXJgXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hhaW4gYWZ0ZXIgdGhlIG9yaWdpbmFsXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBjaGFpbmVkIGZ1bmN0aW9uIHRoYXQgcmVwbGFjZWQgdGhlIG9yaWdpbmFsXG4gICAgICovXG4gICAgTWF0dGVyLmFmdGVyID0gZnVuY3Rpb24ocGF0aCwgZnVuYykge1xuICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eTWF0dGVyLi8sICcnKTtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5jaGFpblBhdGhBZnRlcihNYXR0ZXIsIHBhdGgsIGZ1bmMpO1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi9Db21tb25cIjoxNCxcIi4vUGx1Z2luXCI6MjB9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cbn0se1wiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi9Db21tb25cIjoxNH1dLDE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Nb3VzZWAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgbW91c2UgaW5wdXRzLlxuKlxuKiBAY2xhc3MgTW91c2VcbiovXG5cbnZhciBNb3VzZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlO1xuXG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1vdXNlIGlucHV0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqIEByZXR1cm4ge21vdXNlfSBBIG5ldyBtb3VzZVxuICAgICAqL1xuICAgIE1vdXNlLmNyZWF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG1vdXNlID0ge307XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICBDb21tb24ubG9nKCdNb3VzZS5jcmVhdGU6IGVsZW1lbnQgd2FzIHVuZGVmaW5lZCwgZGVmYXVsdGluZyB0byBkb2N1bWVudC5ib2R5JywgJ3dhcm4nKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbW91c2UuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgbW91c2UuYWJzb2x1dGUgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2UucG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2UubW91c2Vkb3duUG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2UubW91c2V1cFBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIG1vdXNlLm9mZnNldCA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBtb3VzZS5zY2FsZSA9IHsgeDogMSwgeTogMSB9O1xuICAgICAgICBtb3VzZS53aGVlbERlbHRhID0gMDtcbiAgICAgICAgbW91c2UuYnV0dG9uID0gLTE7XG4gICAgICAgIG1vdXNlLnBpeGVsUmF0aW8gPSBtb3VzZS5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1waXhlbC1yYXRpbycpIHx8IDE7XG5cbiAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzID0ge1xuICAgICAgICAgICAgbW91c2Vtb3ZlOiBudWxsLFxuICAgICAgICAgICAgbW91c2Vkb3duOiBudWxsLFxuICAgICAgICAgICAgbW91c2V1cDogbnVsbCxcbiAgICAgICAgICAgIG1vdXNld2hlZWw6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIG1vdXNlLm1vdXNlbW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7IFxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gTW91c2UuX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgbW91c2UuZWxlbWVudCwgbW91c2UucGl4ZWxSYXRpbyksXG4gICAgICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuXG4gICAgICAgICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAgICAgICAgIG1vdXNlLmJ1dHRvbiA9IDA7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS55ID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnggPSBtb3VzZS5hYnNvbHV0ZS54ICogbW91c2Uuc2NhbGUueCArIG1vdXNlLm9mZnNldC54O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueSA9IG1vdXNlLmFic29sdXRlLnkgKiBtb3VzZS5zY2FsZS55ICsgbW91c2Uub2Zmc2V0Lnk7XG4gICAgICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2Vtb3ZlID0gZXZlbnQ7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBtb3VzZS5tb3VzZWRvd24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gTW91c2UuX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgbW91c2UuZWxlbWVudCwgbW91c2UucGl4ZWxSYXRpbyksXG4gICAgICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuXG4gICAgICAgICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAgICAgICAgIG1vdXNlLmJ1dHRvbiA9IDA7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW91c2UuYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueCA9IG1vdXNlLmFic29sdXRlLnggKiBtb3VzZS5zY2FsZS54ICsgbW91c2Uub2Zmc2V0Lng7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi55ID0gbW91c2UuYWJzb2x1dGUueSAqIG1vdXNlLnNjYWxlLnkgKyBtb3VzZS5vZmZzZXQueTtcbiAgICAgICAgICAgIG1vdXNlLm1vdXNlZG93blBvc2l0aW9uLnggPSBtb3VzZS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgbW91c2UubW91c2Vkb3duUG9zaXRpb24ueSA9IG1vdXNlLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2Vkb3duID0gZXZlbnQ7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBtb3VzZS5tb3VzZXVwID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IE1vdXNlLl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZXZlbnQsIG1vdXNlLmVsZW1lbnQsIG1vdXNlLnBpeGVsUmF0aW8pLFxuICAgICAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcztcblxuICAgICAgICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBtb3VzZS5idXR0b24gPSAtMTtcbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi54ID0gbW91c2UuYWJzb2x1dGUueCAqIG1vdXNlLnNjYWxlLnggKyBtb3VzZS5vZmZzZXQueDtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnkgPSBtb3VzZS5hYnNvbHV0ZS55ICogbW91c2Uuc2NhbGUueSArIG1vdXNlLm9mZnNldC55O1xuICAgICAgICAgICAgbW91c2UubW91c2V1cFBvc2l0aW9uLnggPSBtb3VzZS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgbW91c2UubW91c2V1cFBvc2l0aW9uLnkgPSBtb3VzZS5wb3NpdGlvbi55O1xuICAgICAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNldXAgPSBldmVudDtcbiAgICAgICAgfTtcblxuICAgICAgICBtb3VzZS5tb3VzZXdoZWVsID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIG1vdXNlLndoZWVsRGVsdGEgPSBNYXRoLm1heCgtMSwgTWF0aC5taW4oMSwgZXZlbnQud2hlZWxEZWx0YSB8fCAtZXZlbnQuZGV0YWlsKSk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIE1vdXNlLnNldEVsZW1lbnQobW91c2UsIG1vdXNlLmVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiBtb3VzZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZWxlbWVudCB0aGUgbW91c2UgaXMgYm91bmQgdG8gKGFuZCByZWxhdGl2ZSB0bykuXG4gICAgICogQG1ldGhvZCBzZXRFbGVtZW50XG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgTW91c2Uuc2V0RWxlbWVudCA9IGZ1bmN0aW9uKG1vdXNlLCBlbGVtZW50KSB7XG4gICAgICAgIG1vdXNlLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW91c2UubW91c2Vtb3ZlKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBtb3VzZS5tb3VzZWRvd24pO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZS5tb3VzZXVwKTtcbiAgICAgICAgXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIG1vdXNlLm1vdXNld2hlZWwpO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU1vdXNlU2Nyb2xsJywgbW91c2UubW91c2V3aGVlbCk7XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBtb3VzZS5tb3VzZW1vdmUpO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBtb3VzZS5tb3VzZWRvd24pO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgbW91c2UubW91c2V1cCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgY2FwdHVyZWQgc291cmNlIGV2ZW50cy5cbiAgICAgKiBAbWV0aG9kIGNsZWFyU291cmNlRXZlbnRzXG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VcbiAgICAgKi9cbiAgICBNb3VzZS5jbGVhclNvdXJjZUV2ZW50cyA9IGZ1bmN0aW9uKG1vdXNlKSB7XG4gICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZW1vdmUgPSBudWxsO1xuICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2Vkb3duID0gbnVsbDtcbiAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNldXAgPSBudWxsO1xuICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2V3aGVlbCA9IG51bGw7XG4gICAgICAgIG1vdXNlLndoZWVsRGVsdGEgPSAwO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtb3VzZSBwb3NpdGlvbiBvZmZzZXQuXG4gICAgICogQG1ldGhvZCBzZXRPZmZzZXRcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBvZmZzZXRcbiAgICAgKi9cbiAgICBNb3VzZS5zZXRPZmZzZXQgPSBmdW5jdGlvbihtb3VzZSwgb2Zmc2V0KSB7XG4gICAgICAgIG1vdXNlLm9mZnNldC54ID0gb2Zmc2V0Lng7XG4gICAgICAgIG1vdXNlLm9mZnNldC55ID0gb2Zmc2V0Lnk7XG4gICAgICAgIG1vdXNlLnBvc2l0aW9uLnggPSBtb3VzZS5hYnNvbHV0ZS54ICogbW91c2Uuc2NhbGUueCArIG1vdXNlLm9mZnNldC54O1xuICAgICAgICBtb3VzZS5wb3NpdGlvbi55ID0gbW91c2UuYWJzb2x1dGUueSAqIG1vdXNlLnNjYWxlLnkgKyBtb3VzZS5vZmZzZXQueTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbW91c2UgcG9zaXRpb24gc2NhbGUuXG4gICAgICogQG1ldGhvZCBzZXRTY2FsZVxuICAgICAqIEBwYXJhbSB7bW91c2V9IG1vdXNlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHNjYWxlXG4gICAgICovXG4gICAgTW91c2Uuc2V0U2NhbGUgPSBmdW5jdGlvbihtb3VzZSwgc2NhbGUpIHtcbiAgICAgICAgbW91c2Uuc2NhbGUueCA9IHNjYWxlLng7XG4gICAgICAgIG1vdXNlLnNjYWxlLnkgPSBzY2FsZS55O1xuICAgICAgICBtb3VzZS5wb3NpdGlvbi54ID0gbW91c2UuYWJzb2x1dGUueCAqIG1vdXNlLnNjYWxlLnggKyBtb3VzZS5vZmZzZXQueDtcbiAgICAgICAgbW91c2UucG9zaXRpb24ueSA9IG1vdXNlLmFic29sdXRlLnkgKiBtb3VzZS5zY2FsZS55ICsgbW91c2Uub2Zmc2V0Lnk7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtb3VzZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBhbiBlbGVtZW50IGdpdmVuIGEgc2NyZWVuIHBpeGVsIHJhdGlvLlxuICAgICAqIEBtZXRob2QgX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGV2ZW50XG4gICAgICogQHBhcmFtIHt9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWxSYXRpb1xuICAgICAqIEByZXR1cm4ge31cbiAgICAgKi9cbiAgICBNb3VzZS5fZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uID0gZnVuY3Rpb24oZXZlbnQsIGVsZW1lbnQsIHBpeGVsUmF0aW8pIHtcbiAgICAgICAgdmFyIGVsZW1lbnRCb3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgcm9vdE5vZGUgPSAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSB8fCBkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgIHNjcm9sbFggPSAod2luZG93LnBhZ2VYT2Zmc2V0ICE9PSB1bmRlZmluZWQpID8gd2luZG93LnBhZ2VYT2Zmc2V0IDogcm9vdE5vZGUuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgIHNjcm9sbFkgPSAod2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQpID8gd2luZG93LnBhZ2VZT2Zmc2V0IDogcm9vdE5vZGUuc2Nyb2xsVG9wLFxuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgICAgeCwgeTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgICB4ID0gdG91Y2hlc1swXS5wYWdlWCAtIGVsZW1lbnRCb3VuZHMubGVmdCAtIHNjcm9sbFg7XG4gICAgICAgICAgICB5ID0gdG91Y2hlc1swXS5wYWdlWSAtIGVsZW1lbnRCb3VuZHMudG9wIC0gc2Nyb2xsWTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSBldmVudC5wYWdlWCAtIGVsZW1lbnRCb3VuZHMubGVmdCAtIHNjcm9sbFg7XG4gICAgICAgICAgICB5ID0gZXZlbnQucGFnZVkgLSBlbGVtZW50Qm91bmRzLnRvcCAtIHNjcm9sbFk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIHg6IHggLyAoZWxlbWVudC5jbGllbnRXaWR0aCAvIChlbGVtZW50LndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGgpICogcGl4ZWxSYXRpbyksXG4gICAgICAgICAgICB5OiB5IC8gKGVsZW1lbnQuY2xpZW50SGVpZ2h0IC8gKGVsZW1lbnQuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0KSAqIHBpeGVsUmF0aW8pXG4gICAgICAgIH07XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0fV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlBsdWdpbmAgbW9kdWxlIGNvbnRhaW5zIGZ1bmN0aW9ucyBmb3IgcmVnaXN0ZXJpbmcgYW5kIGluc3RhbGxpbmcgcGx1Z2lucyBvbiBtb2R1bGVzLlxuKlxuKiBAY2xhc3MgUGx1Z2luXG4qL1xuXG52YXIgUGx1Z2luID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUGx1Z2luO1xuXG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgUGx1Z2luLl9yZWdpc3RyeSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgcGx1Z2luIG9iamVjdCBzbyBpdCBjYW4gYmUgcmVzb2x2ZWQgbGF0ZXIgYnkgbmFtZS5cbiAgICAgKiBAbWV0aG9kIHJlZ2lzdGVyXG4gICAgICogQHBhcmFtIHBsdWdpbiB7fSBUaGUgcGx1Z2luIHRvIHJlZ2lzdGVyLlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHBsdWdpbi5cbiAgICAgKi9cbiAgICBQbHVnaW4ucmVnaXN0ZXIgPSBmdW5jdGlvbihwbHVnaW4pIHtcbiAgICAgICAgaWYgKCFQbHVnaW4uaXNQbHVnaW4ocGx1Z2luKSkge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi5yZWdpc3RlcjonLCBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSwgJ2RvZXMgbm90IGltcGxlbWVudCBhbGwgcmVxdWlyZWQgZmllbGRzLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBsdWdpbi5uYW1lIGluIFBsdWdpbi5fcmVnaXN0cnkpIHtcbiAgICAgICAgICAgIHZhciByZWdpc3RlcmVkID0gUGx1Z2luLl9yZWdpc3RyeVtwbHVnaW4ubmFtZV0sXG4gICAgICAgICAgICAgICAgcGx1Z2luVmVyc2lvbiA9IFBsdWdpbi52ZXJzaW9uUGFyc2UocGx1Z2luLnZlcnNpb24pLm51bWJlcixcbiAgICAgICAgICAgICAgICByZWdpc3RlcmVkVmVyc2lvbiA9IFBsdWdpbi52ZXJzaW9uUGFyc2UocmVnaXN0ZXJlZC52ZXJzaW9uKS5udW1iZXI7XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW5WZXJzaW9uID4gcmVnaXN0ZXJlZFZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybignUGx1Z2luLnJlZ2lzdGVyOicsIFBsdWdpbi50b1N0cmluZyhyZWdpc3RlcmVkKSwgJ3dhcyB1cGdyYWRlZCB0bycsIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pKTtcbiAgICAgICAgICAgICAgICBQbHVnaW4uX3JlZ2lzdHJ5W3BsdWdpbi5uYW1lXSA9IHBsdWdpbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGx1Z2luVmVyc2lvbiA8IHJlZ2lzdGVyZWRWZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi5yZWdpc3RlcjonLCBQbHVnaW4udG9TdHJpbmcocmVnaXN0ZXJlZCksICdjYW4gbm90IGJlIGRvd25ncmFkZWQgdG8nLCBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBsdWdpbiAhPT0gcmVnaXN0ZXJlZCkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4ucmVnaXN0ZXI6JywgUGx1Z2luLnRvU3RyaW5nKHBsdWdpbiksICdpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgdG8gZGlmZmVyZW50IHBsdWdpbiBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFBsdWdpbi5fcmVnaXN0cnlbcGx1Z2luLm5hbWVdID0gcGx1Z2luO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsdWdpbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgYSBkZXBlbmRlbmN5IHRvIGEgcGx1Z2luIG9iamVjdCBmcm9tIHRoZSByZWdpc3RyeSBpZiBpdCBleGlzdHMuIFxuICAgICAqIFRoZSBgZGVwZW5kZW5jeWAgbWF5IGNvbnRhaW4gYSB2ZXJzaW9uLCBidXQgb25seSB0aGUgbmFtZSBtYXR0ZXJzIHdoZW4gcmVzb2x2aW5nLlxuICAgICAqIEBtZXRob2QgcmVzb2x2ZVxuICAgICAqIEBwYXJhbSBkZXBlbmRlbmN5IHtzdHJpbmd9IFRoZSBkZXBlbmRlbmN5LlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHBsdWdpbiBpZiByZXNvbHZlZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIFBsdWdpbi5yZXNvbHZlID0gZnVuY3Rpb24oZGVwZW5kZW5jeSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLl9yZWdpc3RyeVtQbHVnaW4uZGVwZW5kZW5jeVBhcnNlKGRlcGVuZGVuY3kpLm5hbWVdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJldHR5IHByaW50ZWQgcGx1Z2luIG5hbWUgYW5kIHZlcnNpb24uXG4gICAgICogQG1ldGhvZCB0b1N0cmluZ1xuICAgICAqIEBwYXJhbSBwbHVnaW4ge30gVGhlIHBsdWdpbi5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFByZXR0eSBwcmludGVkIHBsdWdpbiBuYW1lIGFuZCB2ZXJzaW9uLlxuICAgICAqL1xuICAgIFBsdWdpbi50b1N0cmluZyA9IGZ1bmN0aW9uKHBsdWdpbikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHBsdWdpbiA9PT0gJ3N0cmluZycgPyBwbHVnaW4gOiAocGx1Z2luLm5hbWUgfHwgJ2Fub255bW91cycpICsgJ0AnICsgKHBsdWdpbi52ZXJzaW9uIHx8IHBsdWdpbi5yYW5nZSB8fCAnMC4wLjAnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBtZWV0cyB0aGUgbWluaW11bSBzdGFuZGFyZCB0byBiZSBjb25zaWRlcmVkIGEgcGx1Z2luLlxuICAgICAqIFRoaXMgbWVhbnMgaXQgbXVzdCBkZWZpbmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqIC0gYG5hbWVgXG4gICAgICogLSBgdmVyc2lvbmBcbiAgICAgKiAtIGBpbnN0YWxsYFxuICAgICAqIEBtZXRob2QgaXNQbHVnaW5cbiAgICAgKiBAcGFyYW0gb2JqIHt9IFRoZSBvYmogdG8gdGVzdC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBjYW4gYmUgY29uc2lkZXJlZCBhIHBsdWdpbiBvdGhlcndpc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBQbHVnaW4uaXNQbHVnaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmoubmFtZSAmJiBvYmoudmVyc2lvbiAmJiBvYmouaW5zdGFsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgYSBwbHVnaW4gd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgIGJlZW4gaW5zdGFsbGVkIG9uIGBtb2R1bGVgLlxuICAgICAqIEBtZXRob2QgaXNVc2VkXG4gICAgICogQHBhcmFtIG1vZHVsZSB7fSBUaGUgbW9kdWxlLlxuICAgICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9IFRoZSBwbHVnaW4gbmFtZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgYSBwbHVnaW4gd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgIGJlZW4gaW5zdGFsbGVkIG9uIGBtb2R1bGVgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBQbHVnaW4uaXNVc2VkID0gZnVuY3Rpb24obW9kdWxlLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGUudXNlZC5pbmRleE9mKG5hbWUpID4gLTE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIGBwbHVnaW4uZm9yYCBpcyBhcHBsaWNhYmxlIHRvIGBtb2R1bGVgIGJ5IGNvbXBhcmluZyBhZ2FpbnN0IGBtb2R1bGUubmFtZWAgYW5kIGBtb2R1bGUudmVyc2lvbmAuXG4gICAgICogSWYgYHBsdWdpbi5mb3JgIGlzIG5vdCBzcGVjaWZpZWQgdGhlbiBpdCBpcyBhc3N1bWVkIHRvIGJlIGFwcGxpY2FibGUuXG4gICAgICogVGhlIHZhbHVlIG9mIGBwbHVnaW4uZm9yYCBpcyBhIHN0cmluZyBvZiB0aGUgZm9ybWF0IGAnbW9kdWxlLW5hbWUnYCBvciBgJ21vZHVsZS1uYW1lQHZlcnNpb24nYC5cbiAgICAgKiBAbWV0aG9kIGlzRm9yXG4gICAgICogQHBhcmFtIHBsdWdpbiB7fSBUaGUgcGx1Z2luLlxuICAgICAqIEBwYXJhbSBtb2R1bGUge30gVGhlIG1vZHVsZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgYHBsdWdpbi5mb3JgIGlzIGFwcGxpY2FibGUgdG8gYG1vZHVsZWAsIG90aGVyd2lzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIFBsdWdpbi5pc0ZvciA9IGZ1bmN0aW9uKHBsdWdpbiwgbW9kdWxlKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSBwbHVnaW4uZm9yICYmIFBsdWdpbi5kZXBlbmRlbmN5UGFyc2UocGx1Z2luLmZvcik7XG4gICAgICAgIHJldHVybiAhcGx1Z2luLmZvciB8fCAobW9kdWxlLm5hbWUgPT09IHBhcnNlZC5uYW1lICYmIFBsdWdpbi52ZXJzaW9uU2F0aXNmaWVzKG1vZHVsZS52ZXJzaW9uLCBwYXJzZWQucmFuZ2UpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5zdGFsbHMgdGhlIHBsdWdpbnMgYnkgY2FsbGluZyBgcGx1Z2luLmluc3RhbGxgIG9uIGVhY2ggcGx1Z2luIHNwZWNpZmllZCBpbiBgcGx1Z2luc2AgaWYgcGFzc2VkLCBvdGhlcndpc2UgYG1vZHVsZS51c2VzYC5cbiAgICAgKiBGb3IgaW5zdGFsbGluZyBwbHVnaW5zIG9uIGBNYXR0ZXJgIHNlZSB0aGUgY29udmVuaWVuY2UgZnVuY3Rpb24gYE1hdHRlci51c2VgLlxuICAgICAqIFBsdWdpbnMgbWF5IGJlIHNwZWNpZmllZCBlaXRoZXIgYnkgdGhlaXIgbmFtZSBvciBhIHJlZmVyZW5jZSB0byB0aGUgcGx1Z2luIG9iamVjdC5cbiAgICAgKiBQbHVnaW5zIHRoZW1zZWx2ZXMgbWF5IHNwZWNpZnkgZnVydGhlciBkZXBlbmRlbmNpZXMsIGJ1dCBlYWNoIHBsdWdpbiBpcyBpbnN0YWxsZWQgb25seSBvbmNlLlxuICAgICAqIE9yZGVyIGlzIGltcG9ydGFudCwgYSB0b3BvbG9naWNhbCBzb3J0IGlzIHBlcmZvcm1lZCB0byBmaW5kIHRoZSBiZXN0IHJlc3VsdGluZyBvcmRlciBvZiBpbnN0YWxsYXRpb24uXG4gICAgICogVGhpcyBzb3J0aW5nIGF0dGVtcHRzIHRvIHNhdGlzZnkgZXZlcnkgZGVwZW5kZW5jeSdzIHJlcXVlc3RlZCBvcmRlcmluZywgYnV0IG1heSBub3QgYmUgZXhhY3QgaW4gYWxsIGNhc2VzLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gbG9ncyB0aGUgcmVzdWx0aW5nIHN0YXR1cyBvZiBlYWNoIGRlcGVuZGVuY3kgaW4gdGhlIGNvbnNvbGUsIGFsb25nIHdpdGggYW55IHdhcm5pbmdzLlxuICAgICAqIC0gQSBncmVlbiB0aWNrIOKchSBpbmRpY2F0ZXMgYSBkZXBlbmRlbmN5IHdhcyByZXNvbHZlZCBhbmQgaW5zdGFsbGVkLlxuICAgICAqIC0gQW4gb3JhbmdlIGRpYW1vbmQg8J+UtiBpbmRpY2F0ZXMgYSBkZXBlbmRlbmN5IHdhcyByZXNvbHZlZCBidXQgYSB3YXJuaW5nIHdhcyB0aHJvd24gZm9yIGl0IG9yIG9uZSBpZiBpdHMgZGVwZW5kZW5jaWVzLlxuICAgICAqIC0gQSByZWQgY3Jvc3Mg4p2MIGluZGljYXRlcyBhIGRlcGVuZGVuY3kgY291bGQgbm90IGJlIHJlc29sdmVkLlxuICAgICAqIEF2b2lkIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBtb2R1bGUgdW5sZXNzIHlvdSBpbnRlbmQgdG8gbWFudWFsbHkgY29udHJvbCBpbnN0YWxsYXRpb24gb3JkZXIuXG4gICAgICogQG1ldGhvZCB1c2VcbiAgICAgKiBAcGFyYW0gbW9kdWxlIHt9IFRoZSBtb2R1bGUgaW5zdGFsbCBwbHVnaW5zIG9uLlxuICAgICAqIEBwYXJhbSBbcGx1Z2lucz1tb2R1bGUudXNlc10ge30gVGhlIHBsdWdpbnMgdG8gaW5zdGFsbCBvbiBtb2R1bGUgKG9wdGlvbmFsLCBkZWZhdWx0cyB0byBgbW9kdWxlLnVzZXNgKS5cbiAgICAgKi9cbiAgICBQbHVnaW4udXNlID0gZnVuY3Rpb24obW9kdWxlLCBwbHVnaW5zKSB7XG4gICAgICAgIG1vZHVsZS51c2VzID0gKG1vZHVsZS51c2VzIHx8IFtdKS5jb25jYXQocGx1Z2lucyB8fCBbXSk7XG5cbiAgICAgICAgaWYgKG1vZHVsZS51c2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi51c2U6JywgUGx1Z2luLnRvU3RyaW5nKG1vZHVsZSksICdkb2VzIG5vdCBzcGVjaWZ5IGFueSBkZXBlbmRlbmNpZXMgdG8gaW5zdGFsbC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBQbHVnaW4uZGVwZW5kZW5jaWVzKG1vZHVsZSksXG4gICAgICAgICAgICBzb3J0ZWREZXBlbmRlbmNpZXMgPSBDb21tb24udG9wb2xvZ2ljYWxTb3J0KGRlcGVuZGVuY2llcyksXG4gICAgICAgICAgICBzdGF0dXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvcnRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNvcnRlZERlcGVuZGVuY2llc1tpXSA9PT0gbW9kdWxlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBsdWdpbiA9IFBsdWdpbi5yZXNvbHZlKHNvcnRlZERlcGVuZGVuY2llc1tpXSk7XG5cbiAgICAgICAgICAgIGlmICghcGx1Z2luKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLnB1c2goJ+KdjCAnICsgc29ydGVkRGVwZW5kZW5jaWVzW2ldKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFBsdWdpbi5pc1VzZWQobW9kdWxlLCBwbHVnaW4ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFQbHVnaW4uaXNGb3IocGx1Z2luLCBtb2R1bGUpKSB7XG4gICAgICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi51c2U6JywgUGx1Z2luLnRvU3RyaW5nKHBsdWdpbiksICdpcyBmb3InLCBwbHVnaW4uZm9yLCAnYnV0IGluc3RhbGxlZCBvbicsIFBsdWdpbi50b1N0cmluZyhtb2R1bGUpICsgJy4nKTtcbiAgICAgICAgICAgICAgICBwbHVnaW4uX3dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW4uaW5zdGFsbCkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKG1vZHVsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4udXNlOicsIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pLCAnZG9lcyBub3Qgc3BlY2lmeSBhbiBpbnN0YWxsIGZ1bmN0aW9uLicpO1xuICAgICAgICAgICAgICAgIHBsdWdpbi5fd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBsdWdpbi5fd2FybmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLnB1c2goJ/CflLYgJyArIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgcGx1Z2luLl93YXJuZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5wdXNoKCfinIUgJyArIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kdWxlLnVzZWQucHVzaChwbHVnaW4ubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdHVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIENvbW1vbi5pbmZvKHN0YXR1cy5qb2luKCcgICcpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmaW5kcyBhbGwgb2YgYSBtb2R1bGUncyBkZXBlbmRlbmNpZXMgYW5kIHJldHVybnMgYSBmbGF0IGRlcGVuZGVuY3kgZ3JhcGguXG4gICAgICogQG1ldGhvZCBkZXBlbmRlbmNpZXNcbiAgICAgKiBAcGFyYW0gbW9kdWxlIHt9IFRoZSBtb2R1bGUuXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBBIGRlcGVuZGVuY3kgZ3JhcGguXG4gICAgICovXG4gICAgUGx1Z2luLmRlcGVuZGVuY2llcyA9IGZ1bmN0aW9uKG1vZHVsZSwgdHJhY2tlZCkge1xuICAgICAgICB2YXIgcGFyc2VkQmFzZSA9IFBsdWdpbi5kZXBlbmRlbmN5UGFyc2UobW9kdWxlKSxcbiAgICAgICAgICAgIG5hbWUgPSBwYXJzZWRCYXNlLm5hbWU7XG5cbiAgICAgICAgdHJhY2tlZCA9IHRyYWNrZWQgfHwge307XG5cbiAgICAgICAgaWYgKG5hbWUgaW4gdHJhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kdWxlID0gUGx1Z2luLnJlc29sdmUobW9kdWxlKSB8fCBtb2R1bGU7XG5cbiAgICAgICAgdHJhY2tlZFtuYW1lXSA9IENvbW1vbi5tYXAobW9kdWxlLnVzZXMgfHwgW10sIGZ1bmN0aW9uKGRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgIGlmIChQbHVnaW4uaXNQbHVnaW4oZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICAgICAgICBQbHVnaW4ucmVnaXN0ZXIoZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBQbHVnaW4uZGVwZW5kZW5jeVBhcnNlKGRlcGVuZGVuY3kpLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkID0gUGx1Z2luLnJlc29sdmUoZGVwZW5kZW5jeSk7XG5cbiAgICAgICAgICAgIGlmIChyZXNvbHZlZCAmJiAhUGx1Z2luLnZlcnNpb25TYXRpc2ZpZXMocmVzb2x2ZWQudmVyc2lvbiwgcGFyc2VkLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKFxuICAgICAgICAgICAgICAgICAgICAnUGx1Z2luLmRlcGVuZGVuY2llczonLCBQbHVnaW4udG9TdHJpbmcocmVzb2x2ZWQpLCAnZG9lcyBub3Qgc2F0aXNmeScsXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b1N0cmluZyhwYXJzZWQpLCAndXNlZCBieScsIFBsdWdpbi50b1N0cmluZyhwYXJzZWRCYXNlKSArICcuJ1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlZC5fd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtb2R1bGUuX3dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKFxuICAgICAgICAgICAgICAgICAgICAnUGx1Z2luLmRlcGVuZGVuY2llczonLCBQbHVnaW4udG9TdHJpbmcoZGVwZW5kZW5jeSksICd1c2VkIGJ5JyxcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLnRvU3RyaW5nKHBhcnNlZEJhc2UpLCAnY291bGQgbm90IGJlIHJlc29sdmVkLidcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgbW9kdWxlLl93YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkLm5hbWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tlZFtuYW1lXS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgUGx1Z2luLmRlcGVuZGVuY2llcyh0cmFja2VkW25hbWVdW2ldLCB0cmFja2VkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFja2VkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBkZXBlbmRlbmN5IHN0cmluZyBpbnRvIGl0cyBjb21wb25lbnRzLlxuICAgICAqIFRoZSBgZGVwZW5kZW5jeWAgaXMgYSBzdHJpbmcgb2YgdGhlIGZvcm1hdCBgJ21vZHVsZS1uYW1lJ2Agb3IgYCdtb2R1bGUtbmFtZUB2ZXJzaW9uJ2AuXG4gICAgICogU2VlIGRvY3VtZW50YXRpb24gZm9yIGBQbHVnaW4udmVyc2lvblBhcnNlYCBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgZm9ybWF0LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGFsc28gaGFuZGxlIGRlcGVuZGVuY2llcyB0aGF0IGFyZSBhbHJlYWR5IHJlc29sdmVkIChlLmcuIGEgbW9kdWxlIG9iamVjdCkuXG4gICAgICogQG1ldGhvZCBkZXBlbmRlbmN5UGFyc2VcbiAgICAgKiBAcGFyYW0gZGVwZW5kZW5jeSB7c3RyaW5nfSBUaGUgZGVwZW5kZW5jeSBvZiB0aGUgZm9ybWF0IGAnbW9kdWxlLW5hbWUnYCBvciBgJ21vZHVsZS1uYW1lQHZlcnNpb24nYC5cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBkZXBlbmRlbmN5IHBhcnNlZCBpbnRvIGl0cyBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIFBsdWdpbi5kZXBlbmRlbmN5UGFyc2UgPSBmdW5jdGlvbihkZXBlbmRlbmN5KSB7XG4gICAgICAgIGlmIChDb21tb24uaXNTdHJpbmcoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gL15bXFx3LV0rKEAoXFwqfFtcXF5+XT9cXGQrXFwuXFxkK1xcLlxcZCsoLVswLTlBLVphLXotXSspPykpPyQvO1xuXG4gICAgICAgICAgICBpZiAoIXBhdHRlcm4udGVzdChkZXBlbmRlbmN5KSkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4uZGVwZW5kZW5jeVBhcnNlOicsIGRlcGVuZGVuY3ksICdpcyBub3QgYSB2YWxpZCBkZXBlbmRlbmN5IHN0cmluZy4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBkZXBlbmRlbmN5LnNwbGl0KCdAJylbMF0sXG4gICAgICAgICAgICAgICAgcmFuZ2U6IGRlcGVuZGVuY3kuc3BsaXQoJ0AnKVsxXSB8fCAnKidcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogZGVwZW5kZW5jeS5uYW1lLFxuICAgICAgICAgICAgcmFuZ2U6IGRlcGVuZGVuY3kucmFuZ2UgfHwgZGVwZW5kZW5jeS52ZXJzaW9uXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHZlcnNpb24gc3RyaW5nIGludG8gaXRzIGNvbXBvbmVudHMuICBcbiAgICAgKiBWZXJzaW9ucyBhcmUgc3RyaWN0bHkgb2YgdGhlIGZvcm1hdCBgeC55LnpgIChhcyBpbiBbc2VtdmVyXShodHRwOi8vc2VtdmVyLm9yZy8pKS5cbiAgICAgKiBWZXJzaW9ucyBtYXkgb3B0aW9uYWxseSBoYXZlIGEgcHJlcmVsZWFzZSB0YWcgaW4gdGhlIGZvcm1hdCBgeC55LnotYWxwaGFgLlxuICAgICAqIFJhbmdlcyBhcmUgYSBzdHJpY3Qgc3Vic2V0IG9mIFtucG0gcmFuZ2VzXShodHRwczovL2RvY3MubnBtanMuY29tL21pc2Mvc2VtdmVyI2FkdmFuY2VkLXJhbmdlLXN5bnRheCkuXG4gICAgICogT25seSB0aGUgZm9sbG93aW5nIHJhbmdlIHR5cGVzIGFyZSBzdXBwb3J0ZWQ6XG4gICAgICogLSBUaWxkZSByYW5nZXMgZS5nLiBgfjEuMi4zYFxuICAgICAqIC0gQ2FyZXQgcmFuZ2VzIGUuZy4gYF4xLjIuM2BcbiAgICAgKiAtIEV4YWN0IHZlcnNpb24gZS5nLiBgMS4yLjNgXG4gICAgICogLSBBbnkgdmVyc2lvbiBgKmBcbiAgICAgKiBAbWV0aG9kIHZlcnNpb25QYXJzZVxuICAgICAqIEBwYXJhbSByYW5nZSB7c3RyaW5nfSBUaGUgdmVyc2lvbiBzdHJpbmcuXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgdmVyc2lvbiByYW5nZSBwYXJzZWQgaW50byBpdHMgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICBQbHVnaW4udmVyc2lvblBhcnNlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSAvXlxcKnxbXFxefl0/XFxkK1xcLlxcZCtcXC5cXGQrKC1bMC05QS1aYS16LV0rKT8kLztcblxuICAgICAgICBpZiAoIXBhdHRlcm4udGVzdChyYW5nZSkpIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4udmVyc2lvblBhcnNlOicsIHJhbmdlLCAnaXMgbm90IGEgdmFsaWQgdmVyc2lvbiBvciByYW5nZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZGVudGlmaWVycyA9IHJhbmdlLnNwbGl0KCctJyk7XG4gICAgICAgIHJhbmdlID0gaWRlbnRpZmllcnNbMF07XG5cbiAgICAgICAgdmFyIGlzUmFuZ2UgPSBpc05hTihOdW1iZXIocmFuZ2VbMF0pKSxcbiAgICAgICAgICAgIHZlcnNpb24gPSBpc1JhbmdlID8gcmFuZ2Uuc3Vic3RyKDEpIDogcmFuZ2UsXG4gICAgICAgICAgICBwYXJ0cyA9IENvbW1vbi5tYXAodmVyc2lvbi5zcGxpdCgnLicpLCBmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcihwYXJ0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc1JhbmdlOiBpc1JhbmdlLFxuICAgICAgICAgICAgdmVyc2lvbjogdmVyc2lvbixcbiAgICAgICAgICAgIHJhbmdlOiByYW5nZSxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBpc1JhbmdlID8gcmFuZ2VbMF0gOiAnJyxcbiAgICAgICAgICAgIHBhcnRzOiBwYXJ0cyxcbiAgICAgICAgICAgIHByZXJlbGVhc2U6IGlkZW50aWZpZXJzWzFdLFxuICAgICAgICAgICAgbnVtYmVyOiBwYXJ0c1swXSAqIDFlOCArIHBhcnRzWzFdICogMWU0ICsgcGFydHNbMl1cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgYHZlcnNpb25gIHNhdGlzZmllcyB0aGUgZ2l2ZW4gYHJhbmdlYC5cbiAgICAgKiBTZWUgZG9jdW1lbnRhdGlvbiBmb3IgYFBsdWdpbi52ZXJzaW9uUGFyc2VgIGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBmb3JtYXQuXG4gICAgICogSWYgYSB2ZXJzaW9uIG9yIHJhbmdlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gYW55IHZlcnNpb24gKGAqYCkgaXMgYXNzdW1lZCB0byBzYXRpc2Z5LlxuICAgICAqIEBtZXRob2QgdmVyc2lvblNhdGlzZmllc1xuICAgICAqIEBwYXJhbSB2ZXJzaW9uIHtzdHJpbmd9IFRoZSB2ZXJzaW9uIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gcmFuZ2Uge3N0cmluZ30gVGhlIHJhbmdlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgYHZlcnNpb25gIHNhdGlzZmllcyBgcmFuZ2VgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBQbHVnaW4udmVyc2lvblNhdGlzZmllcyA9IGZ1bmN0aW9uKHZlcnNpb24sIHJhbmdlKSB7XG4gICAgICAgIHJhbmdlID0gcmFuZ2UgfHwgJyonO1xuXG4gICAgICAgIHZhciByYW5nZVBhcnNlZCA9IFBsdWdpbi52ZXJzaW9uUGFyc2UocmFuZ2UpLFxuICAgICAgICAgICAgcmFuZ2VQYXJ0cyA9IHJhbmdlUGFyc2VkLnBhcnRzLFxuICAgICAgICAgICAgdmVyc2lvblBhcnNlZCA9IFBsdWdpbi52ZXJzaW9uUGFyc2UodmVyc2lvbiksXG4gICAgICAgICAgICB2ZXJzaW9uUGFydHMgPSB2ZXJzaW9uUGFyc2VkLnBhcnRzO1xuXG4gICAgICAgIGlmIChyYW5nZVBhcnNlZC5pc1JhbmdlKSB7XG4gICAgICAgICAgICBpZiAocmFuZ2VQYXJzZWQub3BlcmF0b3IgPT09ICcqJyB8fCB2ZXJzaW9uID09PSAnKicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJhbmdlUGFyc2VkLm9wZXJhdG9yID09PSAnficpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmVyc2lvblBhcnRzWzBdID09PSByYW5nZVBhcnRzWzBdICYmIHZlcnNpb25QYXJ0c1sxXSA9PT0gcmFuZ2VQYXJ0c1sxXSAmJiB2ZXJzaW9uUGFydHNbMl0gPj0gcmFuZ2VQYXJ0c1syXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJhbmdlUGFyc2VkLm9wZXJhdG9yID09PSAnXicpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VQYXJ0c1swXSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNpb25QYXJ0c1swXSA9PT0gcmFuZ2VQYXJ0c1swXSAmJiB2ZXJzaW9uUGFyc2VkLm51bWJlciA+PSByYW5nZVBhcnNlZC5udW1iZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlUGFydHNbMV0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uUGFydHNbMV0gPT09IHJhbmdlUGFydHNbMV0gJiYgdmVyc2lvblBhcnRzWzJdID49IHJhbmdlUGFydHNbMl07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNpb25QYXJ0c1syXSA9PT0gcmFuZ2VQYXJ0c1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZXJzaW9uID09PSByYW5nZSB8fCB2ZXJzaW9uID09PSAnKic7XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuL0NvbW1vblwiOjE0fV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlJ1bm5lcmAgbW9kdWxlIGlzIGFuIG9wdGlvbmFsIHV0aWxpdHkgd2hpY2ggcHJvdmlkZXMgYSBnYW1lIGxvb3AsIFxuKiB0aGF0IGhhbmRsZXMgY29udGludW91c2x5IHVwZGF0aW5nIGEgYE1hdHRlci5FbmdpbmVgIGZvciB5b3Ugd2l0aGluIGEgYnJvd3Nlci5cbiogSXQgaXMgaW50ZW5kZWQgZm9yIGRldmVsb3BtZW50IGFuZCBkZWJ1Z2dpbmcgcHVycG9zZXMsIGJ1dCBtYXkgYWxzbyBiZSBzdWl0YWJsZSBmb3Igc2ltcGxlIGdhbWVzLlxuKiBJZiB5b3UgYXJlIHVzaW5nIHlvdXIgb3duIGdhbWUgbG9vcCBpbnN0ZWFkLCB0aGVuIHlvdSBkbyBub3QgbmVlZCB0aGUgYE1hdHRlci5SdW5uZXJgIG1vZHVsZS5cbiogSW5zdGVhZCBqdXN0IGNhbGwgYEVuZ2luZS51cGRhdGUoZW5naW5lLCBkZWx0YSlgIGluIHlvdXIgb3duIGxvb3AuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBSdW5uZXJcbiovXG5cbnZhciBSdW5uZXIgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBSdW5uZXI7XG5cbnZhciBFdmVudHMgPSBfZGVyZXFfKCcuL0V2ZW50cycpO1xudmFyIEVuZ2luZSA9IF9kZXJlcV8oJy4vRW5naW5lJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB9XG5cbiAgICBpZiAoIV9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgdmFyIF9mcmFtZVRpbWVvdXQ7XG5cbiAgICAgICAgX3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKXsgXG4gICAgICAgICAgICBfZnJhbWVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soQ29tbW9uLm5vdygpKTsgXG4gICAgICAgICAgICB9LCAxMDAwIC8gNjApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF9mcmFtZVRpbWVvdXQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUnVubmVyLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICovXG4gICAgUnVubmVyLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgZnBzOiA2MCxcbiAgICAgICAgICAgIGNvcnJlY3Rpb246IDEsXG4gICAgICAgICAgICBkZWx0YVNhbXBsZVNpemU6IDYwLFxuICAgICAgICAgICAgY291bnRlclRpbWVzdGFtcDogMCxcbiAgICAgICAgICAgIGZyYW1lQ291bnRlcjogMCxcbiAgICAgICAgICAgIGRlbHRhSGlzdG9yeTogW10sXG4gICAgICAgICAgICB0aW1lUHJldjogbnVsbCxcbiAgICAgICAgICAgIHRpbWVTY2FsZVByZXY6IDEsXG4gICAgICAgICAgICBmcmFtZVJlcXVlc3RJZDogbnVsbCxcbiAgICAgICAgICAgIGlzRml4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBydW5uZXIgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBydW5uZXIuZGVsdGEgPSBydW5uZXIuZGVsdGEgfHwgMTAwMCAvIHJ1bm5lci5mcHM7XG4gICAgICAgIHJ1bm5lci5kZWx0YU1pbiA9IHJ1bm5lci5kZWx0YU1pbiB8fCAxMDAwIC8gcnVubmVyLmZwcztcbiAgICAgICAgcnVubmVyLmRlbHRhTWF4ID0gcnVubmVyLmRlbHRhTWF4IHx8IDEwMDAgLyAocnVubmVyLmZwcyAqIDAuNSk7XG4gICAgICAgIHJ1bm5lci5mcHMgPSAxMDAwIC8gcnVubmVyLmRlbHRhO1xuXG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRpbnVvdXNseSB0aWNrcyBhIGBNYXR0ZXIuRW5naW5lYCBieSBjYWxsaW5nIGBSdW5uZXIudGlja2Agb24gdGhlIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGV2ZW50LlxuICAgICAqIEBtZXRob2QgcnVuXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqL1xuICAgIFJ1bm5lci5ydW4gPSBmdW5jdGlvbihydW5uZXIsIGVuZ2luZSkge1xuICAgICAgICAvLyBjcmVhdGUgcnVubmVyIGlmIGVuZ2luZSBpcyBmaXJzdCBhcmd1bWVudFxuICAgICAgICBpZiAodHlwZW9mIHJ1bm5lci5wb3NpdGlvbkl0ZXJhdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBlbmdpbmUgPSBydW5uZXI7XG4gICAgICAgICAgICBydW5uZXIgPSBSdW5uZXIuY3JlYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAoZnVuY3Rpb24gcmVuZGVyKHRpbWUpe1xuICAgICAgICAgICAgcnVubmVyLmZyYW1lUmVxdWVzdElkID0gX3JlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuXG4gICAgICAgICAgICBpZiAodGltZSAmJiBydW5uZXIuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIFJ1bm5lci50aWNrKHJ1bm5lciwgZW5naW5lLCB0aW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcblxuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGdhbWUgbG9vcCB1dGlsaXR5IHRoYXQgdXBkYXRlcyB0aGUgZW5naW5lIGFuZCByZW5kZXJlciBieSBvbmUgc3RlcCAoYSAndGljaycpLlxuICAgICAqIEZlYXR1cmVzIGRlbHRhIHNtb290aGluZywgdGltZSBjb3JyZWN0aW9uIGFuZCBmaXhlZCBvciBkeW5hbWljIHRpbWluZy5cbiAgICAgKiBUcmlnZ2VycyBgYmVmb3JlVGlja2AsIGB0aWNrYCBhbmQgYGFmdGVyVGlja2AgZXZlbnRzIG9uIHRoZSBlbmdpbmUuXG4gICAgICogQ29uc2lkZXIganVzdCBgRW5naW5lLnVwZGF0ZShlbmdpbmUsIGRlbHRhKWAgaWYgeW91J3JlIHVzaW5nIHlvdXIgb3duIGxvb3AuXG4gICAgICogQG1ldGhvZCB0aWNrXG4gICAgICogQHBhcmFtIHtydW5uZXJ9IHJ1bm5lclxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgICAqL1xuICAgIFJ1bm5lci50aWNrID0gZnVuY3Rpb24ocnVubmVyLCBlbmdpbmUsIHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWluZyA9IGVuZ2luZS50aW1pbmcsXG4gICAgICAgICAgICBjb3JyZWN0aW9uID0gMSxcbiAgICAgICAgICAgIGRlbHRhO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhbiBldmVudCBvYmplY3RcbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1pbmcudGltZXN0YW1wXG4gICAgICAgIH07XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYmVmb3JlVGljaycsIGV2ZW50KTtcbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnYmVmb3JlVGljaycsIGV2ZW50KTsgLy8gQGRlcHJlY2F0ZWRcblxuICAgICAgICBpZiAocnVubmVyLmlzRml4ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpeGVkIHRpbWVzdGVwXG4gICAgICAgICAgICBkZWx0YSA9IHJ1bm5lci5kZWx0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGR5bmFtaWMgdGltZXN0ZXAgYmFzZWQgb24gd2FsbCBjbG9jayBiZXR3ZWVuIGNhbGxzXG4gICAgICAgICAgICBkZWx0YSA9ICh0aW1lIC0gcnVubmVyLnRpbWVQcmV2KSB8fCBydW5uZXIuZGVsdGE7XG4gICAgICAgICAgICBydW5uZXIudGltZVByZXYgPSB0aW1lO1xuXG4gICAgICAgICAgICAvLyBvcHRpbWlzdGljYWxseSBmaWx0ZXIgZGVsdGEgb3ZlciBhIGZldyBmcmFtZXMsIHRvIGltcHJvdmUgc3RhYmlsaXR5XG4gICAgICAgICAgICBydW5uZXIuZGVsdGFIaXN0b3J5LnB1c2goZGVsdGEpO1xuICAgICAgICAgICAgcnVubmVyLmRlbHRhSGlzdG9yeSA9IHJ1bm5lci5kZWx0YUhpc3Rvcnkuc2xpY2UoLXJ1bm5lci5kZWx0YVNhbXBsZVNpemUpO1xuICAgICAgICAgICAgZGVsdGEgPSBNYXRoLm1pbi5hcHBseShudWxsLCBydW5uZXIuZGVsdGFIaXN0b3J5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbGltaXQgZGVsdGFcbiAgICAgICAgICAgIGRlbHRhID0gZGVsdGEgPCBydW5uZXIuZGVsdGFNaW4gPyBydW5uZXIuZGVsdGFNaW4gOiBkZWx0YTtcbiAgICAgICAgICAgIGRlbHRhID0gZGVsdGEgPiBydW5uZXIuZGVsdGFNYXggPyBydW5uZXIuZGVsdGFNYXggOiBkZWx0YTtcblxuICAgICAgICAgICAgLy8gY29ycmVjdGlvbiBmb3IgZGVsdGFcbiAgICAgICAgICAgIGNvcnJlY3Rpb24gPSBkZWx0YSAvIHJ1bm5lci5kZWx0YTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIGVuZ2luZSB0aW1pbmcgb2JqZWN0XG4gICAgICAgICAgICBydW5uZXIuZGVsdGEgPSBkZWx0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRpbWUgY29ycmVjdGlvbiBmb3IgdGltZSBzY2FsaW5nXG4gICAgICAgIGlmIChydW5uZXIudGltZVNjYWxlUHJldiAhPT0gMClcbiAgICAgICAgICAgIGNvcnJlY3Rpb24gKj0gdGltaW5nLnRpbWVTY2FsZSAvIHJ1bm5lci50aW1lU2NhbGVQcmV2O1xuXG4gICAgICAgIGlmICh0aW1pbmcudGltZVNjYWxlID09PSAwKVxuICAgICAgICAgICAgY29ycmVjdGlvbiA9IDA7XG5cbiAgICAgICAgcnVubmVyLnRpbWVTY2FsZVByZXYgPSB0aW1pbmcudGltZVNjYWxlO1xuICAgICAgICBydW5uZXIuY29ycmVjdGlvbiA9IGNvcnJlY3Rpb247XG5cbiAgICAgICAgLy8gZnBzIGNvdW50ZXJcbiAgICAgICAgcnVubmVyLmZyYW1lQ291bnRlciArPSAxO1xuICAgICAgICBpZiAodGltZSAtIHJ1bm5lci5jb3VudGVyVGltZXN0YW1wID49IDEwMDApIHtcbiAgICAgICAgICAgIHJ1bm5lci5mcHMgPSBydW5uZXIuZnJhbWVDb3VudGVyICogKCh0aW1lIC0gcnVubmVyLmNvdW50ZXJUaW1lc3RhbXApIC8gMTAwMCk7XG4gICAgICAgICAgICBydW5uZXIuY291bnRlclRpbWVzdGFtcCA9IHRpbWU7XG4gICAgICAgICAgICBydW5uZXIuZnJhbWVDb3VudGVyID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJ1bm5lciwgJ3RpY2snLCBldmVudCk7XG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ3RpY2snLCBldmVudCk7IC8vIEBkZXByZWNhdGVkXG5cbiAgICAgICAgLy8gaWYgd29ybGQgaGFzIGJlZW4gbW9kaWZpZWQsIGNsZWFyIHRoZSByZW5kZXIgc2NlbmUgZ3JhcGhcbiAgICAgICAgaWYgKGVuZ2luZS53b3JsZC5pc01vZGlmaWVkIFxuICAgICAgICAgICAgJiYgZW5naW5lLnJlbmRlclxuICAgICAgICAgICAgJiYgZW5naW5lLnJlbmRlci5jb250cm9sbGVyXG4gICAgICAgICAgICAmJiBlbmdpbmUucmVuZGVyLmNvbnRyb2xsZXIuY2xlYXIpIHtcbiAgICAgICAgICAgIGVuZ2luZS5yZW5kZXIuY29udHJvbGxlci5jbGVhcihlbmdpbmUucmVuZGVyKTsgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZVxuICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICdiZWZvcmVVcGRhdGUnLCBldmVudCk7XG4gICAgICAgIEVuZ2luZS51cGRhdGUoZW5naW5lLCBkZWx0YSwgY29ycmVjdGlvbik7XG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJ1bm5lciwgJ2FmdGVyVXBkYXRlJywgZXZlbnQpO1xuXG4gICAgICAgIC8vIHJlbmRlclxuICAgICAgICAvLyBAZGVwcmVjYXRlZFxuICAgICAgICBpZiAoZW5naW5lLnJlbmRlciAmJiBlbmdpbmUucmVuZGVyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKHJ1bm5lciwgJ2JlZm9yZVJlbmRlcicsIGV2ZW50KTtcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2JlZm9yZVJlbmRlcicsIGV2ZW50KTsgLy8gQGRlcHJlY2F0ZWRcblxuICAgICAgICAgICAgZW5naW5lLnJlbmRlci5jb250cm9sbGVyLndvcmxkKGVuZ2luZS5yZW5kZXIpO1xuXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICdhZnRlclJlbmRlcicsIGV2ZW50KTtcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2FmdGVyUmVuZGVyJywgZXZlbnQpOyAvLyBAZGVwcmVjYXRlZFxuICAgICAgICB9XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYWZ0ZXJUaWNrJywgZXZlbnQpO1xuICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdhZnRlclRpY2snLCBldmVudCk7IC8vIEBkZXByZWNhdGVkXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuZHMgZXhlY3V0aW9uIG9mIGBSdW5uZXIucnVuYCBvbiB0aGUgZ2l2ZW4gYHJ1bm5lcmAsIGJ5IGNhbmNlbGluZyB0aGUgYW5pbWF0aW9uIGZyYW1lIHJlcXVlc3QgZXZlbnQgbG9vcC5cbiAgICAgKiBJZiB5b3Ugd2lzaCB0byBvbmx5IHRlbXBvcmFyaWx5IHBhdXNlIHRoZSBlbmdpbmUsIHNlZSBgZW5naW5lLmVuYWJsZWRgIGluc3RlYWQuXG4gICAgICogQG1ldGhvZCBzdG9wXG4gICAgICogQHBhcmFtIHtydW5uZXJ9IHJ1bm5lclxuICAgICAqL1xuICAgIFJ1bm5lci5zdG9wID0gZnVuY3Rpb24ocnVubmVyKSB7XG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZShydW5uZXIuZnJhbWVSZXF1ZXN0SWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgYFJ1bm5lci5ydW5gLlxuICAgICAqIEBtZXRob2Qgc3RhcnRcbiAgICAgKiBAcGFyYW0ge3J1bm5lcn0gcnVubmVyXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqL1xuICAgIFJ1bm5lci5zdGFydCA9IGZ1bmN0aW9uKHJ1bm5lciwgZW5naW5lKSB7XG4gICAgICAgIFJ1bm5lci5ydW4ocnVubmVyLCBlbmdpbmUpO1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBFdmVudHMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhdCB0aGUgc3RhcnQgb2YgYSB0aWNrLCBiZWZvcmUgYW55IHVwZGF0ZXMgdG8gdGhlIGVuZ2luZSBvciB0aW1pbmdcbiAgICAqXG4gICAgKiBAZXZlbnQgYmVmb3JlVGlja1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHRpbWluZyB1cGRhdGVkLCBidXQganVzdCBiZWZvcmUgdXBkYXRlXG4gICAgKlxuICAgICogQGV2ZW50IHRpY2tcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGF0IHRoZSBlbmQgb2YgYSB0aWNrLCBhZnRlciBlbmdpbmUgdXBkYXRlIGFuZCBhZnRlciByZW5kZXJpbmdcbiAgICAqXG4gICAgKiBAZXZlbnQgYWZ0ZXJUaWNrXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBiZWZvcmUgdXBkYXRlXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVVwZGF0ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgdXBkYXRlXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyVXBkYXRlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBiZWZvcmUgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVJlbmRlclxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKiBAZGVwcmVjYXRlZFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIHJlbmRlcmluZ1xuICAgICpcbiAgICAqIEBldmVudCBhZnRlclJlbmRlclxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKiBAZGVwcmVjYXRlZFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IHNwZWNpZmllcyB3aGV0aGVyIHRoZSBydW5uZXIgaXMgcnVubmluZyBvciBub3QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZW5hYmxlZFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBCb29sZWFuYCB0aGF0IHNwZWNpZmllcyBpZiB0aGUgcnVubmVyIHNob3VsZCB1c2UgYSBmaXhlZCB0aW1lc3RlcCAob3RoZXJ3aXNlIGl0IGlzIHZhcmlhYmxlKS5cbiAgICAgKiBJZiB0aW1pbmcgaXMgZml4ZWQsIHRoZW4gdGhlIGFwcGFyZW50IHNpbXVsYXRpb24gc3BlZWQgd2lsbCBjaGFuZ2UgZGVwZW5kaW5nIG9uIHRoZSBmcmFtZSByYXRlIChidXQgYmVoYXZpb3VyIHdpbGwgYmUgZGV0ZXJtaW5pc3RpYykuXG4gICAgICogSWYgdGhlIHRpbWluZyBpcyB2YXJpYWJsZSwgdGhlbiB0aGUgYXBwYXJlbnQgc2ltdWxhdGlvbiBzcGVlZCB3aWxsIGJlIGNvbnN0YW50IChhcHByb3hpbWF0ZWx5LCBidXQgYXQgdGhlIGNvc3Qgb2YgZGV0ZXJtaW5pbmlzbSkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNGaXhlZFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgdGltZSBzdGVwIGJldHdlZW4gdXBkYXRlcyBpbiBtaWxsaXNlY29uZHMuXG4gICAgICogSWYgYGVuZ2luZS50aW1pbmcuaXNGaXhlZGAgaXMgc2V0IHRvIGB0cnVlYCwgdGhlbiBgZGVsdGFgIGlzIGZpeGVkLlxuICAgICAqIElmIGl0IGlzIGBmYWxzZWAsIHRoZW4gYGRlbHRhYCBjYW4gZHluYW1pY2FsbHkgY2hhbmdlIHRvIG1haW50YWluIHRoZSBjb3JyZWN0IGFwcGFyZW50IHNpbXVsYXRpb24gc3BlZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZGVsdGFcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxMDAwIC8gNjBcbiAgICAgKi9cblxufSkoKTtcblxufSx7XCIuL0NvbW1vblwiOjE0LFwiLi9FbmdpbmVcIjoxNSxcIi4vRXZlbnRzXCI6MTZ9XSwyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuU2xlZXBpbmdgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIHRvIG1hbmFnZSB0aGUgc2xlZXBpbmcgc3RhdGUgb2YgYm9kaWVzLlxuKlxuKiBAY2xhc3MgU2xlZXBpbmdcbiovXG5cbnZhciBTbGVlcGluZyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsZWVwaW5nO1xuXG52YXIgRXZlbnRzID0gX2RlcmVxXygnLi9FdmVudHMnKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgU2xlZXBpbmcuX21vdGlvbldha2VUaHJlc2hvbGQgPSAwLjE4O1xuICAgIFNsZWVwaW5nLl9tb3Rpb25TbGVlcFRocmVzaG9sZCA9IDAuMDg7XG4gICAgU2xlZXBpbmcuX21pbkJpYXMgPSAwLjk7XG5cbiAgICAvKipcbiAgICAgKiBQdXRzIGJvZGllcyB0byBzbGVlcCBvciB3YWtlcyB0aGVtIHVwIGRlcGVuZGluZyBvbiB0aGVpciBtb3Rpb24uXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqL1xuICAgIFNsZWVwaW5nLnVwZGF0ZSA9IGZ1bmN0aW9uKGJvZGllcywgdGltZVNjYWxlKSB7XG4gICAgICAgIHZhciB0aW1lRmFjdG9yID0gdGltZVNjYWxlICogdGltZVNjYWxlICogdGltZVNjYWxlO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBib2RpZXMgc2xlZXBpbmcgc3RhdHVzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBtb3Rpb24gPSBib2R5LnNwZWVkICogYm9keS5zcGVlZCArIGJvZHkuYW5ndWxhclNwZWVkICogYm9keS5hbmd1bGFyU3BlZWQ7XG5cbiAgICAgICAgICAgIC8vIHdha2UgdXAgYm9kaWVzIGlmIHRoZXkgaGF2ZSBhIGZvcmNlIGFwcGxpZWRcbiAgICAgICAgICAgIGlmIChib2R5LmZvcmNlLnggIT09IDAgfHwgYm9keS5mb3JjZS55ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGJvZHksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG1pbk1vdGlvbiA9IE1hdGgubWluKGJvZHkubW90aW9uLCBtb3Rpb24pLFxuICAgICAgICAgICAgICAgIG1heE1vdGlvbiA9IE1hdGgubWF4KGJvZHkubW90aW9uLCBtb3Rpb24pO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIGJpYXNlZCBhdmVyYWdlIG1vdGlvbiBlc3RpbWF0aW9uIGJldHdlZW4gZnJhbWVzXG4gICAgICAgICAgICBib2R5Lm1vdGlvbiA9IFNsZWVwaW5nLl9taW5CaWFzICogbWluTW90aW9uICsgKDEgLSBTbGVlcGluZy5fbWluQmlhcykgKiBtYXhNb3Rpb247XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChib2R5LnNsZWVwVGhyZXNob2xkID4gMCAmJiBib2R5Lm1vdGlvbiA8IFNsZWVwaW5nLl9tb3Rpb25TbGVlcFRocmVzaG9sZCAqIHRpbWVGYWN0b3IpIHtcbiAgICAgICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciArPSAxO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChib2R5LnNsZWVwQ291bnRlciA+PSBib2R5LnNsZWVwVGhyZXNob2xkKVxuICAgICAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoYm9keSwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuc2xlZXBDb3VudGVyID4gMCkge1xuICAgICAgICAgICAgICAgIGJvZHkuc2xlZXBDb3VudGVyIC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBzZXQgb2YgY29sbGlkaW5nIHBhaXJzLCB3YWtlcyB0aGUgc2xlZXBpbmcgYm9kaWVzIGludm9sdmVkLlxuICAgICAqIEBtZXRob2QgYWZ0ZXJDb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtwYWlyW119IHBhaXJzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqL1xuICAgIFNsZWVwaW5nLmFmdGVyQ29sbGlzaW9ucyA9IGZ1bmN0aW9uKHBhaXJzLCB0aW1lU2NhbGUpIHtcbiAgICAgICAgdmFyIHRpbWVGYWN0b3IgPSB0aW1lU2NhbGUgKiB0aW1lU2NhbGUgKiB0aW1lU2NhbGU7XG5cbiAgICAgICAgLy8gd2FrZSB1cCBib2RpZXMgaW52b2x2ZWQgaW4gY29sbGlzaW9uc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBkb24ndCB3YWtlIGluYWN0aXZlIHBhaXJzXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbixcbiAgICAgICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5ib2R5QS5wYXJlbnQsIFxuICAgICAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLmJvZHlCLnBhcmVudDtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBkb24ndCB3YWtlIGlmIGF0IGxlYXN0IG9uZSBib2R5IGlzIHN0YXRpY1xuICAgICAgICAgICAgaWYgKChib2R5QS5pc1NsZWVwaW5nICYmIGJvZHlCLmlzU2xlZXBpbmcpIHx8IGJvZHlBLmlzU3RhdGljIHx8IGJvZHlCLmlzU3RhdGljKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmIChib2R5QS5pc1NsZWVwaW5nIHx8IGJvZHlCLmlzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2xlZXBpbmdCb2R5ID0gKGJvZHlBLmlzU2xlZXBpbmcgJiYgIWJvZHlBLmlzU3RhdGljKSA/IGJvZHlBIDogYm9keUIsXG4gICAgICAgICAgICAgICAgICAgIG1vdmluZ0JvZHkgPSBzbGVlcGluZ0JvZHkgPT09IGJvZHlBID8gYm9keUIgOiBib2R5QTtcblxuICAgICAgICAgICAgICAgIGlmICghc2xlZXBpbmdCb2R5LmlzU3RhdGljICYmIG1vdmluZ0JvZHkubW90aW9uID4gU2xlZXBpbmcuX21vdGlvbldha2VUaHJlc2hvbGQgKiB0aW1lRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChzbGVlcGluZ0JvZHksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICBcbiAgICAvKipcbiAgICAgKiBTZXQgYSBib2R5IGFzIHNsZWVwaW5nIG9yIGF3YWtlLlxuICAgICAqIEBtZXRob2Qgc2V0XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1NsZWVwaW5nXG4gICAgICovXG4gICAgU2xlZXBpbmcuc2V0ID0gZnVuY3Rpb24oYm9keSwgaXNTbGVlcGluZykge1xuICAgICAgICB2YXIgd2FzU2xlZXBpbmcgPSBib2R5LmlzU2xlZXBpbmc7XG5cbiAgICAgICAgaWYgKGlzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgIGJvZHkuaXNTbGVlcGluZyA9IHRydWU7XG4gICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciA9IGJvZHkuc2xlZXBUaHJlc2hvbGQ7XG5cbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnggPSAwO1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvbkltcHVsc2UueSA9IDA7XG5cbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnggPSBib2R5LnBvc2l0aW9uLng7XG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi55ID0gYm9keS5wb3NpdGlvbi55O1xuXG4gICAgICAgICAgICBib2R5LmFuZ2xlUHJldiA9IGJvZHkuYW5nbGU7XG4gICAgICAgICAgICBib2R5LnNwZWVkID0gMDtcbiAgICAgICAgICAgIGJvZHkuYW5ndWxhclNwZWVkID0gMDtcbiAgICAgICAgICAgIGJvZHkubW90aW9uID0gMDtcblxuICAgICAgICAgICAgaWYgKCF3YXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGJvZHksICdzbGVlcFN0YXJ0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5LmlzU2xlZXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGJvZHkuc2xlZXBDb3VudGVyID0gMDtcblxuICAgICAgICAgICAgaWYgKHdhc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIoYm9keSwgJ3NsZWVwRW5kJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4vRXZlbnRzXCI6MTZ9XSwyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuQm9kaWVzYCBtb2R1bGUgY29udGFpbnMgZmFjdG9yeSBtZXRob2RzIGZvciBjcmVhdGluZyByaWdpZCBib2R5IG1vZGVscyBcbiogd2l0aCBjb21tb25seSB1c2VkIGJvZHkgY29uZmlndXJhdGlvbnMgKHN1Y2ggYXMgcmVjdGFuZ2xlcywgY2lyY2xlcyBhbmQgb3RoZXIgcG9seWdvbnMpLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgQm9kaWVzXG4qL1xuXG4vLyBUT0RPOiB0cnVlIGNpcmNsZSBib2RpZXNcblxudmFyIEJvZGllcyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJvZGllcztcblxudmFyIFZlcnRpY2VzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIEJvZHkgPSBfZGVyZXFfKCcuLi9ib2R5L0JvZHknKTtcbnZhciBCb3VuZHMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcbnZhciBkZWNvbXA7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmlnaWQgYm9keSBtb2RlbCB3aXRoIGEgcmVjdGFuZ2xlIGh1bGwuIFxuICAgICAqIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIG9mIHRoZSBgTWF0dGVyLkJvZHlgIG1vZHVsZSBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgcmVjdGFuZ2xlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7Ym9keX0gQSBuZXcgcmVjdGFuZ2xlIGJvZHlcbiAgICAgKi9cbiAgICBCb2RpZXMucmVjdGFuZ2xlID0gZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgcmVjdGFuZ2xlID0geyBcbiAgICAgICAgICAgIGxhYmVsOiAnUmVjdGFuZ2xlIEJvZHknLFxuICAgICAgICAgICAgcG9zaXRpb246IHsgeDogeCwgeTogeSB9LFxuICAgICAgICAgICAgdmVydGljZXM6IFZlcnRpY2VzLmZyb21QYXRoKCdMIDAgMCBMICcgKyB3aWR0aCArICcgMCBMICcgKyB3aWR0aCArICcgJyArIGhlaWdodCArICcgTCAwICcgKyBoZWlnaHQpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhbWZlcikge1xuICAgICAgICAgICAgdmFyIGNoYW1mZXIgPSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgICAgICByZWN0YW5nbGUudmVydGljZXMgPSBWZXJ0aWNlcy5jaGFtZmVyKHJlY3RhbmdsZS52ZXJ0aWNlcywgY2hhbWZlci5yYWRpdXMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbWZlci5xdWFsaXR5LCBjaGFtZmVyLnF1YWxpdHlNaW4sIGNoYW1mZXIucXVhbGl0eU1heCk7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQoe30sIHJlY3RhbmdsZSwgb3B0aW9ucykpO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSB0cmFwZXpvaWQgaHVsbC4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCB0cmFwZXpvaWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzbG9wZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtib2R5fSBBIG5ldyB0cmFwZXpvaWQgYm9keVxuICAgICAqL1xuICAgIEJvZGllcy50cmFwZXpvaWQgPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBzbG9wZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBzbG9wZSAqPSAwLjU7XG4gICAgICAgIHZhciByb29mID0gKDEgLSAoc2xvcGUgKiAyKSkgKiB3aWR0aDtcbiAgICAgICAgXG4gICAgICAgIHZhciB4MSA9IHdpZHRoICogc2xvcGUsXG4gICAgICAgICAgICB4MiA9IHgxICsgcm9vZixcbiAgICAgICAgICAgIHgzID0geDIgKyB4MSxcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aDtcblxuICAgICAgICBpZiAoc2xvcGUgPCAwLjUpIHtcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aCA9ICdMIDAgMCBMICcgKyB4MSArICcgJyArICgtaGVpZ2h0KSArICcgTCAnICsgeDIgKyAnICcgKyAoLWhlaWdodCkgKyAnIEwgJyArIHgzICsgJyAwJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aCA9ICdMIDAgMCBMICcgKyB4MiArICcgJyArICgtaGVpZ2h0KSArICcgTCAnICsgeDMgKyAnIDAnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYXBlem9pZCA9IHsgXG4gICAgICAgICAgICBsYWJlbDogJ1RyYXBlem9pZCBCb2R5JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IHgsIHk6IHkgfSxcbiAgICAgICAgICAgIHZlcnRpY2VzOiBWZXJ0aWNlcy5mcm9tUGF0aCh2ZXJ0aWNlc1BhdGgpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhbWZlcikge1xuICAgICAgICAgICAgdmFyIGNoYW1mZXIgPSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgICAgICB0cmFwZXpvaWQudmVydGljZXMgPSBWZXJ0aWNlcy5jaGFtZmVyKHRyYXBlem9pZC52ZXJ0aWNlcywgY2hhbWZlci5yYWRpdXMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbWZlci5xdWFsaXR5LCBjaGFtZmVyLnF1YWxpdHlNaW4sIGNoYW1mZXIucXVhbGl0eU1heCk7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQoe30sIHRyYXBlem9pZCwgb3B0aW9ucykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJpZ2lkIGJvZHkgbW9kZWwgd2l0aCBhIGNpcmNsZSBodWxsLiBcbiAgICAgKiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBvZiB0aGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNpcmNsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4U2lkZXNdXG4gICAgICogQHJldHVybiB7Ym9keX0gQSBuZXcgY2lyY2xlIGJvZHlcbiAgICAgKi9cbiAgICBCb2RpZXMuY2lyY2xlID0gZnVuY3Rpb24oeCwgeSwgcmFkaXVzLCBvcHRpb25zLCBtYXhTaWRlcykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgY2lyY2xlID0ge1xuICAgICAgICAgICAgbGFiZWw6ICdDaXJjbGUgQm9keScsXG4gICAgICAgICAgICBjaXJjbGVSYWRpdXM6IHJhZGl1c1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gYXBwcm94aW1hdGUgY2lyY2xlcyB3aXRoIHBvbHlnb25zIHVudGlsIHRydWUgY2lyY2xlcyBpbXBsZW1lbnRlZCBpbiBTQVRcbiAgICAgICAgbWF4U2lkZXMgPSBtYXhTaWRlcyB8fCAyNTtcbiAgICAgICAgdmFyIHNpZGVzID0gTWF0aC5jZWlsKE1hdGgubWF4KDEwLCBNYXRoLm1pbihtYXhTaWRlcywgcmFkaXVzKSkpO1xuXG4gICAgICAgIC8vIG9wdGltaXNhdGlvbjogYWx3YXlzIHVzZSBldmVuIG51bWJlciBvZiBzaWRlcyAoaGFsZiB0aGUgbnVtYmVyIG9mIHVuaXF1ZSBheGVzKVxuICAgICAgICBpZiAoc2lkZXMgJSAyID09PSAxKVxuICAgICAgICAgICAgc2lkZXMgKz0gMTtcblxuICAgICAgICByZXR1cm4gQm9kaWVzLnBvbHlnb24oeCwgeSwgc2lkZXMsIHJhZGl1cywgQ29tbW9uLmV4dGVuZCh7fSwgY2lyY2xlLCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmlnaWQgYm9keSBtb2RlbCB3aXRoIGEgcmVndWxhciBwb2x5Z29uIGh1bGwgd2l0aCB0aGUgZ2l2ZW4gbnVtYmVyIG9mIHNpZGVzLiBcbiAgICAgKiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBvZiB0aGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIHBvbHlnb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtib2R5fSBBIG5ldyByZWd1bGFyIHBvbHlnb24gYm9keVxuICAgICAqL1xuICAgIEJvZGllcy5wb2x5Z29uID0gZnVuY3Rpb24oeCwgeSwgc2lkZXMsIHJhZGl1cywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoc2lkZXMgPCAzKVxuICAgICAgICAgICAgcmV0dXJuIEJvZGllcy5jaXJjbGUoeCwgeSwgcmFkaXVzLCBvcHRpb25zKTtcblxuICAgICAgICB2YXIgdGhldGEgPSAyICogTWF0aC5QSSAvIHNpZGVzLFxuICAgICAgICAgICAgcGF0aCA9ICcnLFxuICAgICAgICAgICAgb2Zmc2V0ID0gdGhldGEgKiAwLjU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWRlczsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBvZmZzZXQgKyAoaSAqIHRoZXRhKSxcbiAgICAgICAgICAgICAgICB4eCA9IE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgICAgICB5eSA9IE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cztcblxuICAgICAgICAgICAgcGF0aCArPSAnTCAnICsgeHgudG9GaXhlZCgzKSArICcgJyArIHl5LnRvRml4ZWQoMykgKyAnICc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcG9seWdvbiA9IHsgXG4gICAgICAgICAgICBsYWJlbDogJ1BvbHlnb24gQm9keScsXG4gICAgICAgICAgICBwb3NpdGlvbjogeyB4OiB4LCB5OiB5IH0sXG4gICAgICAgICAgICB2ZXJ0aWNlczogVmVydGljZXMuZnJvbVBhdGgocGF0aClcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucy5jaGFtZmVyKSB7XG4gICAgICAgICAgICB2YXIgY2hhbWZlciA9IG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgICAgIHBvbHlnb24udmVydGljZXMgPSBWZXJ0aWNlcy5jaGFtZmVyKHBvbHlnb24udmVydGljZXMsIGNoYW1mZXIucmFkaXVzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW1mZXIucXVhbGl0eSwgY2hhbWZlci5xdWFsaXR5TWluLCBjaGFtZmVyLnF1YWxpdHlNYXgpO1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHt9LCBwb2x5Z29uLCBvcHRpb25zKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBib2R5IHVzaW5nIHRoZSBzdXBwbGllZCB2ZXJ0aWNlcyAob3IgYW4gYXJyYXkgY29udGFpbmluZyBtdWx0aXBsZSBzZXRzIG9mIHZlcnRpY2VzKS5cbiAgICAgKiBJZiB0aGUgdmVydGljZXMgYXJlIGNvbnZleCwgdGhleSB3aWxsIHBhc3MgdGhyb3VnaCBhcyBzdXBwbGllZC5cbiAgICAgKiBPdGhlcndpc2UgaWYgdGhlIHZlcnRpY2VzIGFyZSBjb25jYXZlLCB0aGV5IHdpbGwgYmUgZGVjb21wb3NlZCBpZiBbcG9seS1kZWNvbXAuanNdKGh0dHBzOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZS9wb2x5LWRlY29tcC5qcykgaXMgYXZhaWxhYmxlLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIHByb2Nlc3MgaXMgbm90IGd1YXJhbnRlZWQgdG8gc3VwcG9ydCBjb21wbGV4IHNldHMgb2YgdmVydGljZXMgKGUuZy4gdGhvc2Ugd2l0aCBob2xlcyBtYXkgZmFpbCkuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgZGVjb21wb3NpdGlvbiB3aWxsIGRpc2NhcmQgY29sbGluZWFyIGVkZ2VzICh0byBpbXByb3ZlIHBlcmZvcm1hbmNlKS5cbiAgICAgKiBJdCBjYW4gYWxzbyBvcHRpb25hbGx5IGRpc2NhcmQgYW55IHBhcnRzIHRoYXQgaGF2ZSBhbiBhcmVhIGxlc3MgdGhhbiBgbWluaW11bUFyZWFgLlxuICAgICAqIElmIHRoZSB2ZXJ0aWNlcyBjYW4gbm90IGJlIGRlY29tcG9zZWQsIHRoZSByZXN1bHQgd2lsbCBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIGNvbnZleCBodWxsLlxuICAgICAqIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IGBNYXR0ZXIuQm9keWAgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBmcm9tVmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIFtbdmVjdG9yXV0gdmVydGV4U2V0c1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtmbGFnSW50ZXJuYWw9ZmFsc2VdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZW1vdmVDb2xsaW5lYXI9MC4wMV1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbmltdW1BcmVhPTEwXVxuICAgICAqIEByZXR1cm4ge2JvZHl9XG4gICAgICovXG4gICAgQm9kaWVzLmZyb21WZXJ0aWNlcyA9IGZ1bmN0aW9uKHgsIHksIHZlcnRleFNldHMsIG9wdGlvbnMsIGZsYWdJbnRlcm5hbCwgcmVtb3ZlQ29sbGluZWFyLCBtaW5pbXVtQXJlYSkge1xuICAgICAgICBpZiAoIWRlY29tcCkge1xuICAgICAgICAgICAgZGVjb21wID0gQ29tbW9uLl9yZXF1aXJlR2xvYmFsKCdkZWNvbXAnLCAncG9seS1kZWNvbXAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBib2R5LFxuICAgICAgICAgICAgcGFydHMsXG4gICAgICAgICAgICBpc0NvbnZleCxcbiAgICAgICAgICAgIHZlcnRpY2VzLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBrLFxuICAgICAgICAgICAgdixcbiAgICAgICAgICAgIHo7XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHBhcnRzID0gW107XG5cbiAgICAgICAgZmxhZ0ludGVybmFsID0gdHlwZW9mIGZsYWdJbnRlcm5hbCAhPT0gJ3VuZGVmaW5lZCcgPyBmbGFnSW50ZXJuYWwgOiBmYWxzZTtcbiAgICAgICAgcmVtb3ZlQ29sbGluZWFyID0gdHlwZW9mIHJlbW92ZUNvbGxpbmVhciAhPT0gJ3VuZGVmaW5lZCcgPyByZW1vdmVDb2xsaW5lYXIgOiAwLjAxO1xuICAgICAgICBtaW5pbXVtQXJlYSA9IHR5cGVvZiBtaW5pbXVtQXJlYSAhPT0gJ3VuZGVmaW5lZCcgPyBtaW5pbXVtQXJlYSA6IDEwO1xuXG4gICAgICAgIGlmICghZGVjb21wKSB7XG4gICAgICAgICAgICBDb21tb24ud2FybignQm9kaWVzLmZyb21WZXJ0aWNlczogcG9seS1kZWNvbXAuanMgcmVxdWlyZWQuIENvdWxkIG5vdCBkZWNvbXBvc2UgdmVydGljZXMuIEZhbGxiYWNrIHRvIGNvbnZleCBodWxsLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5zdXJlIHZlcnRleFNldHMgaXMgYW4gYXJyYXkgb2YgYXJyYXlzXG4gICAgICAgIGlmICghQ29tbW9uLmlzQXJyYXkodmVydGV4U2V0c1swXSkpIHtcbiAgICAgICAgICAgIHZlcnRleFNldHMgPSBbdmVydGV4U2V0c107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHYgPSAwOyB2IDwgdmVydGV4U2V0cy5sZW5ndGg7IHYgKz0gMSkge1xuICAgICAgICAgICAgdmVydGljZXMgPSB2ZXJ0ZXhTZXRzW3ZdO1xuICAgICAgICAgICAgaXNDb252ZXggPSBWZXJ0aWNlcy5pc0NvbnZleCh2ZXJ0aWNlcyk7XG5cbiAgICAgICAgICAgIGlmIChpc0NvbnZleCB8fCAhZGVjb21wKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQ29udmV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gVmVydGljZXMuY2xvY2t3aXNlU29ydCh2ZXJ0aWNlcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gY29udmV4IGh1bGwgd2hlbiBkZWNvbXBvc2l0aW9uIGlzIG5vdCBwb3NzaWJsZVxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA9IFZlcnRpY2VzLmh1bGwodmVydGljZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogeyB4OiB4LCB5OiB5IH0sXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXNlIGEgZGVjb21wb3NpdGlvblxuICAgICAgICAgICAgICAgIHZhciBjb25jYXZlID0gdmVydGljZXMubWFwKGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3ZlcnRleC54LCB2ZXJ0ZXgueV07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyB2ZXJ0aWNlcyBhcmUgY29uY2F2ZSBhbmQgc2ltcGxlLCB3ZSBjYW4gZGVjb21wb3NlIGludG8gcGFydHNcbiAgICAgICAgICAgICAgICBkZWNvbXAubWFrZUNDVyhjb25jYXZlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlQ29sbGluZWFyICE9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgZGVjb21wLnJlbW92ZUNvbGxpbmVhclBvaW50cyhjb25jYXZlLCByZW1vdmVDb2xsaW5lYXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBxdWljayBkZWNvbXBvc2l0aW9uIGFsZ29yaXRobSAoQmF5YXppdClcbiAgICAgICAgICAgICAgICB2YXIgZGVjb21wb3NlZCA9IGRlY29tcC5xdWlja0RlY29tcChjb25jYXZlKTtcblxuICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIGRlY29tcG9zZWQgY2h1bmtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVjb21wb3NlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2h1bmsgPSBkZWNvbXBvc2VkW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgdmVydGljZXMgaW50byB0aGUgY29ycmVjdCBzdHJ1Y3R1cmVcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNodW5rVmVydGljZXMgPSBjaHVuay5tYXAoZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogdmVydGljZXNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogdmVydGljZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNraXAgc21hbGwgY2h1bmtzXG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW5pbXVtQXJlYSA+IDAgJiYgVmVydGljZXMuYXJlYShjaHVua1ZlcnRpY2VzKSA8IG1pbmltdW1BcmVhKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgY29tcG91bmQgcGFydFxuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBWZXJ0aWNlcy5jZW50cmUoY2h1bmtWZXJ0aWNlcyksXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczogY2h1bmtWZXJ0aWNlc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgYm9keSBwYXJ0c1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhcnRzW2ldID0gQm9keS5jcmVhdGUoQ29tbW9uLmV4dGVuZChwYXJ0c1tpXSwgb3B0aW9ucykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmxhZyBpbnRlcm5hbCBlZGdlcyAoY29pbmNpZGVudCBwYXJ0IGVkZ2VzKVxuICAgICAgICBpZiAoZmxhZ0ludGVybmFsKSB7XG4gICAgICAgICAgICB2YXIgY29pbmNpZGVudF9tYXhfZGlzdCA9IDU7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0QSA9IHBhcnRzW2ldO1xuXG4gICAgICAgICAgICAgICAgZm9yIChqID0gaSArIDE7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydEIgPSBwYXJ0c1tqXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoQm91bmRzLm92ZXJsYXBzKHBhcnRBLmJvdW5kcywgcGFydEIuYm91bmRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdiA9IHBhcnRBLnZlcnRpY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBidiA9IHBhcnRCLnZlcnRpY2VzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRlIHZlcnRpY2VzIG9mIGJvdGggcGFydHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBwYXJ0QS52ZXJ0aWNlcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoeiA9IDA7IHogPCBwYXJ0Qi52ZXJ0aWNlcy5sZW5ndGg7IHorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIGRpc3RhbmNlcyBiZXR3ZWVuIHRoZSB2ZXJ0aWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGEgPSBWZWN0b3IubWFnbml0dWRlU3F1YXJlZChWZWN0b3Iuc3ViKHBhdlsoayArIDEpICUgcGF2Lmxlbmd0aF0sIHBidlt6XSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIgPSBWZWN0b3IubWFnbml0dWRlU3F1YXJlZChWZWN0b3Iuc3ViKHBhdltrXSwgcGJ2Wyh6ICsgMSkgJSBwYnYubGVuZ3RoXSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGJvdGggdmVydGljZXMgYXJlIHZlcnkgY2xvc2UsIGNvbnNpZGVyIHRoZSBlZGdlIGNvbmNpZGVudCAoaW50ZXJuYWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYSA8IGNvaW5jaWRlbnRfbWF4X2Rpc3QgJiYgZGIgPCBjb2luY2lkZW50X21heF9kaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXZba10uaXNJbnRlcm5hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYnZbel0uaXNJbnRlcm5hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgdGhlIHBhcmVudCBib2R5IHRvIGJlIHJldHVybmVkLCB0aGF0IGNvbnRhaW5zIGdlbmVyYXRlZCBjb21wb3VuZCBwYXJ0c1xuICAgICAgICAgICAgYm9keSA9IEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBwYXJ0czogcGFydHMuc2xpY2UoMCkgfSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB7IHg6IHgsIHk6IHkgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBib2R5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnRzWzBdO1xuICAgICAgICB9XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9ib2R5L0JvZHlcIjoxLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5fV0sMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbXBvc2l0ZXNgIG1vZHVsZSBjb250YWlucyBmYWN0b3J5IG1ldGhvZHMgZm9yIGNyZWF0aW5nIGNvbXBvc2l0ZSBib2RpZXNcbiogd2l0aCBjb21tb25seSB1c2VkIGNvbmZpZ3VyYXRpb25zIChzdWNoIGFzIHN0YWNrcyBhbmQgY2hhaW5zKS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIENvbXBvc2l0ZXNcbiovXG5cbnZhciBDb21wb3NpdGVzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9zaXRlcztcblxudmFyIENvbXBvc2l0ZSA9IF9kZXJlcV8oJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG52YXIgQ29uc3RyYWludCA9IF9kZXJlcV8oJy4uL2NvbnN0cmFpbnQvQ29uc3RyYWludCcpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgQm9keSA9IF9kZXJlcV8oJy4uL2JvZHkvQm9keScpO1xudmFyIEJvZGllcyA9IF9kZXJlcV8oJy4vQm9kaWVzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjb21wb3NpdGUgY29udGFpbmluZyBib2RpZXMgY3JlYXRlZCBpbiB0aGUgY2FsbGJhY2sgaW4gYSBncmlkIGFycmFuZ2VtZW50LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgYm9keSdzIGJvdW5kcyB0byBwcmV2ZW50IG92ZXJsYXBzLlxuICAgICAqIEBtZXRob2Qgc3RhY2tcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkdhcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dHYXBcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIGNvbnRhaW5pbmcgb2JqZWN0cyBjcmVhdGVkIGluIHRoZSBjYWxsYmFja1xuICAgICAqL1xuICAgIENvbXBvc2l0ZXMuc3RhY2sgPSBmdW5jdGlvbih4eCwgeXksIGNvbHVtbnMsIHJvd3MsIGNvbHVtbkdhcCwgcm93R2FwLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgc3RhY2sgPSBDb21wb3NpdGUuY3JlYXRlKHsgbGFiZWw6ICdTdGFjaycgfSksXG4gICAgICAgICAgICB4ID0geHgsXG4gICAgICAgICAgICB5ID0geXksXG4gICAgICAgICAgICBsYXN0Qm9keSxcbiAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHJvd3M7IHJvdysrKSB7XG4gICAgICAgICAgICB2YXIgbWF4SGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgY29sdW1uID0gMDsgY29sdW1uIDwgY29sdW1uczsgY29sdW1uKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGNhbGxiYWNrKHgsIHksIGNvbHVtbiwgcm93LCBsYXN0Qm9keSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBib2R5SGVpZ2h0ID0gYm9keS5ib3VuZHMubWF4LnkgLSBib2R5LmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlXaWR0aCA9IGJvZHkuYm91bmRzLm1heC54IC0gYm9keS5ib3VuZHMubWluLng7IFxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5SGVpZ2h0ID4gbWF4SGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gYm9keUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIEJvZHkudHJhbnNsYXRlKGJvZHksIHsgeDogYm9keVdpZHRoICogMC41LCB5OiBib2R5SGVpZ2h0ICogMC41IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHggPSBib2R5LmJvdW5kcy5tYXgueCArIGNvbHVtbkdhcDtcblxuICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQm9keShzdGFjaywgYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsYXN0Qm9keSA9IGJvZHk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ICs9IGNvbHVtbkdhcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHkgKz0gbWF4SGVpZ2h0ICsgcm93R2FwO1xuICAgICAgICAgICAgeCA9IHh4O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ2hhaW5zIGFsbCBib2RpZXMgaW4gdGhlIGdpdmVuIGNvbXBvc2l0ZSB0b2dldGhlciB1c2luZyBjb25zdHJhaW50cy5cbiAgICAgKiBAbWV0aG9kIGNoYWluXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4T2Zmc2V0QVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5T2Zmc2V0QVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4T2Zmc2V0QlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5T2Zmc2V0QlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgY29udGFpbmluZyBvYmplY3RzIGNoYWluZWQgdG9nZXRoZXIgd2l0aCBjb25zdHJhaW50c1xuICAgICAqL1xuICAgIENvbXBvc2l0ZXMuY2hhaW4gPSBmdW5jdGlvbihjb21wb3NpdGUsIHhPZmZzZXRBLCB5T2Zmc2V0QSwgeE9mZnNldEIsIHlPZmZzZXRCLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSBjb21wb3NpdGUuYm9kaWVzO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5QSA9IGJvZGllc1tpIC0gMV0sXG4gICAgICAgICAgICAgICAgYm9keUIgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgYm9keUFIZWlnaHQgPSBib2R5QS5ib3VuZHMubWF4LnkgLSBib2R5QS5ib3VuZHMubWluLnksXG4gICAgICAgICAgICAgICAgYm9keUFXaWR0aCA9IGJvZHlBLmJvdW5kcy5tYXgueCAtIGJvZHlBLmJvdW5kcy5taW4ueCwgXG4gICAgICAgICAgICAgICAgYm9keUJIZWlnaHQgPSBib2R5Qi5ib3VuZHMubWF4LnkgLSBib2R5Qi5ib3VuZHMubWluLnksXG4gICAgICAgICAgICAgICAgYm9keUJXaWR0aCA9IGJvZHlCLmJvdW5kcy5tYXgueCAtIGJvZHlCLmJvdW5kcy5taW4ueDtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgYm9keUE6IGJvZHlBLFxuICAgICAgICAgICAgICAgIHBvaW50QTogeyB4OiBib2R5QVdpZHRoICogeE9mZnNldEEsIHk6IGJvZHlBSGVpZ2h0ICogeU9mZnNldEEgfSxcbiAgICAgICAgICAgICAgICBib2R5QjogYm9keUIsXG4gICAgICAgICAgICAgICAgcG9pbnRCOiB7IHg6IGJvZHlCV2lkdGggKiB4T2Zmc2V0QiwgeTogYm9keUJIZWlnaHQgKiB5T2Zmc2V0QiB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICBcbiAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgQ29uc3RyYWludC5jcmVhdGUoY29uc3RyYWludCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9zaXRlLmxhYmVsICs9ICcgQ2hhaW4nO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgYm9kaWVzIGluIHRoZSBjb21wb3NpdGUgd2l0aCBjb25zdHJhaW50cyBpbiBhIGdyaWQgcGF0dGVybiwgd2l0aCBvcHRpb25hbCBjcm9zcyBicmFjZXMuXG4gICAgICogQG1ldGhvZCBtZXNoXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd3NcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNyb3NzQnJhY2VcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIGNvbXBvc2l0ZSBjb250YWluaW5nIG9iamVjdHMgbWVzaGVkIHRvZ2V0aGVyIHdpdGggY29uc3RyYWludHNcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLm1lc2ggPSBmdW5jdGlvbihjb21wb3NpdGUsIGNvbHVtbnMsIHJvd3MsIGNyb3NzQnJhY2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGJvZGllcyA9IGNvbXBvc2l0ZS5ib2RpZXMsXG4gICAgICAgICAgICByb3csXG4gICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICBib2R5QSxcbiAgICAgICAgICAgIGJvZHlCLFxuICAgICAgICAgICAgYm9keUM7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHJvdyA9IDA7IHJvdyA8IHJvd3M7IHJvdysrKSB7XG4gICAgICAgICAgICBmb3IgKGNvbCA9IDE7IGNvbCA8IGNvbHVtbnM7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgYm9keUEgPSBib2RpZXNbKGNvbCAtIDEpICsgKHJvdyAqIGNvbHVtbnMpXTtcbiAgICAgICAgICAgICAgICBib2R5QiA9IGJvZGllc1tjb2wgKyAocm93ICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgQ29uc3RyYWludC5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7IGJvZHlBOiBib2R5QSwgYm9keUI6IGJvZHlCIH0sIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyb3cgPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb2wgPSAwOyBjb2wgPCBjb2x1bW5zOyBjb2wrKykge1xuICAgICAgICAgICAgICAgICAgICBib2R5QSA9IGJvZGllc1tjb2wgKyAoKHJvdyAtIDEpICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgICAgICBib2R5QiA9IGJvZGllc1tjb2wgKyAocm93ICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBib2R5QTogYm9keUEsIGJvZHlCOiBib2R5QiB9LCBvcHRpb25zKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0JyYWNlICYmIGNvbCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlDID0gYm9kaWVzWyhjb2wgLSAxKSArICgocm93IC0gMSkgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBib2R5QTogYm9keUMsIGJvZHlCOiBib2R5QiB9LCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQnJhY2UgJiYgY29sIDwgY29sdW1ucyAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlDID0gYm9kaWVzWyhjb2wgKyAxKSArICgocm93IC0gMSkgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBib2R5QTogYm9keUMsIGJvZHlCOiBib2R5QiB9LCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29tcG9zaXRlLmxhYmVsICs9ICcgTWVzaCc7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNvbXBvc2l0ZSBjb250YWluaW5nIGJvZGllcyBjcmVhdGVkIGluIHRoZSBjYWxsYmFjayBpbiBhIHB5cmFtaWQgYXJyYW5nZW1lbnQuXG4gICAgICogVGhpcyBmdW5jdGlvbiB1c2VzIHRoZSBib2R5J3MgYm91bmRzIHRvIHByZXZlbnQgb3ZlcmxhcHMuXG4gICAgICogQG1ldGhvZCBweXJhbWlkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHh4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHl5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93c1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5HYXBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93R2FwXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBjb250YWluaW5nIG9iamVjdHMgY3JlYXRlZCBpbiB0aGUgY2FsbGJhY2tcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLnB5cmFtaWQgPSBmdW5jdGlvbih4eCwgeXksIGNvbHVtbnMsIHJvd3MsIGNvbHVtbkdhcCwgcm93R2FwLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gQ29tcG9zaXRlcy5zdGFjayh4eCwgeXksIGNvbHVtbnMsIHJvd3MsIGNvbHVtbkdhcCwgcm93R2FwLCBmdW5jdGlvbih4LCB5LCBjb2x1bW4sIHJvdywgbGFzdEJvZHksIGkpIHtcbiAgICAgICAgICAgIHZhciBhY3R1YWxSb3dzID0gTWF0aC5taW4ocm93cywgTWF0aC5jZWlsKGNvbHVtbnMgLyAyKSksXG4gICAgICAgICAgICAgICAgbGFzdEJvZHlXaWR0aCA9IGxhc3RCb2R5ID8gbGFzdEJvZHkuYm91bmRzLm1heC54IC0gbGFzdEJvZHkuYm91bmRzLm1pbi54IDogMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJvdyA+IGFjdHVhbFJvd3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyByZXZlcnNlIHJvdyBvcmRlclxuICAgICAgICAgICAgcm93ID0gYWN0dWFsUm93cyAtIHJvdztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcm93LFxuICAgICAgICAgICAgICAgIGVuZCA9IGNvbHVtbnMgLSAxIC0gcm93O1xuXG4gICAgICAgICAgICBpZiAoY29sdW1uIDwgc3RhcnQgfHwgY29sdW1uID4gZW5kKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gcmV0cm9hY3RpdmVseSBmaXggdGhlIGZpcnN0IGJvZHkncyBwb3NpdGlvbiwgc2luY2Ugd2lkdGggd2FzIHVua25vd25cbiAgICAgICAgICAgIGlmIChpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgQm9keS50cmFuc2xhdGUobGFzdEJvZHksIHsgeDogKGNvbHVtbiArIChjb2x1bW5zICUgMiA9PT0gMSA/IDEgOiAtMSkpICogbGFzdEJvZHlXaWR0aCwgeTogMCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHhPZmZzZXQgPSBsYXN0Qm9keSA/IGNvbHVtbiAqIGxhc3RCb2R5V2lkdGggOiAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soeHggKyB4T2Zmc2V0ICsgY29sdW1uICogY29sdW1uR2FwLCB5LCBjb2x1bW4sIHJvdywgbGFzdEJvZHksIGkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSB3aXRoIGEgTmV3dG9uJ3MgQ3JhZGxlIHNldHVwIG9mIGJvZGllcyBhbmQgY29uc3RyYWludHMuXG4gICAgICogQG1ldGhvZCBuZXd0b25zQ3JhZGxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHh4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHl5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIG5ld3RvbnNDcmFkbGUgYm9keVxuICAgICAqL1xuICAgIENvbXBvc2l0ZXMubmV3dG9uc0NyYWRsZSA9IGZ1bmN0aW9uKHh4LCB5eSwgbnVtYmVyLCBzaXplLCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIG5ld3RvbnNDcmFkbGUgPSBDb21wb3NpdGUuY3JlYXRlKHsgbGFiZWw6ICdOZXd0b25zIENyYWRsZScgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXI7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNlcGFyYXRpb24gPSAxLjksXG4gICAgICAgICAgICAgICAgY2lyY2xlID0gQm9kaWVzLmNpcmNsZSh4eCArIGkgKiAoc2l6ZSAqIHNlcGFyYXRpb24pLCB5eSArIGxlbmd0aCwgc2l6ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBpbmVydGlhOiBJbmZpbml0eSwgcmVzdGl0dXRpb246IDEsIGZyaWN0aW9uOiAwLCBmcmljdGlvbkFpcjogMC4wMDAxLCBzbG9wOiAxIH0pLFxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQgPSBDb25zdHJhaW50LmNyZWF0ZSh7IHBvaW50QTogeyB4OiB4eCArIGkgKiAoc2l6ZSAqIHNlcGFyYXRpb24pLCB5OiB5eSB9LCBib2R5QjogY2lyY2xlIH0pO1xuXG4gICAgICAgICAgICBDb21wb3NpdGUuYWRkQm9keShuZXd0b25zQ3JhZGxlLCBjaXJjbGUpO1xuICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQobmV3dG9uc0NyYWRsZSwgY29uc3RyYWludCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3dG9uc0NyYWRsZTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgd2l0aCBzaW1wbGUgY2FyIHNldHVwIG9mIGJvZGllcyBhbmQgY29uc3RyYWludHMuXG4gICAgICogQG1ldGhvZCBjYXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdoZWVsU2l6ZVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIGNhciBib2R5XG4gICAgICovXG4gICAgQ29tcG9zaXRlcy5jYXIgPSBmdW5jdGlvbih4eCwgeXksIHdpZHRoLCBoZWlnaHQsIHdoZWVsU2l6ZSkge1xuICAgICAgICB2YXIgZ3JvdXAgPSBCb2R5Lm5leHRHcm91cCh0cnVlKSxcbiAgICAgICAgICAgIHdoZWVsQmFzZSA9IDIwLFxuICAgICAgICAgICAgd2hlZWxBT2Zmc2V0ID0gLXdpZHRoICogMC41ICsgd2hlZWxCYXNlLFxuICAgICAgICAgICAgd2hlZWxCT2Zmc2V0ID0gd2lkdGggKiAwLjUgLSB3aGVlbEJhc2UsXG4gICAgICAgICAgICB3aGVlbFlPZmZzZXQgPSAwO1xuICAgIFxuICAgICAgICB2YXIgY2FyID0gQ29tcG9zaXRlLmNyZWF0ZSh7IGxhYmVsOiAnQ2FyJyB9KSxcbiAgICAgICAgICAgIGJvZHkgPSBCb2RpZXMucmVjdGFuZ2xlKHh4LCB5eSwgd2lkdGgsIGhlaWdodCwgeyBcbiAgICAgICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGFtZmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogaGVpZ2h0ICogMC41XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZW5zaXR5OiAwLjAwMDJcbiAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICB2YXIgd2hlZWxBID0gQm9kaWVzLmNpcmNsZSh4eCArIHdoZWVsQU9mZnNldCwgeXkgKyB3aGVlbFlPZmZzZXQsIHdoZWVsU2l6ZSwgeyBcbiAgICAgICAgICAgIGNvbGxpc2lvbkZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZyaWN0aW9uOiAwLjhcbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgd2hlZWxCID0gQm9kaWVzLmNpcmNsZSh4eCArIHdoZWVsQk9mZnNldCwgeXkgKyB3aGVlbFlPZmZzZXQsIHdoZWVsU2l6ZSwgeyBcbiAgICAgICAgICAgIGNvbGxpc2lvbkZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZyaWN0aW9uOiAwLjhcbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgYXhlbEEgPSBDb25zdHJhaW50LmNyZWF0ZSh7XG4gICAgICAgICAgICBib2R5QjogYm9keSxcbiAgICAgICAgICAgIHBvaW50QjogeyB4OiB3aGVlbEFPZmZzZXQsIHk6IHdoZWVsWU9mZnNldCB9LFxuICAgICAgICAgICAgYm9keUE6IHdoZWVsQSxcbiAgICAgICAgICAgIHN0aWZmbmVzczogMSxcbiAgICAgICAgICAgIGxlbmd0aDogMFxuICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgYXhlbEIgPSBDb25zdHJhaW50LmNyZWF0ZSh7XG4gICAgICAgICAgICBib2R5QjogYm9keSxcbiAgICAgICAgICAgIHBvaW50QjogeyB4OiB3aGVlbEJPZmZzZXQsIHk6IHdoZWVsWU9mZnNldCB9LFxuICAgICAgICAgICAgYm9keUE6IHdoZWVsQixcbiAgICAgICAgICAgIHN0aWZmbmVzczogMSxcbiAgICAgICAgICAgIGxlbmd0aDogMFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KGNhciwgYm9keSk7XG4gICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KGNhciwgd2hlZWxBKTtcbiAgICAgICAgQ29tcG9zaXRlLmFkZEJvZHkoY2FyLCB3aGVlbEIpO1xuICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjYXIsIGF4ZWxBKTtcbiAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY2FyLCBheGVsQik7XG5cbiAgICAgICAgcmV0dXJuIGNhcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNpbXBsZSBzb2Z0IGJvZHkgbGlrZSBvYmplY3QuXG4gICAgICogQG1ldGhvZCBzb2Z0Qm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4eFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd3NcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uR2FwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd0dhcFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY3Jvc3NCcmFjZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwYXJ0aWNsZVJhZGl1c1xuICAgICAqIEBwYXJhbSB7fSBwYXJ0aWNsZU9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge30gY29uc3RyYWludE9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBzb2Z0Qm9keVxuICAgICAqL1xuICAgIENvbXBvc2l0ZXMuc29mdEJvZHkgPSBmdW5jdGlvbih4eCwgeXksIGNvbHVtbnMsIHJvd3MsIGNvbHVtbkdhcCwgcm93R2FwLCBjcm9zc0JyYWNlLCBwYXJ0aWNsZVJhZGl1cywgcGFydGljbGVPcHRpb25zLCBjb25zdHJhaW50T3B0aW9ucykge1xuICAgICAgICBwYXJ0aWNsZU9wdGlvbnMgPSBDb21tb24uZXh0ZW5kKHsgaW5lcnRpYTogSW5maW5pdHkgfSwgcGFydGljbGVPcHRpb25zKTtcbiAgICAgICAgY29uc3RyYWludE9wdGlvbnMgPSBDb21tb24uZXh0ZW5kKHsgc3RpZmZuZXNzOiAwLjIsIHJlbmRlcjogeyB0eXBlOiAnbGluZScsIGFuY2hvcnM6IGZhbHNlIH0gfSwgY29uc3RyYWludE9wdGlvbnMpO1xuXG4gICAgICAgIHZhciBzb2Z0Qm9keSA9IENvbXBvc2l0ZXMuc3RhY2soeHgsIHl5LCBjb2x1bW5zLCByb3dzLCBjb2x1bW5HYXAsIHJvd0dhcCwgZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICAgICAgcmV0dXJuIEJvZGllcy5jaXJjbGUoeCwgeSwgcGFydGljbGVSYWRpdXMsIHBhcnRpY2xlT3B0aW9ucyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIENvbXBvc2l0ZXMubWVzaChzb2Z0Qm9keSwgY29sdW1ucywgcm93cywgY3Jvc3NCcmFjZSwgY29uc3RyYWludE9wdGlvbnMpO1xuXG4gICAgICAgIHNvZnRCb2R5LmxhYmVsID0gJ1NvZnQgQm9keSc7XG5cbiAgICAgICAgcmV0dXJuIHNvZnRCb2R5O1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4vQm9kaWVzXCI6MjN9XSwyNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuQXhlc2AgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgc2V0cyBvZiBheGVzLlxuKlxuKiBAY2xhc3MgQXhlc1xuKi9cblxudmFyIEF4ZXMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGVzO1xuXG52YXIgVmVjdG9yID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzZXQgb2YgYXhlcyBmcm9tIHRoZSBnaXZlbiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIGZyb21WZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7YXhlc30gQSBuZXcgYXhlcyBmcm9tIHRoZSBnaXZlbiB2ZXJ0aWNlc1xuICAgICAqL1xuICAgIEF4ZXMuZnJvbVZlcnRpY2VzID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgdmFyIGF4ZXMgPSB7fTtcblxuICAgICAgICAvLyBmaW5kIHRoZSB1bmlxdWUgYXhlcywgdXNpbmcgZWRnZSBub3JtYWwgZ3JhZGllbnRzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBqID0gKGkgKyAxKSAlIHZlcnRpY2VzLmxlbmd0aCwgXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZSh7IFxuICAgICAgICAgICAgICAgICAgICB4OiB2ZXJ0aWNlc1tqXS55IC0gdmVydGljZXNbaV0ueSwgXG4gICAgICAgICAgICAgICAgICAgIHk6IHZlcnRpY2VzW2ldLnggLSB2ZXJ0aWNlc1tqXS54XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZ3JhZGllbnQgPSAobm9ybWFsLnkgPT09IDApID8gSW5maW5pdHkgOiAobm9ybWFsLnggLyBub3JtYWwueSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxpbWl0IHByZWNpc2lvblxuICAgICAgICAgICAgZ3JhZGllbnQgPSBncmFkaWVudC50b0ZpeGVkKDMpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBheGVzW2dyYWRpZW50XSA9IG5vcm1hbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBDb21tb24udmFsdWVzKGF4ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGEgc2V0IG9mIGF4ZXMgYnkgdGhlIGdpdmVuIGFuZ2xlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHtheGVzfSBheGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICovXG4gICAgQXhlcy5yb3RhdGUgPSBmdW5jdGlvbihheGVzLCBhbmdsZSkge1xuICAgICAgICBpZiAoYW5nbGUgPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIFxuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF4aXMgPSBheGVzW2ldLFxuICAgICAgICAgICAgICAgIHh4O1xuICAgICAgICAgICAgeHggPSBheGlzLnggKiBjb3MgLSBheGlzLnkgKiBzaW47XG4gICAgICAgICAgICBheGlzLnkgPSBheGlzLnggKiBzaW4gKyBheGlzLnkgKiBjb3M7XG4gICAgICAgICAgICBheGlzLnggPSB4eDtcbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4fV0sMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkJvdW5kc2AgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveGVzIChBQUJCKS5cbipcbiogQGNsYXNzIEJvdW5kc1xuKi9cblxudmFyIEJvdW5kcyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJvdW5kcztcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBheGlzLWFsaWduZWQgYm91bmRpbmcgYm94IChBQUJCKSBmb3IgdGhlIGdpdmVuIHZlcnRpY2VzLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIHtib3VuZHN9IEEgbmV3IGJvdW5kcyBvYmplY3RcbiAgICAgKi9cbiAgICBCb3VuZHMuY3JlYXRlID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9IHsgXG4gICAgICAgICAgICBtaW46IHsgeDogMCwgeTogMCB9LCBcbiAgICAgICAgICAgIG1heDogeyB4OiAwLCB5OiAwIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodmVydGljZXMpXG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKGJvdW5kcywgdmVydGljZXMpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBib3VuZHMgdXNpbmcgdGhlIGdpdmVuIHZlcnRpY2VzIGFuZCBleHRlbmRzIHRoZSBib3VuZHMgZ2l2ZW4gYSB2ZWxvY2l0eS5cbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWxvY2l0eVxuICAgICAqL1xuICAgIEJvdW5kcy51cGRhdGUgPSBmdW5jdGlvbihib3VuZHMsIHZlcnRpY2VzLCB2ZWxvY2l0eSkge1xuICAgICAgICBib3VuZHMubWluLnggPSBJbmZpbml0eTtcbiAgICAgICAgYm91bmRzLm1heC54ID0gLUluZmluaXR5O1xuICAgICAgICBib3VuZHMubWluLnkgPSBJbmZpbml0eTtcbiAgICAgICAgYm91bmRzLm1heC55ID0gLUluZmluaXR5O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgICAgIGlmICh2ZXJ0ZXgueCA+IGJvdW5kcy5tYXgueCkgYm91bmRzLm1heC54ID0gdmVydGV4Lng7XG4gICAgICAgICAgICBpZiAodmVydGV4LnggPCBib3VuZHMubWluLngpIGJvdW5kcy5taW4ueCA9IHZlcnRleC54O1xuICAgICAgICAgICAgaWYgKHZlcnRleC55ID4gYm91bmRzLm1heC55KSBib3VuZHMubWF4LnkgPSB2ZXJ0ZXgueTtcbiAgICAgICAgICAgIGlmICh2ZXJ0ZXgueSA8IGJvdW5kcy5taW4ueSkgYm91bmRzLm1pbi55ID0gdmVydGV4Lnk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh2ZWxvY2l0eSkge1xuICAgICAgICAgICAgaWYgKHZlbG9jaXR5LnggPiAwKSB7XG4gICAgICAgICAgICAgICAgYm91bmRzLm1heC54ICs9IHZlbG9jaXR5Lng7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvdW5kcy5taW4ueCArPSB2ZWxvY2l0eS54O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodmVsb2NpdHkueSA+IDApIHtcbiAgICAgICAgICAgICAgICBib3VuZHMubWF4LnkgKz0gdmVsb2NpdHkueTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm91bmRzLm1pbi55ICs9IHZlbG9jaXR5Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBib3VuZHMgY29udGFpbnMgdGhlIGdpdmVuIHBvaW50LlxuICAgICAqIEBtZXRob2QgY29udGFpbnNcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYm91bmRzIGNvbnRhaW4gdGhlIHBvaW50LCBvdGhlcndpc2UgZmFsc2VcbiAgICAgKi9cbiAgICBCb3VuZHMuY29udGFpbnMgPSBmdW5jdGlvbihib3VuZHMsIHBvaW50KSB7XG4gICAgICAgIHJldHVybiBwb2ludC54ID49IGJvdW5kcy5taW4ueCAmJiBwb2ludC54IDw9IGJvdW5kcy5tYXgueCBcbiAgICAgICAgICAgICAgICYmIHBvaW50LnkgPj0gYm91bmRzLm1pbi55ICYmIHBvaW50LnkgPD0gYm91bmRzLm1heC55O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHR3byBib3VuZHMgaW50ZXJzZWN0LlxuICAgICAqIEBtZXRob2Qgb3ZlcmxhcHNcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzQVxuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNCXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYm91bmRzIG92ZXJsYXAsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIEJvdW5kcy5vdmVybGFwcyA9IGZ1bmN0aW9uKGJvdW5kc0EsIGJvdW5kc0IpIHtcbiAgICAgICAgcmV0dXJuIChib3VuZHNBLm1pbi54IDw9IGJvdW5kc0IubWF4LnggJiYgYm91bmRzQS5tYXgueCA+PSBib3VuZHNCLm1pbi54XG4gICAgICAgICAgICAgICAgJiYgYm91bmRzQS5tYXgueSA+PSBib3VuZHNCLm1pbi55ICYmIGJvdW5kc0EubWluLnkgPD0gYm91bmRzQi5tYXgueSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgdGhlIGJvdW5kcyBieSB0aGUgZ2l2ZW4gdmVjdG9yLlxuICAgICAqIEBtZXRob2QgdHJhbnNsYXRlXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKi9cbiAgICBCb3VuZHMudHJhbnNsYXRlID0gZnVuY3Rpb24oYm91bmRzLCB2ZWN0b3IpIHtcbiAgICAgICAgYm91bmRzLm1pbi54ICs9IHZlY3Rvci54O1xuICAgICAgICBib3VuZHMubWF4LnggKz0gdmVjdG9yLng7XG4gICAgICAgIGJvdW5kcy5taW4ueSArPSB2ZWN0b3IueTtcbiAgICAgICAgYm91bmRzLm1heC55ICs9IHZlY3Rvci55O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTaGlmdHMgdGhlIGJvdW5kcyB0byB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICogQG1ldGhvZCBzaGlmdFxuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9zaXRpb25cbiAgICAgKi9cbiAgICBCb3VuZHMuc2hpZnQgPSBmdW5jdGlvbihib3VuZHMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBkZWx0YVggPSBib3VuZHMubWF4LnggLSBib3VuZHMubWluLngsXG4gICAgICAgICAgICBkZWx0YVkgPSBib3VuZHMubWF4LnkgLSBib3VuZHMubWluLnk7XG4gICAgICAgICAgICBcbiAgICAgICAgYm91bmRzLm1pbi54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgYm91bmRzLm1heC54ID0gcG9zaXRpb24ueCArIGRlbHRhWDtcbiAgICAgICAgYm91bmRzLm1pbi55ID0gcG9zaXRpb24ueTtcbiAgICAgICAgYm91bmRzLm1heC55ID0gcG9zaXRpb24ueSArIGRlbHRhWTtcbiAgICB9O1xuICAgIFxufSkoKTtcblxufSx7fV0sMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlN2Z2AgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNvbnZlcnRpbmcgU1ZHIGltYWdlcyBpbnRvIGFuIGFycmF5IG9mIHZlY3RvciBwb2ludHMuXG4qXG4qIFRvIHVzZSB0aGlzIG1vZHVsZSB5b3UgYWxzbyBuZWVkIHRoZSBTVkdQYXRoU2VnIHBvbHlmaWxsOiBodHRwczovL2dpdGh1Yi5jb20vcHJvZ2Vycy9wYXRoc2VnXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBTdmdcbiovXG5cbnZhciBTdmcgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdmc7XG5cbnZhciBCb3VuZHMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbiBTVkcgcGF0aCBpbnRvIGFuIGFycmF5IG9mIHZlY3RvciBwb2ludHMuXG4gICAgICogSWYgdGhlIGlucHV0IHBhdGggZm9ybXMgYSBjb25jYXZlIHNoYXBlLCB5b3UgbXVzdCBkZWNvbXBvc2UgdGhlIHJlc3VsdCBpbnRvIGNvbnZleCBwYXJ0cyBiZWZvcmUgdXNlLlxuICAgICAqIFNlZSBgQm9kaWVzLmZyb21WZXJ0aWNlc2Agd2hpY2ggcHJvdmlkZXMgc3VwcG9ydCBmb3IgdGhpcy5cbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgZ3VhcmFudGVlZCB0byBzdXBwb3J0IGNvbXBsZXggcGF0aHMgKHN1Y2ggYXMgdGhvc2Ugd2l0aCBob2xlcykuXG4gICAgICogWW91IG11c3QgbG9hZCB0aGUgYHBhdGhzZWcuanNgIHBvbHlmaWxsIG9uIG5ld2VyIGJyb3dzZXJzLlxuICAgICAqIEBtZXRob2QgcGF0aFRvVmVydGljZXNcbiAgICAgKiBAcGFyYW0ge1NWR1BhdGhFbGVtZW50fSBwYXRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVMZW5ndGg9MTVdXG4gICAgICogQHJldHVybiB7VmVjdG9yW119IHBvaW50c1xuICAgICAqL1xuICAgIFN2Zy5wYXRoVG9WZXJ0aWNlcyA9IGZ1bmN0aW9uKHBhdGgsIHNhbXBsZUxlbmd0aCkge1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgISgnU1ZHUGF0aFNlZycgaW4gd2luZG93KSkge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1N2Zy5wYXRoVG9WZXJ0aWNlczogU1ZHUGF0aFNlZyBub3QgZGVmaW5lZCwgYSBwb2x5ZmlsbCBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93b3V0L3N2Zy50b3BvbHkuanMvYmxvYi9tYXN0ZXIvc3ZnLnRvcG9seS5qc1xuICAgICAgICB2YXIgaSwgaWwsIHRvdGFsLCBwb2ludCwgc2VnbWVudCwgc2VnbWVudHMsIFxuICAgICAgICAgICAgc2VnbWVudHNRdWV1ZSwgbGFzdFNlZ21lbnQsIFxuICAgICAgICAgICAgbGFzdFBvaW50LCBzZWdtZW50SW5kZXgsIHBvaW50cyA9IFtdLFxuICAgICAgICAgICAgbHgsIGx5LCBsZW5ndGggPSAwLCB4ID0gMCwgeSA9IDA7XG5cbiAgICAgICAgc2FtcGxlTGVuZ3RoID0gc2FtcGxlTGVuZ3RoIHx8IDE1O1xuXG4gICAgICAgIHZhciBhZGRQb2ludCA9IGZ1bmN0aW9uKHB4LCBweSwgcGF0aFNlZ1R5cGUpIHtcbiAgICAgICAgICAgIC8vIGFsbCBvZGQtbnVtYmVyZWQgcGF0aCB0eXBlcyBhcmUgcmVsYXRpdmUgZXhjZXB0IFBBVEhTRUdfQ0xPU0VQQVRIICgxKVxuICAgICAgICAgICAgdmFyIGlzUmVsYXRpdmUgPSBwYXRoU2VnVHlwZSAlIDIgPT09IDEgJiYgcGF0aFNlZ1R5cGUgPiAxO1xuXG4gICAgICAgICAgICAvLyB3aGVuIHRoZSBsYXN0IHBvaW50IGRvZXNuJ3QgZXF1YWwgdGhlIGN1cnJlbnQgcG9pbnQgYWRkIHRoZSBjdXJyZW50IHBvaW50XG4gICAgICAgICAgICBpZiAoIWxhc3RQb2ludCB8fCBweCAhPSBsYXN0UG9pbnQueCB8fCBweSAhPSBsYXN0UG9pbnQueSkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0UG9pbnQgJiYgaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBseCA9IGxhc3RQb2ludC54O1xuICAgICAgICAgICAgICAgICAgICBseSA9IGxhc3RQb2ludC55O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGx4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbHkgPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogbHggKyBweCxcbiAgICAgICAgICAgICAgICAgICAgeTogbHkgKyBweVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBzZXQgbGFzdCBwb2ludFxuICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlIHx8ICFsYXN0UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuXG4gICAgICAgICAgICAgICAgeCA9IGx4ICsgcHg7XG4gICAgICAgICAgICAgICAgeSA9IGx5ICsgcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFkZFNlZ21lbnRQb2ludCA9IGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICAgICAgICAgIHZhciBzZWdUeXBlID0gc2VnbWVudC5wYXRoU2VnVHlwZUFzTGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICAgIC8vIHNraXAgcGF0aCBlbmRzXG4gICAgICAgICAgICBpZiAoc2VnVHlwZSA9PT0gJ1onKSBcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIC8vIG1hcCBzZWdtZW50IHRvIHggYW5kIHlcbiAgICAgICAgICAgIHN3aXRjaCAoc2VnVHlwZSkge1xuXG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgeCA9IHNlZ21lbnQueDtcbiAgICAgICAgICAgICAgICB5ID0gc2VnbWVudC55O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgICAgICAgeCA9IHNlZ21lbnQueDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1YnOlxuICAgICAgICAgICAgICAgIHkgPSBzZWdtZW50Lnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZFBvaW50KHgsIHksIHNlZ21lbnQucGF0aFNlZ1R5cGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGVuc3VyZSBwYXRoIGlzIGFic29sdXRlXG4gICAgICAgIFN2Zy5fc3ZnUGF0aFRvQWJzb2x1dGUocGF0aCk7XG5cbiAgICAgICAgLy8gZ2V0IHRvdGFsIGxlbmd0aFxuICAgICAgICB0b3RhbCA9IHBhdGguZ2V0VG90YWxMZW5ndGgoKTtcblxuICAgICAgICAvLyBxdWV1ZSBzZWdtZW50c1xuICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGF0aC5wYXRoU2VnTGlzdC5udW1iZXJPZkl0ZW1zOyBpICs9IDEpXG4gICAgICAgICAgICBzZWdtZW50cy5wdXNoKHBhdGgucGF0aFNlZ0xpc3QuZ2V0SXRlbShpKSk7XG5cbiAgICAgICAgc2VnbWVudHNRdWV1ZSA9IHNlZ21lbnRzLmNvbmNhdCgpO1xuXG4gICAgICAgIC8vIHNhbXBsZSB0aHJvdWdoIHBhdGhcbiAgICAgICAgd2hpbGUgKGxlbmd0aCA8IHRvdGFsKSB7XG4gICAgICAgICAgICAvLyBnZXQgc2VnbWVudCBhdCBwb3NpdGlvblxuICAgICAgICAgICAgc2VnbWVudEluZGV4ID0gcGF0aC5nZXRQYXRoU2VnQXRMZW5ndGgobGVuZ3RoKTtcbiAgICAgICAgICAgIHNlZ21lbnQgPSBzZWdtZW50c1tzZWdtZW50SW5kZXhdO1xuXG4gICAgICAgICAgICAvLyBuZXcgc2VnbWVudFxuICAgICAgICAgICAgaWYgKHNlZ21lbnQgIT0gbGFzdFNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoc2VnbWVudHNRdWV1ZS5sZW5ndGggJiYgc2VnbWVudHNRdWV1ZVswXSAhPSBzZWdtZW50KVxuICAgICAgICAgICAgICAgICAgICBhZGRTZWdtZW50UG9pbnQoc2VnbWVudHNRdWV1ZS5zaGlmdCgpKTtcblxuICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50ID0gc2VnbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWRkIHBvaW50cyBpbiBiZXR3ZWVuIHdoZW4gY3VydmluZ1xuICAgICAgICAgICAgLy8gVE9ETzogYWRhcHRpdmUgc2FtcGxpbmdcbiAgICAgICAgICAgIHN3aXRjaCAoc2VnbWVudC5wYXRoU2VnVHlwZUFzTGV0dGVyLnRvVXBwZXJDYXNlKCkpIHtcblxuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICBjYXNlICdUJzpcbiAgICAgICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgICAgICBwb2ludCA9IHBhdGguZ2V0UG9pbnRBdExlbmd0aChsZW5ndGgpO1xuICAgICAgICAgICAgICAgIGFkZFBvaW50KHBvaW50LngsIHBvaW50LnksIDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGluY3JlbWVudCBieSBzYW1wbGUgdmFsdWVcbiAgICAgICAgICAgIGxlbmd0aCArPSBzYW1wbGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHNlZ21lbnRzIG5vdCBwYXNzZWQgYnkgc2FtcGxpbmdcbiAgICAgICAgZm9yIChpID0gMCwgaWwgPSBzZWdtZW50c1F1ZXVlLmxlbmd0aDsgaSA8IGlsOyArK2kpXG4gICAgICAgICAgICBhZGRTZWdtZW50UG9pbnQoc2VnbWVudHNRdWV1ZVtpXSk7XG5cbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9O1xuXG4gICAgU3ZnLl9zdmdQYXRoVG9BYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgLy8gaHR0cDovL3Bocm9nei5uZXQvY29udmVydC1zdmctcGF0aC10by1hbGwtYWJzb2x1dGUtY29tbWFuZHNcbiAgICAgICAgLy8gQ29weXJpZ2h0IChjKSBHYXZpbiBLaXN0bmVyXG4gICAgICAgIC8vIGh0dHA6Ly9waHJvZ3oubmV0L2pzL19SZXVzZUxpY2Vuc2UudHh0XG4gICAgICAgIC8vIE1vZGlmaWNhdGlvbnM6IHRpZHkgZm9ybWF0dGluZyBhbmQgbmFtaW5nXG4gICAgICAgIHZhciB4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCBzZWdzID0gcGF0aC5wYXRoU2VnTGlzdCxcbiAgICAgICAgICAgIHggPSAwLCB5ID0gMCwgbGVuID0gc2Vncy5udW1iZXJPZkl0ZW1zO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzLmdldEl0ZW0oaSksXG4gICAgICAgICAgICAgICAgc2VnVHlwZSA9IHNlZy5wYXRoU2VnVHlwZUFzTGV0dGVyO1xuXG4gICAgICAgICAgICBpZiAoL1tNTEhWQ1NRVEFdLy50ZXN0KHNlZ1R5cGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCd4JyBpbiBzZWcpIHggPSBzZWcueDtcbiAgICAgICAgICAgICAgICBpZiAoJ3knIGluIHNlZykgeSA9IHNlZy55O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoJ3gxJyBpbiBzZWcpIHgxID0geCArIHNlZy54MTtcbiAgICAgICAgICAgICAgICBpZiAoJ3gyJyBpbiBzZWcpIHgyID0geCArIHNlZy54MjtcbiAgICAgICAgICAgICAgICBpZiAoJ3kxJyBpbiBzZWcpIHkxID0geSArIHNlZy55MTtcbiAgICAgICAgICAgICAgICBpZiAoJ3kyJyBpbiBzZWcpIHkyID0geSArIHNlZy55MjtcbiAgICAgICAgICAgICAgICBpZiAoJ3gnIGluIHNlZykgeCArPSBzZWcueDtcbiAgICAgICAgICAgICAgICBpZiAoJ3knIGluIHNlZykgeSArPSBzZWcueTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoc2VnVHlwZSkge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnTW92ZXRvQWJzKHgsIHkpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbCc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzKHgsIHkpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnTGluZXRvSG9yaXpvbnRhbEFicyh4KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b1ZlcnRpY2FsQWJzKHkpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzKHgsIHksIHgxLCB5MSwgeDIsIHkyKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyh4LCB5LCB4MiwgeTIpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncSc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY0Ficyh4LCB5LCB4MSwgeTEpLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucmVwbGFjZUl0ZW0ocGF0aC5jcmVhdGVTVkdQYXRoU2VnQ3VydmV0b1F1YWRyYXRpY1Ntb290aEFicyh4LCB5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0FyY0Ficyh4LCB5LCBzZWcucjEsIHNlZy5yMiwgc2VnLmFuZ2xlLCBzZWcubGFyZ2VBcmNGbGFnLCBzZWcuc3dlZXBGbGFnKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgICAgICAgICB4ID0geDA7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB5MDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWdUeXBlID09ICdNJyB8fCBzZWdUeXBlID09ICdtJykge1xuICAgICAgICAgICAgICAgIHgwID0geDtcbiAgICAgICAgICAgICAgICB5MCA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xufSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjZ9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuVmVjdG9yYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyB2ZWN0b3JzLlxuKiBWZWN0b3JzIGFyZSB0aGUgYmFzaXMgb2YgYWxsIHRoZSBnZW9tZXRyeSByZWxhdGVkIG9wZXJhdGlvbnMgaW4gdGhlIGVuZ2luZS5cbiogQSBgTWF0dGVyLlZlY3RvcmAgb2JqZWN0IGlzIG9mIHRoZSBmb3JtIGB7IHg6IDAsIHk6IDAgfWAuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBWZWN0b3JcbiovXG5cbi8vIFRPRE86IGNvbnNpZGVyIHBhcmFtcyBmb3IgcmV1c2luZyB2ZWN0b3Igb2JqZWN0c1xuXG52YXIgVmVjdG9yID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gVmVjdG9yO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvclxuICAgICAqL1xuICAgIFZlY3Rvci5jcmVhdGUgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHJldHVybiB7IHg6IHggfHwgMCwgeTogeSB8fCAwIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgdmVjdG9yIHdpdGggYHhgIGFuZCBgeWAgY29waWVkIGZyb20gdGhlIGdpdmVuIGB2ZWN0b3JgLlxuICAgICAqIEBtZXRob2QgY2xvbmVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyBjbG9uZWQgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLmNsb25lID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3Rvci54LCB5OiB2ZWN0b3IueSB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYWduaXR1ZGUgKGxlbmd0aCkgb2YgYSB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBtYWduaXR1ZGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgbWFnbml0dWRlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IubWFnbml0dWRlID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHZlY3Rvci54ICogdmVjdG9yLngpICsgKHZlY3Rvci55ICogdmVjdG9yLnkpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFnbml0dWRlIChsZW5ndGgpIG9mIGEgdmVjdG9yICh0aGVyZWZvcmUgc2F2aW5nIGEgYHNxcnRgIG9wZXJhdGlvbikuXG4gICAgICogQG1ldGhvZCBtYWduaXR1ZGVTcXVhcmVkXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgbWFnbml0dWRlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IubWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gKHZlY3Rvci54ICogdmVjdG9yLngpICsgKHZlY3Rvci55ICogdmVjdG9yLnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIHRoZSB2ZWN0b3IgYWJvdXQgKDAsIDApIGJ5IHNwZWNpZmllZCBhbmdsZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gW291dHB1dF1cbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IFRoZSB2ZWN0b3Igcm90YXRlZCBhYm91dCAoMCwgMClcbiAgICAgKi9cbiAgICBWZWN0b3Iucm90YXRlID0gZnVuY3Rpb24odmVjdG9yLCBhbmdsZSwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICB2YXIgeCA9IHZlY3Rvci54ICogY29zIC0gdmVjdG9yLnkgKiBzaW47XG4gICAgICAgIG91dHB1dC55ID0gdmVjdG9yLnggKiBzaW4gKyB2ZWN0b3IueSAqIGNvcztcbiAgICAgICAgb3V0cHV0LnggPSB4O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIHRoZSB2ZWN0b3IgYWJvdXQgYSBzcGVjaWZpZWQgcG9pbnQgYnkgc3BlY2lmaWVkIGFuZ2xlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlQWJvdXRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3Igcm90YXRlZCBhYm91dCB0aGUgcG9pbnRcbiAgICAgKi9cbiAgICBWZWN0b3Iucm90YXRlQWJvdXQgPSBmdW5jdGlvbih2ZWN0b3IsIGFuZ2xlLCBwb2ludCwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICB2YXIgeCA9IHBvaW50LnggKyAoKHZlY3Rvci54IC0gcG9pbnQueCkgKiBjb3MgLSAodmVjdG9yLnkgLSBwb2ludC55KSAqIHNpbik7XG4gICAgICAgIG91dHB1dC55ID0gcG9pbnQueSArICgodmVjdG9yLnggLSBwb2ludC54KSAqIHNpbiArICh2ZWN0b3IueSAtIHBvaW50LnkpICogY29zKTtcbiAgICAgICAgb3V0cHV0LnggPSB4O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpc2VzIGEgdmVjdG9yIChzdWNoIHRoYXQgaXRzIG1hZ25pdHVkZSBpcyBgMWApLlxuICAgICAqIEBtZXRob2Qgbm9ybWFsaXNlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG5vcm1hbGlzZWRcbiAgICAgKi9cbiAgICBWZWN0b3Iubm9ybWFsaXNlID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHZhciBtYWduaXR1ZGUgPSBWZWN0b3IubWFnbml0dWRlKHZlY3Rvcik7XG4gICAgICAgIGlmIChtYWduaXR1ZGUgPT09IDApXG4gICAgICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3Rvci54IC8gbWFnbml0dWRlLCB5OiB2ZWN0b3IueSAvIG1hZ25pdHVkZSB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkb3QtcHJvZHVjdCBvZiB0d28gdmVjdG9ycy5cbiAgICAgKiBAbWV0aG9kIGRvdFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgdHdvIHZlY3RvcnNcbiAgICAgKi9cbiAgICBWZWN0b3IuZG90ID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gKHZlY3RvckEueCAqIHZlY3RvckIueCkgKyAodmVjdG9yQS55ICogdmVjdG9yQi55KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3Jvc3MtcHJvZHVjdCBvZiB0d28gdmVjdG9ycy5cbiAgICAgKiBAbWV0aG9kIGNyb3NzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHR3byB2ZWN0b3JzXG4gICAgICovXG4gICAgVmVjdG9yLmNyb3NzID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gKHZlY3RvckEueCAqIHZlY3RvckIueSkgLSAodmVjdG9yQS55ICogdmVjdG9yQi54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3Jvc3MtcHJvZHVjdCBvZiB0aHJlZSB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgY3Jvc3MzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JDXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgdGhyZWUgdmVjdG9yc1xuICAgICAqL1xuICAgIFZlY3Rvci5jcm9zczMgPSBmdW5jdGlvbih2ZWN0b3JBLCB2ZWN0b3JCLCB2ZWN0b3JDKSB7XG4gICAgICAgIHJldHVybiAodmVjdG9yQi54IC0gdmVjdG9yQS54KSAqICh2ZWN0b3JDLnkgLSB2ZWN0b3JBLnkpIC0gKHZlY3RvckIueSAtIHZlY3RvckEueSkgKiAodmVjdG9yQy54IC0gdmVjdG9yQS54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBhZGRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3Igb2YgdmVjdG9yQSBhbmQgdmVjdG9yQiBhZGRlZFxuICAgICAqL1xuICAgIFZlY3Rvci5hZGQgPSBmdW5jdGlvbih2ZWN0b3JBLCB2ZWN0b3JCLCBvdXRwdXQpIHtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICBvdXRwdXQueCA9IHZlY3RvckEueCArIHZlY3RvckIueDtcbiAgICAgICAgb3V0cHV0LnkgPSB2ZWN0b3JBLnkgKyB2ZWN0b3JCLnk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBzdWJcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3Igb2YgdmVjdG9yQSBhbmQgdmVjdG9yQiBzdWJ0cmFjdGVkXG4gICAgICovXG4gICAgVmVjdG9yLnN1YiA9IGZ1bmN0aW9uKHZlY3RvckEsIHZlY3RvckIsIG91dHB1dCkge1xuICAgICAgICBpZiAoIW91dHB1dCkgb3V0cHV0ID0ge307XG4gICAgICAgIG91dHB1dC54ID0gdmVjdG9yQS54IC0gdmVjdG9yQi54O1xuICAgICAgICBvdXRwdXQueSA9IHZlY3RvckEueSAtIHZlY3RvckIueTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBhIHZlY3RvciBhbmQgYSBzY2FsYXIuXG4gICAgICogQG1ldGhvZCBtdWx0XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciBtdWx0aXBsaWVkIGJ5IHNjYWxhclxuICAgICAqL1xuICAgIFZlY3Rvci5tdWx0ID0gZnVuY3Rpb24odmVjdG9yLCBzY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdmVjdG9yLnggKiBzY2FsYXIsIHk6IHZlY3Rvci55ICogc2NhbGFyIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZXMgYSB2ZWN0b3IgYW5kIGEgc2NhbGFyLlxuICAgICAqIEBtZXRob2QgZGl2XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciBkaXZpZGVkIGJ5IHNjYWxhclxuICAgICAqL1xuICAgIFZlY3Rvci5kaXYgPSBmdW5jdGlvbih2ZWN0b3IsIHNjYWxhcikge1xuICAgICAgICByZXR1cm4geyB4OiB2ZWN0b3IueCAvIHNjYWxhciwgeTogdmVjdG9yLnkgLyBzY2FsYXIgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGVycGVuZGljdWxhciB2ZWN0b3IuIFNldCBgbmVnYXRlYCB0byB0cnVlIGZvciB0aGUgcGVycGVuZGljdWxhciBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgICAqIEBtZXRob2QgcGVycFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtuZWdhdGU9ZmFsc2VdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgcGVycGVuZGljdWxhciB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IucGVycCA9IGZ1bmN0aW9uKHZlY3RvciwgbmVnYXRlKSB7XG4gICAgICAgIG5lZ2F0ZSA9IG5lZ2F0ZSA9PT0gdHJ1ZSA/IC0xIDogMTtcbiAgICAgICAgcmV0dXJuIHsgeDogbmVnYXRlICogLXZlY3Rvci55LCB5OiBuZWdhdGUgKiB2ZWN0b3IueCB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOZWdhdGVzIGJvdGggY29tcG9uZW50cyBvZiBhIHZlY3RvciBzdWNoIHRoYXQgaXQgcG9pbnRzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG4gICAgICogQG1ldGhvZCBuZWdcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgbmVnYXRlZCB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IubmVnID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB7IHg6IC12ZWN0b3IueCwgeTogLXZlY3Rvci55IH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhlIHZlY3RvciBgdmVjdG9yQiAtIHZlY3RvckFgIGFuZCB0aGUgeC1heGlzIGluIHJhZGlhbnMuXG4gICAgICogQG1ldGhvZCBhbmdsZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gICAgICovXG4gICAgVmVjdG9yLmFuZ2xlID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMih2ZWN0b3JCLnkgLSB2ZWN0b3JBLnksIHZlY3RvckIueCAtIHZlY3RvckEueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRlbXBvcmFyeSB2ZWN0b3IgcG9vbCAobm90IHRocmVhZC1zYWZlKS5cbiAgICAgKiBAcHJvcGVydHkgX3RlbXBcbiAgICAgKiBAdHlwZSB7dmVjdG9yW119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBWZWN0b3IuX3RlbXAgPSBbXG4gICAgICAgIFZlY3Rvci5jcmVhdGUoKSwgVmVjdG9yLmNyZWF0ZSgpLCBcbiAgICAgICAgVmVjdG9yLmNyZWF0ZSgpLCBWZWN0b3IuY3JlYXRlKCksIFxuICAgICAgICBWZWN0b3IuY3JlYXRlKCksIFZlY3Rvci5jcmVhdGUoKVxuICAgIF07XG5cbn0pKCk7XG59LHt9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuVmVydGljZXNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHNldHMgb2YgdmVydGljZXMuXG4qIEEgc2V0IG9mIHZlcnRpY2VzIGlzIGFuIGFycmF5IG9mIGBNYXR0ZXIuVmVjdG9yYCB3aXRoIGFkZGl0aW9uYWwgaW5kZXhpbmcgcHJvcGVydGllcyBpbnNlcnRlZCBieSBgVmVydGljZXMuY3JlYXRlYC5cbiogQSBgTWF0dGVyLkJvZHlgIG1haW50YWlucyBhIHNldCBvZiB2ZXJ0aWNlcyB0byByZXByZXNlbnQgdGhlIHNoYXBlIG9mIHRoZSBvYmplY3QgKGl0cyBjb252ZXggaHVsbCkuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBWZXJ0aWNlc1xuKi9cblxudmFyIFZlcnRpY2VzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gVmVydGljZXM7XG5cbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHNldCBvZiBgTWF0dGVyLkJvZHlgIGNvbXBhdGlibGUgdmVydGljZXMuXG4gICAgICogVGhlIGBwb2ludHNgIGFyZ3VtZW50IGFjY2VwdHMgYW4gYXJyYXkgb2YgYE1hdHRlci5WZWN0b3JgIHBvaW50cyBvcmllbnRhdGVkIGFyb3VuZCB0aGUgb3JpZ2luIGAoMCwgMClgLCBmb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqICAgICBbeyB4OiAwLCB5OiAwIH0sIHsgeDogMjUsIHk6IDUwIH0sIHsgeDogNTAsIHk6IDAgfV1cbiAgICAgKlxuICAgICAqIFRoZSBgVmVydGljZXMuY3JlYXRlYCBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheSBvZiB2ZXJ0aWNlcywgd2hpY2ggYXJlIHNpbWlsYXIgdG8gTWF0dGVyLlZlY3RvciBvYmplY3RzLFxuICAgICAqIGJ1dCB3aXRoIHNvbWUgYWRkaXRpb25hbCByZWZlcmVuY2VzIHJlcXVpcmVkIGZvciBlZmZpY2llbnQgY29sbGlzaW9uIGRldGVjdGlvbiByb3V0aW5lcy5cbiAgICAgKlxuICAgICAqIFZlcnRpY2VzIG11c3QgYmUgc3BlY2lmaWVkIGluIGNsb2Nrd2lzZSBvcmRlci5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGUgYGJvZHlgIGFyZ3VtZW50IGlzIG5vdCBvcHRpb25hbCwgYSBgTWF0dGVyLkJvZHlgIHJlZmVyZW5jZSBtdXN0IGJlIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge3ZlY3RvcltdfSBwb2ludHNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5jcmVhdGUgPSBmdW5jdGlvbihwb2ludHMsIGJvZHkpIHtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwb2ludCA9IHBvaW50c1tpXSxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXggPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHBvaW50LngsXG4gICAgICAgICAgICAgICAgICAgIHk6IHBvaW50LnksXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBib2R5LFxuICAgICAgICAgICAgICAgICAgICBpc0ludGVybmFsOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZlcnRpY2VzLnB1c2godmVydGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZXJ0aWNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgc3RyaW5nIGNvbnRhaW5pbmcgb3JkZXJlZCB4IHkgcGFpcnMgc2VwYXJhdGVkIGJ5IHNwYWNlcyAoYW5kIG9wdGlvbmFsbHkgY29tbWFzKSwgXG4gICAgICogaW50byBhIGBNYXR0ZXIuVmVydGljZXNgIG9iamVjdCBmb3IgdGhlIGdpdmVuIGBNYXR0ZXIuQm9keWAuXG4gICAgICogRm9yIHBhcnNpbmcgU1ZHIHBhdGhzLCBzZWUgYFN2Zy5wYXRoVG9WZXJ0aWNlc2AuXG4gICAgICogQG1ldGhvZCBmcm9tUGF0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHJldHVybiB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICovXG4gICAgVmVydGljZXMuZnJvbVBhdGggPSBmdW5jdGlvbihwYXRoLCBib2R5KSB7XG4gICAgICAgIHZhciBwYXRoUGF0dGVybiA9IC9MP1xccyooW1xcLVxcZFxcLmVdKylbXFxzLF0qKFtcXC1cXGRcXC5lXSspKi9pZyxcbiAgICAgICAgICAgIHBvaW50cyA9IFtdO1xuXG4gICAgICAgIHBhdGgucmVwbGFjZShwYXRoUGF0dGVybiwgZnVuY3Rpb24obWF0Y2gsIHgsIHkpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHsgeDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFZlcnRpY2VzLmNyZWF0ZShwb2ludHMsIGJvZHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjZW50cmUgKGNlbnRyb2lkKSBvZiB0aGUgc2V0IG9mIHZlcnRpY2VzLlxuICAgICAqIEBtZXRob2QgY2VudHJlXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IFRoZSBjZW50cmUgcG9pbnRcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5jZW50cmUgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICB2YXIgYXJlYSA9IFZlcnRpY2VzLmFyZWEodmVydGljZXMsIHRydWUpLFxuICAgICAgICAgICAgY2VudHJlID0geyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICBjcm9zcyxcbiAgICAgICAgICAgIHRlbXAsXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGogPSAoaSArIDEpICUgdmVydGljZXMubGVuZ3RoO1xuICAgICAgICAgICAgY3Jvc3MgPSBWZWN0b3IuY3Jvc3ModmVydGljZXNbaV0sIHZlcnRpY2VzW2pdKTtcbiAgICAgICAgICAgIHRlbXAgPSBWZWN0b3IubXVsdChWZWN0b3IuYWRkKHZlcnRpY2VzW2ldLCB2ZXJ0aWNlc1tqXSksIGNyb3NzKTtcbiAgICAgICAgICAgIGNlbnRyZSA9IFZlY3Rvci5hZGQoY2VudHJlLCB0ZW1wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBWZWN0b3IuZGl2KGNlbnRyZSwgNiAqIGFyZWEpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhdmVyYWdlIChtZWFuKSBvZiB0aGUgc2V0IG9mIHZlcnRpY2VzLlxuICAgICAqIEBtZXRob2QgbWVhblxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgYXZlcmFnZSBwb2ludFxuICAgICAqL1xuICAgIFZlcnRpY2VzLm1lYW4gPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICB2YXIgYXZlcmFnZSA9IHsgeDogMCwgeTogMCB9O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGF2ZXJhZ2UueCArPSB2ZXJ0aWNlc1tpXS54O1xuICAgICAgICAgICAgYXZlcmFnZS55ICs9IHZlcnRpY2VzW2ldLnk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gVmVjdG9yLmRpdihhdmVyYWdlLCB2ZXJ0aWNlcy5sZW5ndGgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhcmVhIG9mIHRoZSBzZXQgb2YgdmVydGljZXMuXG4gICAgICogQG1ldGhvZCBhcmVhXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IHNpZ25lZFxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFyZWFcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5hcmVhID0gZnVuY3Rpb24odmVydGljZXMsIHNpZ25lZCkge1xuICAgICAgICB2YXIgYXJlYSA9IDAsXG4gICAgICAgICAgICBqID0gdmVydGljZXMubGVuZ3RoIC0gMTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmVhICs9ICh2ZXJ0aWNlc1tqXS54IC0gdmVydGljZXNbaV0ueCkgKiAodmVydGljZXNbal0ueSArIHZlcnRpY2VzW2ldLnkpO1xuICAgICAgICAgICAgaiA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2lnbmVkKVxuICAgICAgICAgICAgcmV0dXJuIGFyZWEgLyAyO1xuXG4gICAgICAgIHJldHVybiBNYXRoLmFicyhhcmVhKSAvIDI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1vbWVudCBvZiBpbmVydGlhIChzZWNvbmQgbW9tZW50IG9mIGFyZWEpIG9mIHRoZSBzZXQgb2YgdmVydGljZXMgZ2l2ZW4gdGhlIHRvdGFsIG1hc3MuXG4gICAgICogQG1ldGhvZCBpbmVydGlhXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWFzc1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBvbHlnb24ncyBtb21lbnQgb2YgaW5lcnRpYVxuICAgICAqL1xuICAgIFZlcnRpY2VzLmluZXJ0aWEgPSBmdW5jdGlvbih2ZXJ0aWNlcywgbWFzcykge1xuICAgICAgICB2YXIgbnVtZXJhdG9yID0gMCxcbiAgICAgICAgICAgIGRlbm9taW5hdG9yID0gMCxcbiAgICAgICAgICAgIHYgPSB2ZXJ0aWNlcyxcbiAgICAgICAgICAgIGNyb3NzLFxuICAgICAgICAgICAgajtcblxuICAgICAgICAvLyBmaW5kIHRoZSBwb2x5Z29uJ3MgbW9tZW50IG9mIGluZXJ0aWEsIHVzaW5nIHNlY29uZCBtb21lbnQgb2YgYXJlYVxuICAgICAgICAvLyBmcm9tIGVxdWF0aW9ucyBhdCBodHRwOi8vd3d3LnBoeXNpY3Nmb3J1bXMuY29tL3Nob3d0aHJlYWQucGhwP3Q9MjUyOTNcbiAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB2Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBqID0gKG4gKyAxKSAlIHYubGVuZ3RoO1xuICAgICAgICAgICAgY3Jvc3MgPSBNYXRoLmFicyhWZWN0b3IuY3Jvc3ModltqXSwgdltuXSkpO1xuICAgICAgICAgICAgbnVtZXJhdG9yICs9IGNyb3NzICogKFZlY3Rvci5kb3QodltqXSwgdltqXSkgKyBWZWN0b3IuZG90KHZbal0sIHZbbl0pICsgVmVjdG9yLmRvdCh2W25dLCB2W25dKSk7XG4gICAgICAgICAgICBkZW5vbWluYXRvciArPSBjcm9zcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobWFzcyAvIDYpICogKG51bWVyYXRvciAvIGRlbm9taW5hdG9yKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyB0aGUgc2V0IG9mIHZlcnRpY2VzIGluLXBsYWNlLlxuICAgICAqIEBtZXRob2QgdHJhbnNsYXRlXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhclxuICAgICAqL1xuICAgIFZlcnRpY2VzLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHZlcnRpY2VzLCB2ZWN0b3IsIHNjYWxhcikge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKHNjYWxhcikge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVydGljZXNbaV0ueCArPSB2ZWN0b3IueCAqIHNjYWxhcjtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXS55ICs9IHZlY3Rvci55ICogc2NhbGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVydGljZXNbaV0ueCArPSB2ZWN0b3IueDtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXS55ICs9IHZlY3Rvci55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIHRoZSBzZXQgb2YgdmVydGljZXMgaW4tcGxhY2UuXG4gICAgICogQG1ldGhvZCByb3RhdGVcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqL1xuICAgIFZlcnRpY2VzLnJvdGF0ZSA9IGZ1bmN0aW9uKHZlcnRpY2VzLCBhbmdsZSwgcG9pbnQpIHtcbiAgICAgICAgaWYgKGFuZ2xlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgICBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZlcnRpY2UgPSB2ZXJ0aWNlc1tpXSxcbiAgICAgICAgICAgICAgICBkeCA9IHZlcnRpY2UueCAtIHBvaW50LngsXG4gICAgICAgICAgICAgICAgZHkgPSB2ZXJ0aWNlLnkgLSBwb2ludC55O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgdmVydGljZS54ID0gcG9pbnQueCArIChkeCAqIGNvcyAtIGR5ICogc2luKTtcbiAgICAgICAgICAgIHZlcnRpY2UueSA9IHBvaW50LnkgKyAoZHggKiBzaW4gKyBkeSAqIGNvcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBgcG9pbnRgIGlzIGluc2lkZSB0aGUgc2V0IG9mIGB2ZXJ0aWNlc2AuXG4gICAgICogQG1ldGhvZCBjb250YWluc1xuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVydGljZXMgY29udGFpbnMgcG9pbnQsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIFZlcnRpY2VzLmNvbnRhaW5zID0gZnVuY3Rpb24odmVydGljZXMsIHBvaW50KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlID0gdmVydGljZXNbaV0sXG4gICAgICAgICAgICAgICAgbmV4dFZlcnRpY2UgPSB2ZXJ0aWNlc1soaSArIDEpICUgdmVydGljZXMubGVuZ3RoXTtcbiAgICAgICAgICAgIGlmICgocG9pbnQueCAtIHZlcnRpY2UueCkgKiAobmV4dFZlcnRpY2UueSAtIHZlcnRpY2UueSkgKyAocG9pbnQueSAtIHZlcnRpY2UueSkgKiAodmVydGljZS54IC0gbmV4dFZlcnRpY2UueCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNjYWxlcyB0aGUgdmVydGljZXMgZnJvbSBhIHBvaW50IChkZWZhdWx0IGlzIGNlbnRyZSkgaW4tcGxhY2UuXG4gICAgICogQG1ldGhvZCBzY2FsZVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVlcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5zY2FsZSA9IGZ1bmN0aW9uKHZlcnRpY2VzLCBzY2FsZVgsIHNjYWxlWSwgcG9pbnQpIHtcbiAgICAgICAgaWYgKHNjYWxlWCA9PT0gMSAmJiBzY2FsZVkgPT09IDEpXG4gICAgICAgICAgICByZXR1cm4gdmVydGljZXM7XG5cbiAgICAgICAgcG9pbnQgPSBwb2ludCB8fCBWZXJ0aWNlcy5jZW50cmUodmVydGljZXMpO1xuXG4gICAgICAgIHZhciB2ZXJ0ZXgsXG4gICAgICAgICAgICBkZWx0YTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgICAgIGRlbHRhID0gVmVjdG9yLnN1Yih2ZXJ0ZXgsIHBvaW50KTtcbiAgICAgICAgICAgIHZlcnRpY2VzW2ldLnggPSBwb2ludC54ICsgZGVsdGEueCAqIHNjYWxlWDtcbiAgICAgICAgICAgIHZlcnRpY2VzW2ldLnkgPSBwb2ludC55ICsgZGVsdGEueSAqIHNjYWxlWTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZXJ0aWNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhbWZlcnMgYSBzZXQgb2YgdmVydGljZXMgYnkgZ2l2aW5nIHRoZW0gcm91bmRlZCBjb3JuZXJzLCByZXR1cm5zIGEgbmV3IHNldCBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBUaGUgcmFkaXVzIHBhcmFtZXRlciBpcyBhIHNpbmdsZSBudW1iZXIgb3IgYW4gYXJyYXkgdG8gc3BlY2lmeSB0aGUgcmFkaXVzIGZvciBlYWNoIHZlcnRleC5cbiAgICAgKiBAbWV0aG9kIGNoYW1mZXJcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IHJhZGl1c1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFsaXR5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHlNaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eU1heFxuICAgICAqL1xuICAgIFZlcnRpY2VzLmNoYW1mZXIgPSBmdW5jdGlvbih2ZXJ0aWNlcywgcmFkaXVzLCBxdWFsaXR5LCBxdWFsaXR5TWluLCBxdWFsaXR5TWF4KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmFkaXVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmFkaXVzID0gW3JhZGl1c107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYWRpdXMgPSByYWRpdXMgfHwgWzhdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcXVhbGl0eSBkZWZhdWx0cyB0byAtMSwgd2hpY2ggaXMgYXV0b1xuICAgICAgICBxdWFsaXR5ID0gKHR5cGVvZiBxdWFsaXR5ICE9PSAndW5kZWZpbmVkJykgPyBxdWFsaXR5IDogLTE7XG4gICAgICAgIHF1YWxpdHlNaW4gPSBxdWFsaXR5TWluIHx8IDI7XG4gICAgICAgIHF1YWxpdHlNYXggPSBxdWFsaXR5TWF4IHx8IDE0O1xuXG4gICAgICAgIHZhciBuZXdWZXJ0aWNlcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwcmV2VmVydGV4ID0gdmVydGljZXNbaSAtIDEgPj0gMCA/IGkgLSAxIDogdmVydGljZXMubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV0sXG4gICAgICAgICAgICAgICAgbmV4dFZlcnRleCA9IHZlcnRpY2VzWyhpICsgMSkgJSB2ZXJ0aWNlcy5sZW5ndGhdLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRSYWRpdXMgPSByYWRpdXNbaSA8IHJhZGl1cy5sZW5ndGggPyBpIDogcmFkaXVzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFJhZGl1cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG5ld1ZlcnRpY2VzLnB1c2godmVydGV4KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHByZXZOb3JtYWwgPSBWZWN0b3Iubm9ybWFsaXNlKHsgXG4gICAgICAgICAgICAgICAgeDogdmVydGV4LnkgLSBwcmV2VmVydGV4LnksIFxuICAgICAgICAgICAgICAgIHk6IHByZXZWZXJ0ZXgueCAtIHZlcnRleC54XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIG5leHROb3JtYWwgPSBWZWN0b3Iubm9ybWFsaXNlKHsgXG4gICAgICAgICAgICAgICAgeDogbmV4dFZlcnRleC55IC0gdmVydGV4LnksIFxuICAgICAgICAgICAgICAgIHk6IHZlcnRleC54IC0gbmV4dFZlcnRleC54XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGRpYWdvbmFsUmFkaXVzID0gTWF0aC5zcXJ0KDIgKiBNYXRoLnBvdyhjdXJyZW50UmFkaXVzLCAyKSksXG4gICAgICAgICAgICAgICAgcmFkaXVzVmVjdG9yID0gVmVjdG9yLm11bHQoQ29tbW9uLmNsb25lKHByZXZOb3JtYWwpLCBjdXJyZW50UmFkaXVzKSxcbiAgICAgICAgICAgICAgICBtaWROb3JtYWwgPSBWZWN0b3Iubm9ybWFsaXNlKFZlY3Rvci5tdWx0KFZlY3Rvci5hZGQocHJldk5vcm1hbCwgbmV4dE5vcm1hbCksIDAuNSkpLFxuICAgICAgICAgICAgICAgIHNjYWxlZFZlcnRleCA9IFZlY3Rvci5zdWIodmVydGV4LCBWZWN0b3IubXVsdChtaWROb3JtYWwsIGRpYWdvbmFsUmFkaXVzKSk7XG5cbiAgICAgICAgICAgIHZhciBwcmVjaXNpb24gPSBxdWFsaXR5O1xuXG4gICAgICAgICAgICBpZiAocXVhbGl0eSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IGRlY2lkZSBwcmVjaXNpb25cbiAgICAgICAgICAgICAgICBwcmVjaXNpb24gPSBNYXRoLnBvdyhjdXJyZW50UmFkaXVzLCAwLjMyKSAqIDEuNzU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByZWNpc2lvbiA9IENvbW1vbi5jbGFtcChwcmVjaXNpb24sIHF1YWxpdHlNaW4sIHF1YWxpdHlNYXgpO1xuXG4gICAgICAgICAgICAvLyB1c2UgYW4gZXZlbiB2YWx1ZSBmb3IgcHJlY2lzaW9uLCBtb3JlIGxpa2VseSB0byByZWR1Y2UgYXhlcyBieSB1c2luZyBzeW1tZXRyeVxuICAgICAgICAgICAgaWYgKHByZWNpc2lvbiAlIDIgPT09IDEpXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uICs9IDE7XG5cbiAgICAgICAgICAgIHZhciBhbHBoYSA9IE1hdGguYWNvcyhWZWN0b3IuZG90KHByZXZOb3JtYWwsIG5leHROb3JtYWwpKSxcbiAgICAgICAgICAgICAgICB0aGV0YSA9IGFscGhhIC8gcHJlY2lzaW9uO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHByZWNpc2lvbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgbmV3VmVydGljZXMucHVzaChWZWN0b3IuYWRkKFZlY3Rvci5yb3RhdGUocmFkaXVzVmVjdG9yLCB0aGV0YSAqIGopLCBzY2FsZWRWZXJ0ZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdWZXJ0aWNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU29ydHMgdGhlIGlucHV0IHZlcnRpY2VzIGludG8gY2xvY2t3aXNlIG9yZGVyIGluIHBsYWNlLlxuICAgICAqIEBtZXRob2QgY2xvY2t3aXNlU29ydFxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICovXG4gICAgVmVydGljZXMuY2xvY2t3aXNlU29ydCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIHZhciBjZW50cmUgPSBWZXJ0aWNlcy5tZWFuKHZlcnRpY2VzKTtcblxuICAgICAgICB2ZXJ0aWNlcy5zb3J0KGZ1bmN0aW9uKHZlcnRleEEsIHZlcnRleEIpIHtcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IuYW5nbGUoY2VudHJlLCB2ZXJ0ZXhBKSAtIFZlY3Rvci5hbmdsZShjZW50cmUsIHZlcnRleEIpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdmVydGljZXMgZm9ybSBhIGNvbnZleCBzaGFwZSAodmVydGljZXMgbXVzdCBiZSBpbiBjbG9ja3dpc2Ugb3JkZXIpLlxuICAgICAqIEBtZXRob2QgaXNDb252ZXhcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge2Jvb2x9IGB0cnVlYCBpZiB0aGUgYHZlcnRpY2VzYCBhcmUgY29udmV4LCBgZmFsc2VgIGlmIG5vdCAob3IgYG51bGxgIGlmIG5vdCBjb21wdXRhYmxlKS5cbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5pc0NvbnZleCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9nZW9tZXRyeS9wb2x5Z29ubWVzaC9cbiAgICAgICAgLy8gQ29weXJpZ2h0IChjKSBQYXVsIEJvdXJrZSAodXNlIHBlcm1pdHRlZClcblxuICAgICAgICB2YXIgZmxhZyA9IDAsXG4gICAgICAgICAgICBuID0gdmVydGljZXMubGVuZ3RoLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBrLFxuICAgICAgICAgICAgejtcblxuICAgICAgICBpZiAobiA8IDMpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBqID0gKGkgKyAxKSAlIG47XG4gICAgICAgICAgICBrID0gKGkgKyAyKSAlIG47XG4gICAgICAgICAgICB6ID0gKHZlcnRpY2VzW2pdLnggLSB2ZXJ0aWNlc1tpXS54KSAqICh2ZXJ0aWNlc1trXS55IC0gdmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICB6IC09ICh2ZXJ0aWNlc1tqXS55IC0gdmVydGljZXNbaV0ueSkgKiAodmVydGljZXNba10ueCAtIHZlcnRpY2VzW2pdLngpO1xuXG4gICAgICAgICAgICBpZiAoeiA8IDApIHtcbiAgICAgICAgICAgICAgICBmbGFnIHw9IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHogPiAwKSB7XG4gICAgICAgICAgICAgICAgZmxhZyB8PSAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmxhZyA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmbGFnICE9PSAwKXtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29udmV4IGh1bGwgb2YgdGhlIGlucHV0IHZlcnRpY2VzIGFzIGEgbmV3IGFycmF5IG9mIHBvaW50cy5cbiAgICAgKiBAbWV0aG9kIGh1bGxcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4gW3ZlcnRleF0gdmVydGljZXNcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5odWxsID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgLy8gaHR0cDovL2dlb21hbGdvcml0aG1zLmNvbS9hMTAtX2h1bGwtMS5odG1sXG5cbiAgICAgICAgdmFyIHVwcGVyID0gW10sXG4gICAgICAgICAgICBsb3dlciA9IFtdLCBcbiAgICAgICAgICAgIHZlcnRleCxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gc29ydCB2ZXJ0aWNlcyBvbiB4LWF4aXMgKHktYXhpcyBmb3IgdGllcylcbiAgICAgICAgdmVydGljZXMgPSB2ZXJ0aWNlcy5zbGljZSgwKTtcbiAgICAgICAgdmVydGljZXMuc29ydChmdW5jdGlvbih2ZXJ0ZXhBLCB2ZXJ0ZXhCKSB7XG4gICAgICAgICAgICB2YXIgZHggPSB2ZXJ0ZXhBLnggLSB2ZXJ0ZXhCLng7XG4gICAgICAgICAgICByZXR1cm4gZHggIT09IDAgPyBkeCA6IHZlcnRleEEueSAtIHZlcnRleEIueTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gYnVpbGQgbG93ZXIgaHVsbFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW2ldO1xuXG4gICAgICAgICAgICB3aGlsZSAobG93ZXIubGVuZ3RoID49IDIgXG4gICAgICAgICAgICAgICAgICAgJiYgVmVjdG9yLmNyb3NzMyhsb3dlcltsb3dlci5sZW5ndGggLSAyXSwgbG93ZXJbbG93ZXIubGVuZ3RoIC0gMV0sIHZlcnRleCkgPD0gMCkge1xuICAgICAgICAgICAgICAgIGxvd2VyLnBvcCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb3dlci5wdXNoKHZlcnRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBidWlsZCB1cHBlciBodWxsXG4gICAgICAgIGZvciAoaSA9IHZlcnRpY2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcblxuICAgICAgICAgICAgd2hpbGUgKHVwcGVyLmxlbmd0aCA+PSAyIFxuICAgICAgICAgICAgICAgICAgICYmIFZlY3Rvci5jcm9zczModXBwZXJbdXBwZXIubGVuZ3RoIC0gMl0sIHVwcGVyW3VwcGVyLmxlbmd0aCAtIDFdLCB2ZXJ0ZXgpIDw9IDApIHtcbiAgICAgICAgICAgICAgICB1cHBlci5wb3AoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdXBwZXIucHVzaCh2ZXJ0ZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uY2F0ZW5hdGlvbiBvZiB0aGUgbG93ZXIgYW5kIHVwcGVyIGh1bGxzIGdpdmVzIHRoZSBjb252ZXggaHVsbFxuICAgICAgICAvLyBvbWl0IGxhc3QgcG9pbnRzIGJlY2F1c2UgdGhleSBhcmUgcmVwZWF0ZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgb3RoZXIgbGlzdFxuICAgICAgICB1cHBlci5wb3AoKTtcbiAgICAgICAgbG93ZXIucG9wKCk7XG5cbiAgICAgICAgcmV0dXJuIHVwcGVyLmNvbmNhdChsb3dlcik7XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6Mjh9XSwzMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgTWF0dGVyID0gbW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKCcuLi9jb3JlL01hdHRlcicpO1xuXG5NYXR0ZXIuQm9keSA9IF9kZXJlcV8oJy4uL2JvZHkvQm9keScpO1xuTWF0dGVyLkNvbXBvc2l0ZSA9IF9kZXJlcV8oJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG5NYXR0ZXIuV29ybGQgPSBfZGVyZXFfKCcuLi9ib2R5L1dvcmxkJyk7XG5cbk1hdHRlci5Db250YWN0ID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL0NvbnRhY3QnKTtcbk1hdHRlci5EZXRlY3RvciA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9EZXRlY3RvcicpO1xuTWF0dGVyLkdyaWQgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vR3JpZCcpO1xuTWF0dGVyLlBhaXJzID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL1BhaXJzJyk7XG5NYXR0ZXIuUGFpciA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9QYWlyJyk7XG5NYXR0ZXIuUXVlcnkgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vUXVlcnknKTtcbk1hdHRlci5SZXNvbHZlciA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9SZXNvbHZlcicpO1xuTWF0dGVyLlNBVCA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9TQVQnKTtcblxuTWF0dGVyLkNvbnN0cmFpbnQgPSBfZGVyZXFfKCcuLi9jb25zdHJhaW50L0NvbnN0cmFpbnQnKTtcbk1hdHRlci5Nb3VzZUNvbnN0cmFpbnQgPSBfZGVyZXFfKCcuLi9jb25zdHJhaW50L01vdXNlQ29uc3RyYWludCcpO1xuXG5NYXR0ZXIuQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcbk1hdHRlci5FbmdpbmUgPSBfZGVyZXFfKCcuLi9jb3JlL0VuZ2luZScpO1xuTWF0dGVyLkV2ZW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvRXZlbnRzJyk7XG5NYXR0ZXIuTW91c2UgPSBfZGVyZXFfKCcuLi9jb3JlL01vdXNlJyk7XG5NYXR0ZXIuUnVubmVyID0gX2RlcmVxXygnLi4vY29yZS9SdW5uZXInKTtcbk1hdHRlci5TbGVlcGluZyA9IF9kZXJlcV8oJy4uL2NvcmUvU2xlZXBpbmcnKTtcbk1hdHRlci5QbHVnaW4gPSBfZGVyZXFfKCcuLi9jb3JlL1BsdWdpbicpO1xuXG5cbk1hdHRlci5Cb2RpZXMgPSBfZGVyZXFfKCcuLi9mYWN0b3J5L0JvZGllcycpO1xuTWF0dGVyLkNvbXBvc2l0ZXMgPSBfZGVyZXFfKCcuLi9mYWN0b3J5L0NvbXBvc2l0ZXMnKTtcblxuTWF0dGVyLkF4ZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9BeGVzJyk7XG5NYXR0ZXIuQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG5NYXR0ZXIuU3ZnID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvU3ZnJyk7XG5NYXR0ZXIuVmVjdG9yID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG5NYXR0ZXIuVmVydGljZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZXJ0aWNlcycpO1xuXG5NYXR0ZXIuUmVuZGVyID0gX2RlcmVxXygnLi4vcmVuZGVyL1JlbmRlcicpO1xuTWF0dGVyLlJlbmRlclBpeGkgPSBfZGVyZXFfKCcuLi9yZW5kZXIvUmVuZGVyUGl4aScpO1xuXG4vLyBhbGlhc2VzXG5cbk1hdHRlci5Xb3JsZC5hZGQgPSBNYXR0ZXIuQ29tcG9zaXRlLmFkZDtcbk1hdHRlci5Xb3JsZC5yZW1vdmUgPSBNYXR0ZXIuQ29tcG9zaXRlLnJlbW92ZTtcbk1hdHRlci5Xb3JsZC5hZGRDb21wb3NpdGUgPSBNYXR0ZXIuQ29tcG9zaXRlLmFkZENvbXBvc2l0ZTtcbk1hdHRlci5Xb3JsZC5hZGRCb2R5ID0gTWF0dGVyLkNvbXBvc2l0ZS5hZGRCb2R5O1xuTWF0dGVyLldvcmxkLmFkZENvbnN0cmFpbnQgPSBNYXR0ZXIuQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQ7XG5NYXR0ZXIuV29ybGQuY2xlYXIgPSBNYXR0ZXIuQ29tcG9zaXRlLmNsZWFyO1xuTWF0dGVyLkVuZ2luZS5ydW4gPSBNYXR0ZXIuUnVubmVyLnJ1bjtcblxufSx7XCIuLi9ib2R5L0JvZHlcIjoxLFwiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vYm9keS9Xb3JsZFwiOjMsXCIuLi9jb2xsaXNpb24vQ29udGFjdFwiOjQsXCIuLi9jb2xsaXNpb24vRGV0ZWN0b3JcIjo1LFwiLi4vY29sbGlzaW9uL0dyaWRcIjo2LFwiLi4vY29sbGlzaW9uL1BhaXJcIjo3LFwiLi4vY29sbGlzaW9uL1BhaXJzXCI6OCxcIi4uL2NvbGxpc2lvbi9RdWVyeVwiOjksXCIuLi9jb2xsaXNpb24vUmVzb2x2ZXJcIjoxMCxcIi4uL2NvbGxpc2lvbi9TQVRcIjoxMSxcIi4uL2NvbnN0cmFpbnQvQ29uc3RyYWludFwiOjEyLFwiLi4vY29uc3RyYWludC9Nb3VzZUNvbnN0cmFpbnRcIjoxMyxcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0VuZ2luZVwiOjE1LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2NvcmUvTWF0dGVyXCI6MTcsXCIuLi9jb3JlL01ldHJpY3NcIjoxOCxcIi4uL2NvcmUvTW91c2VcIjoxOSxcIi4uL2NvcmUvUGx1Z2luXCI6MjAsXCIuLi9jb3JlL1J1bm5lclwiOjIxLFwiLi4vY29yZS9TbGVlcGluZ1wiOjIyLFwiLi4vZmFjdG9yeS9Cb2RpZXNcIjoyMyxcIi4uL2ZhY3RvcnkvQ29tcG9zaXRlc1wiOjI0LFwiLi4vZ2VvbWV0cnkvQXhlc1wiOjI1LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9TdmdcIjoyNyxcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOSxcIi4uL3JlbmRlci9SZW5kZXJcIjozMSxcIi4uL3JlbmRlci9SZW5kZXJQaXhpXCI6MzJ9XSwzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuUmVuZGVyYCBtb2R1bGUgaXMgYSBzaW1wbGUgSFRNTDUgY2FudmFzIGJhc2VkIHJlbmRlcmVyIGZvciB2aXN1YWxpc2luZyBpbnN0YW5jZXMgb2YgYE1hdHRlci5FbmdpbmVgLlxuKiBJdCBpcyBpbnRlbmRlZCBmb3IgZGV2ZWxvcG1lbnQgYW5kIGRlYnVnZ2luZyBwdXJwb3NlcywgYnV0IG1heSBhbHNvIGJlIHN1aXRhYmxlIGZvciBzaW1wbGUgZ2FtZXMuXG4qIEl0IGluY2x1ZGVzIGEgbnVtYmVyIG9mIGRyYXdpbmcgb3B0aW9ucyBpbmNsdWRpbmcgd2lyZWZyYW1lLCB2ZWN0b3Igd2l0aCBzdXBwb3J0IGZvciBzcHJpdGVzIGFuZCB2aWV3cG9ydHMuXG4qXG4qIEBjbGFzcyBSZW5kZXJcbiovXG5cbnZhciBSZW5kZXIgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZW5kZXI7XG5cbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIENvbXBvc2l0ZSA9IF9kZXJlcV8oJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG52YXIgQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG52YXIgRXZlbnRzID0gX2RlcmVxXygnLi4vY29yZS9FdmVudHMnKTtcbnZhciBHcmlkID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL0dyaWQnKTtcbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcbnZhciBNb3VzZSA9IF9kZXJlcV8oJy4uL2NvcmUvTW91c2UnKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGZ1bmN0aW9uKGNhbGxiYWNrKXsgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKENvbW1vbi5ub3coKSk7IH0sIDEwMDAgLyA2MCk7IH07XG5cbiAgICAgICAgX2NhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByZW5kZXJlci4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogQWxsIHByb3BlcnRpZXMgaGF2ZSBkZWZhdWx0IHZhbHVlcywgYW5kIG1hbnkgYXJlIHByZS1jYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gb3RoZXIgcHJvcGVydGllcy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEByZXR1cm4ge3JlbmRlcn0gQSBuZXcgcmVuZGVyZXJcbiAgICAgKi9cbiAgICBSZW5kZXIuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBSZW5kZXIsXG4gICAgICAgICAgICBlbmdpbmU6IG51bGwsXG4gICAgICAgICAgICBlbGVtZW50OiBudWxsLFxuICAgICAgICAgICAgY2FudmFzOiBudWxsLFxuICAgICAgICAgICAgbW91c2U6IG51bGwsXG4gICAgICAgICAgICBmcmFtZVJlcXVlc3RJZDogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogODAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjAwLFxuICAgICAgICAgICAgICAgIHBpeGVsUmF0aW86IDEsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyMxODE4MWQnLFxuICAgICAgICAgICAgICAgIHdpcmVmcmFtZUJhY2tncm91bmQ6ICcjMGYwZjEzJyxcbiAgICAgICAgICAgICAgICBoYXNCb3VuZHM6ICEhb3B0aW9ucy5ib3VuZHMsXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3aXJlZnJhbWVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dTbGVlcGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93RGVidWc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dCcm9hZHBoYXNlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93Qm91bmRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93VmVsb2NpdHk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dDb2xsaXNpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93U2VwYXJhdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dBeGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93UG9zaXRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93QW5nbGVJbmRpY2F0b3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dJZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dTaGFkb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93VmVydGV4TnVtYmVyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0NvbnZleEh1bGxzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93SW50ZXJuYWxFZGdlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd01vdXNlUG9zaXRpb246IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlbmRlciA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChyZW5kZXIuY2FudmFzKSB7XG4gICAgICAgICAgICByZW5kZXIuY2FudmFzLndpZHRoID0gcmVuZGVyLm9wdGlvbnMud2lkdGggfHwgcmVuZGVyLmNhbnZhcy53aWR0aDtcbiAgICAgICAgICAgIHJlbmRlci5jYW52YXMuaGVpZ2h0ID0gcmVuZGVyLm9wdGlvbnMuaGVpZ2h0IHx8IHJlbmRlci5jYW52YXMuaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyLm1vdXNlID0gb3B0aW9ucy5tb3VzZTtcbiAgICAgICAgcmVuZGVyLmVuZ2luZSA9IG9wdGlvbnMuZW5naW5lO1xuICAgICAgICByZW5kZXIuY2FudmFzID0gcmVuZGVyLmNhbnZhcyB8fCBfY3JlYXRlQ2FudmFzKHJlbmRlci5vcHRpb25zLndpZHRoLCByZW5kZXIub3B0aW9ucy5oZWlnaHQpO1xuICAgICAgICByZW5kZXIuY29udGV4dCA9IHJlbmRlci5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgcmVuZGVyLnRleHR1cmVzID0ge307XG5cbiAgICAgICAgcmVuZGVyLmJvdW5kcyA9IHJlbmRlci5ib3VuZHMgfHwge1xuICAgICAgICAgICAgbWluOiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4OiB7XG4gICAgICAgICAgICAgICAgeDogcmVuZGVyLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgICAgICB5OiByZW5kZXIuY2FudmFzLmhlaWdodFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChyZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvICE9PSAxKSB7XG4gICAgICAgICAgICBSZW5kZXIuc2V0UGl4ZWxSYXRpbyhyZW5kZXIsIHJlbmRlci5vcHRpb25zLnBpeGVsUmF0aW8pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKENvbW1vbi5pc0VsZW1lbnQocmVuZGVyLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZW5kZXIuZWxlbWVudC5hcHBlbmRDaGlsZChyZW5kZXIuY2FudmFzKTtcbiAgICAgICAgfSBlbHNlIGlmICghcmVuZGVyLmNhbnZhcy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBDb21tb24ubG9nKCdSZW5kZXIuY3JlYXRlOiBvcHRpb25zLmVsZW1lbnQgd2FzIHVuZGVmaW5lZCwgcmVuZGVyLmNhbnZhcyB3YXMgY3JlYXRlZCBidXQgbm90IGFwcGVuZGVkJywgJ3dhcm4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRpbnVvdXNseSB1cGRhdGVzIHRoZSByZW5kZXIgY2FudmFzIG9uIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBldmVudC5cbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKi9cbiAgICBSZW5kZXIucnVuID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIChmdW5jdGlvbiBsb29wKHRpbWUpe1xuICAgICAgICAgICAgcmVuZGVyLmZyYW1lUmVxdWVzdElkID0gX3JlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgICAgIFJlbmRlci53b3JsZChyZW5kZXIpO1xuICAgICAgICB9KSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmRzIGV4ZWN1dGlvbiBvZiBgUmVuZGVyLnJ1bmAgb24gdGhlIGdpdmVuIGByZW5kZXJgLCBieSBjYW5jZWxpbmcgdGhlIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0IGV2ZW50IGxvb3AuXG4gICAgICogQG1ldGhvZCBzdG9wXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqL1xuICAgIFJlbmRlci5zdG9wID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZShyZW5kZXIuZnJhbWVSZXF1ZXN0SWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwaXhlbCByYXRpbyBvZiB0aGUgcmVuZGVyZXIgYW5kIHVwZGF0ZXMgdGhlIGNhbnZhcy5cbiAgICAgKiBUbyBhdXRvbWF0aWNhbGx5IGRldGVjdCB0aGUgY29ycmVjdCByYXRpbywgcGFzcyB0aGUgc3RyaW5nIGAnYXV0bydgIGZvciBgcGl4ZWxSYXRpb2AuXG4gICAgICogQG1ldGhvZCBzZXRQaXhlbFJhdGlvXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvXG4gICAgICovXG4gICAgUmVuZGVyLnNldFBpeGVsUmF0aW8gPSBmdW5jdGlvbihyZW5kZXIsIHBpeGVsUmF0aW8pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIGNhbnZhcyA9IHJlbmRlci5jYW52YXM7XG5cbiAgICAgICAgaWYgKHBpeGVsUmF0aW8gPT09ICdhdXRvJykge1xuICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IF9nZXRQaXhlbFJhdGlvKGNhbnZhcyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdkYXRhLXBpeGVsLXJhdGlvJywgcGl4ZWxSYXRpbyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IG9wdGlvbnMud2lkdGggKiBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgKiBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgcmVuZGVyLmNvbnRleHQuc2NhbGUocGl4ZWxSYXRpbywgcGl4ZWxSYXRpbyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBvc2l0aW9ucyBhbmQgc2l6ZXMgdGhlIHZpZXdwb3J0IGFyb3VuZCB0aGUgZ2l2ZW4gb2JqZWN0IGJvdW5kcy5cbiAgICAgKiBPYmplY3RzIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqIC0gYG9iamVjdC5ib3VuZHNgXG4gICAgICogLSBgb2JqZWN0LnBvc2l0aW9uYFxuICAgICAqIC0gYG9iamVjdC5taW5gIGFuZCBgb2JqZWN0Lm1heGBcbiAgICAgKiAtIGBvYmplY3QueGAgYW5kIGBvYmplY3QueWBcbiAgICAgKiBAbWV0aG9kIGxvb2tBdFxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge29iamVjdFtdfSBvYmplY3RzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtwYWRkaW5nXVxuICAgICAqIEBwYXJhbSB7Ym9vbH0gW2NlbnRlcj10cnVlXVxuICAgICAqL1xuICAgIFJlbmRlci5sb29rQXQgPSBmdW5jdGlvbihyZW5kZXIsIG9iamVjdHMsIHBhZGRpbmcsIGNlbnRlcikge1xuICAgICAgICBjZW50ZXIgPSB0eXBlb2YgY2VudGVyICE9PSAndW5kZWZpbmVkJyA/IGNlbnRlciA6IHRydWU7XG4gICAgICAgIG9iamVjdHMgPSBDb21tb24uaXNBcnJheShvYmplY3RzKSA/IG9iamVjdHMgOiBbb2JqZWN0c107XG4gICAgICAgIHBhZGRpbmcgPSBwYWRkaW5nIHx8IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZmluZCBib3VuZHMgb2YgYWxsIG9iamVjdHNcbiAgICAgICAgdmFyIGJvdW5kcyA9IHtcbiAgICAgICAgICAgIG1pbjogeyB4OiBJbmZpbml0eSwgeTogSW5maW5pdHkgfSxcbiAgICAgICAgICAgIG1heDogeyB4OiAtSW5maW5pdHksIHk6IC1JbmZpbml0eSB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gb2JqZWN0c1tpXSxcbiAgICAgICAgICAgICAgICBtaW4gPSBvYmplY3QuYm91bmRzID8gb2JqZWN0LmJvdW5kcy5taW4gOiAob2JqZWN0Lm1pbiB8fCBvYmplY3QucG9zaXRpb24gfHwgb2JqZWN0KSxcbiAgICAgICAgICAgICAgICBtYXggPSBvYmplY3QuYm91bmRzID8gb2JqZWN0LmJvdW5kcy5tYXggOiAob2JqZWN0Lm1heCB8fCBvYmplY3QucG9zaXRpb24gfHwgb2JqZWN0KTtcblxuICAgICAgICAgICAgaWYgKG1pbiAmJiBtYXgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluLnggPCBib3VuZHMubWluLngpXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5taW4ueCA9IG1pbi54O1xuXG4gICAgICAgICAgICAgICAgaWYgKG1heC54ID4gYm91bmRzLm1heC54KVxuICAgICAgICAgICAgICAgICAgICBib3VuZHMubWF4LnggPSBtYXgueDtcblxuICAgICAgICAgICAgICAgIGlmIChtaW4ueSA8IGJvdW5kcy5taW4ueSlcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzLm1pbi55ID0gbWluLnk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF4LnkgPiBib3VuZHMubWF4LnkpXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5tYXgueSA9IG1heC55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmluZCByYXRpb3NcbiAgICAgICAgdmFyIHdpZHRoID0gKGJvdW5kcy5tYXgueCAtIGJvdW5kcy5taW4ueCkgKyAyICogcGFkZGluZy54LFxuICAgICAgICAgICAgaGVpZ2h0ID0gKGJvdW5kcy5tYXgueSAtIGJvdW5kcy5taW4ueSkgKyAyICogcGFkZGluZy55LFxuICAgICAgICAgICAgdmlld0hlaWdodCA9IHJlbmRlci5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgdmlld1dpZHRoID0gcmVuZGVyLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIG91dGVyUmF0aW8gPSB2aWV3V2lkdGggLyB2aWV3SGVpZ2h0LFxuICAgICAgICAgICAgaW5uZXJSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0LFxuICAgICAgICAgICAgc2NhbGVYID0gMSxcbiAgICAgICAgICAgIHNjYWxlWSA9IDE7XG5cbiAgICAgICAgLy8gZmluZCBzY2FsZSBmYWN0b3JcbiAgICAgICAgaWYgKGlubmVyUmF0aW8gPiBvdXRlclJhdGlvKSB7XG4gICAgICAgICAgICBzY2FsZVkgPSBpbm5lclJhdGlvIC8gb3V0ZXJSYXRpbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjYWxlWCA9IG91dGVyUmF0aW8gLyBpbm5lclJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5hYmxlIGJvdW5kc1xuICAgICAgICByZW5kZXIub3B0aW9ucy5oYXNCb3VuZHMgPSB0cnVlO1xuXG4gICAgICAgIC8vIHBvc2l0aW9uIGFuZCBzaXplXG4gICAgICAgIHJlbmRlci5ib3VuZHMubWluLnggPSBib3VuZHMubWluLng7XG4gICAgICAgIHJlbmRlci5ib3VuZHMubWF4LnggPSBib3VuZHMubWluLnggKyB3aWR0aCAqIHNjYWxlWDtcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5taW4ueSA9IGJvdW5kcy5taW4ueTtcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5tYXgueSA9IGJvdW5kcy5taW4ueSArIGhlaWdodCAqIHNjYWxlWTtcblxuICAgICAgICAvLyBjZW50ZXJcbiAgICAgICAgaWYgKGNlbnRlcikge1xuICAgICAgICAgICAgcmVuZGVyLmJvdW5kcy5taW4ueCArPSB3aWR0aCAqIDAuNSAtICh3aWR0aCAqIHNjYWxlWCkgKiAwLjU7XG4gICAgICAgICAgICByZW5kZXIuYm91bmRzLm1heC54ICs9IHdpZHRoICogMC41IC0gKHdpZHRoICogc2NhbGVYKSAqIDAuNTtcbiAgICAgICAgICAgIHJlbmRlci5ib3VuZHMubWluLnkgKz0gaGVpZ2h0ICogMC41IC0gKGhlaWdodCAqIHNjYWxlWSkgKiAwLjU7XG4gICAgICAgICAgICByZW5kZXIuYm91bmRzLm1heC55ICs9IGhlaWdodCAqIDAuNSAtIChoZWlnaHQgKiBzY2FsZVkpICogMC41O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFkZGluZ1xuICAgICAgICByZW5kZXIuYm91bmRzLm1pbi54IC09IHBhZGRpbmcueDtcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5tYXgueCAtPSBwYWRkaW5nLng7XG4gICAgICAgIHJlbmRlci5ib3VuZHMubWluLnkgLT0gcGFkZGluZy55O1xuICAgICAgICByZW5kZXIuYm91bmRzLm1heC55IC09IHBhZGRpbmcueTtcblxuICAgICAgICAvLyB1cGRhdGUgbW91c2VcbiAgICAgICAgaWYgKHJlbmRlci5tb3VzZSkge1xuICAgICAgICAgICAgTW91c2Uuc2V0U2NhbGUocmVuZGVyLm1vdXNlLCB7XG4gICAgICAgICAgICAgICAgeDogKHJlbmRlci5ib3VuZHMubWF4LnggLSByZW5kZXIuYm91bmRzLm1pbi54KSAvIHJlbmRlci5jYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgeTogKHJlbmRlci5ib3VuZHMubWF4LnkgLSByZW5kZXIuYm91bmRzLm1pbi55KSAvIHJlbmRlci5jYW52YXMuaGVpZ2h0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgTW91c2Uuc2V0T2Zmc2V0KHJlbmRlci5tb3VzZSwgcmVuZGVyLmJvdW5kcy5taW4pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdmlld3BvcnQgdHJhbnNmb3JtcyBiYXNlZCBvbiBgcmVuZGVyLmJvdW5kc2AgdG8gYSByZW5kZXIgY29udGV4dC5cbiAgICAgKiBAbWV0aG9kIHN0YXJ0Vmlld1RyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKi9cbiAgICBSZW5kZXIuc3RhcnRWaWV3VHJhbnNmb3JtID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIHZhciBib3VuZHNXaWR0aCA9IHJlbmRlci5ib3VuZHMubWF4LnggLSByZW5kZXIuYm91bmRzLm1pbi54LFxuICAgICAgICAgICAgYm91bmRzSGVpZ2h0ID0gcmVuZGVyLmJvdW5kcy5tYXgueSAtIHJlbmRlci5ib3VuZHMubWluLnksXG4gICAgICAgICAgICBib3VuZHNTY2FsZVggPSBib3VuZHNXaWR0aCAvIHJlbmRlci5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgYm91bmRzU2NhbGVZID0gYm91bmRzSGVpZ2h0IC8gcmVuZGVyLm9wdGlvbnMuaGVpZ2h0O1xuXG4gICAgICAgIHJlbmRlci5jb250ZXh0LnNjYWxlKDEgLyBib3VuZHNTY2FsZVgsIDEgLyBib3VuZHNTY2FsZVkpO1xuICAgICAgICByZW5kZXIuY29udGV4dC50cmFuc2xhdGUoLXJlbmRlci5ib3VuZHMubWluLngsIC1yZW5kZXIuYm91bmRzLm1pbi55KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIGFsbCB0cmFuc2Zvcm1zIG9uIHRoZSByZW5kZXIgY29udGV4dC5cbiAgICAgKiBAbWV0aG9kIGVuZFZpZXdUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICovXG4gICAgUmVuZGVyLmVuZFZpZXdUcmFuc2Zvcm0gPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgcmVuZGVyLmNvbnRleHQuc2V0VHJhbnNmb3JtKHJlbmRlci5vcHRpb25zLnBpeGVsUmF0aW8sIDAsIDAsIHJlbmRlci5vcHRpb25zLnBpeGVsUmF0aW8sIDAsIDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSBnaXZlbiBgZW5naW5lYCdzIGBNYXR0ZXIuV29ybGRgIG9iamVjdC5cbiAgICAgKiBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgYWxsIHJlbmRlcmluZyBhbmQgc2hvdWxkIGJlIGNhbGxlZCBldmVyeSB0aW1lIHRoZSBzY2VuZSBjaGFuZ2VzLlxuICAgICAqIEBtZXRob2Qgd29ybGRcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICovXG4gICAgUmVuZGVyLndvcmxkID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIHZhciBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgd29ybGQgPSBlbmdpbmUud29ybGQsXG4gICAgICAgICAgICBjYW52YXMgPSByZW5kZXIuY2FudmFzLFxuICAgICAgICAgICAgY29udGV4dCA9IHJlbmRlci5jb250ZXh0LFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgYWxsQm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCksXG4gICAgICAgICAgICBhbGxDb25zdHJhaW50cyA9IENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyh3b3JsZCksXG4gICAgICAgICAgICBiYWNrZ3JvdW5kID0gb3B0aW9ucy53aXJlZnJhbWVzID8gb3B0aW9ucy53aXJlZnJhbWVCYWNrZ3JvdW5kIDogb3B0aW9ucy5iYWNrZ3JvdW5kLFxuICAgICAgICAgICAgYm9kaWVzID0gW10sXG4gICAgICAgICAgICBjb25zdHJhaW50cyA9IFtdLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IGVuZ2luZS50aW1pbmcudGltZXN0YW1wXG4gICAgICAgIH07XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocmVuZGVyLCAnYmVmb3JlUmVuZGVyJywgZXZlbnQpO1xuXG4gICAgICAgIC8vIGFwcGx5IGJhY2tncm91bmQgaWYgaXQgaGFzIGNoYW5nZWRcbiAgICAgICAgaWYgKHJlbmRlci5jdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZClcbiAgICAgICAgICAgIF9hcHBseUJhY2tncm91bmQocmVuZGVyLCBiYWNrZ3JvdW5kKTtcblxuICAgICAgICAvLyBjbGVhciB0aGUgY2FudmFzIHdpdGggYSB0cmFuc3BhcmVudCBmaWxsLCB0byBhbGxvdyB0aGUgY2FudmFzIGJhY2tncm91bmQgdG8gc2hvd1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2UtaW4nO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG5cbiAgICAgICAgLy8gaGFuZGxlIGJvdW5kc1xuICAgICAgICBpZiAob3B0aW9ucy5oYXNCb3VuZHMpIHtcbiAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgYm9kaWVzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBhbGxCb2RpZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5vdmVybGFwcyhib2R5LmJvdW5kcywgcmVuZGVyLmJvdW5kcykpXG4gICAgICAgICAgICAgICAgICAgIGJvZGllcy5wdXNoKGJvZHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGNvbnN0cmFpbnRzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQ29uc3RyYWludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGFsbENvbnN0cmFpbnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBib2R5QSA9IGNvbnN0cmFpbnQuYm9keUEsXG4gICAgICAgICAgICAgICAgICAgIGJvZHlCID0gY29uc3RyYWludC5ib2R5QixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRBV29ybGQgPSBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCV29ybGQgPSBjb25zdHJhaW50LnBvaW50QjtcblxuICAgICAgICAgICAgICAgIGlmIChib2R5QSkgcG9pbnRBV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlBLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlCKSBwb2ludEJXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKTtcblxuICAgICAgICAgICAgICAgIGlmICghcG9pbnRBV29ybGQgfHwgIXBvaW50QldvcmxkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMocmVuZGVyLmJvdW5kcywgcG9pbnRBV29ybGQpIHx8IEJvdW5kcy5jb250YWlucyhyZW5kZXIuYm91bmRzLCBwb2ludEJXb3JsZCkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgdmlld1xuICAgICAgICAgICAgUmVuZGVyLnN0YXJ0Vmlld1RyYW5zZm9ybShyZW5kZXIpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgbW91c2VcbiAgICAgICAgICAgIGlmIChyZW5kZXIubW91c2UpIHtcbiAgICAgICAgICAgICAgICBNb3VzZS5zZXRTY2FsZShyZW5kZXIubW91c2UsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogKHJlbmRlci5ib3VuZHMubWF4LnggLSByZW5kZXIuYm91bmRzLm1pbi54KSAvIHJlbmRlci5jYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHk6IChyZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSkgLyByZW5kZXIuY2FudmFzLmhlaWdodFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgTW91c2Uuc2V0T2Zmc2V0KHJlbmRlci5tb3VzZSwgcmVuZGVyLmJvdW5kcy5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3RyYWludHMgPSBhbGxDb25zdHJhaW50cztcbiAgICAgICAgICAgIGJvZGllcyA9IGFsbEJvZGllcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy53aXJlZnJhbWVzIHx8IChlbmdpbmUuZW5hYmxlU2xlZXBpbmcgJiYgb3B0aW9ucy5zaG93U2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAvLyBmdWxseSBmZWF0dXJlZCByZW5kZXJpbmcgb2YgYm9kaWVzXG4gICAgICAgICAgICBSZW5kZXIuYm9kaWVzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dDb252ZXhIdWxscylcbiAgICAgICAgICAgICAgICBSZW5kZXIuYm9keUNvbnZleEh1bGxzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICAgICAgLy8gb3B0aW1pc2VkIG1ldGhvZCBmb3Igd2lyZWZyYW1lcyBvbmx5XG4gICAgICAgICAgICBSZW5kZXIuYm9keVdpcmVmcmFtZXMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0JvdW5kcylcbiAgICAgICAgICAgIFJlbmRlci5ib2R5Qm91bmRzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93QXhlcyB8fCBvcHRpb25zLnNob3dBbmdsZUluZGljYXRvcilcbiAgICAgICAgICAgIFJlbmRlci5ib2R5QXhlcyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1Bvc2l0aW9ucylcbiAgICAgICAgICAgIFJlbmRlci5ib2R5UG9zaXRpb25zKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93VmVsb2NpdHkpXG4gICAgICAgICAgICBSZW5kZXIuYm9keVZlbG9jaXR5KHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93SWRzKVxuICAgICAgICAgICAgUmVuZGVyLmJvZHlJZHMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dTZXBhcmF0aW9ucylcbiAgICAgICAgICAgIFJlbmRlci5zZXBhcmF0aW9ucyhyZW5kZXIsIGVuZ2luZS5wYWlycy5saXN0LCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93Q29sbGlzaW9ucylcbiAgICAgICAgICAgIFJlbmRlci5jb2xsaXNpb25zKHJlbmRlciwgZW5naW5lLnBhaXJzLmxpc3QsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dWZXJ0ZXhOdW1iZXJzKVxuICAgICAgICAgICAgUmVuZGVyLnZlcnRleE51bWJlcnMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dNb3VzZVBvc2l0aW9uKVxuICAgICAgICAgICAgUmVuZGVyLm1vdXNlUG9zaXRpb24ocmVuZGVyLCByZW5kZXIubW91c2UsIGNvbnRleHQpO1xuXG4gICAgICAgIFJlbmRlci5jb25zdHJhaW50cyhjb25zdHJhaW50cywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0Jyb2FkcGhhc2UgJiYgZW5naW5lLmJyb2FkcGhhc2UuY29udHJvbGxlciA9PT0gR3JpZClcbiAgICAgICAgICAgIFJlbmRlci5ncmlkKHJlbmRlciwgZW5naW5lLmJyb2FkcGhhc2UsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dEZWJ1ZylcbiAgICAgICAgICAgIFJlbmRlci5kZWJ1ZyhyZW5kZXIsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc0JvdW5kcykge1xuICAgICAgICAgICAgLy8gcmV2ZXJ0IHZpZXcgdHJhbnNmb3Jtc1xuICAgICAgICAgICAgUmVuZGVyLmVuZFZpZXdUcmFuc2Zvcm0ocmVuZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJlbmRlciwgJ2FmdGVyUmVuZGVyJywgZXZlbnQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBkZWJ1Z1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuZGVidWcgPSBmdW5jdGlvbihyZW5kZXIsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgbWV0cmljcyA9IGVuZ2luZS5tZXRyaWNzLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgYm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCksXG4gICAgICAgICAgICBzcGFjZSA9IFwiICAgIFwiO1xuXG4gICAgICAgIGlmIChlbmdpbmUudGltaW5nLnRpbWVzdGFtcCAtIChyZW5kZXIuZGVidWdUaW1lc3RhbXAgfHwgMCkgPj0gNTAwKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IFwiXCI7XG5cbiAgICAgICAgICAgIGlmIChtZXRyaWNzLnRpbWluZykge1xuICAgICAgICAgICAgICAgIHRleHQgKz0gXCJmcHM6IFwiICsgTWF0aC5yb3VuZChtZXRyaWNzLnRpbWluZy5mcHMpICsgc3BhY2U7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgcmVuZGVyLmRlYnVnU3RyaW5nID0gdGV4dDtcbiAgICAgICAgICAgIHJlbmRlci5kZWJ1Z1RpbWVzdGFtcCA9IGVuZ2luZS50aW1pbmcudGltZXN0YW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlci5kZWJ1Z1N0cmluZykge1xuICAgICAgICAgICAgYy5mb250ID0gXCIxMnB4IEFyaWFsXCI7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuNSknO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3BsaXQgPSByZW5kZXIuZGVidWdTdHJpbmcuc3BsaXQoJ1xcbicpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGl0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYy5maWxsVGV4dChzcGxpdFtpXSwgNTAsIDUwICsgaSAqIDE4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBjb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludFtdfSBjb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5jb25zdHJhaW50cyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWNvbnN0cmFpbnQucmVuZGVyLnZpc2libGUgfHwgIWNvbnN0cmFpbnQucG9pbnRBIHx8ICFjb25zdHJhaW50LnBvaW50QilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIGJvZHlBID0gY29uc3RyYWludC5ib2R5QSxcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbnN0cmFpbnQuYm9keUIsXG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kO1xuXG4gICAgICAgICAgICBpZiAoYm9keUEpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IFZlY3Rvci5hZGQoYm9keUEucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRBKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBjb25zdHJhaW50LnBvaW50QTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQucmVuZGVyLnR5cGUgPT09ICdwaW4nKSB7XG4gICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLmFyYyhzdGFydC54LCBzdGFydC55LCAzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgYy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlCKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBjb25zdHJhaW50LnBvaW50QjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMubW92ZVRvKHN0YXJ0LngsIHN0YXJ0LnkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQucmVuZGVyLnR5cGUgPT09ICdzcHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IFZlY3Rvci5zdWIoZW5kLCBzdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWwgPSBWZWN0b3IucGVycChWZWN0b3Iubm9ybWFsaXNlKGRlbHRhKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2lscyA9IE1hdGguY2VpbChDb21tb24uY2xhbXAoY29uc3RyYWludC5sZW5ndGggLyA1LCAxMiwgMjApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGNvaWxzOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IGogJSAyID09PSAwID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydC54ICsgZGVsdGEueCAqIChqIC8gY29pbHMpICsgbm9ybWFsLnggKiBvZmZzZXQgKiA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LnkgKyBkZWx0YS55ICogKGogLyBjb2lscykgKyBub3JtYWwueSAqIG9mZnNldCAqIDRcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjLmxpbmVUbyhlbmQueCwgZW5kLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uc3RyYWludC5yZW5kZXIubGluZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgYy5saW5lV2lkdGggPSBjb25zdHJhaW50LnJlbmRlci5saW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9IGNvbnN0cmFpbnQucmVuZGVyLnN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25zdHJhaW50LnJlbmRlci5hbmNob3JzKSB7XG4gICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSBjb25zdHJhaW50LnJlbmRlci5zdHJva2VTdHlsZTtcbiAgICAgICAgICAgICAgICBjLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMuYXJjKHN0YXJ0LngsIHN0YXJ0LnksIDMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjLmFyYyhlbmQueCwgZW5kLnksIDMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMuZmlsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlTaGFkb3dzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVNoYWRvd3MgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBlbmdpbmUgPSByZW5kZXIuZW5naW5lO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5jaXJjbGVSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICBjLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMuYXJjKGJvZHkucG9zaXRpb24ueCwgYm9keS5wb3NpdGlvbi55LCBib2R5LmNpcmNsZVJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgYy5tb3ZlVG8oYm9keS52ZXJ0aWNlc1swXS54LCBib2R5LnZlcnRpY2VzWzBdLnkpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgYm9keS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhib2R5LnZlcnRpY2VzW2pdLngsIGJvZHkudmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkaXN0YW5jZVggPSBib2R5LnBvc2l0aW9uLnggLSByZW5kZXIub3B0aW9ucy53aWR0aCAqIDAuNSxcbiAgICAgICAgICAgICAgICBkaXN0YW5jZVkgPSBib2R5LnBvc2l0aW9uLnkgLSByZW5kZXIub3B0aW9ucy5oZWlnaHQgKiAwLjIsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZVgpICsgTWF0aC5hYnMoZGlzdGFuY2VZKTtcblxuICAgICAgICAgICAgYy5zaGFkb3dDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMTUpJztcbiAgICAgICAgICAgIGMuc2hhZG93T2Zmc2V0WCA9IDAuMDUgKiBkaXN0YW5jZVg7XG4gICAgICAgICAgICBjLnNoYWRvd09mZnNldFkgPSAwLjA1ICogZGlzdGFuY2VZO1xuICAgICAgICAgICAgYy5zaGFkb3dCbHVyID0gMSArIDEyICogTWF0aC5taW4oMSwgZGlzdGFuY2UgLyAxMDAwKTtcblxuICAgICAgICAgICAgYy5maWxsKCk7XG5cbiAgICAgICAgICAgIGMuc2hhZG93Q29sb3IgPSBudWxsO1xuICAgICAgICAgICAgYy5zaGFkb3dPZmZzZXRYID0gbnVsbDtcbiAgICAgICAgICAgIGMuc2hhZG93T2Zmc2V0WSA9IG51bGw7XG4gICAgICAgICAgICBjLnNoYWRvd0JsdXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZGllc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZGllcyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBzaG93SW50ZXJuYWxFZGdlcyA9IG9wdGlvbnMuc2hvd0ludGVybmFsRWRnZXMgfHwgIW9wdGlvbnMud2lyZWZyYW1lcyxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBwYXJ0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBoYW5kbGUgY29tcG91bmQgcGFydHNcbiAgICAgICAgICAgIGZvciAoayA9IGJvZHkucGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBrIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHBhcnQgPSBib2R5LnBhcnRzW2tdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJ0LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dTbGVlcGluZyAmJiBib2R5LmlzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5nbG9iYWxBbHBoYSA9IDAuNSAqIHBhcnQucmVuZGVyLm9wYWNpdHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0LnJlbmRlci5vcGFjaXR5ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuZ2xvYmFsQWxwaGEgPSBwYXJ0LnJlbmRlci5vcGFjaXR5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXJ0LnJlbmRlci5zcHJpdGUgJiYgcGFydC5yZW5kZXIuc3ByaXRlLnRleHR1cmUgJiYgIW9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBwYXJ0IHNwcml0ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3ByaXRlID0gcGFydC5yZW5kZXIuc3ByaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZSA9IF9nZXRUZXh0dXJlKHJlbmRlciwgc3ByaXRlLnRleHR1cmUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGMudHJhbnNsYXRlKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICAgICAgYy5yb3RhdGUocGFydC5hbmdsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYy5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53aWR0aCAqIC1zcHJpdGUueE9mZnNldCAqIHNwcml0ZS54U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLmhlaWdodCAqIC1zcHJpdGUueU9mZnNldCAqIHNwcml0ZS55U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLndpZHRoICogc3ByaXRlLnhTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUuaGVpZ2h0ICogc3ByaXRlLnlTY2FsZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldmVydCB0cmFuc2xhdGlvbiwgaG9wZWZ1bGx5IGZhc3RlciB0aGFuIHNhdmUgLyByZXN0b3JlXG4gICAgICAgICAgICAgICAgICAgIGMucm90YXRlKC1wYXJ0LmFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgYy50cmFuc2xhdGUoLXBhcnQucG9zaXRpb24ueCwgLXBhcnQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFydCBwb2x5Z29uXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LmNpcmNsZVJhZGl1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYXJjKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55LCBwYXJ0LmNpcmNsZVJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQudmVydGljZXNbMF0ueCwgcGFydC52ZXJ0aWNlc1swXS55KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBwYXJ0LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJ0LnZlcnRpY2VzW2ogLSAxXS5pc0ludGVybmFsIHx8IHNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzW2pdLngsIHBhcnQudmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnQudmVydGljZXNbal0uaXNJbnRlcm5hbCAmJiAhc2hvd0ludGVybmFsRWRnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC52ZXJ0aWNlc1soaiArIDEpICUgcGFydC52ZXJ0aWNlcy5sZW5ndGhdLngsIHBhcnQudmVydGljZXNbKGogKyAxKSAlIHBhcnQudmVydGljZXMubGVuZ3RoXS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbMF0ueCwgcGFydC52ZXJ0aWNlc1swXS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSBwYXJ0LnJlbmRlci5maWxsU3R5bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnJlbmRlci5saW5lV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVXaWR0aCA9IHBhcnQucmVuZGVyLmxpbmVXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gcGFydC5yZW5kZXIuc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYy5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJyNiYmInO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGMuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE9wdGltaXNlZCBtZXRob2QgZm9yIGRyYXdpbmcgYm9keSB3aXJlZnJhbWVzIGluIG9uZSBwYXNzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlXaXJlZnJhbWVzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVdpcmVmcmFtZXMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBzaG93SW50ZXJuYWxFZGdlcyA9IHJlbmRlci5vcHRpb25zLnNob3dJbnRlcm5hbEVkZ2VzLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHBhcnQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgYWxsIGJvZGllc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBjb21wb3VuZCBwYXJ0c1xuICAgICAgICAgICAgZm9yIChrID0gYm9keS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBib2R5LnBhcnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IGJvZHkucGFydHNba107XG5cbiAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWzBdLngsIHBhcnQudmVydGljZXNbMF0ueSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgcGFydC52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcnQudmVydGljZXNbaiAtIDFdLmlzSW50ZXJuYWwgfHwgc2hvd0ludGVybmFsRWRnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnZlcnRpY2VzW2pdLmlzSW50ZXJuYWwgJiYgIXNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWyhqICsgMSkgJSBwYXJ0LnZlcnRpY2VzLmxlbmd0aF0ueCwgcGFydC52ZXJ0aWNlc1soaiArIDEpICUgcGFydC52ZXJ0aWNlcy5sZW5ndGhdLnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYy5saW5lVG8ocGFydC52ZXJ0aWNlc1swXS54LCBwYXJ0LnZlcnRpY2VzWzBdLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZVN0eWxlID0gJyNiYmInO1xuICAgICAgICBjLnN0cm9rZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBPcHRpbWlzZWQgbWV0aG9kIGZvciBkcmF3aW5nIGJvZHkgY29udmV4IGh1bGwgd2lyZWZyYW1lcyBpbiBvbmUgcGFzc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5Q29udmV4SHVsbHNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5Q29udmV4SHVsbHMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaztcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIC8vIHJlbmRlciBjb252ZXggaHVsbHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlIHx8IGJvZHkucGFydHMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjLm1vdmVUbyhib2R5LnZlcnRpY2VzWzBdLngsIGJvZHkudmVydGljZXNbMF0ueSk7XG5cbiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPCBib2R5LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgYy5saW5lVG8oYm9keS52ZXJ0aWNlc1tqXS54LCBib2R5LnZlcnRpY2VzW2pdLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5LnZlcnRpY2VzWzBdLngsIGJvZHkudmVydGljZXNbMF0ueSk7XG4gICAgICAgIH1cblxuICAgICAgICBjLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjIpJztcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBib2R5IHZlcnRleCBudW1iZXJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCB2ZXJ0ZXhOdW1iZXJzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIudmVydGV4TnVtYmVycyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaztcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBib2RpZXNbaV0ucGFydHM7XG4gICAgICAgICAgICBmb3IgKGsgPSBwYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBwYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gcGFydHNba107XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHBhcnQudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjIpJztcbiAgICAgICAgICAgICAgICAgICAgYy5maWxsVGV4dChpICsgJ18nICsgaiwgcGFydC5wb3NpdGlvbi54ICsgKHBhcnQudmVydGljZXNbal0ueCAtIHBhcnQucG9zaXRpb24ueCkgKiAwLjgsIHBhcnQucG9zaXRpb24ueSArIChwYXJ0LnZlcnRpY2VzW2pdLnkgLSBwYXJ0LnBvc2l0aW9uLnkpICogMC44KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBtb3VzZSBwb3NpdGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgbW91c2VQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5tb3VzZVBvc2l0aW9uID0gZnVuY3Rpb24ocmVuZGVyLCBtb3VzZSwgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQ7XG4gICAgICAgIGMuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC44KSc7XG4gICAgICAgIGMuZmlsbFRleHQobW91c2UucG9zaXRpb24ueCArICcgICcgKyBtb3VzZS5wb3NpdGlvbi55LCBtb3VzZS5wb3NpdGlvbi54ICsgNSwgbW91c2UucG9zaXRpb24ueSAtIDUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IGJvdW5kc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5Qm91bmRzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keUJvdW5kcyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnM7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChib2R5LnJlbmRlci52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gYm9kaWVzW2ldLnBhcnRzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBwYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICBjLnJlY3QocGFydC5ib3VuZHMubWluLngsIHBhcnQuYm91bmRzLm1pbi55LCBwYXJ0LmJvdW5kcy5tYXgueCAtIHBhcnQuYm91bmRzLm1pbi54LCBwYXJ0LmJvdW5kcy5tYXgueSAtIHBhcnQuYm91bmRzLm1pbi55KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC4wOCknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IGFuZ2xlIGluZGljYXRvcnMgYW5kIGF4ZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keUF4ZXNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5QXhlcyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBwYXJ0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBrO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgcGFydHMgPSBib2R5LnBhcnRzO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dBeGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyIGFsbCBheGVzXG4gICAgICAgICAgICAgICAgZm9yIChqID0gcGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydCA9IHBhcnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcGFydC5heGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXhpcyA9IHBhcnQuYXhlc1trXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQucG9zaXRpb24ueCArIGF4aXMueCAqIDIwLCBwYXJ0LnBvc2l0aW9uLnkgKyBheGlzLnkgKiAyMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IHBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBhcnQuYXhlcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVuZGVyIGEgc2luZ2xlIGF4aXMgaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbygocGFydC52ZXJ0aWNlc1swXS54ICsgcGFydC52ZXJ0aWNlc1twYXJ0LnZlcnRpY2VzLmxlbmd0aC0xXS54KSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGFydC52ZXJ0aWNlc1swXS55ICsgcGFydC52ZXJ0aWNlc1twYXJ0LnZlcnRpY2VzLmxlbmd0aC0xXS55KSAvIDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdpbmRpYW5yZWQnO1xuICAgICAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCknO1xuICAgICAgICAgICAgYy5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnb3ZlcmxheSc7XG4gICAgICAgICAgICBjLmxpbmVXaWR0aCA9IDI7XG4gICAgICAgIH1cblxuICAgICAgICBjLnN0cm9rZSgpO1xuICAgICAgICBjLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGJvZHkgcG9zaXRpb25zXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlQb3NpdGlvbnNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5UG9zaXRpb25zID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBwYXJ0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgY3VycmVudCBwb3NpdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBoYW5kbGUgY29tcG91bmQgcGFydHNcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBib2R5LnBhcnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IGJvZHkucGFydHNba107XG4gICAgICAgICAgICAgICAgYy5hcmMocGFydC5wb3NpdGlvbi54LCBwYXJ0LnBvc2l0aW9uLnksIDMsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gJ2luZGlhbnJlZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuNSknO1xuICAgICAgICB9XG4gICAgICAgIGMuZmlsbCgpO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIHByZXZpb3VzIHBvc2l0aW9uc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgaWYgKGJvZHkucmVuZGVyLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjLmFyYyhib2R5LnBvc2l0aW9uUHJldi54LCBib2R5LnBvc2l0aW9uUHJldi55LCAyLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwxNjUsMCwwLjgpJztcbiAgICAgICAgYy5maWxsKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGJvZHkgdmVsb2NpdHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keVZlbG9jaXR5XG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVZlbG9jaXR5ID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0O1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGMubW92ZVRvKGJvZHkucG9zaXRpb24ueCwgYm9keS5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgIGMubGluZVRvKGJvZHkucG9zaXRpb24ueCArIChib2R5LnBvc2l0aW9uLnggLSBib2R5LnBvc2l0aW9uUHJldi54KSAqIDIsIGJvZHkucG9zaXRpb24ueSArIChib2R5LnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uUHJldi55KSAqIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAzO1xuICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJztcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYm9keSBpZHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keUlkc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlJZHMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgajtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWJvZGllc1tpXS5yZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIHBhcnRzID0gYm9kaWVzW2ldLnBhcnRzO1xuICAgICAgICAgICAgZm9yIChqID0gcGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2pdO1xuICAgICAgICAgICAgICAgIGMuZm9udCA9IFwiMTJweCBBcmlhbFwiO1xuICAgICAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC41KSc7XG4gICAgICAgICAgICAgICAgYy5maWxsVGV4dChwYXJ0LmlkLCBwYXJ0LnBvc2l0aW9uLnggKyAxMCwgcGFydC5wb3NpdGlvbi55IC0gMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGNvbGxpc2lvbnNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtwYWlyW119IHBhaXJzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmNvbGxpc2lvbnMgPSBmdW5jdGlvbihyZW5kZXIsIHBhaXJzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBjb3JyZWN0ZWQsXG4gICAgICAgICAgICBib2R5QSxcbiAgICAgICAgICAgIGJvZHlCLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgY29sbGlzaW9uIHBvc2l0aW9uc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhY3QgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzW2pdLFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXggPSBjb250YWN0LnZlcnRleDtcbiAgICAgICAgICAgICAgICBjLnJlY3QodmVydGV4LnggLSAxLjUsIHZlcnRleC55IC0gMS41LCAzLjUsIDMuNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNyknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAnb3JhbmdlJztcbiAgICAgICAgfVxuICAgICAgICBjLmZpbGwoKTtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIC8vIHJlbmRlciBjb2xsaXNpb24gbm9ybWFsc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcblxuICAgICAgICAgICAgaWYgKHBhaXIuYWN0aXZlQ29udGFjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWxQb3NYID0gcGFpci5hY3RpdmVDb250YWN0c1swXS52ZXJ0ZXgueCxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsUG9zWSA9IHBhaXIuYWN0aXZlQ29udGFjdHNbMF0udmVydGV4Lnk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFpci5hY3RpdmVDb250YWN0cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsUG9zWCA9IChwYWlyLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC54ICsgcGFpci5hY3RpdmVDb250YWN0c1sxXS52ZXJ0ZXgueCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxQb3NZID0gKHBhaXIuYWN0aXZlQ29udGFjdHNbMF0udmVydGV4LnkgKyBwYWlyLmFjdGl2ZUNvbnRhY3RzWzFdLnZlcnRleC55KSAvIDI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbi5ib2R5QiA9PT0gY29sbGlzaW9uLnN1cHBvcnRzWzBdLmJvZHkgfHwgY29sbGlzaW9uLmJvZHlBLmlzU3RhdGljID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKG5vcm1hbFBvc1ggLSBjb2xsaXNpb24ubm9ybWFsLnggKiA4LCBub3JtYWxQb3NZIC0gY29sbGlzaW9uLm5vcm1hbC55ICogOCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8obm9ybWFsUG9zWCArIGNvbGxpc2lvbi5ub3JtYWwueCAqIDgsIG5vcm1hbFBvc1kgKyBjb2xsaXNpb24ubm9ybWFsLnkgKiA4KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjLmxpbmVUbyhub3JtYWxQb3NYLCBub3JtYWxQb3NZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC43KSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ29yYW5nZSc7XG4gICAgICAgIH1cblxuICAgICAgICBjLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHNlcGFyYXRpb25zXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5zZXBhcmF0aW9ucyA9IGZ1bmN0aW9uKHJlbmRlciwgcGFpcnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGNvbGxpc2lvbixcbiAgICAgICAgICAgIGNvcnJlY3RlZCxcbiAgICAgICAgICAgIGJvZHlBLFxuICAgICAgICAgICAgYm9keUIsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgajtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIC8vIHJlbmRlciBzZXBhcmF0aW9uc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIGJvZHlBID0gY29sbGlzaW9uLmJvZHlBO1xuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24uYm9keUI7XG5cbiAgICAgICAgICAgIHZhciBrID0gMTtcblxuICAgICAgICAgICAgaWYgKCFib2R5Qi5pc1N0YXRpYyAmJiAhYm9keUEuaXNTdGF0aWMpIGsgPSAwLjU7XG4gICAgICAgICAgICBpZiAoYm9keUIuaXNTdGF0aWMpIGsgPSAwO1xuXG4gICAgICAgICAgICBjLm1vdmVUbyhib2R5Qi5wb3NpdGlvbi54LCBib2R5Qi5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgIGMubGluZVRvKGJvZHlCLnBvc2l0aW9uLnggLSBjb2xsaXNpb24ucGVuZXRyYXRpb24ueCAqIGssIGJvZHlCLnBvc2l0aW9uLnkgLSBjb2xsaXNpb24ucGVuZXRyYXRpb24ueSAqIGspO1xuXG4gICAgICAgICAgICBrID0gMTtcblxuICAgICAgICAgICAgaWYgKCFib2R5Qi5pc1N0YXRpYyAmJiAhYm9keUEuaXNTdGF0aWMpIGsgPSAwLjU7XG4gICAgICAgICAgICBpZiAoYm9keUEuaXNTdGF0aWMpIGsgPSAwO1xuXG4gICAgICAgICAgICBjLm1vdmVUbyhib2R5QS5wb3NpdGlvbi54LCBib2R5QS5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgIGMubGluZVRvKGJvZHlBLnBvc2l0aW9uLnggKyBjb2xsaXNpb24ucGVuZXRyYXRpb24ueCAqIGssIGJvZHlBLnBvc2l0aW9uLnkgKyBjb2xsaXNpb24ucGVuZXRyYXRpb24ueSAqIGspO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwxNjUsMCwwLjUpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAnb3JhbmdlJztcbiAgICAgICAgfVxuICAgICAgICBjLnN0cm9rZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBncmlkXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Z3JpZH0gZ3JpZFxuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ncmlkID0gZnVuY3Rpb24ocmVuZGVyLCBncmlkLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucztcblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDE4MCwwLDAuMSknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwxODAsMCwwLjUpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgdmFyIGJ1Y2tldEtleXMgPSBDb21tb24ua2V5cyhncmlkLmJ1Y2tldHMpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVja2V0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJ1Y2tldElkID0gYnVja2V0S2V5c1tpXTtcblxuICAgICAgICAgICAgaWYgKGdyaWQuYnVja2V0c1tidWNrZXRJZF0ubGVuZ3RoIDwgMilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIHJlZ2lvbiA9IGJ1Y2tldElkLnNwbGl0KC9DfFIvKTtcbiAgICAgICAgICAgIGMucmVjdCgwLjUgKyBwYXJzZUludChyZWdpb25bMV0sIDEwKSAqIGdyaWQuYnVja2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIDAuNSArIHBhcnNlSW50KHJlZ2lvblsyXSwgMTApICogZ3JpZC5idWNrZXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGdyaWQuYnVja2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGdyaWQuYnVja2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgaW5zcGVjdG9yXG4gICAgICogQHBhcmFtIHtpbnNwZWN0b3J9IGluc3BlY3RvclxuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5pbnNwZWN0b3IgPSBmdW5jdGlvbihpbnNwZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGVuZ2luZSA9IGluc3BlY3Rvci5lbmdpbmUsXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGluc3BlY3Rvci5zZWxlY3RlZCxcbiAgICAgICAgICAgIHJlbmRlciA9IGluc3BlY3Rvci5yZW5kZXIsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBib3VuZHM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKSB7XG4gICAgICAgICAgICB2YXIgYm91bmRzV2lkdGggPSByZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCxcbiAgICAgICAgICAgICAgICBib3VuZHNIZWlnaHQgPSByZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICBib3VuZHNTY2FsZVggPSBib3VuZHNXaWR0aCAvIHJlbmRlci5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgIGJvdW5kc1NjYWxlWSA9IGJvdW5kc0hlaWdodCAvIHJlbmRlci5vcHRpb25zLmhlaWdodDtcblxuICAgICAgICAgICAgY29udGV4dC5zY2FsZSgxIC8gYm91bmRzU2NhbGVYLCAxIC8gYm91bmRzU2NhbGVZKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC1yZW5kZXIuYm91bmRzLm1pbi54LCAtcmVuZGVyLmJvdW5kcy5taW4ueSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGVjdGVkW2ldLmRhdGE7XG5cbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC45KSc7XG4gICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKFsxLDJdKTtcblxuICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG5cbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgYm9keSBzZWxlY3Rpb25zXG4gICAgICAgICAgICAgICAgYm91bmRzID0gaXRlbS5ib3VuZHM7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoTWF0aC5mbG9vcihib3VuZHMubWluLnggLSAzKSwgTWF0aC5mbG9vcihib3VuZHMubWluLnkgLSAzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihib3VuZHMubWF4LnggLSBib3VuZHMubWluLnggKyA2KSwgTWF0aC5mbG9vcihib3VuZHMubWF4LnkgLSBib3VuZHMubWluLnkgKyA2KSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2NvbnN0cmFpbnQnOlxuXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyIGNvbnN0cmFpbnQgc2VsZWN0aW9uc1xuICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IGl0ZW0ucG9pbnRBO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmJvZHlBKVxuICAgICAgICAgICAgICAgICAgICBwb2ludCA9IGl0ZW0ucG9pbnRCO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMocG9pbnQueCwgcG9pbnQueSwgMTAsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC0wLjUsIC0wLjUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVuZGVyIHNlbGVjdGlvbiByZWdpb25cbiAgICAgICAgaWYgKGluc3BlY3Rvci5zZWxlY3RTdGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoMC41LCAwLjUpO1xuICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSAxO1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwxNjUsMCwwLjYpJztcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDE2NSwwLDAuMSknO1xuICAgICAgICAgICAgYm91bmRzID0gaW5zcGVjdG9yLnNlbGVjdEJvdW5kcztcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlY3QoTWF0aC5mbG9vcihib3VuZHMubWluLngpLCBNYXRoLmZsb29yKGJvdW5kcy5taW4ueSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihib3VuZHMubWF4LnggLSBib3VuZHMubWluLngpLCBNYXRoLmZsb29yKGJvdW5kcy5tYXgueSAtIGJvdW5kcy5taW4ueSkpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC0wLjUsIC0wLjUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKVxuICAgICAgICAgICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQ2FudmFzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gd2lkdGhcbiAgICAgKiBAcGFyYW0ge30gaGVpZ2h0XG4gICAgICogQHJldHVybiBjYW52YXNcbiAgICAgKi9cbiAgICB2YXIgX2NyZWF0ZUNhbnZhcyA9IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgY2FudmFzLm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9O1xuICAgICAgICBjYW52YXMub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBpeGVsIHJhdGlvIG9mIHRoZSBjYW52YXMuXG4gICAgICogQG1ldGhvZCBfZ2V0UGl4ZWxSYXRpb1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2FudmFzXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBwaXhlbCByYXRpb1xuICAgICAqL1xuICAgIHZhciBfZ2V0UGl4ZWxSYXRpbyA9IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLFxuICAgICAgICAgICAgZGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEsXG4gICAgICAgICAgICBiYWNraW5nU3RvcmVQaXhlbFJhdGlvID0gY29udGV4dC53ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvIHx8IGNvbnRleHQubW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBjb250ZXh0Lm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fCBjb250ZXh0Lm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGNvbnRleHQuYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gICAgICAgIHJldHVybiBkZXZpY2VQaXhlbFJhdGlvIC8gYmFja2luZ1N0b3JlUGl4ZWxSYXRpbztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmVxdWVzdGVkIHRleHR1cmUgKGFuIEltYWdlKSB2aWEgaXRzIHBhdGhcbiAgICAgKiBAbWV0aG9kIF9nZXRUZXh0dXJlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGltYWdlUGF0aFxuICAgICAqIEByZXR1cm4ge0ltYWdlfSB0ZXh0dXJlXG4gICAgICovXG4gICAgdmFyIF9nZXRUZXh0dXJlID0gZnVuY3Rpb24ocmVuZGVyLCBpbWFnZVBhdGgpIHtcbiAgICAgICAgdmFyIGltYWdlID0gcmVuZGVyLnRleHR1cmVzW2ltYWdlUGF0aF07XG5cbiAgICAgICAgaWYgKGltYWdlKVxuICAgICAgICAgICAgcmV0dXJuIGltYWdlO1xuXG4gICAgICAgIGltYWdlID0gcmVuZGVyLnRleHR1cmVzW2ltYWdlUGF0aF0gPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1hZ2Uuc3JjID0gaW1hZ2VQYXRoO1xuXG4gICAgICAgIHJldHVybiBpbWFnZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgYmFja2dyb3VuZCB0byB0aGUgY2FudmFzIHVzaW5nIENTUy5cbiAgICAgKiBAbWV0aG9kIGFwcGx5QmFja2dyb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kXG4gICAgICovXG4gICAgdmFyIF9hcHBseUJhY2tncm91bmQgPSBmdW5jdGlvbihyZW5kZXIsIGJhY2tncm91bmQpIHtcbiAgICAgICAgdmFyIGNzc0JhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuXG4gICAgICAgIGlmICgvKGpwZ3xnaWZ8cG5nKSQvLnRlc3QoYmFja2dyb3VuZCkpXG4gICAgICAgICAgICBjc3NCYWNrZ3JvdW5kID0gJ3VybCgnICsgYmFja2dyb3VuZCArICcpJztcblxuICAgICAgICByZW5kZXIuY2FudmFzLnN0eWxlLmJhY2tncm91bmQgPSBjc3NCYWNrZ3JvdW5kO1xuICAgICAgICByZW5kZXIuY2FudmFzLnN0eWxlLmJhY2tncm91bmRTaXplID0gXCJjb250YWluXCI7XG4gICAgICAgIHJlbmRlci5jdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIEV2ZW50cyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGJlZm9yZSByZW5kZXJpbmdcbiAgICAqXG4gICAgKiBAZXZlbnQgYmVmb3JlUmVuZGVyXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhZnRlciByZW5kZXJpbmdcbiAgICAqXG4gICAgKiBAZXZlbnQgYWZ0ZXJSZW5kZXJcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYmFjay1yZWZlcmVuY2UgdG8gdGhlIGBNYXR0ZXIuUmVuZGVyYCBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29udHJvbGxlclxuICAgICAqIEB0eXBlIHJlbmRlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBNYXR0ZXIuRW5naW5lYCBpbnN0YW5jZSB0byBiZSB1c2VkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGVuZ2luZVxuICAgICAqIEB0eXBlIGVuZ2luZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGNhbnZhcyBpcyB0byBiZSBpbnNlcnRlZCAoaWYgYHJlbmRlci5jYW52YXNgIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQpXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZWxlbWVudFxuICAgICAqIEB0eXBlIEhUTUxFbGVtZW50XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbnZhcyBlbGVtZW50IHRvIHJlbmRlciB0by4gSWYgbm90IHNwZWNpZmllZCwgb25lIHdpbGwgYmUgY3JlYXRlZCBpZiBgcmVuZGVyLmVsZW1lbnRgIGhhcyBiZWVuIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjYW52YXNcbiAgICAgKiBAdHlwZSBIVE1MQ2FudmFzRWxlbWVudFxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgb2YgdGhlIHJlbmRlcmVyLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnNcbiAgICAgKiBAdHlwZSB7fVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRhcmdldCB3aWR0aCBpbiBwaXhlbHMgb2YgdGhlIGByZW5kZXIuY2FudmFzYCB0byBiZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMud2lkdGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCA4MDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgaGVpZ2h0IGluIHBpeGVscyBvZiB0aGUgYHJlbmRlci5jYW52YXNgIHRvIGJlIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5oZWlnaHRcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCA2MDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IHNwZWNpZmllcyBpZiBgcmVuZGVyLmJvdW5kc2Agc2hvdWxkIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5oYXNCb3VuZHNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYEJvdW5kc2Agb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBkcmF3aW5nIHZpZXcgcmVnaW9uLlxuICAgICAqIFJlbmRlcmluZyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdHJhbnNmb3JtZWQgYW5kIHNjYWxlZCB0byBmaXQgd2l0aGluIHRoZSBjYW52YXMgc2l6ZSAoYHJlbmRlci5vcHRpb25zLndpZHRoYCBhbmQgYHJlbmRlci5vcHRpb25zLmhlaWdodGApLlxuICAgICAqIFRoaXMgYWxsb3dzIGZvciBjcmVhdGluZyB2aWV3cyB0aGF0IGNhbiBwYW4gb3Igem9vbSBhcm91bmQgdGhlIHNjZW5lLlxuICAgICAqIFlvdSBtdXN0IGFsc28gc2V0IGByZW5kZXIub3B0aW9ucy5oYXNCb3VuZHNgIHRvIGB0cnVlYCB0byBlbmFibGUgYm91bmRlZCByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm91bmRzXG4gICAgICogQHR5cGUgYm91bmRzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgMmQgcmVuZGVyaW5nIGNvbnRleHQgZnJvbSB0aGUgYHJlbmRlci5jYW52YXNgIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29udGV4dFxuICAgICAqIEB0eXBlIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNwcml0ZSB0ZXh0dXJlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHRleHR1cmVzXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxufSkoKTtcblxufSx7XCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb2xsaXNpb24vR3JpZFwiOjYsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2NvcmUvTW91c2VcIjoxOSxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6Mjh9XSwzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuUmVuZGVyUGl4aWAgbW9kdWxlIGlzIGFuIGV4YW1wbGUgcmVuZGVyZXIgdXNpbmcgcGl4aS5qcy5cbiogU2VlIGFsc28gYE1hdHRlci5SZW5kZXJgIGZvciBhIGNhbnZhcyBiYXNlZCByZW5kZXJlci5cbipcbiogQGNsYXNzIFJlbmRlclBpeGlcbiogQGRlcHJlY2F0ZWQgdGhlIE1hdHRlci5SZW5kZXJQaXhpIG1vZHVsZSB3aWxsIHNvb24gYmUgcmVtb3ZlZCBmcm9tIHRoZSBNYXR0ZXIuanMgY29yZS5cbiogSXQgd2lsbCBsaWtlbHkgYmUgbW92ZWQgdG8gaXRzIG93biByZXBvc2l0b3J5IChidXQgbWFpbnRlbmFuY2Ugd2lsbCBiZSBsaW1pdGVkKS5cbiovXG5cbnZhciBSZW5kZXJQaXhpID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyUGl4aTtcblxudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xudmFyIENvbXBvc2l0ZSA9IF9kZXJlcV8oJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcbnZhciBFdmVudHMgPSBfZGVyZXFfKCcuLi9jb3JlL0V2ZW50cycpO1xudmFyIFZlY3RvciA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgX3JlcXVlc3RBbmltYXRpb25GcmFtZSxcbiAgICAgICAgX2NhbmNlbEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGZ1bmN0aW9uKGNhbGxiYWNrKXsgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKENvbW1vbi5ub3coKSk7IH0sIDEwMDAgLyA2MCk7IH07XG4gICBcbiAgICAgICAgX2NhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFBpeGkuanMgV2ViR0wgcmVuZGVyZXJcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7UmVuZGVyUGl4aX0gQSBuZXcgcmVuZGVyZXJcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBDb21tb24ud2FybignUmVuZGVyUGl4aS5jcmVhdGU6IE1hdHRlci5SZW5kZXJQaXhpIGlzIGRlcHJlY2F0ZWQgKHNlZSBkb2NzKScpO1xuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFJlbmRlclBpeGksXG4gICAgICAgICAgICBlbmdpbmU6IG51bGwsXG4gICAgICAgICAgICBlbGVtZW50OiBudWxsLFxuICAgICAgICAgICAgZnJhbWVSZXF1ZXN0SWQ6IG51bGwsXG4gICAgICAgICAgICBjYW52YXM6IG51bGwsXG4gICAgICAgICAgICByZW5kZXJlcjogbnVsbCxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgICAgIHNwcml0ZUNvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgICAgIHBpeGlPcHRpb25zOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiA4MDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmYWZhZmEnLFxuICAgICAgICAgICAgICAgIHdpcmVmcmFtZUJhY2tncm91bmQ6ICcjMjIyJyxcbiAgICAgICAgICAgICAgICBoYXNCb3VuZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lyZWZyYW1lczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U2xlZXBpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd0RlYnVnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93QnJvYWRwaGFzZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0JvdW5kczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1ZlbG9jaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93Q29sbGlzaW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0F4ZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dQb3NpdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dBbmdsZUluZGljYXRvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0lkczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1NoYWRvd3M6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlbmRlciA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgPSAhcmVuZGVyLm9wdGlvbnMud2lyZWZyYW1lcyAmJiByZW5kZXIub3B0aW9ucy5iYWNrZ3JvdW5kID09PSAndHJhbnNwYXJlbnQnO1xuXG4gICAgICAgIC8vIGluaXQgcGl4aVxuICAgICAgICByZW5kZXIucGl4aU9wdGlvbnMgPSByZW5kZXIucGl4aU9wdGlvbnMgfHwge1xuICAgICAgICAgICAgdmlldzogcmVuZGVyLmNhbnZhcyxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcbiAgICAgICAgICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kXG4gICAgICAgIH07XG5cbiAgICAgICAgcmVuZGVyLm1vdXNlID0gb3B0aW9ucy5tb3VzZTtcbiAgICAgICAgcmVuZGVyLmVuZ2luZSA9IG9wdGlvbnMuZW5naW5lO1xuICAgICAgICByZW5kZXIucmVuZGVyZXIgPSByZW5kZXIucmVuZGVyZXIgfHwgbmV3IFBJWEkuV2ViR0xSZW5kZXJlcihyZW5kZXIub3B0aW9ucy53aWR0aCwgcmVuZGVyLm9wdGlvbnMuaGVpZ2h0LCByZW5kZXIucGl4aU9wdGlvbnMpO1xuICAgICAgICByZW5kZXIuY29udGFpbmVyID0gcmVuZGVyLmNvbnRhaW5lciB8fCBuZXcgUElYSS5Db250YWluZXIoKTtcbiAgICAgICAgcmVuZGVyLnNwcml0ZUNvbnRhaW5lciA9IHJlbmRlci5zcHJpdGVDb250YWluZXIgfHwgbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4gICAgICAgIHJlbmRlci5jYW52YXMgPSByZW5kZXIuY2FudmFzIHx8IHJlbmRlci5yZW5kZXJlci52aWV3O1xuICAgICAgICByZW5kZXIuYm91bmRzID0gcmVuZGVyLmJvdW5kcyB8fCB7IFxuICAgICAgICAgICAgbWluOiB7XG4gICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIG1heDogeyBcbiAgICAgICAgICAgICAgICB4OiByZW5kZXIub3B0aW9ucy53aWR0aCxcbiAgICAgICAgICAgICAgICB5OiByZW5kZXIub3B0aW9ucy5oZWlnaHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgRXZlbnRzLm9uKHJlbmRlci5lbmdpbmUsICdiZWZvcmVVcGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFJlbmRlclBpeGkuY2xlYXIocmVuZGVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2FjaGVzXG4gICAgICAgIHJlbmRlci50ZXh0dXJlcyA9IHt9O1xuICAgICAgICByZW5kZXIuc3ByaXRlcyA9IHt9O1xuICAgICAgICByZW5kZXIucHJpbWl0aXZlcyA9IHt9O1xuXG4gICAgICAgIC8vIHVzZSBhIHNwcml0ZSBiYXRjaCBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgcmVuZGVyLmNvbnRhaW5lci5hZGRDaGlsZChyZW5kZXIuc3ByaXRlQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBpbnNlcnQgY2FudmFzXG4gICAgICAgIGlmIChDb21tb24uaXNFbGVtZW50KHJlbmRlci5lbGVtZW50KSkge1xuICAgICAgICAgICAgcmVuZGVyLmVsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyLmNhbnZhcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBDb21tb24ud2FybignTm8gXCJyZW5kZXIuZWxlbWVudFwiIHBhc3NlZCwgXCJyZW5kZXIuY2FudmFzXCIgd2FzIG5vdCBpbnNlcnRlZCBpbnRvIGRvY3VtZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudCBtZW51cyBvbiBjYW52YXNcbiAgICAgICAgcmVuZGVyLmNhbnZhcy5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICAgICAgcmVuZGVyLmNhbnZhcy5vbnNlbGVjdHN0YXJ0ID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfTtcblxuICAgICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb250aW51b3VzbHkgdXBkYXRlcyB0aGUgcmVuZGVyIGNhbnZhcyBvbiB0aGUgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgZXZlbnQuXG4gICAgICogQG1ldGhvZCBydW5cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLnJ1biA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICAoZnVuY3Rpb24gbG9vcCh0aW1lKXtcbiAgICAgICAgICAgIHJlbmRlci5mcmFtZVJlcXVlc3RJZCA9IF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgICAgICBSZW5kZXJQaXhpLndvcmxkKHJlbmRlcik7XG4gICAgICAgIH0pKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuZHMgZXhlY3V0aW9uIG9mIGBSZW5kZXIucnVuYCBvbiB0aGUgZ2l2ZW4gYHJlbmRlcmAsIGJ5IGNhbmNlbGluZyB0aGUgYW5pbWF0aW9uIGZyYW1lIHJlcXVlc3QgZXZlbnQgbG9vcC5cbiAgICAgKiBAbWV0aG9kIHN0b3BcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLnN0b3AgPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgX2NhbmNlbEFuaW1hdGlvbkZyYW1lKHJlbmRlci5mcmFtZVJlcXVlc3RJZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgc2NlbmUgZ3JhcGhcbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtSZW5kZXJQaXhpfSByZW5kZXJcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkuY2xlYXIgPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHJlbmRlci5jb250YWluZXIsXG4gICAgICAgICAgICBzcHJpdGVDb250YWluZXIgPSByZW5kZXIuc3ByaXRlQ29udGFpbmVyO1xuXG4gICAgICAgIC8vIGNsZWFyIHN0YWdlIGNvbnRhaW5lclxuICAgICAgICB3aGlsZSAoY29udGFpbmVyLmNoaWxkcmVuWzBdKSB7IFxuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5jaGlsZHJlblswXSk7IFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgc3ByaXRlIGJhdGNoXG4gICAgICAgIHdoaWxlIChzcHJpdGVDb250YWluZXIuY2hpbGRyZW5bMF0pIHsgXG4gICAgICAgICAgICBzcHJpdGVDb250YWluZXIucmVtb3ZlQ2hpbGQoc3ByaXRlQ29udGFpbmVyLmNoaWxkcmVuWzBdKTsgXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmdTcHJpdGUgPSByZW5kZXIuc3ByaXRlc1snYmctMCddO1xuXG4gICAgICAgIC8vIGNsZWFyIGNhY2hlc1xuICAgICAgICByZW5kZXIudGV4dHVyZXMgPSB7fTtcbiAgICAgICAgcmVuZGVyLnNwcml0ZXMgPSB7fTtcbiAgICAgICAgcmVuZGVyLnByaW1pdGl2ZXMgPSB7fTtcblxuICAgICAgICAvLyBzZXQgYmFja2dyb3VuZCBzcHJpdGVcbiAgICAgICAgcmVuZGVyLnNwcml0ZXNbJ2JnLTAnXSA9IGJnU3ByaXRlO1xuICAgICAgICBpZiAoYmdTcHJpdGUpXG4gICAgICAgICAgICBjb250YWluZXIuYWRkQ2hpbGRBdChiZ1Nwcml0ZSwgMCk7XG5cbiAgICAgICAgLy8gYWRkIHNwcml0ZSBiYXRjaCBiYWNrIGludG8gY29udGFpbmVyXG4gICAgICAgIHJlbmRlci5jb250YWluZXIuYWRkQ2hpbGQocmVuZGVyLnNwcml0ZUNvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gcmVzZXQgYmFja2dyb3VuZCBzdGF0ZVxuICAgICAgICByZW5kZXIuY3VycmVudEJhY2tncm91bmQgPSBudWxsO1xuXG4gICAgICAgIC8vIHJlc2V0IGJvdW5kcyB0cmFuc2Zvcm1zXG4gICAgICAgIGNvbnRhaW5lci5zY2FsZS5zZXQoMSwgMSk7XG4gICAgICAgIGNvbnRhaW5lci5wb3NpdGlvbi5zZXQoMCwgMCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJhY2tncm91bmQgb2YgdGhlIGNhbnZhcyBcbiAgICAgKiBAbWV0aG9kIHNldEJhY2tncm91bmRcbiAgICAgKiBAcGFyYW0ge1JlbmRlclBpeGl9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLnNldEJhY2tncm91bmQgPSBmdW5jdGlvbihyZW5kZXIsIGJhY2tncm91bmQpIHtcbiAgICAgICAgaWYgKHJlbmRlci5jdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgdmFyIGlzQ29sb3IgPSBiYWNrZ3JvdW5kLmluZGV4T2YgJiYgYmFja2dyb3VuZC5pbmRleE9mKCcjJykgIT09IC0xLFxuICAgICAgICAgICAgICAgIGJnU3ByaXRlID0gcmVuZGVyLnNwcml0ZXNbJ2JnLTAnXTtcblxuICAgICAgICAgICAgaWYgKGlzQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBzb2xpZCBiYWNrZ3JvdW5kIGNvbG9yXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gQ29tbW9uLmNvbG9yVG9OdW1iZXIoYmFja2dyb3VuZCk7XG4gICAgICAgICAgICAgICAgcmVuZGVyLnJlbmRlcmVyLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGJhY2tncm91bmQgc3ByaXRlIGlmIGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgaWYgKGJnU3ByaXRlKVxuICAgICAgICAgICAgICAgICAgICByZW5kZXIuY29udGFpbmVyLnJlbW92ZUNoaWxkKGJnU3ByaXRlKTsgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpc2UgYmFja2dyb3VuZCBzcHJpdGUgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgaWYgKCFiZ1Nwcml0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZSA9IF9nZXRUZXh0dXJlKHJlbmRlciwgYmFja2dyb3VuZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYmdTcHJpdGUgPSByZW5kZXIuc3ByaXRlc1snYmctMCddID0gbmV3IFBJWEkuU3ByaXRlKHRleHR1cmUpO1xuICAgICAgICAgICAgICAgICAgICBiZ1Nwcml0ZS5wb3NpdGlvbi54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYmdTcHJpdGUucG9zaXRpb24ueSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlci5jb250YWluZXIuYWRkQ2hpbGRBdChiZ1Nwcml0ZSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW5kZXIuY3VycmVudEJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCB3b3JsZFxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkud29ybGQgPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgdmFyIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICB3b3JsZCA9IGVuZ2luZS53b3JsZCxcbiAgICAgICAgICAgIHJlbmRlcmVyID0gcmVuZGVyLnJlbmRlcmVyLFxuICAgICAgICAgICAgY29udGFpbmVyID0gcmVuZGVyLmNvbnRhaW5lcixcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIGJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMod29ybGQpLFxuICAgICAgICAgICAgYWxsQ29uc3RyYWludHMgPSBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMod29ybGQpLFxuICAgICAgICAgICAgY29uc3RyYWludHMgPSBbXSxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgUmVuZGVyUGl4aS5zZXRCYWNrZ3JvdW5kKHJlbmRlciwgb3B0aW9ucy53aXJlZnJhbWVCYWNrZ3JvdW5kKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJlbmRlclBpeGkuc2V0QmFja2dyb3VuZChyZW5kZXIsIG9wdGlvbnMuYmFja2dyb3VuZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgYm91bmRzXG4gICAgICAgIHZhciBib3VuZHNXaWR0aCA9IHJlbmRlci5ib3VuZHMubWF4LnggLSByZW5kZXIuYm91bmRzLm1pbi54LFxuICAgICAgICAgICAgYm91bmRzSGVpZ2h0ID0gcmVuZGVyLmJvdW5kcy5tYXgueSAtIHJlbmRlci5ib3VuZHMubWluLnksXG4gICAgICAgICAgICBib3VuZHNTY2FsZVggPSBib3VuZHNXaWR0aCAvIHJlbmRlci5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgYm91bmRzU2NhbGVZID0gYm91bmRzSGVpZ2h0IC8gcmVuZGVyLm9wdGlvbnMuaGVpZ2h0O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc0JvdW5kcykge1xuICAgICAgICAgICAgLy8gSGlkZSBib2RpZXMgdGhhdCBhcmUgbm90IGluIHZpZXdcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgICAgICBib2R5LnJlbmRlci5zcHJpdGUudmlzaWJsZSA9IEJvdW5kcy5vdmVybGFwcyhib2R5LmJvdW5kcywgcmVuZGVyLmJvdW5kcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgY29uc3RyYWludHMgdGhhdCBhcmUgbm90IGluIHZpZXdcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhbGxDb25zdHJhaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjb25zdHJhaW50ID0gYWxsQ29uc3RyYWludHNbaV0sXG4gICAgICAgICAgICAgICAgICAgIGJvZHlBID0gY29uc3RyYWludC5ib2R5QSxcbiAgICAgICAgICAgICAgICAgICAgYm9keUIgPSBjb25zdHJhaW50LmJvZHlCLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEFXb3JsZCA9IGNvbnN0cmFpbnQucG9pbnRBLFxuICAgICAgICAgICAgICAgICAgICBwb2ludEJXb3JsZCA9IGNvbnN0cmFpbnQucG9pbnRCO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJvZHlBKSBwb2ludEFXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUEucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRBKTtcbiAgICAgICAgICAgICAgICBpZiAoYm9keUIpIHBvaW50QldvcmxkID0gVmVjdG9yLmFkZChib2R5Qi5wb3NpdGlvbiwgY29uc3RyYWludC5wb2ludEIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwb2ludEFXb3JsZCB8fCAhcG9pbnRCV29ybGQpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5jb250YWlucyhyZW5kZXIuYm91bmRzLCBwb2ludEFXb3JsZCkgfHwgQm91bmRzLmNvbnRhaW5zKHJlbmRlci5ib3VuZHMsIHBvaW50QldvcmxkKSlcbiAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludHMucHVzaChjb25zdHJhaW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdHJhbnNmb3JtIHRoZSB2aWV3XG4gICAgICAgICAgICBjb250YWluZXIuc2NhbGUuc2V0KDEgLyBib3VuZHNTY2FsZVgsIDEgLyBib3VuZHNTY2FsZVkpO1xuICAgICAgICAgICAgY29udGFpbmVyLnBvc2l0aW9uLnNldCgtcmVuZGVyLmJvdW5kcy5taW4ueCAqICgxIC8gYm91bmRzU2NhbGVYKSwgLXJlbmRlci5ib3VuZHMubWluLnkgKiAoMSAvIGJvdW5kc1NjYWxlWSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3RyYWludHMgPSBhbGxDb25zdHJhaW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBSZW5kZXJQaXhpLmJvZHkocmVuZGVyLCBib2RpZXNbaV0pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25zdHJhaW50cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIFJlbmRlclBpeGkuY29uc3RyYWludChyZW5kZXIsIGNvbnN0cmFpbnRzW2ldKTtcblxuICAgICAgICByZW5kZXJlci5yZW5kZXIoY29udGFpbmVyKTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgY29uc3RyYWludFxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge2NvbnN0cmFpbnR9IGNvbnN0cmFpbnRcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFJlbmRlclBpeGkuY29uc3RyYWludCA9IGZ1bmN0aW9uKHJlbmRlciwgY29uc3RyYWludCkge1xuICAgICAgICB2YXIgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIGJvZHlBID0gY29uc3RyYWludC5ib2R5QSxcbiAgICAgICAgICAgIGJvZHlCID0gY29uc3RyYWludC5ib2R5QixcbiAgICAgICAgICAgIHBvaW50QSA9IGNvbnN0cmFpbnQucG9pbnRBLFxuICAgICAgICAgICAgcG9pbnRCID0gY29uc3RyYWludC5wb2ludEIsXG4gICAgICAgICAgICBjb250YWluZXIgPSByZW5kZXIuY29udGFpbmVyLFxuICAgICAgICAgICAgY29uc3RyYWludFJlbmRlciA9IGNvbnN0cmFpbnQucmVuZGVyLFxuICAgICAgICAgICAgcHJpbWl0aXZlSWQgPSAnYy0nICsgY29uc3RyYWludC5pZCxcbiAgICAgICAgICAgIHByaW1pdGl2ZSA9IHJlbmRlci5wcmltaXRpdmVzW3ByaW1pdGl2ZUlkXTtcblxuICAgICAgICAvLyBpbml0aWFsaXNlIGNvbnN0cmFpbnQgcHJpbWl0aXZlIGlmIG5vdCBleGlzdGluZ1xuICAgICAgICBpZiAoIXByaW1pdGl2ZSlcbiAgICAgICAgICAgIHByaW1pdGl2ZSA9IHJlbmRlci5wcmltaXRpdmVzW3ByaW1pdGl2ZUlkXSA9IG5ldyBQSVhJLkdyYXBoaWNzKCk7XG5cbiAgICAgICAgLy8gZG9uJ3QgcmVuZGVyIGlmIGNvbnN0cmFpbnQgZG9lcyBub3QgaGF2ZSB0d28gZW5kIHBvaW50c1xuICAgICAgICBpZiAoIWNvbnN0cmFpbnRSZW5kZXIudmlzaWJsZSB8fCAhY29uc3RyYWludC5wb2ludEEgfHwgIWNvbnN0cmFpbnQucG9pbnRCKSB7XG4gICAgICAgICAgICBwcmltaXRpdmUuY2xlYXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCB0byBzY2VuZSBncmFwaCBpZiBub3QgYWxyZWFkeSB0aGVyZVxuICAgICAgICBpZiAoQ29tbW9uLmluZGV4T2YoY29udGFpbmVyLmNoaWxkcmVuLCBwcmltaXRpdmUpID09PSAtMSlcbiAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDaGlsZChwcmltaXRpdmUpO1xuXG4gICAgICAgIC8vIHJlbmRlciB0aGUgY29uc3RyYWludCBvbiBldmVyeSB1cGRhdGUsIHNpbmNlIHRoZXkgY2FuIGNoYW5nZSBkeW5hbWljYWxseVxuICAgICAgICBwcmltaXRpdmUuY2xlYXIoKTtcbiAgICAgICAgcHJpbWl0aXZlLmJlZ2luRmlsbCgwLCAwKTtcbiAgICAgICAgcHJpbWl0aXZlLmxpbmVTdHlsZShjb25zdHJhaW50UmVuZGVyLmxpbmVXaWR0aCwgQ29tbW9uLmNvbG9yVG9OdW1iZXIoY29uc3RyYWludFJlbmRlci5zdHJva2VTdHlsZSksIDEpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGJvZHlBKSB7XG4gICAgICAgICAgICBwcmltaXRpdmUubW92ZVRvKGJvZHlBLnBvc2l0aW9uLnggKyBwb2ludEEueCwgYm9keUEucG9zaXRpb24ueSArIHBvaW50QS55KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5tb3ZlVG8ocG9pbnRBLngsIHBvaW50QS55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5Qikge1xuICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVUbyhib2R5Qi5wb3NpdGlvbi54ICsgcG9pbnRCLngsIGJvZHlCLnBvc2l0aW9uLnkgKyBwb2ludEIueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmltaXRpdmUubGluZVRvKHBvaW50Qi54LCBwb2ludEIueSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcmltaXRpdmUuZW5kRmlsbCgpO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGJvZHlcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLmJvZHkgPSBmdW5jdGlvbihyZW5kZXIsIGJvZHkpIHtcbiAgICAgICAgdmFyIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBib2R5UmVuZGVyID0gYm9keS5yZW5kZXI7XG5cbiAgICAgICAgaWYgKCFib2R5UmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgaWYgKGJvZHlSZW5kZXIuc3ByaXRlICYmIGJvZHlSZW5kZXIuc3ByaXRlLnRleHR1cmUpIHtcbiAgICAgICAgICAgIHZhciBzcHJpdGVJZCA9ICdiLScgKyBib2R5LmlkLFxuICAgICAgICAgICAgICAgIHNwcml0ZSA9IHJlbmRlci5zcHJpdGVzW3Nwcml0ZUlkXSxcbiAgICAgICAgICAgICAgICBzcHJpdGVDb250YWluZXIgPSByZW5kZXIuc3ByaXRlQ29udGFpbmVyO1xuXG4gICAgICAgICAgICAvLyBpbml0aWFsaXNlIGJvZHkgc3ByaXRlIGlmIG5vdCBleGlzdGluZ1xuICAgICAgICAgICAgaWYgKCFzcHJpdGUpXG4gICAgICAgICAgICAgICAgc3ByaXRlID0gcmVuZGVyLnNwcml0ZXNbc3ByaXRlSWRdID0gX2NyZWF0ZUJvZHlTcHJpdGUocmVuZGVyLCBib2R5KTtcblxuICAgICAgICAgICAgLy8gYWRkIHRvIHNjZW5lIGdyYXBoIGlmIG5vdCBhbHJlYWR5IHRoZXJlXG4gICAgICAgICAgICBpZiAoQ29tbW9uLmluZGV4T2Yoc3ByaXRlQ29udGFpbmVyLmNoaWxkcmVuLCBzcHJpdGUpID09PSAtMSlcbiAgICAgICAgICAgICAgICBzcHJpdGVDb250YWluZXIuYWRkQ2hpbGQoc3ByaXRlKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIGJvZHkgc3ByaXRlXG4gICAgICAgICAgICBzcHJpdGUucG9zaXRpb24ueCA9IGJvZHkucG9zaXRpb24ueDtcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvbi55ID0gYm9keS5wb3NpdGlvbi55O1xuICAgICAgICAgICAgc3ByaXRlLnJvdGF0aW9uID0gYm9keS5hbmdsZTtcbiAgICAgICAgICAgIHNwcml0ZS5zY2FsZS54ID0gYm9keVJlbmRlci5zcHJpdGUueFNjYWxlIHx8IDE7XG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUueSA9IGJvZHlSZW5kZXIuc3ByaXRlLnlTY2FsZSB8fCAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHByaW1pdGl2ZUlkID0gJ2ItJyArIGJvZHkuaWQsXG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlID0gcmVuZGVyLnByaW1pdGl2ZXNbcHJpbWl0aXZlSWRdLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHJlbmRlci5jb250YWluZXI7XG5cbiAgICAgICAgICAgIC8vIGluaXRpYWxpc2UgYm9keSBwcmltaXRpdmUgaWYgbm90IGV4aXN0aW5nXG4gICAgICAgICAgICBpZiAoIXByaW1pdGl2ZSkge1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZSA9IHJlbmRlci5wcmltaXRpdmVzW3ByaW1pdGl2ZUlkXSA9IF9jcmVhdGVCb2R5UHJpbWl0aXZlKHJlbmRlciwgYm9keSk7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmluaXRpYWxBbmdsZSA9IGJvZHkuYW5nbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCB0byBzY2VuZSBncmFwaCBpZiBub3QgYWxyZWFkeSB0aGVyZVxuICAgICAgICAgICAgaWYgKENvbW1vbi5pbmRleE9mKGNvbnRhaW5lci5jaGlsZHJlbiwgcHJpbWl0aXZlKSA9PT0gLTEpXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFkZENoaWxkKHByaW1pdGl2ZSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBib2R5IHByaW1pdGl2ZVxuICAgICAgICAgICAgcHJpbWl0aXZlLnBvc2l0aW9uLnggPSBib2R5LnBvc2l0aW9uLng7XG4gICAgICAgICAgICBwcmltaXRpdmUucG9zaXRpb24ueSA9IGJvZHkucG9zaXRpb24ueTtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5yb3RhdGlvbiA9IGJvZHkuYW5nbGUgLSBwcmltaXRpdmUuaW5pdGlhbEFuZ2xlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBib2R5IHNwcml0ZVxuICAgICAqIEBtZXRob2QgX2NyZWF0ZUJvZHlTcHJpdGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UmVuZGVyUGl4aX0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHJldHVybiB7UElYSS5TcHJpdGV9IHNwcml0ZVxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgdmFyIF9jcmVhdGVCb2R5U3ByaXRlID0gZnVuY3Rpb24ocmVuZGVyLCBib2R5KSB7XG4gICAgICAgIHZhciBib2R5UmVuZGVyID0gYm9keS5yZW5kZXIsXG4gICAgICAgICAgICB0ZXh0dXJlUGF0aCA9IGJvZHlSZW5kZXIuc3ByaXRlLnRleHR1cmUsXG4gICAgICAgICAgICB0ZXh0dXJlID0gX2dldFRleHR1cmUocmVuZGVyLCB0ZXh0dXJlUGF0aCksXG4gICAgICAgICAgICBzcHJpdGUgPSBuZXcgUElYSS5TcHJpdGUodGV4dHVyZSk7XG5cbiAgICAgICAgc3ByaXRlLmFuY2hvci54ID0gYm9keS5yZW5kZXIuc3ByaXRlLnhPZmZzZXQ7XG4gICAgICAgIHNwcml0ZS5hbmNob3IueSA9IGJvZHkucmVuZGVyLnNwcml0ZS55T2Zmc2V0O1xuXG4gICAgICAgIHJldHVybiBzcHJpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBib2R5IHByaW1pdGl2ZVxuICAgICAqIEBtZXRob2QgX2NyZWF0ZUJvZHlQcmltaXRpdmVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UmVuZGVyUGl4aX0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHJldHVybiB7UElYSS5HcmFwaGljc30gZ3JhcGhpY3NcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIHZhciBfY3JlYXRlQm9keVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHJlbmRlciwgYm9keSkge1xuICAgICAgICB2YXIgYm9keVJlbmRlciA9IGJvZHkucmVuZGVyLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgcHJpbWl0aXZlID0gbmV3IFBJWEkuR3JhcGhpY3MoKSxcbiAgICAgICAgICAgIGZpbGxTdHlsZSA9IENvbW1vbi5jb2xvclRvTnVtYmVyKGJvZHlSZW5kZXIuZmlsbFN0eWxlKSxcbiAgICAgICAgICAgIHN0cm9rZVN0eWxlID0gQ29tbW9uLmNvbG9yVG9OdW1iZXIoYm9keVJlbmRlci5zdHJva2VTdHlsZSksXG4gICAgICAgICAgICBzdHJva2VTdHlsZUluZGljYXRvciA9IENvbW1vbi5jb2xvclRvTnVtYmVyKGJvZHlSZW5kZXIuc3Ryb2tlU3R5bGUpLFxuICAgICAgICAgICAgc3Ryb2tlU3R5bGVXaXJlZnJhbWUgPSBDb21tb24uY29sb3JUb051bWJlcignI2JiYicpLFxuICAgICAgICAgICAgc3Ryb2tlU3R5bGVXaXJlZnJhbWVJbmRpY2F0b3IgPSBDb21tb24uY29sb3JUb051bWJlcignI0NENUM1QycpLFxuICAgICAgICAgICAgcGFydDtcblxuICAgICAgICBwcmltaXRpdmUuY2xlYXIoKTtcblxuICAgICAgICAvLyBoYW5kbGUgY29tcG91bmQgcGFydHNcbiAgICAgICAgZm9yICh2YXIgayA9IGJvZHkucGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBrIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgcGFydCA9IGJvZHkucGFydHNba107XG5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmJlZ2luRmlsbChmaWxsU3R5bGUsIDEpO1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lU3R5bGUoYm9keVJlbmRlci5saW5lV2lkdGgsIHN0cm9rZVN0eWxlLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmJlZ2luRmlsbCgwLCAwKTtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUubGluZVN0eWxlKDEsIHN0cm9rZVN0eWxlV2lyZWZyYW1lLCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJpbWl0aXZlLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWzBdLnggLSBib2R5LnBvc2l0aW9uLngsIHBhcnQudmVydGljZXNbMF0ueSAtIGJvZHkucG9zaXRpb24ueSk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcGFydC52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lVG8ocGFydC52ZXJ0aWNlc1tqXS54IC0gYm9keS5wb3NpdGlvbi54LCBwYXJ0LnZlcnRpY2VzW2pdLnkgLSBib2R5LnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmltaXRpdmUubGluZVRvKHBhcnQudmVydGljZXNbMF0ueCAtIGJvZHkucG9zaXRpb24ueCwgcGFydC52ZXJ0aWNlc1swXS55IC0gYm9keS5wb3NpdGlvbi55KTtcblxuICAgICAgICAgICAgcHJpbWl0aXZlLmVuZEZpbGwoKTtcblxuICAgICAgICAgICAgLy8gYW5nbGUgaW5kaWNhdG9yXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93QW5nbGVJbmRpY2F0b3IgfHwgb3B0aW9ucy5zaG93QXhlcykge1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5iZWdpbkZpbGwoMCwgMCk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lU3R5bGUoMSwgc3Ryb2tlU3R5bGVXaXJlZnJhbWVJbmRpY2F0b3IsIDEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lU3R5bGUoMSwgc3Ryb2tlU3R5bGVJbmRpY2F0b3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5tb3ZlVG8ocGFydC5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvbi54LCBwYXJ0LnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lVG8oKChwYXJ0LnZlcnRpY2VzWzBdLnggKyBwYXJ0LnZlcnRpY2VzW3BhcnQudmVydGljZXMubGVuZ3RoLTFdLngpIC8gMiAtIGJvZHkucG9zaXRpb24ueCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChwYXJ0LnZlcnRpY2VzWzBdLnkgKyBwYXJ0LnZlcnRpY2VzW3BhcnQudmVydGljZXMubGVuZ3RoLTFdLnkpIC8gMiAtIGJvZHkucG9zaXRpb24ueSkpO1xuXG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmVuZEZpbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcmltaXRpdmU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlcXVlc3RlZCB0ZXh0dXJlIChhIFBJWEkuVGV4dHVyZSkgdmlhIGl0cyBwYXRoXG4gICAgICogQG1ldGhvZCBfZ2V0VGV4dHVyZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtSZW5kZXJQaXhpfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW1hZ2VQYXRoXG4gICAgICogQHJldHVybiB7UElYSS5UZXh0dXJlfSB0ZXh0dXJlXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICB2YXIgX2dldFRleHR1cmUgPSBmdW5jdGlvbihyZW5kZXIsIGltYWdlUGF0aCkge1xuICAgICAgICB2YXIgdGV4dHVyZSA9IHJlbmRlci50ZXh0dXJlc1tpbWFnZVBhdGhdO1xuXG4gICAgICAgIGlmICghdGV4dHVyZSlcbiAgICAgICAgICAgIHRleHR1cmUgPSByZW5kZXIudGV4dHVyZXNbaW1hZ2VQYXRoXSA9IFBJWEkuVGV4dHVyZS5mcm9tSW1hZ2UoaW1hZ2VQYXRoKTtcblxuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOH1dfSx7fSxbMzBdKSgzMClcbn0pO1xuIiwiaW1wb3J0IE1hdHRlciBmcm9tIFwibWF0dGVyLWpzXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi91dGlsc1wiXG5pbXBvcnQgeyBXb3JsZEV4dGVuZGVkIH0gZnJvbSBcIi4vZXh0dHlwZXNcIjtcblxuXG5leHBvcnQgY29uc3QgYW50aUdyYXZpdHlNYW5oYXR0YW4gPSAoc3JjOiBNYXR0ZXIuQm9keSwgdGd0OiBNYXR0ZXIuQm9keSwgY29lZmYgPSAxMDApOiBNYXR0ZXIuVmVjdG9yID0+IHtcbiAgICBsZXQgZyA9IGNvZWZmO1xuICAgIGxldCBkeCA9IHV0aWxzLmRpc3RIb3JpeihzcmMucG9zaXRpb24sIHRndC5wb3NpdGlvbik7XG4gICAgbGV0IGR5ID0gdXRpbHMuZGlzdFZlcnRpKHNyYy5wb3NpdGlvbiwgdGd0LnBvc2l0aW9uKTtcbiAgICAvLyBjaGFyYWN0ZXJpc3RpYyBzaXplXG4gICAgbGV0IGNoYXJTaXplID0gMC41ICogKE1hdGguc3FydChzcmMuYXJlYSkgKyBNYXRoLnNxcnQodGd0LmFyZWEpKTtcbiAgICBsZXQgYW50aUdyYXZpdHlNYWdYID0gKGR4IDwgMS41ICogY2hhclNpemUpID8gZyAvICgxMDAwICsgZHggKiogMikgOiAwO1xuICAgIGxldCBhbnRpR3Jhdml0eU1hZ1kgPSAoZHkgPCAxLjUgKiBjaGFyU2l6ZSkgPyBnIC8gKDEwMDAgKyBkeSAqKiAyKSA6IDA7XG4gICAgbGV0IGZvcmNlID0ge1xuICAgICAgICB4OiBhbnRpR3Jhdml0eU1hZ1gsXG4gICAgICAgIHk6IGFudGlHcmF2aXR5TWFnWSxcbiAgICB9O1xuICAgIHJldHVybiBmb3JjZTtcbn1cblxuXG5leHBvcnQgY29uc3QgYW50aUdyYXZpdHlSYW5nZWQgPSAoc3JjOiBNYXR0ZXIuQm9keSwgdGd0OiBNYXR0ZXIuQm9keSwgY29lZmYgPSAxMDAsIHJhbmdlRmFjdG9yID0gMy4wKTogTWF0dGVyLlZlY3RvciA9PiB7XG4gICAgbGV0IGQgPSB1dGlscy5kaXN0RXVjbGlkKHNyYy5wb3NpdGlvbiwgdGd0LnBvc2l0aW9uKTtcbiAgICAvLyBjaGFyYWN0ZXJpc3RpYyBzaXplXG4gICAgbGV0IGNoYXJTaXplID0gMC41ICogKE1hdGguc3FydChzcmMuYXJlYSkgKyBNYXRoLnNxcnQodGd0LmFyZWEpKTtcbiAgICBsZXQgYW50aUdyYXZpdHlNYWcgPSAoZCA8IHJhbmdlRmFjdG9yICogY2hhclNpemUpID8gY29lZmYgLyBkICoqIDIgOiAwO1xuICAgIGxldCB1bml0U3JjVG9UZ3QgPSB1dGlscy51bml0VmVjKHNyYy5wb3NpdGlvbiwgdGd0LnBvc2l0aW9uKVxuICAgIGxldCBmb3JjZSA9IHtcbiAgICAgICAgeDogYW50aUdyYXZpdHlNYWcgKiB1bml0U3JjVG9UZ3QueCxcbiAgICAgICAgeTogYW50aUdyYXZpdHlNYWcgKiB1bml0U3JjVG9UZ3QueSxcbiAgICB9O1xuICAgIHJldHVybiBmb3JjZTtcbn1cblxuXG5leHBvcnQgY29uc3QgYW50aUdyYXZpdHkgPSAoc3JjOiBNYXR0ZXIuQm9keSwgdGd0OiBNYXR0ZXIuQm9keSwgY29lZmYgPSAxMDApOiBNYXR0ZXIuVmVjdG9yID0+IHtcbiAgICBsZXQgZCA9IHV0aWxzLmRpc3RFdWNsaWQoc3JjLnBvc2l0aW9uLCB0Z3QucG9zaXRpb24pO1xuICAgIGxldCBhbnRpR3Jhdml0eU1hZyA9IGNvZWZmIC8gZCAqKiAyO1xuICAgIGxldCB1bml0U3JjVG9UZ3QgPSB1dGlscy51bml0VmVjKHNyYy5wb3NpdGlvbiwgdGd0LnBvc2l0aW9uKVxuICAgIGxldCBmb3JjZSA9IHtcbiAgICAgICAgeDogYW50aUdyYXZpdHlNYWcgKiB1bml0U3JjVG9UZ3QueCxcbiAgICAgICAgeTogYW50aUdyYXZpdHlNYWcgKiB1bml0U3JjVG9UZ3QueSxcbiAgICB9O1xuICAgIHJldHVybiBmb3JjZTtcbn1cblxuXG5leHBvcnQgY29uc3QgYXBwbHlBbnRpR3Jhdml0eVR3b0JvZHkgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIHNyYzogTWF0dGVyLkJvZHksIHRndDogTWF0dGVyLkJvZHkpID0+IHtcbiAgICBjb25zdCBmID0gKHM6IE1hdHRlci5Cb2R5LCB0OiBNYXR0ZXIuQm9keSk6IE1hdHRlci5WZWN0b3IgPT4ge1xuICAgICAgICByZXR1cm4gYW50aUdyYXZpdHlSYW5nZWQocywgdCwgd29ybGQucmVwdWxzaW9uQ29lZmYsIHdvcmxkLnJlcHVsc2lvblJhbmdlKTtcbiAgICB9O1xuXG4gICAgLy8gd2FsbCBzaG91bGQgbm90IGJlIGludm9sdmVkXG4gICAgaWYgKCFzcmMuaXNTdGF0aWMgJiYgIXRndC5pc1N0YXRpYykge1xuICAgICAgICBsZXQgZm9yY2VBbnRpR3Jhdml0eSA9IGYoc3JjLCB0Z3QpO1xuICAgICAgICAvLyBhbnRpZ3Jhdml0eSBleGVydHMgb24gdGhlIGNlbnRlciBvZiBhIGJsb2NrXG4gICAgICAgIE1hdHRlci5Cb2R5LmFwcGx5Rm9yY2UodGd0LCB0Z3QucG9zaXRpb24sIGZvcmNlQW50aUdyYXZpdHkpO1xuICAgICAgICBNYXR0ZXIuQm9keS5hcHBseUZvcmNlKHNyYywgc3JjLnBvc2l0aW9uLCB1dGlscy5uZWdhdGUoZm9yY2VBbnRpR3Jhdml0eSkpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgY29uc3QgYXBwbHlBbnRpR3Jhdml0eSA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgYmxvY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBhcHBseUFudGlHcmF2aXR5VHdvQm9keSh3b3JsZCwgYmxvY2tzW2ldLCBibG9ja3Nbal0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgcmFuZ2UgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG50eXBlIE5vZGUgPSBzdHJpbmcgfCBudW1iZXI7XG50eXBlIEluZGV4ID0gbnVtYmVyO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuaW9uRmluZCB7XG4gIGxlbjogbnVtYmVyO1xuICBwYXJlbnQ6IG51bWJlcltdO1xuICB0cmFuc2xhdGU6IE1hcDxOb2RlLCBJbmRleD47XG5cbiAgY29uc3RydWN0b3IoYXJnOiBudW1iZXIgfCBOb2RlW10pIHtcbiAgICBpZiAodHlwZW9mIGFyZyA9PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5sZW4gPSBhcmc7XG4gICAgICB0aGlzLnRyYW5zbGF0ZSA9IG5ldyBNYXAocmFuZ2UoYXJnKS5tYXAoKF8sIGkpID0+IFtpLCBpXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxlbiA9IGFyZy5sZW5ndGg7XG4gICAgICB0aGlzLnRyYW5zbGF0ZSA9IG5ldyBNYXAoYXJnLm1hcCgodiwgaSkgPT4gW3YsIGldKSk7XG4gICAgfVxuICAgIHRoaXMucGFyZW50ID0gcmFuZ2UodGhpcy5sZW4pLm1hcChfID0+IC0xKTtcbiAgfVxuXG4gIF9pc1Jvb3QoeDogSW5kZXgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnRbeF0gPCAwO1xuICB9XG5cbiAgX3Jvb3QoeDogSW5kZXgpOiBJbmRleCB7XG4gICAgd2hpbGUgKCF0aGlzLl9pc1Jvb3QoeCkpIHtcbiAgICAgIHggPSB0aGlzLnBhcmVudFt4XTtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG4gIH1cblxuICBfZGVwdGgoeDogSW5kZXgpOiBJbmRleCB7XG4gICAgcmV0dXJuIC10aGlzLnBhcmVudFt0aGlzLl9yb290KHgpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBpbmRleC4gQWRkIHRvIHRoaXMuX3RyYW5zbGF0ZSBpZiBhYnNlbnQuXG4gICAqIEBwYXJhbSB4XG4gICAqL1xuICBfaW5kZXgoeDogTm9kZSk6IEluZGV4IHtcbiAgICBsZXQgdG1wID0gdGhpcy50cmFuc2xhdGUuZ2V0KHgpO1xuICAgIGxldCBpeDogSW5kZXg7XG4gICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpeCA9IHRoaXMubGVuO1xuICAgICAgdGhpcy50cmFuc2xhdGUuc2V0KHgsIGl4KTtcbiAgICAgIHRoaXMubGVuICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl4ID0gdG1wO1xuICAgIH1cbiAgICByZXR1cm4gaXg7XG4gIH1cblxuICBhcmVDb25uZWN0ZWQoeDogTm9kZSwgeTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGxldCBpeCA9IHRoaXMuX2luZGV4KHgpO1xuICAgIGxldCBpeSA9IHRoaXMuX2luZGV4KHkpO1xuICAgIHJldHVybiB0aGlzLl9yb290KGl4KSA9PSB0aGlzLl9yb290KGl5KTtcbiAgfVxuXG4gIGNvbm5lY3QoeDogTm9kZSwgeTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGxldCBpeCA9IHRoaXMuX2luZGV4KHgpO1xuICAgIGxldCBpeSA9IHRoaXMuX2luZGV4KHkpO1xuICAgIGlmICh0aGlzLl9kZXB0aChpeCkgPCB0aGlzLl9kZXB0aChpeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QoeSwgeCk7XG4gICAgfVxuICAgIGxldCByb290WCA9IHRoaXMuX3Jvb3QoaXgpO1xuICAgIGxldCByb290WSA9IHRoaXMuX3Jvb3QoaXkpO1xuICAgIGlmIChyb290WCA9PSByb290WSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudFtyb290WF0gKz0gdGhpcy5wYXJlbnRbcm9vdFldO1xuICAgIHRoaXMucGFyZW50W3Jvb3RZXSA9IHJvb3RYO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0Um9vdEFsbCgpOiBJbmRleFtdIHtcbiAgICByZXR1cm4gcmFuZ2UodGhpcy5sZW4pLm1hcChpID0+IHRoaXMuX3Jvb3QoaSkpO1xuICB9O1xufVxuXG5cbmNsYXNzIE11bHRpU2V0PFQ+IHtcbiAgY291bnRlcjogTWFwPFQsIG51bWJlcj47XG4gIGNvbnN0cnVjdG9yKHhzPzogVFtdKSB7XG4gICAgdGhpcy5jb3VudGVyID0gbmV3IE1hcDxULCBudW1iZXI+KCk7XG4gICAgaWYgKHhzKSB7XG4gICAgICB4cy5mb3JFYWNoKHggPT4gdGhpcy5hZGQoeCkpO1xuICAgIH1cbiAgfVxuXG4gIGFkZCh4OiBUKSB7XG4gICAgdGhpcy5jb3VudGVyLnNldCh4LCAodGhpcy5jb3VudGVyLmdldCh4KSA/PyAwKSArIDEpXG4gIH1cblxuICBnZXQoeDogVCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY291bnRlci5nZXQoeCkgPz8gMDtcbiAgfVxuXG4gIGhhcyh4OiBUKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY291bnRlci5oYXMoeCk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLmNvdW50ZXIuY2xlYXIoKTtcbiAgfVxufVxuIiwiaW1wb3J0IE1hdHRlciBmcm9tIFwibWF0dGVyLWpzXCI7XG5pbXBvcnQgeyBhbnRpR3Jhdml0eSwgYW50aUdyYXZpdHlSYW5nZWQgfSBmcm9tIFwiLi9yZXB1bHNpb25cIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBXb3JsZEV4dGVuZGVkIH0gZnJvbSBcIi4vZXh0dHlwZXNcIjtcbmltcG9ydCBVbmlvbkZpbmQgZnJvbSBcIi4vdW5pb25maW5kXCI7XG5cblxuZXhwb3J0IGNvbnN0IGFwcGx5QW50aUdyYXZpdHlEaXNqb2ludCA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdLCB1Zlg6IFVuaW9uRmluZCwgdWZZOiBVbmlvbkZpbmQpID0+IHtcbiAgY29uc3QgZiA9IChzOiBNYXR0ZXIuQm9keSwgdDogTWF0dGVyLkJvZHkpOiBNYXR0ZXIuVmVjdG9yID0+IHtcbiAgICByZXR1cm4gYW50aUdyYXZpdHlSYW5nZWQocywgdCwgd29ybGQucmVwdWxzaW9uQ29lZmYsIHdvcmxkLnJlcHVsc2lvblJhbmdlKTtcbiAgfTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJsb2Nrcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGJsb2Nrcy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IHNyYyA9IGJsb2Nrc1tpXTtcbiAgICAgIGxldCB0Z3QgPSBibG9ja3Nbal07XG4gICAgICBpZiAoIXNyYy5pc1N0YXRpYyAmJiAhdGd0LmlzU3RhdGljKSB7XG4gICAgICAgIGxldCBmb3JjZSA9IGYoc3JjLCB0Z3QpO1xuICAgICAgICBpZiAodWZYLmFyZUNvbm5lY3RlZChpLCBqKSkge1xuICAgICAgICAgIGZvcmNlLnggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1ZlkuYXJlQ29ubmVjdGVkKGksIGopKSB7XG4gICAgICAgICAgZm9yY2UueSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZSh0Z3QsIHRndC5wb3NpdGlvbiwgZm9yY2UpXG4gICAgICAgIE1hdHRlci5Cb2R5LmFwcGx5Rm9yY2Uoc3JjLCBzcmMucG9zaXRpb24sIHV0aWxzLm5lZ2F0ZShmb3JjZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbmNvbnN0IGFwcGx5R3JvdXBpbmdUd29Cb2R5ID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBzcmM6IE1hdHRlci5Cb2R5LCB0Z3Q6IE1hdHRlci5Cb2R5KSA9PiB7XG4gIGNvbnN0IGYgPSAoczogTWF0dGVyLkJvZHksIHQ6IE1hdHRlci5Cb2R5KTogTWF0dGVyLlZlY3RvciA9PiBhbnRpR3Jhdml0eShzLCB0LCB3b3JsZC5ncm91cGluZ0NvZWZmKTtcblxuICAvLyB3YWxsIHNob3VsZCBub3QgYmUgaW52b2x2ZWRcbiAgaWYgKCFzcmMuaXNTdGF0aWMgJiYgIXRndC5pc1N0YXRpYykge1xuICAgIGxldCBmb3JjZUFudGlHcmF2aXR5ID0gZihzcmMsIHRndCk7XG5cbiAgICAvLyBleGVydCBhdHRyYWN0aXZlIGZvcmNlIGlmIGJsb2NrcyBhcmUgb2YgdGhlIHNhbWUgZ3JvdXBcbiAgICBpZiAodXRpbHMuYXJlU2FtZVdpZHRoKHNyYywgdGd0KSB8fCB1dGlscy5hcmVTYW1lSGVpZ2h0KHNyYywgdGd0KSkge1xuICAgICAgZm9yY2VBbnRpR3Jhdml0eSA9IHV0aWxzLm5lZ2F0ZShmb3JjZUFudGlHcmF2aXR5KTtcbiAgICB9XG4gICAgLy8gYW50aWdyYXZpdHkgZXhlcnRzIG9uIHRoZSBjZW50ZXIgb2YgYSBibG9ja1xuICAgIE1hdHRlci5Cb2R5LmFwcGx5Rm9yY2UodGd0LCB0Z3QucG9zaXRpb24sIGZvcmNlQW50aUdyYXZpdHkpO1xuICAgIE1hdHRlci5Cb2R5LmFwcGx5Rm9yY2Uoc3JjLCBzcmMucG9zaXRpb24sIHV0aWxzLm5lZ2F0ZShmb3JjZUFudGlHcmF2aXR5KSk7XG4gIH1cbn1cblxuXG5leHBvcnQgY29uc3QgYXBwbHlHcm91cGluZyA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgYmxvY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICBhcHBseUdyb3VwaW5nVHdvQm9keSh3b3JsZCwgYmxvY2tzW2ldLCBibG9ja3Nbal0pO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgS25vbGxib3QgfSBmcm9tIFwiLi9rbm9sbGJvdFwiO1xuXG5Lbm9sbGJvdC5ydW4oKTtcbiIsImltcG9ydCBNYXR0ZXIgZnJvbSBcIm1hdHRlci1qc1wiO1xuXG5pbXBvcnQgeyBXb3JsZEV4dGVuZGVkIH0gZnJvbSBcIi4vZXh0dHlwZXNcIjtcbmltcG9ydCB7IGltZ1BhdGhzLCBwYXJhbXMgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgKiBhcyByZXB1bHNpb24gZnJvbSBcIi4vcmVwdWxzaW9uXCI7XG5pbXBvcnQgKiBhcyBhbGlnbiBmcm9tIFwiLi9hbGlnbm1lbnRcIjtcbmltcG9ydCAqIGFzIGdyb3VwaW5nIGZyb20gXCIuL2dyb3VwaW5nXCI7XG5pbXBvcnQgKiBhcyBwb2tlIGZyb20gXCIuL3JhbmRvbXBva2VzXCI7XG5cblxuZXhwb3J0IG5hbWVzcGFjZSBLbm9sbGJvdCB7XG5cbiAgICBleHBvcnQgY29uc3QgcnVuID0gKCkgPT4ge1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhbiBlbmdpbmUgYW5kIHJ1bm5lclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBNYXR0ZXIuRW5naW5lLmNyZWF0ZSgpO1xuICAgICAgICBjb25zdCB3b3JsZCA9IGVuZ2luZS53b3JsZCBhcyBXb3JsZEV4dGVuZGVkO1xuICAgICAgICBjb25zdCBydW5uZXIgPSBNYXR0ZXIuUnVubmVyLmNyZWF0ZSgpO1xuXG4gICAgICAgIC8vIGRpc2FibGUgZ3Jhdml0eVxuICAgICAgICB3b3JsZC5ncmF2aXR5LnkgPSAwLjA7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gU2NyZWVuIHBhcmFtZXRlcnNcbiAgICAgICAgY29uc3QgU2NyZWVuV2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLSAyMDtcbiAgICAgICAgY29uc3QgU2NyZWVuSGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCAtIDIwO1xuICAgICAgICBjb25zdCBTY3JlZW5XaWR0aEhhbGYgPSBNYXRoLmZsb29yKFNjcmVlbldpZHRoIC8gMik7XG4gICAgICAgIGNvbnN0IFNjcmVlbkhlaWdodEhhbGYgPSBNYXRoLmZsb29yKFNjcmVlbkhlaWdodCAvIDIpO1xuXG4gICAgICAgIC8vIFdhbGwgcGFyYW1ldGVyc1xuICAgICAgICBjb25zdCBXYWxsVGhpY2tuZXNzID0gMjAwO1xuICAgICAgICBjb25zdCBXYWxsTWFyZ2luID0gMTAwO1xuICAgICAgICBjb25zdCBXYWxsVmlzaWJsZSA9IDU7XG4gICAgICAgIGNvbnN0IFdhbGxPZmZzZXQgPSBNYXRoLmZsb29yKFdhbGxUaGlja25lc3MgLyAyKSAtIFdhbGxWaXNpYmxlO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIE9iamVjdCBwYXJhbWV0ZXJzXG4gICAgICAgIGNvbnN0IE51bUJveGVzID0gaW1nUGF0aHMubGVuZ3RoO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFJhbmRvbSBwb2tpbmdcbiAgICAgICAgd29ybGQucG9rZVNjYWxlID0gcGFyYW1zLnBva2VTY2FsZTtcblxuICAgICAgICAvLyBBbGlnbm1lbnQgZm9yY2VcbiAgICAgICAgd29ybGQuYWxpZ25tZW50Rm9yY2VDb2VmZiA9IHBhcmFtcy5hbGlnbm1lbnRGb3JjZUNvZWZmO1xuICAgICAgICB3b3JsZC5hbGlnbm1lbnRGb3JjZVJhbmdlID0gcGFyYW1zLmFsaWdubWVudEZvcmNlUmFuZ2U7ICAvLyBwaXhlbHNcbiAgICAgICAgd29ybGQuYWxpZ25tZW50Rm9yY2VXYWxsUmFuZ2UgPSBwYXJhbXMuYWxpZ25tZW50Rm9yY2VXYWxsUmFuZ2U7XG5cbiAgICAgICAgLy8gQW50aUdyYXZpdHkgZm9yY2VcbiAgICAgICAgd29ybGQucmVwdWxzaW9uQ29lZmYgPSBwYXJhbXMucmVwdWxzaW9uQ29lZmY7XG4gICAgICAgIHdvcmxkLnJlcHVsc2lvblJhbmdlID0gcGFyYW1zLnJlcHVsc2lvblJhbmdlOyAgICAgIC8vIE5PVCBwaXhlbHNcblxuICAgICAgICAvLyBHcm91cGluZyBhdHRyYWN0aW9uL3JlcHVsc2lvblxuICAgICAgICB3b3JsZC5ncm91cGluZ0NvZWZmID0gcGFyYW1zLmdyb3VwaW5nQ29lZmY7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gY3JlYXRlIGEgcmVuZGVyZXJcbiAgICAgICAgY29uc3QgcmVuZGVyID0gTWF0dGVyLlJlbmRlci5jcmVhdGUoe1xuICAgICAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuYm9keSxcbiAgICAgICAgICAgIGVuZ2luZTogZW5naW5lLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBTY3JlZW5XaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IFNjcmVlbkhlaWdodCxcbiAgICAgICAgICAgICAgICAvLyBzaG93QW5nbGVJbmRpY2F0b3I6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1ZlbG9jaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3aXJlZnJhbWVzOiBmYWxzZSwgICAgLy8gcmVxdWlyZWQgdG8gZW5hYmxlIHNwcml0ZXMhXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyMyNDdjNDEnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIHR3byBib3hlc1xuICAgICAgICBjb25zdCBib2R5T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGluZXJ0aWE6IEluZmluaXR5LFxuICAgICAgICAgICAgZnJpY3Rpb25BaXI6IHBhcmFtcy5mcmljdGlvbkFpcixcbiAgICAgICAgICAgIGZyaWN0aW9uOiBwYXJhbXMuZnJpY3Rpb24sXG4gICAgICAgIH07XG5cblxuICAgICAgICAvLyBnZW5lcmF0ZSBib3hlcyByYW5kb21seVxuICAgICAgICBjb25zdCBnZW5lcmF0ZVJhbmRvbUJveGVzID0gKCk6IE1hdHRlci5Cb2R5W10gPT4ge1xuICAgICAgICAgICAgY29uc3QgYWxsU3F1YXJlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBNaW5TaXplWCA9IDMwO1xuICAgICAgICAgICAgY29uc3QgTWF4U2l6ZVggPSAxNzA7XG4gICAgICAgICAgICBjb25zdCBNaW5TaXplWSA9IDMwO1xuICAgICAgICAgICAgY29uc3QgTWF4U2l6ZVkgPSAxNzA7XG4gICAgICAgICAgICBjb25zdCBVbml0U2l6ZSA9IDE2O1xuXG4gICAgICAgICAgICBjb25zdCBib3hlcyA9IEFycmF5PE1hdHRlci5Cb2R5PihOdW1Cb3hlcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE51bUJveGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0V2lkdGggPSB1dGlscy5yYW5kUmFuZ2UoTWluU2l6ZVgsIE1heFNpemVYLCBVbml0U2l6ZSk7XG4gICAgICAgICAgICAgICAgbGV0IHJlY3RIZWlnaHQgPSByZWN0V2lkdGg7XG4gICAgICAgICAgICAgICAgaWYgKCFhbGxTcXVhcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdEhlaWdodCA9IHV0aWxzLnJhbmRSYW5nZShNaW5TaXplWSwgTWF4U2l6ZVksIFVuaXRTaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IFdhbGxPZmZzZXQgKyByZWN0V2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSBXYWxsT2Zmc2V0ICsgcmVjdEhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHV0aWxzLnJhbmRSYW5nZShvZmZzZXRYLCBTY3JlZW5XaWR0aCAtIG9mZnNldFgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB1dGlscy5yYW5kUmFuZ2Uob2Zmc2V0WSwgU2NyZWVuSGVpZ2h0IC0gb2Zmc2V0WSk7XG4gICAgICAgICAgICAgICAgYm94ZXNbaV0gPSBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSh4LCB5LCByZWN0V2lkdGgsIHJlY3RIZWlnaHQsIGJvZHlPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBib3hlcztcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NTkzNDI0MS81MjQ1MjZcbiAgICAgICAgY29uc3QgZ2V0SW1hZ2VEaW1lbnNpb25zID0gKHBhdGg6IHN0cmluZykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgaGFuZGxlciB3aWxsIGZpcmUgYWZ0ZXIgdGhlIHN1Y2Nlc3NmdWwgbG9hZGluZyBvZiB0aGUgaW1hZ2VcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IHdpZHRoLCBuYXR1cmFsSGVpZ2h0OiBoZWlnaHQgfSA9IGltZztcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgd2lkdGgsIGhlaWdodCB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGFuZCB0aGlzIGhhbmRsZXIgd2lsbCBmaXJlIGlmIHRoZXJlIHdhcyBhbiBlcnJvciB3aXRoIHRoZSBpbWFnZSAobGlrZSBpZiBpdCdzIG5vdCByZWFsbHkgYW4gaW1hZ2Ugb3IgYSBjb3JydXB0ZWQgb25lKVxuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdUaGVyZSB3YXMgc29tZSBwcm9ibGVtIHdpdGggdGhlIGltYWdlLicpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1nLnNyYyA9IHBhdGg7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgY29uc3QgZ2V0Qm94ID0gYXN5bmMgKGltZ1BhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgbGV0IGltZyA9IGF3YWl0IGdldEltYWdlRGltZW5zaW9ucyhpbWdQYXRoKSBhcyB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH07XG4gICAgICAgICAgICBsZXQgb2Zmc2V0WCA9IFdhbGxPZmZzZXQgKyBpbWcud2lkdGggLyAyO1xuICAgICAgICAgICAgbGV0IG9mZnNldFkgPSBXYWxsT2Zmc2V0ICsgaW1nLmhlaWdodCAvIDI7XG4gICAgICAgICAgICBsZXQgeCA9IHV0aWxzLnJhbmRSYW5nZShvZmZzZXRYLCBTY3JlZW5XaWR0aCAtIG9mZnNldFgpO1xuICAgICAgICAgICAgbGV0IHkgPSB1dGlscy5yYW5kUmFuZ2Uob2Zmc2V0WSwgU2NyZWVuSGVpZ2h0IC0gb2Zmc2V0WSk7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAuLi5ib2R5T3B0aW9ucyxcbiAgICAgICAgICAgICAgICByZW5kZXI6IHsgc3ByaXRlOiB7IHRleHR1cmU6IGltZ1BhdGggfSB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZSh4LCB5LCBpbWcud2lkdGgsIGltZy5oZWlnaHQsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHByb21pc2VkQm94ZXMgPSBQcm9taXNlLmFsbChpbWdQYXRocy5tYXAoZ2V0Qm94KSk7XG5cbiAgICAgICAgLy8gc3Vycm91bmRpbmcgd2FsbFxuICAgICAgICBjb25zdCB3YWxsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGlzU3RhdGljOiB0cnVlLFxuICAgICAgICAgICAgZnJpY3Rpb246IHBhcmFtcy53YWxsRnJpY3Rpb24sXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB3YWxsVG9wID0gTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoXG4gICAgICAgICAgICBTY3JlZW5XaWR0aEhhbGYsXG4gICAgICAgICAgICAtV2FsbE9mZnNldCxcbiAgICAgICAgICAgIFNjcmVlbldpZHRoICsgV2FsbE1hcmdpbixcbiAgICAgICAgICAgIFdhbGxUaGlja25lc3MsXG4gICAgICAgICAgICB3YWxsT3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgd2FsbEJvdHRvbSA9IE1hdHRlci5Cb2RpZXMucmVjdGFuZ2xlKFxuICAgICAgICAgICAgU2NyZWVuV2lkdGhIYWxmLFxuICAgICAgICAgICAgU2NyZWVuSGVpZ2h0ICsgV2FsbE9mZnNldCxcbiAgICAgICAgICAgIFNjcmVlbldpZHRoICsgV2FsbE1hcmdpbixcbiAgICAgICAgICAgIFdhbGxUaGlja25lc3MsXG4gICAgICAgICAgICB3YWxsT3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgd2FsbExlZnQgPSBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZShcbiAgICAgICAgICAgIC0gV2FsbE9mZnNldCxcbiAgICAgICAgICAgIFNjcmVlbkhlaWdodEhhbGYsXG4gICAgICAgICAgICBXYWxsVGhpY2tuZXNzLFxuICAgICAgICAgICAgU2NyZWVuSGVpZ2h0ICsgV2FsbE1hcmdpbixcbiAgICAgICAgICAgIHdhbGxPcHRpb25zLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCB3YWxsUmlnaHQgPSBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZShcbiAgICAgICAgICAgIFNjcmVlbldpZHRoICsgV2FsbE9mZnNldCxcbiAgICAgICAgICAgIFNjcmVlbkhlaWdodEhhbGYsXG4gICAgICAgICAgICBXYWxsVGhpY2tuZXNzLFxuICAgICAgICAgICAgU2NyZWVuSGVpZ2h0ICsgV2FsbE1hcmdpbixcbiAgICAgICAgICAgIHdhbGxPcHRpb25zLFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIG1vdXNlIGFuZCBjb25zdHJhaW50XG4gICAgICAgIGNvbnN0IG1vdXNlID0gTWF0dGVyLk1vdXNlLmNyZWF0ZShyZW5kZXIuY2FudmFzKTtcbiAgICAgICAgY29uc3QgY29uc3RyYWludCA9IE1hdHRlci5Db25zdHJhaW50LmNyZWF0ZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBNdXN0IGRlZmluZSBwb2ludEEgYW5kIHBvaW50QiB1bmxpa2UgSUNvbnN0cmFpbnREZWZpbml0aW9uIGludGVyZmFjZVxuICAgICAgICAgICAgICAgIHBvaW50QTogbW91c2UucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgcG9pbnRCOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgICAgICBzdGlmZm5lc3M6IDAuMixcbiAgICAgICAgICAgICAgICByZW5kZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1vdXNlQ29uc3RyYWludCA9IE1hdHRlci5Nb3VzZUNvbnN0cmFpbnQuY3JlYXRlKFxuICAgICAgICAgICAgZW5naW5lLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG1vdXNlOiBtb3VzZSxcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50OiBjb25zdHJhaW50LFxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGBibG9ja3NgIGlzIHRvIGNvbnRhaW4gYm94ZXMsIHdhbGxzLCBhbmQgbW91c2UgY29uc3RyYWludHNcbiAgICAgICAgdmFyIGJsb2NrczogTWF0dGVyLkJvZHlbXTtcblxuICAgICAgICBjb25zdCBzZXR1cFdvcmxkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGJveGVzID0gYXdhaXQgcHJvbWlzZWRCb3hlcztcbiAgICAgICAgICAgIGJsb2NrcyA9IFsuLi5ib3hlcywgd2FsbFRvcCwgd2FsbEJvdHRvbSwgd2FsbExlZnQsIHdhbGxSaWdodF1cbiAgICAgICAgICAgIE1hdHRlci5Xb3JsZC5hZGQod29ybGQsIGJsb2Nrcyk7XG4gICAgICAgICAgICBNYXR0ZXIuV29ybGQuYWRkKHdvcmxkLCBtb3VzZUNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgTWF0dGVyLlJ1bm5lci5ydW4ocnVubmVyLCBlbmdpbmUpO1xuICAgICAgICAgICAgTWF0dGVyLlJlbmRlci5ydW4ocmVuZGVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZXR1cFdvcmxkKCk7XG5cblxuICAgICAgICAvLyBtYWluIGxvb3BcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICBNYXR0ZXIuRXZlbnRzLm9uKGVuZ2luZSwgJ2JlZm9yZVVwZGF0ZScsIChldmVudDogTWF0dGVyLkV2ZW50cykgPT4ge1xuICAgICAgICAgICAgY291bnRlciArPSAxO1xuICAgICAgICAgICAgaWYgKGNvdW50ZXIgJSAzMDAgPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY291bnRlcjogXCIsIGNvdW50ZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY291bnRlciA8IDE4MCkge1xuICAgICAgICAgICAgICAgIGdyb3VwaW5nLmFwcGx5R3JvdXBpbmcod29ybGQsIGJsb2Nrcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvdW50ZXIgPCAyNDApIHtcbiAgICAgICAgICAgICAgICByZXB1bHNpb24uYXBwbHlBbnRpR3Jhdml0eSh3b3JsZCwgYmxvY2tzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxpZ24uYXBwbHlBbGlnbm1lbnQod29ybGQsIGJsb2Nrcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb3VudGVyICUgMTAgPT0gOSkge1xuICAgICAgICAgICAgICAgIHdvcmxkLnBva2VTY2FsZSAqPSBwYXJhbXMucG9rZVNjYWxlRGVjYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2tlLmFwcGx5UmFuZG9tUG9rZXMod29ybGQsIGJsb2Nrcyk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gUm90YXRlIGEgYmxvY2sgYnkgZG91YmxlIGNsaWNraW5nXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYC0tLSBEb3VibGUgY2xpY2sgYXQgdD0ke2NvdW50ZXJ9IC0tLWApO1xuICAgICAgICAgICAgYmxvY2tzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihiID0+ICghYi5pc1N0YXRpYykgJiYgTWF0dGVyLkJvdW5kcy5jb250YWlucyhiLmJvdW5kcywgbW91c2UucG9zaXRpb24pKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGIgPT4gTWF0dGVyLkJvZHkucm90YXRlKGIsIE1hdGguUEkgLyAyKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJvdGF0ZSBhIGJsb2NrIGJ5IHRvdWNoIHJvdGF0aW9uXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIChlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdG91Y2ggPSBlLmNoYW5nZWRUb3VjaGVzLml0ZW0oMCk7XG4gICAgICAgICAgICBsZXQgYW5nbGVJblJhZGlhbiA9IE1hdGguUEkgLyAxODAgKiAodG91Y2g/LnJvdGF0aW9uQW5nbGUgPz8gMCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgLS0tIFRvdWNoIHJvdGF0aW9uIGFjdGl2YXRlZCBhdCB0PSR7Y291bnRlcn0gLS0tYCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgICAgIHJvdGF0aW9uIGFuZ2xlID0gJHt0b3VjaD8ucm90YXRpb25BbmdsZX0gKGRlZylgKVxuICAgICAgICAgICAgYmxvY2tzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihiID0+ICghYi5pc1N0YXRpYykgJiYgTWF0dGVyLkJvdW5kcy5jb250YWlucyhiLmJvdW5kcywgbW91c2UucG9zaXRpb24pKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGIgPT4gTWF0dGVyLkJvZHkucm90YXRlKGIsIGFuZ2xlSW5SYWRpYW4pKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVuZ2luZTogZW5naW5lLFxuICAgICAgICAgICAgcnVubmVyOiBydW5uZXIsXG4gICAgICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgICAgIGNhbnZhczogcmVuZGVyLmNhbnZhcyxcbiAgICAgICAgICAgIHN0b3A6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBNYXR0ZXIuUmVuZGVyLnN0b3AocmVuZGVyKTtcbiAgICAgICAgICAgICAgICBNYXR0ZXIuUnVubmVyLnN0b3AocnVubmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIH1cbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImNvbnN0IGltZ1Jvb3QgPSBcIi4vcHVibGljL2xlZ28vXCI7XG5jb25zdCBpbWdOYW1lcyA9IFtcbiAgICBcImJsdWVfMXgyLnBuZ1wiLFxuICAgIFwiYmx1ZV8xeDIucG5nXCIsXG4gICAgXCJibHVlXzF4Mi5wbmdcIixcbiAgICBcImJsdWVfMXgyLnBuZ1wiLFxuICAgIFwiYmx1ZV8xeDIucG5nXCIsXG4gICAgXCJibHVlXzF4My5wbmdcIixcbiAgICBcImJsdWVfMXgzLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMngyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMngyLnBuZ1wiLFxuICAgIFwib3JhbmdlXzJ4MS5wbmdcIixcbiAgICBcIm9yYW5nZV8yeDEucG5nXCIsXG4gICAgXCJvcmFuZ2VfMngxLnBuZ1wiLFxuICAgIFwib3JhbmdlXzJ4MS5wbmdcIixcbiAgICBcIm9yYW5nZV8yeDEucG5nXCIsXG4gICAgXCJvcmFuZ2VfMngxLnBuZ1wiLFxuICAgIFwib3JhbmdlXzJ4My5wbmdcIixcbiAgICBcIm9yYW5nZV8yeDMucG5nXCIsXG4gICAgXCJyZWRfMXg0LnBuZ1wiLFxuICAgIFwicmVkXzF4NC5wbmdcIixcbiAgICBcInJlZF8xeDQucG5nXCIsXG4gICAgXCJyZWRfMngyLnBuZ1wiLFxuICAgIFwicmVkXzJ4Mi5wbmdcIixcbiAgICBcInllbGxvd18yeDEucG5nXCIsXG4gICAgXCJ5ZWxsb3dfMngxLnBuZ1wiLFxuICAgIFwieWVsbG93XzJ4MS5wbmdcIixcbiAgICBcInllbGxvd18yeDEucG5nXCIsXG4gICAgXCJ5ZWxsb3dfMngxLnBuZ1wiLFxuICAgIFwieWVsbG93XzN4Mi5wbmdcIixcbiAgICBcInllbGxvd18zeDIucG5nXCIsXG4gICAgXCJ5ZWxsb3dfM3gyLnBuZ1wiXG5dO1xuXG5leHBvcnQgY29uc3QgaW1nUGF0aHMgPSBpbWdOYW1lcy5tYXAobmFtZSA9PiBpbWdSb290ICsgbmFtZSk7XG5cbmV4cG9ydCBjb25zdCBwYXJhbXMgPSB7XG4gICAgLy8gQm9keSBwYXJhbWV0ZXJzXG4gICAgZnJpY3Rpb25BaXI6IDAuMDEsXG4gICAgZnJpY3Rpb246IDAuMCxcbiAgICB3YWxsRnJpY3Rpb246IDAuMDEsXG5cbiAgICAvLyBHbG9iYWwgcmFuZG9tIHBva2luZ1xuICAgIHBva2VTY2FsZTogMC4wNSxcbiAgICBwb2tlU2NhbGVEZWNheTogMC45NSwgIC8vIG11bHRpcGxpZXIgYWZ0ZXIgMTAgY291bnRzXG5cbiAgICAvLyBBbGlnbm1lbnQgZm9yY2VcbiAgICBhbGlnbm1lbnRGb3JjZUNvZWZmOiAwLjAwMTAsXG4gICAgYWxpZ25tZW50Rm9yY2VSYW5nZTogMzAsICAvLyBwaXhlbHNcbiAgICBhbGlnbm1lbnRGb3JjZVdhbGxSYW5nZTogMTUsIC8vIHBpeGVsc1xuXG4gICAgLy8gQW50aUdyYXZpdHkgZm9yY2VcbiAgICByZXB1bHNpb25Db2VmZjogMTAwLFxuICAgIHJlcHVsc2lvblJhbmdlOiAzLjAsICAgICAgLy8gTk9UIHBpeGVsc1xuXG4gICAgLy8gR3JvdXBpbmcgYXR0cmFjdGlvbi9yZXB1bHNpb25cbiAgICBncm91cGluZ0NvZWZmOiA0MDAsXG5cbn1cbiIsImltcG9ydCBNYXR0ZXIgZnJvbSBcIm1hdHRlci1qc1wiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IGtydXNrYWwgfSBmcm9tIFwiLi9ncmFwaFwiO1xuaW1wb3J0IFVuaW9uRmluZCBmcm9tIFwiLi91bmlvbmZpbmRcIjtcbmltcG9ydCB7IFdvcmxkRXh0ZW5kZWQsIEVkZ2VFeHRlbmRlZCwgR3JhcGhFeHRlbmRlZCwgSVBvaW50UGFpckZ1bmMgfSBmcm9tIFwiLi9leHR0eXBlc1wiO1xuaW1wb3J0ICogYXMgZ3JvdXBpbmcgZnJvbSBcIi4vZ3JvdXBpbmdcIjtcblxuXG5jb25zdCBjcmVhdGVBbGlnbm1lbnRHcmFwaE1ldGEgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSwgcG9pbnRQYWlyRnVuYzogSVBvaW50UGFpckZ1bmMpOiBHcmFwaEV4dGVuZGVkID0+IHtcbiAgbGV0IGVkZ2VzOiBFZGdlRXh0ZW5kZWRbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJsb2Nrcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGJsb2Nrcy5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3Qgc3JjID0gYmxvY2tzW2ldO1xuICAgICAgY29uc3QgdGd0ID0gYmxvY2tzW2pdO1xuICAgICAgY29uc3QgW3Bvc1NyYywgcG9zVGd0LCBkaXN0XSA9IHBvaW50UGFpckZ1bmMoc3JjLCB0Z3QpO1xuICAgICAgaWYgKGRpc3QgPCB3b3JsZC5hbGlnbm1lbnRGb3JjZVJhbmdlICYmICghc3JjLmlzU3RhdGljIHx8ICF0Z3QuaXNTdGF0aWMpKSB7XG4gICAgICAgIGNvbnN0IGUgPSB7XG4gICAgICAgICAgd2VpZ2h0OiBkaXN0LFxuICAgICAgICAgIHBhaXI6IHV0aWxzLm1ha2VVbm9yZGVyZWRQYWlyKGksIGopLFxuICAgICAgICAgIHBvc1NyYzogcG9zU3JjLFxuICAgICAgICAgIHBvc1RndDogcG9zVGd0LFxuICAgICAgICAgIGlkeFNyYzogaSxcbiAgICAgICAgICBpZHhUZ3Q6IGosXG4gICAgICAgIH1cbiAgICAgICAgZWRnZXMucHVzaChlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbGV0IGc6IEdyYXBoRXh0ZW5kZWQgPSB7XG4gICAgdmVydGljZXM6IHV0aWxzLnJhbmdlKGJsb2Nrcy5sZW5ndGgpLFxuICAgIGVkZ2VzOiBlZGdlcyxcbiAgfVxuICByZXR1cm4gZztcbn1cblxuXG5jb25zdCBjcmVhdGVBbGlnbm1lbnRHcmFwaFggPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSk6IEdyYXBoRXh0ZW5kZWQgPT4ge1xuICByZXR1cm4gY3JlYXRlQWxpZ25tZW50R3JhcGhNZXRhKHdvcmxkLCBibG9ja3MsIHV0aWxzLmNsb2VzdFBvaW50UGFpclgpO1xufVxuXG5cbmNvbnN0IGNyZWF0ZUFsaWdubWVudEdyYXBoWSA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdKTogR3JhcGhFeHRlbmRlZCA9PiB7XG4gIHJldHVybiBjcmVhdGVBbGlnbm1lbnRHcmFwaE1ldGEod29ybGQsIGJsb2NrcywgdXRpbHMuY2xvZXN0UG9pbnRQYWlyWSk7XG59XG5cblxuY29uc3QgYXBwbHlBbGlnbm1lbnRGb3JjZVggPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSwgZWRnZTogRWRnZUV4dGVuZGVkKSA9PiB7XG4gIGNvbnN0IHNpZ24gPSAoZWRnZS5wb3NTcmMueCA8IGVkZ2UucG9zVGd0LngpID8gLTEgOiAxO1xuICBjb25zdCBkaXN0ID0gZWRnZS53ZWlnaHQ7XG4gIGNvbnN0IGZvcmNlID0gd29ybGQuYWxpZ25tZW50Rm9yY2VDb2VmZiAqIHNpZ24gKiBkaXN0O1xuICBjb25zdCBmb3JjZU9uVGd0ID0geyB4OiBmb3JjZSwgeTogMCB9O1xuICBjb25zdCBzcmMgPSBibG9ja3NbZWRnZS5pZHhTcmNdO1xuICBjb25zdCB0Z3QgPSBibG9ja3NbZWRnZS5pZHhUZ3RdO1xuICBNYXR0ZXIuQm9keS5hcHBseUZvcmNlKHRndCwgdGd0LnBvc2l0aW9uLCBmb3JjZU9uVGd0KTtcbiAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZShzcmMsIHNyYy5wb3NpdGlvbiwgdXRpbHMubmVnYXRlKGZvcmNlT25UZ3QpKTtcbn1cblxuXG5jb25zdCBhcHBseUFsaWdubWVudEZvcmNlWSA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdLCBlZGdlOiBFZGdlRXh0ZW5kZWQpID0+IHtcbiAgY29uc3Qgc2lnbiA9IChlZGdlLnBvc1NyYy55IDwgZWRnZS5wb3NUZ3QueSkgPyAtMSA6IDE7XG4gIGNvbnN0IGRpc3QgPSBlZGdlLndlaWdodDtcbiAgY29uc3QgZm9yY2UgPSB3b3JsZC5hbGlnbm1lbnRGb3JjZUNvZWZmICogc2lnbiAqIGRpc3Q7XG4gIGNvbnN0IGZvcmNlT25UZ3QgPSB7IHg6IDAsIHk6IGZvcmNlIH07XG4gIGNvbnN0IHNyYyA9IGJsb2Nrc1tlZGdlLmlkeFNyY107XG4gIGNvbnN0IHRndCA9IGJsb2Nrc1tlZGdlLmlkeFRndF07XG4gIE1hdHRlci5Cb2R5LmFwcGx5Rm9yY2UodGd0LCB0Z3QucG9zaXRpb24sIGZvcmNlT25UZ3QpO1xuICBNYXR0ZXIuQm9keS5hcHBseUZvcmNlKHNyYywgc3JjLnBvc2l0aW9uLCB1dGlscy5uZWdhdGUoZm9yY2VPblRndCkpO1xufVxuXG5cbmNvbnN0IGFwcGx5QWxpZ25tZW50TVNUID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10pID0+IHtcbiAgbGV0IGdYID0gY3JlYXRlQWxpZ25tZW50R3JhcGhYKHdvcmxkLCBibG9ja3MpO1xuICBsZXQgZ1kgPSBjcmVhdGVBbGlnbm1lbnRHcmFwaFkod29ybGQsIGJsb2Nrcyk7XG4gIGxldCBlZGdlTXN0WCA9IGtydXNrYWwoZ1gpIGFzIEVkZ2VFeHRlbmRlZFtdO1xuICBsZXQgZWRnZU1zdFkgPSBrcnVza2FsKGdZKSBhcyBFZGdlRXh0ZW5kZWRbXTtcblxuICAvLyBhbGlnbm1lbnQgZm9yY2Ugb2NjdXJzIGF0IE1TVCBlZGdlcyBvbmx5XG4gIGVkZ2VNc3RYLmZvckVhY2goZSA9PiBhcHBseUFsaWdubWVudEZvcmNlWCh3b3JsZCwgYmxvY2tzLCBlKSk7XG4gIGVkZ2VNc3RZLmZvckVhY2goZSA9PiBhcHBseUFsaWdubWVudEZvcmNlWSh3b3JsZCwgYmxvY2tzLCBlKSk7XG5cbiAgLy8gYW50aWdyYXZpdHkgZm9yY2Ugb2NjdXJzIGF0IGRpc2Nvbm5lY3RlZCBub2Rlc1xuICBsZXQgdWZYID0gbmV3IFVuaW9uRmluZChnWC52ZXJ0aWNlcyk7XG4gIGdYLmVkZ2VzLmZvckVhY2goZSA9PiB7IHVmWC5jb25uZWN0KGUuaWR4U3JjLCBlLmlkeFRndCkgfSk7XG4gIGxldCB1ZlkgPSBuZXcgVW5pb25GaW5kKGdZLnZlcnRpY2VzKTtcbiAgZ1kuZWRnZXMuZm9yRWFjaChlID0+IHsgdWZZLmNvbm5lY3QoZS5pZHhTcmMsIGUuaWR4VGd0KSB9KTtcbiAgZ3JvdXBpbmcuYXBwbHlBbnRpR3Jhdml0eURpc2pvaW50KHdvcmxkLCBibG9ja3MsIHVmWCwgdWZZKTtcbn1cblxuXG5jb25zdCBjcmVhdGVCb3hXYWxsQmlwYXJ0aXRlTWV0YSA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdLCBwb2ludFBhaXJGdW5jOiBJUG9pbnRQYWlyRnVuYyk6IEdyYXBoRXh0ZW5kZWQgPT4ge1xuICBsZXQgZWRnZXM6IEVkZ2VFeHRlbmRlZFtdID0gW107XG4gIGNvbnN0IGJveGVzID0gYmxvY2tzLnNsaWNlKDAsIGJsb2Nrcy5sZW5ndGggLSA0KTtcbiAgY29uc3Qgd2FsbHMgPSBibG9ja3Muc2xpY2UoYmxvY2tzLmxlbmd0aCAtIDQsIGJsb2Nrcy5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYm94ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7IGorKykge1xuICAgICAgY29uc3Qgc3JjID0gYm94ZXNbaV07XG4gICAgICBjb25zdCB0Z3QgPSB3YWxsc1tqXTtcbiAgICAgIGNvbnN0IGlkeEJveCA9IGk7XG4gICAgICBjb25zdCBpZHhXYWxsID0gaiArIGJveGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IFtwb3NCb3gsIHBvc1dhbGwsIGRpc3RdID0gcG9pbnRQYWlyRnVuYyhzcmMsIHRndCk7XG4gICAgICBpZiAoZGlzdCA8IHdvcmxkLmFsaWdubWVudEZvcmNlV2FsbFJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGU6IEVkZ2VFeHRlbmRlZCA9IHtcbiAgICAgICAgICB3ZWlnaHQ6IGRpc3QsXG4gICAgICAgICAgcGFpcjogeyBmaXJzdDogaWR4Qm94LCBzZWNvbmQ6IGlkeFdhbGwgfSxcbiAgICAgICAgICBwb3NTcmM6IHBvc0JveCxcbiAgICAgICAgICBwb3NUZ3Q6IHBvc1dhbGwsXG4gICAgICAgICAgaWR4U3JjOiBpLFxuICAgICAgICAgIGlkeFRndDogaixcbiAgICAgICAgfVxuICAgICAgICBlZGdlcy5wdXNoKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgZzogR3JhcGhFeHRlbmRlZCA9IHtcbiAgICB2ZXJ0aWNlczogdXRpbHMucmFuZ2UoYmxvY2tzLmxlbmd0aCksXG4gICAgZWRnZXM6IGVkZ2VzLFxuICB9XG4gIHJldHVybiBnO1xufVxuXG5jb25zdCBhcHBseUJveFdhbGxBbGlnbm1lbnQgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSkgPT4ge1xuICBsZXQgZ1ggPSBjcmVhdGVCb3hXYWxsQmlwYXJ0aXRlTWV0YSh3b3JsZCwgYmxvY2tzLCB1dGlscy5jbG9lc3RQb2ludFBhaXJYKTtcbiAgbGV0IGdZID0gY3JlYXRlQm94V2FsbEJpcGFydGl0ZU1ldGEod29ybGQsIGJsb2NrcywgdXRpbHMuY2xvZXN0UG9pbnRQYWlyWSk7XG5cbiAgLy8gYWxpZ25tZW50IGZvcmNlIG9jY3VycyBhdCBNU1QgZWRnZXMgb25seVxuICBnWC5lZGdlcy5mb3JFYWNoKGUgPT4gYXBwbHlBbGlnbm1lbnRGb3JjZVgod29ybGQsIGJsb2NrcywgZSkpO1xuICBnWS5lZGdlcy5mb3JFYWNoKGUgPT4gYXBwbHlBbGlnbm1lbnRGb3JjZVkod29ybGQsIGJsb2NrcywgZSkpO1xufVxuXG5cbmV4cG9ydCBjb25zdCBhcHBseUFsaWdubWVudCA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdKSA9PiB7XG4gIGFwcGx5Qm94V2FsbEFsaWdubWVudCh3b3JsZCwgYmxvY2tzKTtcblxuICBjb25zdCBib3hlcyA9IGJsb2Nrcy5zbGljZSgwLCBibG9ja3MubGVuZ3RoIC0gNCk7XG4gIGFwcGx5QWxpZ25tZW50TVNUKHdvcmxkLCBib3hlcyk7XG59XG4iLCJpbXBvcnQgVW5pb25GaW5kIGZyb20gXCIuL3VuaW9uZmluZFwiO1xuaW1wb3J0IHsgUGFpciB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbi8vIE1pbmltdW0gc3Bhbm5pbmcgdHJlZVxudHlwZSBWZXJ0ZXggPSBudW1iZXIgfCBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWRnZSB7XG4gIHBhaXI6IFBhaXI8VmVydGV4PixcbiAgd2VpZ2h0OiBudW1iZXIsXG4gIFtwcm9wTmFtZTogc3RyaW5nXTogYW55O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBHcmFwaCB7XG4gIHZlcnRpY2VzOiBWZXJ0ZXhbXTtcbiAgZWRnZXM6IEVkZ2VbXTtcbn1cblxuLyoqIEtydXNrYWwgZm9yIE1TVCBPKEUgbG9nIEUpXG4gKi9cbmV4cG9ydCBjb25zdCBrcnVza2FsID0gKGc6IEdyYXBoKTogRWRnZVtdID0+IHtcbiAgY29uc3QgdWYgPSBuZXcgVW5pb25GaW5kKGcudmVydGljZXMpO1xuICBjb25zdCBzb3J0ZWRFZGdlcyA9IGcuZWRnZXMuc29ydCgoZTEsIGUyKSA9PiBlMS53ZWlnaHQgLSBlMi53ZWlnaHQpO1xuICBsZXQgcmVzOiBFZGdlW10gPSBbXTtcbiAgZm9yIChsZXQgZSBvZiBzb3J0ZWRFZGdlcykge1xuICAgIGxldCB2MSA9IGUucGFpci5maXJzdDtcbiAgICBsZXQgdjIgPSBlLnBhaXIuc2Vjb25kO1xuICAgIGlmICghdWYuYXJlQ29ubmVjdGVkKHYxLCB2MikpIHtcbiAgICAgIHVmLmNvbm5lY3QodjEsIHYyKTtcbiAgICAgIHJlcy5wdXNoKGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuIiwiaW1wb3J0IE1hdHRlciBmcm9tIFwibWF0dGVyLWpzXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgV29ybGRFeHRlbmRlZCB9IGZyb20gXCIuL2V4dHR5cGVzXCI7XG5cblxuY29uc3QgYXBwbHlSYW5kb21Qb2tlID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9jazogTWF0dGVyLkJvZHkpID0+IHtcbiAgaWYgKCFibG9jay5pc1N0YXRpYykge1xuICAgIE1hdHRlci5Cb2R5LmFwcGx5Rm9yY2UoYmxvY2ssIGJsb2NrLnBvc2l0aW9uLFxuICAgICAge1xuICAgICAgICB4OiB3b3JsZC5wb2tlU2NhbGUgKiB1dGlscy5yYW5kbigpLFxuICAgICAgICB5OiB3b3JsZC5wb2tlU2NhbGUgKiB1dGlscy5yYW5kbigpLFxuICAgICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGFwcGx5UmFuZG9tUG9rZXMgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSkgPT4ge1xuICBibG9ja3MuZm9yRWFjaChibG9jayA9PiBhcHBseVJhbmRvbVBva2Uod29ybGQsIGJsb2NrKSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9