!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.areSameWidth=t.areSameHeight=t.getHeight=t.getWidth=t.makeUnorderedPair=t.negate=t.normalize=t.unitVec=t.randn=t.randRange=t.range=t.cloestPointPairY=t.cloestPointPairX=t.distEuclid=t.distVerti=t.distHoriz=t.bottommostPoint=t.topmostPoint=t.leftmostPoint=t.rightmostPoint=t.vectorMean=t.arrMinBy=t.arrMaxBy=t.arrMetaBy=t.arrMean=t.arrSum=t.arrMin=t.arrMax=void 0,t.arrMax=function(e){return e.reduce((function(e,t){return Math.max(e,t)}),-1/0)},t.arrMin=function(e){return e.reduce((function(e,t){return Math.min(e,t)}),1/0)},t.arrSum=function(e){return e.reduce((function(e,t){return e+t}),0)},t.arrMean=function(e){return t.arrSum(e)/e.length},t.arrMetaBy=function(e,t,n){var o=e.map(t),i=n(o),r=Array();for(var a in e)o[a]==i&&r.push(e[a]);return r},t.arrMaxBy=function(e){var n=e.xs,o=e.f;return t.arrMetaBy(n,o,t.arrMax)},t.arrMinBy=function(e){var n=e.xs,o=e.f;return t.arrMetaBy(n,o,t.arrMin)},t.vectorMean=function(e){return{x:t.arrMean(e.map((function(e){return e.x}))),y:t.arrMean(e.map((function(e){return e.y})))}},t.rightmostPoint=function(e){return t.vectorMean(t.arrMaxBy({xs:e,f:function(e){return e.x}}))},t.leftmostPoint=function(e){return t.vectorMean(t.arrMinBy({xs:e,f:function(e){return e.x}}))},t.topmostPoint=function(e){return t.vectorMean(t.arrMinBy({xs:e,f:function(e){return e.y}}))},t.bottommostPoint=function(e){return t.vectorMean(t.arrMaxBy({xs:e,f:function(e){return e.y}}))},t.distHoriz=function(e,t){return Math.abs(e.x-t.x)},t.distVerti=function(e,t){return Math.abs(e.y-t.y)},t.distEuclid=function(e,t){return Math.hypot(e.x-t.x,e.y-t.y)};var o=function(e,t,n,o,i){for(var r=n(e.vertices),a=o(e.vertices),s=n(t.vertices),l=o(t.vertices),c=[r,a,1/0],u=1/0,d=0,p=[r,a];d<p.length;d++)for(var f=p[d],v=0,m=[s,l];v<m.length;v++){var g=m[v],y=i(f,g);y<u&&(c=[f,g,u=y])}return c};t.cloestPointPairX=function(e,n){return o(e,n,t.leftmostPoint,t.rightmostPoint,t.distHoriz)},t.cloestPointPairY=function(e,n){return o(e,n,t.topmostPoint,t.bottommostPoint,t.distVerti)},t.range=function(e){return e=Math.floor(e),Array.from(Array(e).keys())},t.randRange=function(e,t,n){void 0===n&&(n=1);var o=Math.floor(e),i=Math.floor(t);return o+Math.floor(Math.random()*(i-o)/n)*n},t.randn=function(){for(var e=0,n=0;0===e;)e=Math.random();for(;0===n;)n=Math.random();var o=Math.sqrt(-2*Math.log(e))*Math.cos(2*Math.PI*n);return(o=o/10+.5)>1||o<0?t.randn():o-.5},t.unitVec=function(e,n){var o=t.distEuclid(e,n);return{x:(n.x-e.x)/o,y:(n.y-e.y)/o}},t.normalize=function(e){var t=Math.hypot(e.x,e.y);return{x:e.x/t,y:e.y/t}},t.negate=function(e){return{x:-e.x,y:-e.y}},t.makeUnorderedPair=function(e,t){var n;return t<e&&(e=(n=[t,e])[0],t=n[1]),{first:e,second:t}},t.getWidth=function(e){var n=e.vertices.map((function(e){return e.x}));return t.arrMax(n)-t.arrMin(n)},t.getHeight=function(e){var n=e.vertices.map((function(e){return e.y}));return t.arrMax(n)-t.arrMin(n)},t.areSameHeight=function(e,n){return t.getHeight(e)==t.getHeight(n)},t.areSameWidth=function(e,n){return t.getWidth(e)==t.getWidth(n)}},function(e,t,n){(function(t){e.exports=function e(t,n,o){function i(a,s){if(!n[a]){if(!t[a]){if(r)return r(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,(function(e){return i(t[a][1][e]||e)}),c,c.exports,e,t,n,o)}return n[a].exports}for(var r=!1,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector"),a=e("../core/Sleeping"),s=(e("../render/Render"),e("../core/Common")),l=e("../geometry/Bounds"),c=e("../geometry/Axes");!function(){o._inertiaScale=4,o._nextCollidingGroupId=1,o._nextNonCollidingGroupId=-1,o._nextCategory=1,o.create=function(t){var n={id:s.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:i.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0},lineWidth:0}},o=s.extend(n,t);return e(o,t),o},o.nextGroup=function(e){return e?o._nextNonCollidingGroupId--:o._nextCollidingGroupId++},o.nextCategory=function(){return o._nextCategory=o._nextCategory<<1,o._nextCategory};var e=function(e,t){t=t||{},o.set(e,{bounds:e.bounds||l.create(e.vertices),positionPrev:e.positionPrev||r.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),i.rotate(e.vertices,e.angle,e.position),c.rotate(e.axes,e.angle),l.update(e.bounds,e.vertices,e.velocity),o.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#2e2b44":s.choose(["#006BA6","#0496FF","#FFBC42","#D81159","#8F2D56"]);e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||"#000",e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};o.set=function(e,t,n){var i;for(i in"string"==typeof t&&(i=t,(t={})[i]=n),t)if(n=t[i],t.hasOwnProperty(i))switch(i){case"isStatic":o.setStatic(e,n);break;case"isSleeping":a.set(e,n);break;case"mass":o.setMass(e,n);break;case"density":o.setDensity(e,n);break;case"inertia":o.setInertia(e,n);break;case"vertices":o.setVertices(e,n);break;case"position":o.setPosition(e,n);break;case"angle":o.setAngle(e,n);break;case"velocity":o.setVelocity(e,n);break;case"angularVelocity":o.setAngularVelocity(e,n);break;case"parts":o.setParts(e,n);break;default:e[i]=n}},o.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var o=e.parts[n];o.isStatic=t,t?(o._original={restitution:o.restitution,friction:o.friction,mass:o.mass,inertia:o.inertia,density:o.density,inverseMass:o.inverseMass,inverseInertia:o.inverseInertia},o.restitution=0,o.friction=1,o.mass=o.inertia=o.density=1/0,o.inverseMass=o.inverseInertia=0,o.positionPrev.x=o.position.x,o.positionPrev.y=o.position.y,o.anglePrev=o.angle,o.angularVelocity=0,o.speed=0,o.angularSpeed=0,o.motion=0):o._original&&(o.restitution=o._original.restitution,o.friction=o._original.friction,o.mass=o._original.mass,o.inertia=o._original.inertia,o.density=o._original.density,o.inverseMass=o._original.inverseMass,o.inverseInertia=o._original.inverseInertia,delete o._original)}},o.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},o.setDensity=function(e,t){o.setMass(e,t*e.area),e.density=t},o.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},o.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=i.create(t,e),e.axes=c.fromVertices(e.vertices),e.area=i.area(e.vertices),o.setMass(e,e.density*e.area);var n=i.centre(e.vertices);i.translate(e.vertices,n,-1),o.setInertia(e,o._inertiaScale*i.inertia(e.vertices,e.mass)),i.translate(e.vertices,e.position),l.update(e.bounds,e.vertices,e.velocity)},o.setParts=function(e,t,n){var r;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,r=0;r<t.length;r++){var a=t[r];a!==e&&(a.parent=e,e.parts.push(a))}if(1!==e.parts.length){if(n=void 0===n||n){var s=[];for(r=0;r<t.length;r++)s=s.concat(t[r].vertices);i.clockwiseSort(s);var l=i.hull(s),c=i.centre(l);o.setVertices(e,l),i.translate(e.vertices,c)}var u=o._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,o.setMass(e,u.mass),o.setInertia(e,u.inertia),o.setPosition(e,u.centre)}},o.setPosition=function(e,t){var n=r.sub(t,e.position);e.positionPrev.x+=n.x,e.positionPrev.y+=n.y;for(var o=0;o<e.parts.length;o++){var a=e.parts[o];a.position.x+=n.x,a.position.y+=n.y,i.translate(a.vertices,n),l.update(a.bounds,a.vertices,e.velocity)}},o.setAngle=function(e,t){var n=t-e.angle;e.anglePrev+=n;for(var o=0;o<e.parts.length;o++){var a=e.parts[o];a.angle+=n,i.rotate(a.vertices,n,e.position),c.rotate(a.axes,n),l.update(a.bounds,a.vertices,e.velocity),o>0&&r.rotateAbout(a.position,n,e.position,a.position)}},o.setVelocity=function(e,t){e.positionPrev.x=e.position.x-t.x,e.positionPrev.y=e.position.y-t.y,e.velocity.x=t.x,e.velocity.y=t.y,e.speed=r.magnitude(e.velocity)},o.setAngularVelocity=function(e,t){e.anglePrev=e.angle-t,e.angularVelocity=t,e.angularSpeed=Math.abs(e.angularVelocity)},o.translate=function(e,t){o.setPosition(e,r.add(e.position,t))},o.rotate=function(e,t,n){if(n){var i=Math.cos(t),r=Math.sin(t),a=e.position.x-n.x,s=e.position.y-n.y;o.setPosition(e,{x:n.x+(a*i-s*r),y:n.y+(a*r+s*i)}),o.setAngle(e,e.angle+t)}else o.setAngle(e,e.angle+t)},o.scale=function(e,t,n,r){var a=0,s=0;r=r||e.position;for(var u=0;u<e.parts.length;u++){var d=e.parts[u];i.scale(d.vertices,t,n,r),d.axes=c.fromVertices(d.vertices),d.area=i.area(d.vertices),o.setMass(d,e.density*d.area),i.translate(d.vertices,{x:-d.position.x,y:-d.position.y}),o.setInertia(d,o._inertiaScale*i.inertia(d.vertices,d.mass)),i.translate(d.vertices,{x:d.position.x,y:d.position.y}),u>0&&(a+=d.area,s+=d.inertia),d.position.x=r.x+(d.position.x-r.x)*t,d.position.y=r.y+(d.position.y-r.y)*n,l.update(d.bounds,d.vertices,e.velocity)}e.parts.length>1&&(e.area=a,e.isStatic||(o.setMass(e,e.density*a),o.setInertia(e,s))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},o.update=function(e,t,n,o){var a=Math.pow(t*n*e.timeScale,2),s=1-e.frictionAir*n*e.timeScale,u=e.position.x-e.positionPrev.x,d=e.position.y-e.positionPrev.y;e.velocity.x=u*s*o+e.force.x/e.mass*a,e.velocity.y=d*s*o+e.force.y/e.mass*a,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.angularVelocity=(e.angle-e.anglePrev)*s*o+e.torque/e.inertia*a,e.anglePrev=e.angle,e.angle+=e.angularVelocity,e.speed=r.magnitude(e.velocity),e.angularSpeed=Math.abs(e.angularVelocity);for(var p=0;p<e.parts.length;p++){var f=e.parts[p];i.translate(f.vertices,e.velocity),p>0&&(f.position.x+=e.velocity.x,f.position.y+=e.velocity.y),0!==e.angularVelocity&&(i.rotate(f.vertices,e.angularVelocity,e.position),c.rotate(f.axes,e.angularVelocity),p>0&&r.rotateAbout(f.position,e.angularVelocity,e.position,f.position)),l.update(f.bounds,f.vertices,e.velocity)}},o.applyForce=function(e,t,n){e.force.x+=n.x,e.force.y+=n.y;var o=t.x-e.position.x,i=t.y-e.position.y;e.torque+=o*n.y-i*n.x},o._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var o=e.parts[n],i=o.mass!==1/0?o.mass:1;t.mass+=i,t.area+=o.area,t.inertia+=o.inertia,t.centre=r.add(t.centre,r.mult(o.position,i))}return t.centre=r.div(t.centre,t.mass),t}}()},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31}],2:[function(e,t,n){var o={};t.exports=o;var i=e("../core/Events"),r=e("../core/Common"),a=e("../geometry/Bounds"),s=e("./Body");o.create=function(e){return r.extend({id:r.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{}},e)},o.setModified=function(e,t,n,i){if(e.isModified=t,n&&e.parent&&o.setModified(e.parent,t,n,i),i)for(var r=0;r<e.composites.length;r++){var a=e.composites[r];o.setModified(a,t,n,i)}},o.add=function(e,t){var n=[].concat(t);i.trigger(e,"beforeAdd",{object:t});for(var a=0;a<n.length;a++){var s=n[a];switch(s.type){case"body":if(s.parent!==s){r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}o.addBody(e,s);break;case"constraint":o.addConstraint(e,s);break;case"composite":o.addComposite(e,s);break;case"mouseConstraint":o.addConstraint(e,s.constraint)}}return i.trigger(e,"afterAdd",{object:t}),e},o.remove=function(e,t,n){var r=[].concat(t);i.trigger(e,"beforeRemove",{object:t});for(var a=0;a<r.length;a++){var s=r[a];switch(s.type){case"body":o.removeBody(e,s,n);break;case"constraint":o.removeConstraint(e,s,n);break;case"composite":o.removeComposite(e,s,n);break;case"mouseConstraint":o.removeConstraint(e,s.constraint)}}return i.trigger(e,"afterRemove",{object:t}),e},o.addComposite=function(e,t){return e.composites.push(t),t.parent=e,o.setModified(e,!0,!0,!1),e},o.removeComposite=function(e,t,n){var i=r.indexOf(e.composites,t);if(-1!==i&&(o.removeCompositeAt(e,i),o.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)o.removeComposite(e.composites[a],t,!0);return e},o.removeCompositeAt=function(e,t){return e.composites.splice(t,1),o.setModified(e,!0,!0,!1),e},o.addBody=function(e,t){return e.bodies.push(t),o.setModified(e,!0,!0,!1),e},o.removeBody=function(e,t,n){var i=r.indexOf(e.bodies,t);if(-1!==i&&(o.removeBodyAt(e,i),o.setModified(e,!0,!0,!1)),n)for(var a=0;a<e.composites.length;a++)o.removeBody(e.composites[a],t,!0);return e},o.removeBodyAt=function(e,t){return e.bodies.splice(t,1),o.setModified(e,!0,!0,!1),e},o.addConstraint=function(e,t){return e.constraints.push(t),o.setModified(e,!0,!0,!1),e},o.removeConstraint=function(e,t,n){var i=r.indexOf(e.constraints,t);if(-1!==i&&o.removeConstraintAt(e,i),n)for(var a=0;a<e.composites.length;a++)o.removeConstraint(e.composites[a],t,!0);return e},o.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),o.setModified(e,!0,!0,!1),e},o.clear=function(e,t,n){if(n)for(var i=0;i<e.composites.length;i++)o.clear(e.composites[i],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,o.setModified(e,!0,!0,!1),e},o.allBodies=function(e){for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(o.allBodies(e.composites[n]));return t},o.allConstraints=function(e){for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(o.allConstraints(e.composites[n]));return t},o.allComposites=function(e){for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(o.allComposites(e.composites[n]));return t},o.get=function(e,t,n){var i,r;switch(n){case"body":i=o.allBodies(e);break;case"constraint":i=o.allConstraints(e);break;case"composite":i=o.allComposites(e).concat(e)}return i?0===(r=i.filter((function(e){return e.id.toString()===t.toString()}))).length?null:r[0]:null},o.move=function(e,t,n){return o.remove(e,t),o.add(n,t),e},o.rebase=function(e){for(var t=o.allBodies(e).concat(o.allConstraints(e)).concat(o.allComposites(e)),n=0;n<t.length;n++)t[n].id=r.nextId();return o.setModified(e,!0,!0,!1),e},o.translate=function(e,t,n){for(var i=n?o.allBodies(e):e.bodies,r=0;r<i.length;r++)s.translate(i[r],t);return o.setModified(e,!0,!0,!1),e},o.rotate=function(e,t,n,i){for(var r=Math.cos(t),a=Math.sin(t),l=i?o.allBodies(e):e.bodies,c=0;c<l.length;c++){var u=l[c],d=u.position.x-n.x,p=u.position.y-n.y;s.setPosition(u,{x:n.x+(d*r-p*a),y:n.y+(d*a+p*r)}),s.rotate(u,t)}return o.setModified(e,!0,!0,!1),e},o.scale=function(e,t,n,i,r){for(var a=r?o.allBodies(e):e.bodies,l=0;l<a.length;l++){var c=a[l],u=c.position.x-i.x,d=c.position.y-i.y;s.setPosition(c,{x:i.x+u*t,y:i.y+d*n}),s.scale(c,t,n)}return o.setModified(e,!0,!0,!1),e},o.bounds=function(e){for(var t=o.allBodies(e),n=[],i=0;i<t.length;i+=1){var r=t[i];n.push(r.bounds.min,r.bounds.max)}return a.create(n)}},{"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"./Body":1}],3:[function(e,t,n){var o={};t.exports=o;var i=e("./Composite"),r=(e("../constraint/Constraint"),e("../core/Common"));o.create=function(e){var t=i.create(),n={label:"World",gravity:{x:0,y:1,scale:.001},bounds:{min:{x:-1/0,y:-1/0},max:{x:1/0,y:1/0}}};return r.extend(t,n,e)}},{"../constraint/Constraint":12,"../core/Common":14,"./Composite":2}],4:[function(e,t,n){var o={};t.exports=o,o.create=function(e){return{id:o.id(e),vertex:e,normalImpulse:0,tangentImpulse:0}},o.id=function(e){return e.body.id+"_"+e.index}},{}],5:[function(e,t,n){var o={};t.exports=o;var i=e("./SAT"),r=e("./Pair"),a=e("../geometry/Bounds");o.collisions=function(e,t){for(var n=[],s=t.pairs.table,l=0;l<e.length;l++){var c=e[l][0],u=e[l][1];if((!c.isStatic&&!c.isSleeping||!u.isStatic&&!u.isSleeping)&&o.canCollide(c.collisionFilter,u.collisionFilter)&&a.overlaps(c.bounds,u.bounds))for(var d=c.parts.length>1?1:0;d<c.parts.length;d++)for(var p=c.parts[d],f=u.parts.length>1?1:0;f<u.parts.length;f++){var v=u.parts[f];if(p===c&&v===u||a.overlaps(p.bounds,v.bounds)){var m,g=s[r.id(p,v)];m=g&&g.isActive?g.collision:null;var y=i.collides(p,v,m);y.collided&&n.push(y)}}}return n},o.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)}},{"../geometry/Bounds":26,"./Pair":7,"./SAT":11}],6:[function(e,t,n){var o={};t.exports=o;var i=e("./Pair"),r=e("./Detector"),a=e("../core/Common");o.create=function(e){var t={controller:o,detector:r.collisions,buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48};return a.extend(t,e)},o.update=function(e,t,n,i){var r,a,s,l,c,u=n.world,d=e.buckets,p=!1;for(r=0;r<t.length;r++){var f=t[r];if((!f.isSleeping||i)&&!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y)){var v=o._getRegion(e,f);if(!f.region||v.id!==f.region.id||i){f.region&&!i||(f.region=v);var m=o._regionUnion(v,f.region);for(a=m.startCol;a<=m.endCol;a++)for(s=m.startRow;s<=m.endRow;s++){l=d[c=o._getBucketId(a,s)];var g=a>=v.startCol&&a<=v.endCol&&s>=v.startRow&&s<=v.endRow,y=a>=f.region.startCol&&a<=f.region.endCol&&s>=f.region.startRow&&s<=f.region.endRow;!g&&y&&y&&l&&o._bucketRemoveBody(e,l,f),(f.region===v||g&&!y||i)&&(l||(l=o._createBucket(d,c)),o._bucketAddBody(e,l,f))}f.region=v,p=!0}}}p&&(e.pairsList=o._createActivePairsList(e))},o.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},o._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),i=Math.max(e.endCol,t.endCol),r=Math.min(e.startRow,t.startRow),a=Math.max(e.endRow,t.endRow);return o._createRegion(n,i,r,a)},o._getRegion=function(e,t){var n=t.bounds,i=Math.floor(n.min.x/e.bucketWidth),r=Math.floor(n.max.x/e.bucketWidth),a=Math.floor(n.min.y/e.bucketHeight),s=Math.floor(n.max.y/e.bucketHeight);return o._createRegion(i,r,a,s)},o._createRegion=function(e,t,n,o){return{id:e+","+t+","+n+","+o,startCol:e,endCol:t,startRow:n,endRow:o}},o._getBucketId=function(e,t){return"C"+e+"R"+t},o._createBucket=function(e,t){return e[t]=[]},o._bucketAddBody=function(e,t,n){for(var o=0;o<t.length;o++){var r=t[o];if(!(n.id===r.id||n.isStatic&&r.isStatic)){var a=i.id(n,r),s=e.pairs[a];s?s[2]+=1:e.pairs[a]=[n,r,1]}}t.push(n)},o._bucketRemoveBody=function(e,t,n){t.splice(a.indexOf(t,n),1);for(var o=0;o<t.length;o++){var r=t[o],s=i.id(n,r),l=e.pairs[s];l&&(l[2]-=1)}},o._createActivePairsList=function(e){var t,n,o=[];t=a.keys(e.pairs);for(var i=0;i<t.length;i++)(n=e.pairs[t[i]])[2]>0?o.push(n):delete e.pairs[t[i]];return o}},{"../core/Common":14,"./Detector":5,"./Pair":7}],7:[function(e,t,n){var o={};t.exports=o;var i=e("./Contact");o.create=function(e,t){var n=e.bodyA,i=e.bodyB,r=e.parentA,a=e.parentB,s={id:o.id(n,i),bodyA:n,bodyB:i,contacts:{},activeContacts:[],separation:0,isActive:!0,isSensor:n.isSensor||i.isSensor,timeCreated:t,timeUpdated:t,inverseMass:r.inverseMass+a.inverseMass,friction:Math.min(r.friction,a.friction),frictionStatic:Math.max(r.frictionStatic,a.frictionStatic),restitution:Math.max(r.restitution,a.restitution),slop:Math.max(r.slop,a.slop)};return o.update(s,e,t),s},o.update=function(e,t,n){var r=e.contacts,a=t.supports,s=e.activeContacts,l=t.parentA,c=t.parentB;if(e.collision=t,e.inverseMass=l.inverseMass+c.inverseMass,e.friction=Math.min(l.friction,c.friction),e.frictionStatic=Math.max(l.frictionStatic,c.frictionStatic),e.restitution=Math.max(l.restitution,c.restitution),e.slop=Math.max(l.slop,c.slop),s.length=0,t.collided){for(var u=0;u<a.length;u++){var d=a[u],p=i.id(d),f=r[p];f?s.push(f):s.push(r[p]=i.create(d))}e.separation=t.depth,o.setActive(e,!0,n)}else!0===e.isActive&&o.setActive(e,!1,n)},o.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},o.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},{"./Contact":4}],8:[function(e,t,n){var o={};t.exports=o;var i=e("./Pair"),r=e("../core/Common");o._pairMaxIdleLife=1e3,o.create=function(e){return r.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},o.update=function(e,t,n){var o,a,s,l,c=e.list,u=e.table,d=e.collisionStart,p=e.collisionEnd,f=e.collisionActive,v=[];for(d.length=0,p.length=0,f.length=0,l=0;l<t.length;l++)(o=t[l]).collided&&(a=i.id(o.bodyA,o.bodyB),v.push(a),(s=u[a])?(s.isActive?f.push(s):d.push(s),i.update(s,o,n)):(s=i.create(o,n),u[a]=s,d.push(s),c.push(s)));for(l=0;l<c.length;l++)(s=c[l]).isActive&&-1===r.indexOf(v,s.id)&&(i.setActive(s,!1,n),p.push(s))},o.removeOld=function(e,t){var n,i,r,a,s=e.list,l=e.table,c=[];for(a=0;a<s.length;a++)(i=(n=s[a]).collision).bodyA.isSleeping||i.bodyB.isSleeping?n.timeUpdated=t:t-n.timeUpdated>o._pairMaxIdleLife&&c.push(a);for(a=0;a<c.length;a++)delete l[(n=s[r=c[a]-a]).id],s.splice(r,1)},o.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},{"../core/Common":14,"./Pair":7}],9:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vector"),r=e("./SAT"),a=e("../geometry/Bounds"),s=e("../factory/Bodies"),l=e("../geometry/Vertices");o.collides=function(e,t){for(var n=[],o=0;o<t.length;o++){var i=t[o];if(a.overlaps(i.bounds,e.bounds))for(var s=1===i.parts.length?0:1;s<i.parts.length;s++){var l=i.parts[s];if(a.overlaps(l.bounds,e.bounds)){var c=r.collides(l,e);if(c.collided){n.push(c);break}}}}return n},o.ray=function(e,t,n,r){r=r||1e-100;for(var a=i.angle(t,n),l=i.magnitude(i.sub(t,n)),c=.5*(n.x+t.x),u=.5*(n.y+t.y),d=s.rectangle(c,u,l,r,{angle:a}),p=o.collides(d,e),f=0;f<p.length;f+=1){var v=p[f];v.body=v.bodyB=v.bodyA}return p},o.region=function(e,t,n){for(var o=[],i=0;i<e.length;i++){var r=e[i],s=a.overlaps(r.bounds,t);(s&&!n||!s&&n)&&o.push(r)}return o},o.point=function(e,t){for(var n=[],o=0;o<e.length;o++){var i=e[o];if(a.contains(i.bounds,t))for(var r=1===i.parts.length?0:1;r<i.parts.length;r++){var s=i.parts[r];if(a.contains(s.bounds,t)&&l.contains(s.vertices,t)){n.push(i);break}}}return n}},{"../factory/Bodies":23,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29,"./SAT":11}],10:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector"),a=e("../core/Common"),s=e("../geometry/Bounds");o._restingThresh=4,o._restingThreshTangent=6,o._positionDampen=.9,o._positionWarming=.8,o._frictionNormalMultiplier=5,o.preSolvePosition=function(e){var t,n,o;for(t=0;t<e.length;t++)(n=e[t]).isActive&&(o=n.activeContacts.length,n.collision.parentA.totalContacts+=o,n.collision.parentB.totalContacts+=o)},o.solvePosition=function(e,t){var n,i,a,s,l,c,u,d,p,f=r._temp[0],v=r._temp[1],m=r._temp[2],g=r._temp[3];for(n=0;n<e.length;n++)(i=e[n]).isActive&&!i.isSensor&&(s=(a=i.collision).parentA,l=a.parentB,c=a.normal,u=r.sub(r.add(l.positionImpulse,l.position,f),r.add(s.positionImpulse,r.sub(l.position,a.penetration,v),m),g),i.separation=r.dot(c,u));for(n=0;n<e.length;n++)(i=e[n]).isActive&&!i.isSensor&&(s=(a=i.collision).parentA,l=a.parentB,c=a.normal,p=(i.separation-i.slop)*t,(s.isStatic||l.isStatic)&&(p*=2),s.isStatic||s.isSleeping||(d=o._positionDampen/s.totalContacts,s.positionImpulse.x+=c.x*p*d,s.positionImpulse.y+=c.y*p*d),l.isStatic||l.isSleeping||(d=o._positionDampen/l.totalContacts,l.positionImpulse.x-=c.x*p*d,l.positionImpulse.y-=c.y*p*d))},o.postSolvePosition=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.totalContacts=0,0!==n.positionImpulse.x||0!==n.positionImpulse.y){for(var a=0;a<n.parts.length;a++){var l=n.parts[a];i.translate(l.vertices,n.positionImpulse),s.update(l.bounds,l.vertices,n.velocity),l.position.x+=n.positionImpulse.x,l.position.y+=n.positionImpulse.y}n.positionPrev.x+=n.positionImpulse.x,n.positionPrev.y+=n.positionImpulse.y,r.dot(n.positionImpulse,n.velocity)<0?(n.positionImpulse.x=0,n.positionImpulse.y=0):(n.positionImpulse.x*=o._positionWarming,n.positionImpulse.y*=o._positionWarming)}}},o.preSolveVelocity=function(e){var t,n,o,i,a,s,l,c,u,d,p,f,v,m,g=r._temp[0],y=r._temp[1];for(t=0;t<e.length;t++)if((o=e[t]).isActive&&!o.isSensor)for(i=o.activeContacts,s=(a=o.collision).parentA,l=a.parentB,c=a.normal,u=a.tangent,n=0;n<i.length;n++)p=(d=i[n]).vertex,f=d.normalImpulse,v=d.tangentImpulse,0===f&&0===v||(g.x=c.x*f+u.x*v,g.y=c.y*f+u.y*v,s.isStatic||s.isSleeping||(m=r.sub(p,s.position,y),s.positionPrev.x+=g.x*s.inverseMass,s.positionPrev.y+=g.y*s.inverseMass,s.anglePrev+=r.cross(m,g)*s.inverseInertia),l.isStatic||l.isSleeping||(m=r.sub(p,l.position,y),l.positionPrev.x-=g.x*l.inverseMass,l.positionPrev.y-=g.y*l.inverseMass,l.anglePrev-=r.cross(m,g)*l.inverseInertia))},o.solveVelocity=function(e,t){for(var n=t*t,i=r._temp[0],s=r._temp[1],l=r._temp[2],c=r._temp[3],u=r._temp[4],d=r._temp[5],p=0;p<e.length;p++){var f=e[p];if(f.isActive&&!f.isSensor){var v=f.collision,m=v.parentA,g=v.parentB,y=v.normal,h=v.tangent,x=f.activeContacts,b=1/x.length;m.velocity.x=m.position.x-m.positionPrev.x,m.velocity.y=m.position.y-m.positionPrev.y,g.velocity.x=g.position.x-g.positionPrev.x,g.velocity.y=g.position.y-g.positionPrev.y,m.angularVelocity=m.angle-m.anglePrev,g.angularVelocity=g.angle-g.anglePrev;for(var w=0;w<x.length;w++){var S=x[w],P=S.vertex,C=r.sub(P,m.position,s),_=r.sub(P,g.position,l),M=r.add(m.velocity,r.mult(r.perp(C),m.angularVelocity),c),A=r.add(g.velocity,r.mult(r.perp(_),g.angularVelocity),u),B=r.sub(M,A,d),k=r.dot(y,B),I=r.dot(h,B),R=Math.abs(I),T=a.sign(I),O=(1+f.restitution)*k,V=a.clamp(f.separation+k,0,1)*o._frictionNormalMultiplier,E=I,F=1/0;R>f.friction*f.frictionStatic*V*n&&(F=R,E=a.clamp(f.friction*T*n,-F,F));var j=r.cross(C,y),L=r.cross(_,y),W=b/(m.inverseMass+g.inverseMass+m.inverseInertia*j*j+g.inverseInertia*L*L);if(O*=W,E*=W,k<0&&k*k>o._restingThresh*n)S.normalImpulse=0;else{var D=S.normalImpulse;S.normalImpulse=Math.min(S.normalImpulse+O,0),O=S.normalImpulse-D}if(I*I>o._restingThreshTangent*n)S.tangentImpulse=0;else{var q=S.tangentImpulse;S.tangentImpulse=a.clamp(S.tangentImpulse+E,-F,F),E=S.tangentImpulse-q}i.x=y.x*O+h.x*E,i.y=y.y*O+h.y*E,m.isStatic||m.isSleeping||(m.positionPrev.x+=i.x*m.inverseMass,m.positionPrev.y+=i.y*m.inverseMass,m.anglePrev+=r.cross(C,i)*m.inverseInertia),g.isStatic||g.isSleeping||(g.positionPrev.x-=i.x*g.inverseMass,g.positionPrev.y-=i.y*g.inverseMass,g.anglePrev-=r.cross(_,i)*g.inverseInertia)}}}}},{"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],11:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector");o.collides=function(e,t,n){var a,s,l,c,u=!1;if(n){var d=e.parent,p=t.parent,f=d.speed*d.speed+d.angularSpeed*d.angularSpeed+p.speed*p.speed+p.angularSpeed*p.angularSpeed;u=n&&n.collided&&f<.2,c=n}else c={collided:!1,bodyA:e,bodyB:t};if(n&&u){var v=c.axisBody,m=v===e?t:e,g=[v.axes[n.axisNumber]];if(l=o._overlapAxes(v.vertices,m.vertices,g),c.reused=!0,l.overlap<=0)return c.collided=!1,c}else{if((a=o._overlapAxes(e.vertices,t.vertices,e.axes)).overlap<=0)return c.collided=!1,c;if((s=o._overlapAxes(t.vertices,e.vertices,t.axes)).overlap<=0)return c.collided=!1,c;a.overlap<s.overlap?(l=a,c.axisBody=e):(l=s,c.axisBody=t),c.axisNumber=l.axisNumber}c.bodyA=e.id<t.id?e:t,c.bodyB=e.id<t.id?t:e,c.collided=!0,c.depth=l.overlap,c.parentA=c.bodyA.parent,c.parentB=c.bodyB.parent,e=c.bodyA,t=c.bodyB,r.dot(l.axis,r.sub(t.position,e.position))<0?c.normal={x:l.axis.x,y:l.axis.y}:c.normal={x:-l.axis.x,y:-l.axis.y},c.tangent=r.perp(c.normal),c.penetration=c.penetration||{},c.penetration.x=c.normal.x*c.depth,c.penetration.y=c.normal.y*c.depth;var y=o._findSupports(e,t,c.normal),h=[];if(i.contains(e.vertices,y[0])&&h.push(y[0]),i.contains(e.vertices,y[1])&&h.push(y[1]),h.length<2){var x=o._findSupports(t,e,r.neg(c.normal));i.contains(t.vertices,x[0])&&h.push(x[0]),h.length<2&&i.contains(t.vertices,x[1])&&h.push(x[1])}return h.length<1&&(h=[y[0]]),c.supports=h,c},o._overlapAxes=function(e,t,n){for(var i,a,s=r._temp[0],l=r._temp[1],c={overlap:Number.MAX_VALUE},u=0;u<n.length;u++){if(a=n[u],o._projectToAxis(s,e,a),o._projectToAxis(l,t,a),(i=Math.min(s.max-l.min,l.max-s.min))<=0)return c.overlap=i,c;i<c.overlap&&(c.overlap=i,c.axis=a,c.axisNumber=u)}return c},o._projectToAxis=function(e,t,n){for(var o=r.dot(t[0],n),i=o,a=1;a<t.length;a+=1){var s=r.dot(t[a],n);s>i?i=s:s<o&&(o=s)}e.min=o,e.max=i},o._findSupports=function(e,t,n){for(var o,i,a,s,l=Number.MAX_VALUE,c=r._temp[0],u=t.vertices,d=e.position,p=0;p<u.length;p++)i=u[p],c.x=i.x-d.x,c.y=i.y-d.y,(o=-r.dot(n,c))<l&&(l=o,a=i);return i=u[a.index-1>=0?a.index-1:u.length-1],c.x=i.x-d.x,c.y=i.y-d.y,l=-r.dot(n,c),s=i,i=u[(a.index+1)%u.length],c.x=i.x-d.x,c.y=i.y-d.y,(o=-r.dot(n,c))<l&&(s=i),[a,s]}},{"../geometry/Vector":28,"../geometry/Vertices":29}],12:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../geometry/Vector"),a=e("../core/Sleeping"),s=e("../geometry/Bounds"),l=e("../geometry/Axes"),c=e("../core/Common");o._warming=.4,o._torqueDampen=1,o._minLength=1e-6,o.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?r.add(t.bodyA.position,t.pointA):t.pointA,o=t.bodyB?r.add(t.bodyB.position,t.pointB):t.pointB,i=r.magnitude(r.sub(n,o));t.length=void 0!==t.length?t.length:i,t.id=t.id||c.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var a={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(a.type="pin",a.anchors=!1):t.stiffness<.9&&(a.type="spring"),t.render=c.extend(a,t.render),t},o.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],o=n.constraintImpulse;n.isStatic||0===o.x&&0===o.y&&0===o.angle||(n.position.x+=o.x,n.position.y+=o.y,n.angle+=o.angle)}},o.solveAll=function(e,t){for(var n=0;n<e.length;n+=1){var i=e[n],r=!i.bodyA||i.bodyA&&i.bodyA.isStatic,a=!i.bodyB||i.bodyB&&i.bodyB.isStatic;(r||a)&&o.solve(e[n],t)}for(n=0;n<e.length;n+=1)r=!(i=e[n]).bodyA||i.bodyA&&i.bodyA.isStatic,a=!i.bodyB||i.bodyB&&i.bodyB.isStatic,r||a||o.solve(e[n],t)},o.solve=function(e,t){var n=e.bodyA,i=e.bodyB,a=e.pointA,s=e.pointB;if(n||i){n&&!n.isStatic&&(r.rotate(a,n.angle-e.angleA,a),e.angleA=n.angle),i&&!i.isStatic&&(r.rotate(s,i.angle-e.angleB,s),e.angleB=i.angle);var l=a,c=s;if(n&&(l=r.add(n.position,a)),i&&(c=r.add(i.position,s)),l&&c){var u=r.sub(l,c),d=r.magnitude(u);d<o._minLength&&(d=o._minLength);var p,f,v,m,g,y=(d-e.length)/d,h=e.stiffness<1?e.stiffness*t:e.stiffness,x=r.mult(u,y*h),b=(n?n.inverseMass:0)+(i?i.inverseMass:0),w=b+((n?n.inverseInertia:0)+(i?i.inverseInertia:0));if(e.damping){var S=r.create();v=r.div(u,d),g=r.sub(i&&r.sub(i.position,i.positionPrev)||S,n&&r.sub(n.position,n.positionPrev)||S),m=r.dot(v,g)}n&&!n.isStatic&&(f=n.inverseMass/b,n.constraintImpulse.x-=x.x*f,n.constraintImpulse.y-=x.y*f,n.position.x-=x.x*f,n.position.y-=x.y*f,e.damping&&(n.positionPrev.x-=e.damping*v.x*m*f,n.positionPrev.y-=e.damping*v.y*m*f),p=r.cross(a,x)/w*o._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=p,n.angle-=p),i&&!i.isStatic&&(f=i.inverseMass/b,i.constraintImpulse.x+=x.x*f,i.constraintImpulse.y+=x.y*f,i.position.x+=x.x*f,i.position.y+=x.y*f,e.damping&&(i.positionPrev.x+=e.damping*v.x*m*f,i.positionPrev.y+=e.damping*v.y*m*f),p=r.cross(s,x)/w*o._torqueDampen*i.inverseInertia*(1-e.angularStiffness),i.constraintImpulse.angle+=p,i.angle+=p)}}},o.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],c=n.constraintImpulse;if(!(n.isStatic||0===c.x&&0===c.y&&0===c.angle)){a.set(n,!1);for(var u=0;u<n.parts.length;u++){var d=n.parts[u];i.translate(d.vertices,c),u>0&&(d.position.x+=c.x,d.position.y+=c.y),0!==c.angle&&(i.rotate(d.vertices,c.angle,n.position),l.rotate(d.axes,c.angle),u>0&&r.rotateAbout(d.position,c.angle,n.position,d.position)),s.update(d.bounds,d.vertices,n.velocity)}c.angle*=o._warming,c.x*=o._warming,c.y*=o._warming}}}},{"../core/Common":14,"../core/Sleeping":22,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],13:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vertices"),r=e("../core/Sleeping"),a=e("../core/Mouse"),s=e("../core/Events"),l=e("../collision/Detector"),c=e("./Constraint"),u=e("../body/Composite"),d=e("../core/Common"),p=e("../geometry/Bounds");o.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=a.create(e.render.canvas):t&&t.element?n=a.create(t.element):(n=a.create(),d.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var i={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:c.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},r=d.extend(i,t);return s.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);o.update(r,t),o._triggerEvents(r)})),r},o.update=function(e,t){var n=e.mouse,o=e.constraint,a=e.body;if(0===n.button){if(o.bodyB)r.set(o.bodyB,!1),o.pointA=n.position;else for(var c=0;c<t.length;c++)if(a=t[c],p.contains(a.bounds,n.position)&&l.canCollide(a.collisionFilter,e.collisionFilter))for(var u=a.parts.length>1?1:0;u<a.parts.length;u++){var d=a.parts[u];if(i.contains(d.vertices,n.position)){o.pointA=n.position,o.bodyB=e.body=a,o.pointB={x:n.position.x-a.position.x,y:n.position.y-a.position.y},o.angleB=a.angle,r.set(a,!1),s.trigger(e,"startdrag",{mouse:n,body:a});break}}}else o.bodyB=e.body=null,o.pointB=null,a&&s.trigger(e,"enddrag",{mouse:n,body:a})},o._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&s.trigger(e,"mousemove",{mouse:t}),n.mousedown&&s.trigger(e,"mousedown",{mouse:t}),n.mouseup&&s.trigger(e,"mouseup",{mouse:t}),a.clearSourceEvents(t)}},{"../body/Composite":2,"../collision/Detector":5,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../core/Sleeping":22,"../geometry/Bounds":26,"../geometry/Vertices":29,"./Constraint":12}],14:[function(e,n,o){(function(t){var o={};n.exports=o,function(){o._nextId=0,o._seed=0,o._nowStartTime=+new Date,o.extend=function(e,t){var n,i;"boolean"==typeof t?(n=2,i=t):(n=1,i=!0);for(var r=n;r<arguments.length;r++){var a=arguments[r];if(a)for(var s in a)i&&a[s]&&a[s].constructor===Object?e[s]&&e[s].constructor!==Object?e[s]=a[s]:(e[s]=e[s]||{},o.extend(e[s],i,a[s])):e[s]=a[s]}return e},o.clone=function(e,t){return o.extend({},t,e)},o.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},o.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),o=0;o<n.length;o++)t.push(e[n[o]]);return t}for(var i in e)t.push(e[i]);return t},o.get=function(e,t,n,o){t=t.split(".").slice(n,o);for(var i=0;i<t.length;i+=1)e=e[t[i]];return e},o.set=function(e,t,n,i,r){var a=t.split(".").slice(i,r);return o.get(e,t,0,-1)[a[a.length-1]]=n,n},o.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(o.random()*(t+1)),i=e[t];e[t]=e[n],e[n]=i}return e},o.choose=function(e){return e[Math.floor(o.random()*e.length)]},o.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},o.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},o.isFunction=function(e){return"function"==typeof e},o.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},o.isString=function(e){return"[object String]"===toString.call(e)},o.clamp=function(e,t,n){return e<t?t:e>n?n:e},o.sign=function(e){return e<0?-1:1},o.now=function(){if(window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return new Date-o._nowStartTime},o.random=function(e,t){return t=void 0!==t?t:1,(e=void 0!==e?e:0)+n()*(t-e)};var n=function(){return o._seed=(9301*o._seed+49297)%233280,o._seed/233280};o.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},o.logLevel=1,o.log=function(){console&&o.logLevel>0&&o.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.info=function(){console&&o.logLevel>0&&o.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.warn=function(){console&&o.logLevel>0&&o.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},o.nextId=function(){return o._nextId++},o.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},o.map=function(e,t){if(e.map)return e.map(t);for(var n=[],o=0;o<e.length;o+=1)n.push(t(e[o]));return n},o.topologicalSort=function(e){var t=[],n=[],i=[];for(var r in e)n[r]||i[r]||o._topologicalSort(r,n,i,e,t);return t},o._topologicalSort=function(e,t,n,i,r){var a=i[e]||[];n[e]=!0;for(var s=0;s<a.length;s+=1){var l=a[s];n[l]||t[l]||o._topologicalSort(l,t,n,i,r)}n[e]=!1,t[e]=!0,r.push(e)},o.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var o=function(){for(var t,n=new Array(arguments.length),o=0,i=arguments.length;o<i;o++)n[o]=arguments[o];for(o=0;o<e.length;o+=1){var r=e[o].apply(t,n);void 0!==r&&(t=r)}return t};return o._chained=e,o},o.chainPathBefore=function(e,t,n){return o.set(e,t,o.chain(n,o.get(e,t)))},o.chainPathAfter=function(e,t,n){return o.set(e,t,o.chain(o.get(e,t),n))},o._requireGlobal=function(n,o){return("undefined"!=typeof window?window[n]:void 0!==t?t[n]:null)||e(o)}}()}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],15:[function(e,t,n){var o={};t.exports=o;var i=e("../body/World"),r=e("./Sleeping"),a=e("../collision/Resolver"),s=e("../render/Render"),l=e("../collision/Pairs"),c=(e("./Metrics"),e("../collision/Grid")),u=e("./Events"),d=e("../body/Composite"),p=e("../constraint/Constraint"),f=e("./Common"),v=e("../body/Body");o.create=function(e,t){t=(t=f.isElement(e)?t:e)||{},((e=f.isElement(e)?e:null)||t.render)&&f.warn("Engine.create: engine.render is deprecated (see docs)");var n={positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},timing:{timestamp:0,timeScale:1},broadphase:{controller:c}},o=f.extend(n,t);if(e||o.render){var r={element:e,controller:s};o.render=f.extend(r,o.render)}return o.render&&o.render.controller&&(o.render=o.render.controller.create(o.render)),o.render&&(o.render.engine=o),o.world=t.world||i.create(o.world),o.pairs=l.create(),o.broadphase=o.broadphase.controller.create(o.broadphase),o.metrics=o.metrics||{extended:!1},o},o.update=function(e,t,n){t=t||1e3/60,n=n||1;var i,s=e.world,c=e.timing,f=e.broadphase,v=[];c.timestamp+=t*c.timeScale;var m={timestamp:c.timestamp};u.trigger(e,"beforeUpdate",m);var g=d.allBodies(s),y=d.allConstraints(s);for(e.enableSleeping&&r.update(g,c.timeScale),o._bodiesApplyGravity(g,s.gravity),o._bodiesUpdate(g,t,c.timeScale,n,s.bounds),p.preSolveAll(g),i=0;i<e.constraintIterations;i++)p.solveAll(y,c.timeScale);p.postSolveAll(g),f.controller?(s.isModified&&f.controller.clear(f),f.controller.update(f,g,e,s.isModified),v=f.pairsList):v=g,s.isModified&&d.setModified(s,!1,!1,!0);var h=f.detector(v,e),x=e.pairs,b=c.timestamp;for(l.update(x,h,b),l.removeOld(x,b),e.enableSleeping&&r.afterCollisions(x.list,c.timeScale),x.collisionStart.length>0&&u.trigger(e,"collisionStart",{pairs:x.collisionStart}),a.preSolvePosition(x.list),i=0;i<e.positionIterations;i++)a.solvePosition(x.list,c.timeScale);for(a.postSolvePosition(g),p.preSolveAll(g),i=0;i<e.constraintIterations;i++)p.solveAll(y,c.timeScale);for(p.postSolveAll(g),a.preSolveVelocity(x.list),i=0;i<e.velocityIterations;i++)a.solveVelocity(x.list,c.timeScale);return x.collisionActive.length>0&&u.trigger(e,"collisionActive",{pairs:x.collisionActive}),x.collisionEnd.length>0&&u.trigger(e,"collisionEnd",{pairs:x.collisionEnd}),o._bodiesClearForces(g),u.trigger(e,"afterUpdate",m),e},o.merge=function(e,t){if(f.extend(e,t),t.world){e.world=t.world,o.clear(e);for(var n=d.allBodies(e.world),i=0;i<n.length;i++){var a=n[i];r.set(a,!1),a.id=f.nextId()}}},o.clear=function(e){var t=e.world;l.clear(e.pairs);var n=e.broadphase;if(n.controller){var o=d.allBodies(t);n.controller.clear(n),n.controller.update(n,o,e,!0)}},o._bodiesClearForces=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.force.x=0,n.force.y=0,n.torque=0}},o._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001;if((0!==t.x||0!==t.y)&&0!==n)for(var o=0;o<e.length;o++){var i=e[o];i.isStatic||i.isSleeping||(i.force.y+=i.mass*t.y*n,i.force.x+=i.mass*t.x*n)}},o._bodiesUpdate=function(e,t,n,o,i){for(var r=0;r<e.length;r++){var a=e[r];a.isStatic||a.isSleeping||v.update(a,t,n,o)}}},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Grid":6,"../collision/Pairs":8,"../collision/Resolver":10,"../constraint/Constraint":12,"../render/Render":31,"./Common":14,"./Events":16,"./Metrics":18,"./Sleeping":22}],16:[function(e,t,n){var o={};t.exports=o;var i=e("./Common");o.on=function(e,t,n){for(var o,i=t.split(" "),r=0;r<i.length;r++)o=i[r],e.events=e.events||{},e.events[o]=e.events[o]||[],e.events[o].push(n);return n},o.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=i.keys(e.events).join(" "));for(var o=t.split(" "),r=0;r<o.length;r++){var a=e.events[o[r]],s=[];if(n&&a)for(var l=0;l<a.length;l++)a[l]!==n&&s.push(a[l]);e.events[o[r]]=s}}else e.events={}},o.trigger=function(e,t,n){var o,r,a,s;if(e.events){n||(n={}),o=t.split(" ");for(var l=0;l<o.length;l++)if(r=o[l],a=e.events[r]){(s=i.clone(n,!1)).name=r,s.source=e;for(var c=0;c<a.length;c++)a[c].apply(e,[s])}}}},{"./Common":14}],17:[function(e,t,n){var o={};t.exports=o;var i=e("./Plugin"),r=e("./Common");o.name="matter-js",o.version="0.14.2",o.uses=[],o.used=[],o.use=function(){i.use(o,Array.prototype.slice.call(arguments))},o.before=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathBefore(o,e,t)},o.after=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathAfter(o,e,t)}},{"./Common":14,"./Plugin":20}],18:[function(e,t,n){},{"../body/Composite":2,"./Common":14}],19:[function(e,t,n){var o={};t.exports=o;var i=e("../core/Common");o.create=function(e){var t={};return e||i.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=t.element.getAttribute("data-pixel-ratio")||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=o._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},o.setElement(t,t.element),t},o.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},o.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},o.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},o.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},o._getRelativeMousePosition=function(e,t,n){var o,i,r=t.getBoundingClientRect(),a=document.documentElement||document.body.parentNode||document.body,s=void 0!==window.pageXOffset?window.pageXOffset:a.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:a.scrollTop,c=e.changedTouches;return c?(o=c[0].pageX-r.left-s,i=c[0].pageY-r.top-l):(o=e.pageX-r.left-s,i=e.pageY-r.top-l),{x:o/(t.clientWidth/(t.width||t.clientWidth)*n),y:i/(t.clientHeight/(t.height||t.clientHeight)*n)}}},{"../core/Common":14}],20:[function(e,t,n){var o={};t.exports=o;var i=e("./Common");o._registry={},o.register=function(e){if(o.isPlugin(e)||i.warn("Plugin.register:",o.toString(e),"does not implement all required fields."),e.name in o._registry){var t=o._registry[e.name],n=o.versionParse(e.version).number,r=o.versionParse(t.version).number;n>r?(i.warn("Plugin.register:",o.toString(t),"was upgraded to",o.toString(e)),o._registry[e.name]=e):n<r?i.warn("Plugin.register:",o.toString(t),"can not be downgraded to",o.toString(e)):e!==t&&i.warn("Plugin.register:",o.toString(e),"is already registered to different plugin object")}else o._registry[e.name]=e;return e},o.resolve=function(e){return o._registry[o.dependencyParse(e).name]},o.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},o.isPlugin=function(e){return e&&e.name&&e.version&&e.install},o.isUsed=function(e,t){return e.used.indexOf(t)>-1},o.isFor=function(e,t){var n=e.for&&o.dependencyParse(e.for);return!e.for||t.name===n.name&&o.versionSatisfies(t.version,n.range)},o.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=o.dependencies(e),r=i.topologicalSort(n),a=[],s=0;s<r.length;s+=1)if(r[s]!==e.name){var l=o.resolve(r[s]);l?o.isUsed(e,l.name)||(o.isFor(l,e)||(i.warn("Plugin.use:",o.toString(l),"is for",l.for,"but installed on",o.toString(e)+"."),l._warned=!0),l.install?l.install(e):(i.warn("Plugin.use:",o.toString(l),"does not specify an install function."),l._warned=!0),l._warned?(a.push("🔶 "+o.toString(l)),delete l._warned):a.push("✅ "+o.toString(l)),e.used.push(l.name)):a.push("❌ "+r[s])}a.length>0&&i.info(a.join("  "))}else i.warn("Plugin.use:",o.toString(e),"does not specify any dependencies to install.")},o.dependencies=function(e,t){var n=o.dependencyParse(e),r=n.name;if(!(r in(t=t||{}))){e=o.resolve(e)||e,t[r]=i.map(e.uses||[],(function(t){o.isPlugin(t)&&o.register(t);var r=o.dependencyParse(t),a=o.resolve(t);return a&&!o.versionSatisfies(a.version,r.range)?(i.warn("Plugin.dependencies:",o.toString(a),"does not satisfy",o.toString(r),"used by",o.toString(n)+"."),a._warned=!0,e._warned=!0):a||(i.warn("Plugin.dependencies:",o.toString(t),"used by",o.toString(n),"could not be resolved."),e._warned=!0),r.name}));for(var a=0;a<t[r].length;a+=1)o.dependencies(t[r][a],t);return t}},o.dependencyParse=function(e){return i.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?))?$/.test(e)||i.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},o.versionParse=function(e){/^\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-]+)?$/.test(e)||i.warn("Plugin.versionParse:",e,"is not a valid version or range.");var t=e.split("-");e=t[0];var n=isNaN(Number(e[0])),o=n?e.substr(1):e,r=i.map(o.split("."),(function(e){return Number(e)}));return{isRange:n,version:o,range:e,operator:n?e[0]:"",parts:r,prerelease:t[1],number:1e8*r[0]+1e4*r[1]+r[2]}},o.versionSatisfies=function(e,t){t=t||"*";var n=o.versionParse(t),i=n.parts,r=o.versionParse(e),a=r.parts;if(n.isRange){if("*"===n.operator||"*"===e)return!0;if("~"===n.operator)return a[0]===i[0]&&a[1]===i[1]&&a[2]>=i[2];if("^"===n.operator)return i[0]>0?a[0]===i[0]&&r.number>=n.number:i[1]>0?a[1]===i[1]&&a[2]>=i[2]:a[2]===i[2]}return e===t||"*"===e}},{"./Common":14}],21:[function(e,t,n){var o={};t.exports=o;var i,r,a,s=e("./Events"),l=e("./Engine"),c=e("./Common");"undefined"!=typeof window&&(i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,r=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),i||(i=function(e){a=setTimeout((function(){e(c.now())}),1e3/60)},r=function(){clearTimeout(a)}),o.create=function(e){var t=c.extend({fps:60,correction:1,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,timeScalePrev:1,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},o.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=o.create()),function n(r){e.frameRequestId=i(n),r&&e.enabled&&o.tick(e,t,r)}(),e},o.tick=function(e,t,n){var o,i=t.timing,r=1,a={timestamp:i.timestamp};s.trigger(e,"beforeTick",a),s.trigger(t,"beforeTick",a),e.isFixed?o=e.delta:(o=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(o),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),r=(o=(o=(o=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:o)>e.deltaMax?e.deltaMax:o)/e.delta,e.delta=o),0!==e.timeScalePrev&&(r*=i.timeScale/e.timeScalePrev),0===i.timeScale&&(r=0),e.timeScalePrev=i.timeScale,e.correction=r,e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),s.trigger(e,"tick",a),s.trigger(t,"tick",a),t.world.isModified&&t.render&&t.render.controller&&t.render.controller.clear&&t.render.controller.clear(t.render),s.trigger(e,"beforeUpdate",a),l.update(t,o,r),s.trigger(e,"afterUpdate",a),t.render&&t.render.controller&&(s.trigger(e,"beforeRender",a),s.trigger(t,"beforeRender",a),t.render.controller.world(t.render),s.trigger(e,"afterRender",a),s.trigger(t,"afterRender",a)),s.trigger(e,"afterTick",a),s.trigger(t,"afterTick",a)},o.stop=function(e){r(e.frameRequestId)},o.start=function(e,t){o.run(e,t)}},{"./Common":14,"./Engine":15,"./Events":16}],22:[function(e,t,n){var o={};t.exports=o;var i=e("./Events");o._motionWakeThreshold=.18,o._motionSleepThreshold=.08,o._minBias=.9,o.update=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var r=e[i],a=r.speed*r.speed+r.angularSpeed*r.angularSpeed;if(0===r.force.x&&0===r.force.y){var s=Math.min(r.motion,a),l=Math.max(r.motion,a);r.motion=o._minBias*s+(1-o._minBias)*l,r.sleepThreshold>0&&r.motion<o._motionSleepThreshold*n?(r.sleepCounter+=1,r.sleepCounter>=r.sleepThreshold&&o.set(r,!0)):r.sleepCounter>0&&(r.sleepCounter-=1)}else o.set(r,!1)}},o.afterCollisions=function(e,t){for(var n=t*t*t,i=0;i<e.length;i++){var r=e[i];if(r.isActive){var a=r.collision,s=a.bodyA.parent,l=a.bodyB.parent;if(!(s.isSleeping&&l.isSleeping||s.isStatic||l.isStatic)&&(s.isSleeping||l.isSleeping)){var c=s.isSleeping&&!s.isStatic?s:l,u=c===s?l:s;!c.isStatic&&u.motion>o._motionWakeThreshold*n&&o.set(c,!1)}}}},o.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||i.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&i.trigger(e,"sleepEnd"))}},{"./Events":16}],23:[function(e,t,n){var o={};t.exports=o;var i,r=e("../geometry/Vertices"),a=e("../core/Common"),s=e("../body/Body"),l=e("../geometry/Bounds"),c=e("../geometry/Vector");o.rectangle=function(e,t,n,o,i){i=i||{};var l={label:"Rectangle Body",position:{x:e,y:t},vertices:r.fromPath("L 0 0 L "+n+" 0 L "+n+" "+o+" L 0 "+o)};if(i.chamfer){var c=i.chamfer;l.vertices=r.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete i.chamfer}return s.create(a.extend({},l,i))},o.trapezoid=function(e,t,n,o,i,l){l=l||{};var c,u=n*(i*=.5),d=u+(1-2*i)*n,p=d+u;c=i<.5?"L 0 0 L "+u+" "+-o+" L "+d+" "+-o+" L "+p+" 0":"L 0 0 L "+d+" "+-o+" L "+p+" 0";var f={label:"Trapezoid Body",position:{x:e,y:t},vertices:r.fromPath(c)};if(l.chamfer){var v=l.chamfer;f.vertices=r.chamfer(f.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete l.chamfer}return s.create(a.extend({},f,l))},o.circle=function(e,t,n,i,r){i=i||{};var s={label:"Circle Body",circleRadius:n};r=r||25;var l=Math.ceil(Math.max(10,Math.min(r,n)));return l%2==1&&(l+=1),o.polygon(e,t,l,n,a.extend({},s,i))},o.polygon=function(e,t,n,i,l){if(l=l||{},n<3)return o.circle(e,t,i,l);for(var c=2*Math.PI/n,u="",d=.5*c,p=0;p<n;p+=1){var f=d+p*c,v=Math.cos(f)*i,m=Math.sin(f)*i;u+="L "+v.toFixed(3)+" "+m.toFixed(3)+" "}var g={label:"Polygon Body",position:{x:e,y:t},vertices:r.fromPath(u)};if(l.chamfer){var y=l.chamfer;g.vertices=r.chamfer(g.vertices,y.radius,y.quality,y.qualityMin,y.qualityMax),delete l.chamfer}return s.create(a.extend({},g,l))},o.fromVertices=function(e,t,n,o,u,d,p){var f,v,m,g,y,h,x,b,w;for(i||(i=a._requireGlobal("decomp","poly-decomp")),o=o||{},v=[],u=void 0!==u&&u,d=void 0!==d?d:.01,p=void 0!==p?p:10,i||a.warn("Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull."),a.isArray(n[0])||(n=[n]),b=0;b<n.length;b+=1)if(g=n[b],(m=r.isConvex(g))||!i)g=m?r.clockwiseSort(g):r.hull(g),v.push({position:{x:e,y:t},vertices:g});else{var S=g.map((function(e){return[e.x,e.y]}));i.makeCCW(S),!1!==d&&i.removeCollinearPoints(S,d);var P=i.quickDecomp(S);for(y=0;y<P.length;y++){var C=P[y].map((function(e){return{x:e[0],y:e[1]}}));p>0&&r.area(C)<p||v.push({position:r.centre(C),vertices:C})}}for(y=0;y<v.length;y++)v[y]=s.create(a.extend(v[y],o));if(u)for(y=0;y<v.length;y++){var _=v[y];for(h=y+1;h<v.length;h++){var M=v[h];if(l.overlaps(_.bounds,M.bounds)){var A=_.vertices,B=M.vertices;for(x=0;x<_.vertices.length;x++)for(w=0;w<M.vertices.length;w++){var k=c.magnitudeSquared(c.sub(A[(x+1)%A.length],B[w])),I=c.magnitudeSquared(c.sub(A[x],B[(w+1)%B.length]));k<5&&I<5&&(A[x].isInternal=!0,B[w].isInternal=!0)}}}}return v.length>1?(f=s.create(a.extend({parts:v.slice(0)},o)),s.setPosition(f,{x:e,y:t}),f):v[0]}},{"../body/Body":1,"../core/Common":14,"../geometry/Bounds":26,"../geometry/Vector":28,"../geometry/Vertices":29}],24:[function(e,t,n){var o={};t.exports=o;var i=e("../body/Composite"),r=e("../constraint/Constraint"),a=e("../core/Common"),s=e("../body/Body"),l=e("./Bodies");o.stack=function(e,t,n,o,r,a,l){for(var c,u=i.create({label:"Stack"}),d=e,p=t,f=0,v=0;v<o;v++){for(var m=0,g=0;g<n;g++){var y=l(d,p,g,v,c,f);if(y){var h=y.bounds.max.y-y.bounds.min.y,x=y.bounds.max.x-y.bounds.min.x;h>m&&(m=h),s.translate(y,{x:.5*x,y:.5*h}),d=y.bounds.max.x+r,i.addBody(u,y),c=y,f+=1}else d+=r}p+=m+a,d=e}return u},o.chain=function(e,t,n,o,s,l){for(var c=e.bodies,u=1;u<c.length;u++){var d=c[u-1],p=c[u],f=d.bounds.max.y-d.bounds.min.y,v=d.bounds.max.x-d.bounds.min.x,m=p.bounds.max.y-p.bounds.min.y,g={bodyA:d,pointA:{x:v*t,y:f*n},bodyB:p,pointB:{x:(p.bounds.max.x-p.bounds.min.x)*o,y:m*s}},y=a.extend(g,l);i.addConstraint(e,r.create(y))}return e.label+=" Chain",e},o.mesh=function(e,t,n,o,s){var l,c,u,d,p,f=e.bodies;for(l=0;l<n;l++){for(c=1;c<t;c++)u=f[c-1+l*t],d=f[c+l*t],i.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:d},s)));if(l>0)for(c=0;c<t;c++)u=f[c+(l-1)*t],d=f[c+l*t],i.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:d},s))),o&&c>0&&(p=f[c-1+(l-1)*t],i.addConstraint(e,r.create(a.extend({bodyA:p,bodyB:d},s)))),o&&c<t-1&&(p=f[c+1+(l-1)*t],i.addConstraint(e,r.create(a.extend({bodyA:p,bodyB:d},s))))}return e.label+=" Mesh",e},o.pyramid=function(e,t,n,i,r,a,l){return o.stack(e,t,n,i,r,a,(function(t,o,a,c,u,d){var p=Math.min(i,Math.ceil(n/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>p||a<(c=p-c)||a>n-1-c))return 1===d&&s.translate(u,{x:(a+(n%2==1?1:-1))*f,y:0}),l(e+(u?a*f:0)+a*r,o,a,c,u,d)}))},o.newtonsCradle=function(e,t,n,o,a){for(var s=i.create({label:"Newtons Cradle"}),c=0;c<n;c++){var u=l.circle(e+c*(1.9*o),t+a,o,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),d=r.create({pointA:{x:e+c*(1.9*o),y:t},bodyB:u});i.addBody(s,u),i.addConstraint(s,d)}return s},o.car=function(e,t,n,o,a){var c=s.nextGroup(!0),u=.5*-n+20,d=.5*n-20,p=i.create({label:"Car"}),f=l.rectangle(e,t,n,o,{collisionFilter:{group:c},chamfer:{radius:.5*o},density:2e-4}),v=l.circle(e+u,t+0,a,{collisionFilter:{group:c},friction:.8}),m=l.circle(e+d,t+0,a,{collisionFilter:{group:c},friction:.8}),g=r.create({bodyB:f,pointB:{x:u,y:0},bodyA:v,stiffness:1,length:0}),y=r.create({bodyB:f,pointB:{x:d,y:0},bodyA:m,stiffness:1,length:0});return i.addBody(p,f),i.addBody(p,v),i.addBody(p,m),i.addConstraint(p,g),i.addConstraint(p,y),p},o.softBody=function(e,t,n,i,r,s,c,u,d,p){d=a.extend({inertia:1/0},d),p=a.extend({stiffness:.2,render:{type:"line",anchors:!1}},p);var f=o.stack(e,t,n,i,r,s,(function(e,t){return l.circle(e,t,u,d)}));return o.mesh(f,n,i,c,p),f.label="Soft Body",f}},{"../body/Body":1,"../body/Composite":2,"../constraint/Constraint":12,"../core/Common":14,"./Bodies":23}],25:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vector"),r=e("../core/Common");o.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var o=(n+1)%e.length,a=i.normalise({x:e[o].y-e[n].y,y:e[n].x-e[o].x}),s=0===a.y?1/0:a.x/a.y;t[s=s.toFixed(3).toString()]=a}return r.values(t)},o.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),o=Math.sin(t),i=0;i<e.length;i++){var r,a=e[i];r=a.x*n-a.y*o,a.y=a.x*o+a.y*n,a.x=r}}},{"../core/Common":14,"../geometry/Vector":28}],26:[function(e,t,n){var o={};t.exports=o,o.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&o.update(t,e),t},o.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var o=0;o<t.length;o++){var i=t[o];i.x>e.max.x&&(e.max.x=i.x),i.x<e.min.x&&(e.min.x=i.x),i.y>e.max.y&&(e.max.y=i.y),i.y<e.min.y&&(e.min.y=i.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},o.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},o.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},o.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},o.shift=function(e,t){var n=e.max.x-e.min.x,o=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+o}},{}],27:[function(e,t,n){var o={};t.exports=o,e("../geometry/Bounds");var i=e("../core/Common");o.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||i.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,r,a,s,l,c,u,d,p,f,v,m=[],g=0,y=0,h=0;t=t||15;var x=function(e,t,n){var o=n%2==1&&n>1;if(!p||e!=p.x||t!=p.y){p&&o?(f=p.x,v=p.y):(f=0,v=0);var i={x:f+e,y:v+t};!o&&p||(p=i),m.push(i),y=f+e,h=v+t}},b=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":y=e.x,h=e.y;break;case"H":y=e.x;break;case"V":h=e.y}x(y,h,e.pathSegType)}};for(o._svgPathToAbsolute(e),a=e.getTotalLength(),c=[],n=0;n<e.pathSegList.numberOfItems;n+=1)c.push(e.pathSegList.getItem(n));for(u=c.concat();g<a;){if((l=c[e.getPathSegAtLength(g)])!=d){for(;u.length&&u[0]!=l;)b(u.shift());d=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":s=e.getPointAtLength(g),x(s.x,s.y,0)}g+=t}for(n=0,r=u.length;n<r;++n)b(u[n]);return m},o._svgPathToAbsolute=function(e){for(var t,n,o,i,r,a,s=e.pathSegList,l=0,c=0,u=s.numberOfItems,d=0;d<u;++d){var p=s.getItem(d),f=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in p&&(l=p.x),"y"in p&&(c=p.y);else switch("x1"in p&&(o=l+p.x1),"x2"in p&&(r=l+p.x2),"y1"in p&&(i=c+p.y1),"y2"in p&&(a=c+p.y2),"x"in p&&(l+=p.x),"y"in p&&(c+=p.y),f){case"m":s.replaceItem(e.createSVGPathSegMovetoAbs(l,c),d);break;case"l":s.replaceItem(e.createSVGPathSegLinetoAbs(l,c),d);break;case"h":s.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(l),d);break;case"v":s.replaceItem(e.createSVGPathSegLinetoVerticalAbs(c),d);break;case"c":s.replaceItem(e.createSVGPathSegCurvetoCubicAbs(l,c,o,i,r,a),d);break;case"s":s.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(l,c,r,a),d);break;case"q":s.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(l,c,o,i),d);break;case"t":s.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),d);break;case"a":s.replaceItem(e.createSVGPathSegArcAbs(l,c,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),d);break;case"z":case"Z":l=t,c=n}"M"!=f&&"m"!=f||(t=l,n=c)}}},{"../core/Common":14,"../geometry/Bounds":26}],28:[function(e,t,n){var o={};t.exports=o,o.create=function(e,t){return{x:e||0,y:t||0}},o.clone=function(e){return{x:e.x,y:e.y}},o.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},o.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},o.rotate=function(e,t,n){var o=Math.cos(t),i=Math.sin(t);n||(n={});var r=e.x*o-e.y*i;return n.y=e.x*i+e.y*o,n.x=r,n},o.rotateAbout=function(e,t,n,o){var i=Math.cos(t),r=Math.sin(t);o||(o={});var a=n.x+((e.x-n.x)*i-(e.y-n.y)*r);return o.y=n.y+((e.x-n.x)*r+(e.y-n.y)*i),o.x=a,o},o.normalise=function(e){var t=o.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},o.dot=function(e,t){return e.x*t.x+e.y*t.y},o.cross=function(e,t){return e.x*t.y-e.y*t.x},o.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},o.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},o.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},o.mult=function(e,t){return{x:e.x*t,y:e.y*t}},o.div=function(e,t){return{x:e.x/t,y:e.y/t}},o.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},o.neg=function(e){return{x:-e.x,y:-e.y}},o.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},o._temp=[o.create(),o.create(),o.create(),o.create(),o.create(),o.create()]},{}],29:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Vector"),r=e("../core/Common");o.create=function(e,t){for(var n=[],o=0;o<e.length;o++){var i=e[o],r={x:i.x,y:i.y,index:o,body:t,isInternal:!1};n.push(r)}return n},o.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([\-\d\.e]+)[\s,]*([\-\d\.e]+)*/gi,(function(e,t,o){n.push({x:parseFloat(t),y:parseFloat(o)})})),o.create(n,t)},o.centre=function(e){for(var t,n,r,a=o.area(e,!0),s={x:0,y:0},l=0;l<e.length;l++)r=(l+1)%e.length,t=i.cross(e[l],e[r]),n=i.mult(i.add(e[l],e[r]),t),s=i.add(s,n);return i.div(s,6*a)},o.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return i.div(t,e.length)},o.area=function(e,t){for(var n=0,o=e.length-1,i=0;i<e.length;i++)n+=(e[o].x-e[i].x)*(e[o].y+e[i].y),o=i;return t?n/2:Math.abs(n)/2},o.inertia=function(e,t){for(var n,o,r=0,a=0,s=e,l=0;l<s.length;l++)o=(l+1)%s.length,r+=(n=Math.abs(i.cross(s[o],s[l])))*(i.dot(s[o],s[o])+i.dot(s[o],s[l])+i.dot(s[l],s[l])),a+=n;return t/6*(r/a)},o.translate=function(e,t,n){var o;if(n)for(o=0;o<e.length;o++)e[o].x+=t.x*n,e[o].y+=t.y*n;else for(o=0;o<e.length;o++)e[o].x+=t.x,e[o].y+=t.y;return e},o.rotate=function(e,t,n){if(0!==t){for(var o=Math.cos(t),i=Math.sin(t),r=0;r<e.length;r++){var a=e[r],s=a.x-n.x,l=a.y-n.y;a.x=n.x+(s*o-l*i),a.y=n.y+(s*i+l*o)}return e}},o.contains=function(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=e[(n+1)%e.length];if((t.x-o.x)*(i.y-o.y)+(t.y-o.y)*(o.x-i.x)>0)return!1}return!0},o.scale=function(e,t,n,r){if(1===t&&1===n)return e;var a,s;r=r||o.centre(e);for(var l=0;l<e.length;l++)a=e[l],s=i.sub(a,r),e[l].x=r.x+s.x*t,e[l].y=r.y+s.y*n;return e},o.chamfer=function(e,t,n,o,a){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,o=o||2,a=a||14;for(var s=[],l=0;l<e.length;l++){var c=e[l-1>=0?l-1:e.length-1],u=e[l],d=e[(l+1)%e.length],p=t[l<t.length?l:t.length-1];if(0!==p){var f=i.normalise({x:u.y-c.y,y:c.x-u.x}),v=i.normalise({x:d.y-u.y,y:u.x-d.x}),m=Math.sqrt(2*Math.pow(p,2)),g=i.mult(r.clone(f),p),y=i.normalise(i.mult(i.add(f,v),.5)),h=i.sub(u,i.mult(y,m)),x=n;-1===n&&(x=1.75*Math.pow(p,.32)),(x=r.clamp(x,o,a))%2==1&&(x+=1);for(var b=Math.acos(i.dot(f,v))/x,w=0;w<x;w++)s.push(i.add(i.rotate(g,b*w),h))}else s.push(u)}return s},o.clockwiseSort=function(e){var t=o.mean(e);return e.sort((function(e,n){return i.angle(t,e)-i.angle(t,n)})),e},o.isConvex=function(e){var t,n,o,i,r=0,a=e.length;if(a<3)return null;for(t=0;t<a;t++)if(o=(t+2)%a,i=(e[n=(t+1)%a].x-e[t].x)*(e[o].y-e[n].y),(i-=(e[n].y-e[t].y)*(e[o].x-e[n].x))<0?r|=1:i>0&&(r|=2),3===r)return!1;return 0!==r||null},o.hull=function(e){var t,n,o=[],r=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];r.length>=2&&i.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];o.length>=2&&i.cross3(o[o.length-2],o[o.length-1],t)<=0;)o.pop();o.push(t)}return o.pop(),r.pop(),o.concat(r)}},{"../core/Common":14,"../geometry/Vector":28}],30:[function(e,t,n){var o=t.exports=e("../core/Matter");o.Body=e("../body/Body"),o.Composite=e("../body/Composite"),o.World=e("../body/World"),o.Contact=e("../collision/Contact"),o.Detector=e("../collision/Detector"),o.Grid=e("../collision/Grid"),o.Pairs=e("../collision/Pairs"),o.Pair=e("../collision/Pair"),o.Query=e("../collision/Query"),o.Resolver=e("../collision/Resolver"),o.SAT=e("../collision/SAT"),o.Constraint=e("../constraint/Constraint"),o.MouseConstraint=e("../constraint/MouseConstraint"),o.Common=e("../core/Common"),o.Engine=e("../core/Engine"),o.Events=e("../core/Events"),o.Mouse=e("../core/Mouse"),o.Runner=e("../core/Runner"),o.Sleeping=e("../core/Sleeping"),o.Plugin=e("../core/Plugin"),o.Bodies=e("../factory/Bodies"),o.Composites=e("../factory/Composites"),o.Axes=e("../geometry/Axes"),o.Bounds=e("../geometry/Bounds"),o.Svg=e("../geometry/Svg"),o.Vector=e("../geometry/Vector"),o.Vertices=e("../geometry/Vertices"),o.Render=e("../render/Render"),o.RenderPixi=e("../render/RenderPixi"),o.World.add=o.Composite.add,o.World.remove=o.Composite.remove,o.World.addComposite=o.Composite.addComposite,o.World.addBody=o.Composite.addBody,o.World.addConstraint=o.Composite.addConstraint,o.World.clear=o.Composite.clear,o.Engine.run=o.Runner.run},{"../body/Body":1,"../body/Composite":2,"../body/World":3,"../collision/Contact":4,"../collision/Detector":5,"../collision/Grid":6,"../collision/Pair":7,"../collision/Pairs":8,"../collision/Query":9,"../collision/Resolver":10,"../collision/SAT":11,"../constraint/Constraint":12,"../constraint/MouseConstraint":13,"../core/Common":14,"../core/Engine":15,"../core/Events":16,"../core/Matter":17,"../core/Metrics":18,"../core/Mouse":19,"../core/Plugin":20,"../core/Runner":21,"../core/Sleeping":22,"../factory/Bodies":23,"../factory/Composites":24,"../geometry/Axes":25,"../geometry/Bounds":26,"../geometry/Svg":27,"../geometry/Vector":28,"../geometry/Vertices":29,"../render/Render":31,"../render/RenderPixi":32}],31:[function(e,t,n){var o={};t.exports=o;var i=e("../core/Common"),r=e("../body/Composite"),a=e("../geometry/Bounds"),s=e("../core/Events"),l=e("../collision/Grid"),c=e("../geometry/Vector"),u=e("../core/Mouse");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(i.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o.create=function(e){var t={controller:o,engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,options:{width:800,height:600,pixelRatio:1,background:"#18181d",wireframeBackground:"#0f0f13",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},r=i.extend(t,e);return r.canvas&&(r.canvas.width=r.options.width||r.canvas.width,r.canvas.height=r.options.height||r.canvas.height),r.mouse=e.mouse,r.engine=e.engine,r.canvas=r.canvas||n(r.options.width,r.options.height),r.context=r.canvas.getContext("2d"),r.textures={},r.bounds=r.bounds||{min:{x:0,y:0},max:{x:r.canvas.width,y:r.canvas.height}},1!==r.options.pixelRatio&&o.setPixelRatio(r,r.options.pixelRatio),i.isElement(r.element)?r.element.appendChild(r.canvas):r.canvas.parentNode||i.log("Render.create: options.element was undefined, render.canvas was created but not appended","warn"),r},o.run=function(t){!function n(i){t.frameRequestId=e(n),o.world(t)}()},o.stop=function(e){t(e.frameRequestId)},o.setPixelRatio=function(e,t){var n=e.options,o=e.canvas;"auto"===t&&(t=d(o)),n.pixelRatio=t,o.setAttribute("data-pixel-ratio",t),o.width=n.width*t,o.height=n.height*t,o.style.width=n.width+"px",o.style.height=n.height+"px",e.context.scale(t,t)},o.lookAt=function(e,t,n,o){o=void 0===o||o,t=i.isArray(t)?t:[t],n=n||{x:0,y:0};for(var r={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},a=0;a<t.length;a+=1){var s=t[a],l=s.bounds?s.bounds.min:s.min||s.position||s,c=s.bounds?s.bounds.max:s.max||s.position||s;l&&c&&(l.x<r.min.x&&(r.min.x=l.x),c.x>r.max.x&&(r.max.x=c.x),l.y<r.min.y&&(r.min.y=l.y),c.y>r.max.y&&(r.max.y=c.y))}var d=r.max.x-r.min.x+2*n.x,p=r.max.y-r.min.y+2*n.y,f=e.canvas.height,v=e.canvas.width/f,m=d/p,g=1,y=1;m>v?y=m/v:g=v/m,e.options.hasBounds=!0,e.bounds.min.x=r.min.x,e.bounds.max.x=r.min.x+d*g,e.bounds.min.y=r.min.y,e.bounds.max.y=r.min.y+p*y,o&&(e.bounds.min.x+=.5*d-d*g*.5,e.bounds.max.x+=.5*d-d*g*.5,e.bounds.min.y+=.5*p-p*y*.5,e.bounds.max.y+=.5*p-p*y*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))},o.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,o=t/e.options.width,i=n/e.options.height;e.context.scale(1/o,1/i),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},o.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},o.world=function(e){var t,n=e.engine,i=n.world,d=e.canvas,p=e.context,v=e.options,m=r.allBodies(i),g=r.allConstraints(i),y=v.wireframes?v.wireframeBackground:v.background,h=[],x=[],b={timestamp:n.timing.timestamp};if(s.trigger(e,"beforeRender",b),e.currentBackground!==y&&f(e,y),p.globalCompositeOperation="source-in",p.fillStyle="transparent",p.fillRect(0,0,d.width,d.height),p.globalCompositeOperation="source-over",v.hasBounds){for(t=0;t<m.length;t++){var w=m[t];a.overlaps(w.bounds,e.bounds)&&h.push(w)}for(t=0;t<g.length;t++){var S=g[t],P=S.bodyA,C=S.bodyB,_=S.pointA,M=S.pointB;P&&(_=c.add(P.position,S.pointA)),C&&(M=c.add(C.position,S.pointB)),_&&M&&(a.contains(e.bounds,_)||a.contains(e.bounds,M))&&x.push(S)}o.startViewTransform(e),e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))}else x=g,h=m;!v.wireframes||n.enableSleeping&&v.showSleeping?o.bodies(e,h,p):(v.showConvexHulls&&o.bodyConvexHulls(e,h,p),o.bodyWireframes(e,h,p)),v.showBounds&&o.bodyBounds(e,h,p),(v.showAxes||v.showAngleIndicator)&&o.bodyAxes(e,h,p),v.showPositions&&o.bodyPositions(e,h,p),v.showVelocity&&o.bodyVelocity(e,h,p),v.showIds&&o.bodyIds(e,h,p),v.showSeparations&&o.separations(e,n.pairs.list,p),v.showCollisions&&o.collisions(e,n.pairs.list,p),v.showVertexNumbers&&o.vertexNumbers(e,h,p),v.showMousePosition&&o.mousePosition(e,e.mouse,p),o.constraints(x,p),v.showBroadphase&&n.broadphase.controller===l&&o.grid(e,n.broadphase,p),v.showDebug&&o.debug(e,p),v.hasBounds&&o.endViewTransform(e),s.trigger(e,"afterRender",b)},o.debug=function(e,t){var n=t,o=e.engine,i=o.world,a=o.metrics,s=e.options;if(r.allBodies(i),o.timing.timestamp-(e.debugTimestamp||0)>=500){var l="";a.timing&&(l+="fps: "+Math.round(a.timing.fps)+"    "),e.debugString=l,e.debugTimestamp=o.timing.timestamp}if(e.debugString){n.font="12px Arial",s.wireframes?n.fillStyle="rgba(255,255,255,0.5)":n.fillStyle="rgba(0,0,0,0.5)";for(var c=e.debugString.split("\n"),u=0;u<c.length;u++)n.fillText(c[u],50,50+18*u)}},o.constraints=function(e,t){for(var n=t,o=0;o<e.length;o++){var r=e[o];if(r.render.visible&&r.pointA&&r.pointB){var a,s,l=r.bodyA,u=r.bodyB;if(a=l?c.add(l.position,r.pointA):r.pointA,"pin"===r.render.type)n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath();else{if(s=u?c.add(u.position,r.pointB):r.pointB,n.beginPath(),n.moveTo(a.x,a.y),"spring"===r.render.type)for(var d,p=c.sub(s,a),f=c.perp(c.normalise(p)),v=Math.ceil(i.clamp(r.length/5,12,20)),m=1;m<v;m+=1)d=m%2==0?1:-1,n.lineTo(a.x+p.x*(m/v)+f.x*d*4,a.y+p.y*(m/v)+f.y*d*4);n.lineTo(s.x,s.y)}r.render.lineWidth&&(n.lineWidth=r.render.lineWidth,n.strokeStyle=r.render.strokeStyle,n.stroke()),r.render.anchors&&(n.fillStyle=r.render.strokeStyle,n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.arc(s.x,s.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},o.bodyShadows=function(e,t,n){for(var o=n,i=(e.engine,0);i<t.length;i++){var r=t[i];if(r.render.visible){if(r.circleRadius)o.beginPath(),o.arc(r.position.x,r.position.y,r.circleRadius,0,2*Math.PI),o.closePath();else{o.beginPath(),o.moveTo(r.vertices[0].x,r.vertices[0].y);for(var a=1;a<r.vertices.length;a++)o.lineTo(r.vertices[a].x,r.vertices[a].y);o.closePath()}var s=r.position.x-.5*e.options.width,l=r.position.y-.2*e.options.height,c=Math.abs(s)+Math.abs(l);o.shadowColor="rgba(0,0,0,0.15)",o.shadowOffsetX=.05*s,o.shadowOffsetY=.05*l,o.shadowBlur=1+12*Math.min(1,c/1e3),o.fill(),o.shadowColor=null,o.shadowOffsetX=null,o.shadowOffsetY=null,o.shadowBlur=null}}},o.bodies=function(e,t,n){var o,i,r,a,s=n,l=(e.engine,e.options),c=l.showInternalEdges||!l.wireframes;for(r=0;r<t.length;r++)if((o=t[r]).render.visible)for(a=o.parts.length>1?1:0;a<o.parts.length;a++)if((i=o.parts[a]).render.visible){if(l.showSleeping&&o.isSleeping?s.globalAlpha=.5*i.render.opacity:1!==i.render.opacity&&(s.globalAlpha=i.render.opacity),i.render.sprite&&i.render.sprite.texture&&!l.wireframes){var u=i.render.sprite,d=p(e,u.texture);s.translate(i.position.x,i.position.y),s.rotate(i.angle),s.drawImage(d,d.width*-u.xOffset*u.xScale,d.height*-u.yOffset*u.yScale,d.width*u.xScale,d.height*u.yScale),s.rotate(-i.angle),s.translate(-i.position.x,-i.position.y)}else{if(i.circleRadius)s.beginPath(),s.arc(i.position.x,i.position.y,i.circleRadius,0,2*Math.PI);else{s.beginPath(),s.moveTo(i.vertices[0].x,i.vertices[0].y);for(var f=1;f<i.vertices.length;f++)!i.vertices[f-1].isInternal||c?s.lineTo(i.vertices[f].x,i.vertices[f].y):s.moveTo(i.vertices[f].x,i.vertices[f].y),i.vertices[f].isInternal&&!c&&s.moveTo(i.vertices[(f+1)%i.vertices.length].x,i.vertices[(f+1)%i.vertices.length].y);s.lineTo(i.vertices[0].x,i.vertices[0].y),s.closePath()}l.wireframes?(s.lineWidth=1,s.strokeStyle="#bbb",s.stroke()):(s.fillStyle=i.render.fillStyle,i.render.lineWidth&&(s.lineWidth=i.render.lineWidth,s.strokeStyle=i.render.strokeStyle,s.stroke()),s.fill())}s.globalAlpha=1}},o.bodyWireframes=function(e,t,n){var o,i,r,a,s,l=n,c=e.options.showInternalEdges;for(l.beginPath(),r=0;r<t.length;r++)if((o=t[r]).render.visible)for(s=o.parts.length>1?1:0;s<o.parts.length;s++){for(i=o.parts[s],l.moveTo(i.vertices[0].x,i.vertices[0].y),a=1;a<i.vertices.length;a++)!i.vertices[a-1].isInternal||c?l.lineTo(i.vertices[a].x,i.vertices[a].y):l.moveTo(i.vertices[a].x,i.vertices[a].y),i.vertices[a].isInternal&&!c&&l.moveTo(i.vertices[(a+1)%i.vertices.length].x,i.vertices[(a+1)%i.vertices.length].y);l.lineTo(i.vertices[0].x,i.vertices[0].y)}l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()},o.bodyConvexHulls=function(e,t,n){var o,i,r,a=n;for(a.beginPath(),i=0;i<t.length;i++)if((o=t[i]).render.visible&&1!==o.parts.length){for(a.moveTo(o.vertices[0].x,o.vertices[0].y),r=1;r<o.vertices.length;r++)a.lineTo(o.vertices[r].x,o.vertices[r].y);a.lineTo(o.vertices[0].x,o.vertices[0].y)}a.lineWidth=1,a.strokeStyle="rgba(255,255,255,0.2)",a.stroke()},o.vertexNumbers=function(e,t,n){var o,i,r,a=n;for(o=0;o<t.length;o++){var s=t[o].parts;for(r=s.length>1?1:0;r<s.length;r++){var l=s[r];for(i=0;i<l.vertices.length;i++)a.fillStyle="rgba(255,255,255,0.2)",a.fillText(o+"_"+i,l.position.x+.8*(l.vertices[i].x-l.position.x),l.position.y+.8*(l.vertices[i].y-l.position.y))}}},o.mousePosition=function(e,t,n){var o=n;o.fillStyle="rgba(255,255,255,0.8)",o.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},o.bodyBounds=function(e,t,n){var o=n,i=(e.engine,e.options);o.beginPath();for(var r=0;r<t.length;r++)if(t[r].render.visible)for(var a=t[r].parts,s=a.length>1?1:0;s<a.length;s++){var l=a[s];o.rect(l.bounds.min.x,l.bounds.min.y,l.bounds.max.x-l.bounds.min.x,l.bounds.max.y-l.bounds.min.y)}i.wireframes?o.strokeStyle="rgba(255,255,255,0.08)":o.strokeStyle="rgba(0,0,0,0.1)",o.lineWidth=1,o.stroke()},o.bodyAxes=function(e,t,n){var o,i,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),i=0;i<t.length;i++){var c=t[i],u=c.parts;if(c.render.visible)if(l.showAxes)for(r=u.length>1?1:0;r<u.length;r++)for(o=u[r],a=0;a<o.axes.length;a++){var d=o.axes[a];s.moveTo(o.position.x,o.position.y),s.lineTo(o.position.x+20*d.x,o.position.y+20*d.y)}else for(r=u.length>1?1:0;r<u.length;r++)for(o=u[r],a=0;a<o.axes.length;a++)s.moveTo(o.position.x,o.position.y),s.lineTo((o.vertices[0].x+o.vertices[o.vertices.length-1].x)/2,(o.vertices[0].y+o.vertices[o.vertices.length-1].y)/2)}l.wireframes?(s.strokeStyle="indianred",s.lineWidth=1):(s.strokeStyle="rgba(255, 255, 255, 0.4)",s.globalCompositeOperation="overlay",s.lineWidth=2),s.stroke(),s.globalCompositeOperation="source-over"},o.bodyPositions=function(e,t,n){var o,i,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),r=0;r<t.length;r++)if((o=t[r]).render.visible)for(a=0;a<o.parts.length;a++)i=o.parts[a],s.arc(i.position.x,i.position.y,3,0,2*Math.PI,!1),s.closePath();for(l.wireframes?s.fillStyle="indianred":s.fillStyle="rgba(0,0,0,0.5)",s.fill(),s.beginPath(),r=0;r<t.length;r++)(o=t[r]).render.visible&&(s.arc(o.positionPrev.x,o.positionPrev.y,2,0,2*Math.PI,!1),s.closePath());s.fillStyle="rgba(255,165,0,0.8)",s.fill()},o.bodyVelocity=function(e,t,n){var o=n;o.beginPath();for(var i=0;i<t.length;i++){var r=t[i];r.render.visible&&(o.moveTo(r.position.x,r.position.y),o.lineTo(r.position.x+2*(r.position.x-r.positionPrev.x),r.position.y+2*(r.position.y-r.positionPrev.y)))}o.lineWidth=3,o.strokeStyle="cornflowerblue",o.stroke()},o.bodyIds=function(e,t,n){var o,i,r=n;for(o=0;o<t.length;o++)if(t[o].render.visible){var a=t[o].parts;for(i=a.length>1?1:0;i<a.length;i++){var s=a[i];r.font="12px Arial",r.fillStyle="rgba(255,255,255,0.5)",r.fillText(s.id,s.position.x+10,s.position.y-10)}}},o.collisions=function(e,t,n){var o,i,r,a,s=n,l=e.options;for(s.beginPath(),r=0;r<t.length;r++)if((o=t[r]).isActive)for(i=o.collision,a=0;a<o.activeContacts.length;a++){var c=o.activeContacts[a].vertex;s.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?s.fillStyle="rgba(255,255,255,0.7)":s.fillStyle="orange",s.fill(),s.beginPath(),r=0;r<t.length;r++)if((o=t[r]).isActive&&(i=o.collision,o.activeContacts.length>0)){var u=o.activeContacts[0].vertex.x,d=o.activeContacts[0].vertex.y;2===o.activeContacts.length&&(u=(o.activeContacts[0].vertex.x+o.activeContacts[1].vertex.x)/2,d=(o.activeContacts[0].vertex.y+o.activeContacts[1].vertex.y)/2),i.bodyB===i.supports[0].body||!0===i.bodyA.isStatic?s.moveTo(u-8*i.normal.x,d-8*i.normal.y):s.moveTo(u+8*i.normal.x,d+8*i.normal.y),s.lineTo(u,d)}l.wireframes?s.strokeStyle="rgba(255,165,0,0.7)":s.strokeStyle="orange",s.lineWidth=1,s.stroke()},o.separations=function(e,t,n){var o,i,r,a,s,l=n,c=e.options;for(l.beginPath(),s=0;s<t.length;s++)if((o=t[s]).isActive){r=(i=o.collision).bodyA;var u=1;(a=i.bodyB).isStatic||r.isStatic||(u=.5),a.isStatic&&(u=0),l.moveTo(a.position.x,a.position.y),l.lineTo(a.position.x-i.penetration.x*u,a.position.y-i.penetration.y*u),u=1,a.isStatic||r.isStatic||(u=.5),r.isStatic&&(u=0),l.moveTo(r.position.x,r.position.y),l.lineTo(r.position.x+i.penetration.x*u,r.position.y+i.penetration.y*u)}c.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},o.grid=function(e,t,n){var o=n;e.options.wireframes?o.strokeStyle="rgba(255,180,0,0.1)":o.strokeStyle="rgba(255,180,0,0.5)",o.beginPath();for(var r=i.keys(t.buckets),a=0;a<r.length;a++){var s=r[a];if(!(t.buckets[s].length<2)){var l=s.split(/C|R/);o.rect(.5+parseInt(l[1],10)*t.bucketWidth,.5+parseInt(l[2],10)*t.bucketHeight,t.bucketWidth,t.bucketHeight)}}o.lineWidth=1,o.stroke()},o.inspector=function(e,t){e.engine;var n,o=e.selected,i=e.render,r=i.options;if(r.hasBounds){var a=i.bounds.max.x-i.bounds.min.x,s=i.bounds.max.y-i.bounds.min.y,l=a/i.options.width,c=s/i.options.height;t.scale(1/l,1/c),t.translate(-i.bounds.min.x,-i.bounds.min.y)}for(var u=0;u<o.length;u++){var d=o[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),d.type){case"body":n=d.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var p=d.pointA;d.bodyA&&(p=d.pointB),t.beginPath(),t.arc(p.x,p.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),r.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},d=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},p=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},f=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},{"../body/Composite":2,"../collision/Grid":6,"../core/Common":14,"../core/Events":16,"../core/Mouse":19,"../geometry/Bounds":26,"../geometry/Vector":28}],32:[function(e,t,n){var o={};t.exports=o;var i=e("../geometry/Bounds"),r=e("../body/Composite"),a=e("../core/Common"),s=e("../core/Events"),l=e("../geometry/Vector");!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(a.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o.create=function(e){a.warn("RenderPixi.create: Matter.RenderPixi is deprecated (see docs)");var t={controller:o,engine:null,element:null,frameRequestId:null,canvas:null,renderer:null,container:null,spriteContainer:null,pixiOptions:null,options:{width:800,height:600,background:"#fafafa",wireframeBackground:"#222",hasBounds:!1,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showBroadphase:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showShadows:!1}},n=a.extend(t,e),i=!n.options.wireframes&&"transparent"===n.options.background;return n.pixiOptions=n.pixiOptions||{view:n.canvas,transparent:i,antialias:!0,backgroundColor:e.background},n.mouse=e.mouse,n.engine=e.engine,n.renderer=n.renderer||new PIXI.WebGLRenderer(n.options.width,n.options.height,n.pixiOptions),n.container=n.container||new PIXI.Container,n.spriteContainer=n.spriteContainer||new PIXI.Container,n.canvas=n.canvas||n.renderer.view,n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.options.width,y:n.options.height}},s.on(n.engine,"beforeUpdate",(function(){o.clear(n)})),n.textures={},n.sprites={},n.primitives={},n.container.addChild(n.spriteContainer),a.isElement(n.element)?n.element.appendChild(n.canvas):a.warn('No "render.element" passed, "render.canvas" was not inserted into document.'),n.canvas.oncontextmenu=function(){return!1},n.canvas.onselectstart=function(){return!1},n},o.run=function(t){!function n(i){t.frameRequestId=e(n),o.world(t)}()},o.stop=function(e){t(e.frameRequestId)},o.clear=function(e){for(var t=e.container,n=e.spriteContainer;t.children[0];)t.removeChild(t.children[0]);for(;n.children[0];)n.removeChild(n.children[0]);var o=e.sprites["bg-0"];e.textures={},e.sprites={},e.primitives={},e.sprites["bg-0"]=o,o&&t.addChildAt(o,0),e.container.addChild(e.spriteContainer),e.currentBackground=null,t.scale.set(1,1),t.position.set(0,0)},o.setBackground=function(e,t){if(e.currentBackground!==t){var n=t.indexOf&&-1!==t.indexOf("#"),o=e.sprites["bg-0"];if(n){var i=a.colorToNumber(t);e.renderer.backgroundColor=i,o&&e.container.removeChild(o)}else if(!o){var r=u(e,t);(o=e.sprites["bg-0"]=new PIXI.Sprite(r)).position.x=0,o.position.y=0,e.container.addChildAt(o,0)}e.currentBackground=t}},o.world=function(e){var t,n=e.engine.world,a=e.renderer,s=e.container,c=e.options,u=r.allBodies(n),d=r.allConstraints(n),p=[];c.wireframes?o.setBackground(e,c.wireframeBackground):o.setBackground(e,c.background);var f=e.bounds.max.x-e.bounds.min.x,v=e.bounds.max.y-e.bounds.min.y,m=f/e.options.width,g=v/e.options.height;if(c.hasBounds){for(t=0;t<u.length;t++){var y=u[t];y.render.sprite.visible=i.overlaps(y.bounds,e.bounds)}for(t=0;t<d.length;t++){var h=d[t],x=h.bodyA,b=h.bodyB,w=h.pointA,S=h.pointB;x&&(w=l.add(x.position,h.pointA)),b&&(S=l.add(b.position,h.pointB)),w&&S&&(i.contains(e.bounds,w)||i.contains(e.bounds,S))&&p.push(h)}s.scale.set(1/m,1/g),s.position.set(-e.bounds.min.x*(1/m),-e.bounds.min.y*(1/g))}else p=d;for(t=0;t<u.length;t++)o.body(e,u[t]);for(t=0;t<p.length;t++)o.constraint(e,p[t]);a.render(s)},o.constraint=function(e,t){e.engine;var n=t.bodyA,o=t.bodyB,i=t.pointA,r=t.pointB,s=e.container,l=t.render,c="c-"+t.id,u=e.primitives[c];u||(u=e.primitives[c]=new PIXI.Graphics),l.visible&&t.pointA&&t.pointB?(-1===a.indexOf(s.children,u)&&s.addChild(u),u.clear(),u.beginFill(0,0),u.lineStyle(l.lineWidth,a.colorToNumber(l.strokeStyle),1),n?u.moveTo(n.position.x+i.x,n.position.y+i.y):u.moveTo(i.x,i.y),o?u.lineTo(o.position.x+r.x,o.position.y+r.y):u.lineTo(r.x,r.y),u.endFill()):u.clear()},o.body=function(e,t){e.engine;var o=t.render;if(o.visible)if(o.sprite&&o.sprite.texture){var i="b-"+t.id,r=e.sprites[i],s=e.spriteContainer;r||(r=e.sprites[i]=n(e,t)),-1===a.indexOf(s.children,r)&&s.addChild(r),r.position.x=t.position.x,r.position.y=t.position.y,r.rotation=t.angle,r.scale.x=o.sprite.xScale||1,r.scale.y=o.sprite.yScale||1}else{var l="b-"+t.id,u=e.primitives[l],d=e.container;u||((u=e.primitives[l]=c(e,t)).initialAngle=t.angle),-1===a.indexOf(d.children,u)&&d.addChild(u),u.position.x=t.position.x,u.position.y=t.position.y,u.rotation=t.angle-u.initialAngle}};var n=function(e,t){var n=t.render.sprite.texture,o=u(e,n),i=new PIXI.Sprite(o);return i.anchor.x=t.render.sprite.xOffset,i.anchor.y=t.render.sprite.yOffset,i},c=function(e,t){var n,o=t.render,i=e.options,r=new PIXI.Graphics,s=a.colorToNumber(o.fillStyle),l=a.colorToNumber(o.strokeStyle),c=a.colorToNumber(o.strokeStyle),u=a.colorToNumber("#bbb"),d=a.colorToNumber("#CD5C5C");r.clear();for(var p=t.parts.length>1?1:0;p<t.parts.length;p++){n=t.parts[p],i.wireframes?(r.beginFill(0,0),r.lineStyle(1,u,1)):(r.beginFill(s,1),r.lineStyle(o.lineWidth,l,1)),r.moveTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y);for(var f=1;f<n.vertices.length;f++)r.lineTo(n.vertices[f].x-t.position.x,n.vertices[f].y-t.position.y);r.lineTo(n.vertices[0].x-t.position.x,n.vertices[0].y-t.position.y),r.endFill(),(i.showAngleIndicator||i.showAxes)&&(r.beginFill(0,0),i.wireframes?r.lineStyle(1,d,1):r.lineStyle(1,c),r.moveTo(n.position.x-t.position.x,n.position.y-t.position.y),r.lineTo((n.vertices[0].x+n.vertices[n.vertices.length-1].x)/2-t.position.x,(n.vertices[0].y+n.vertices[n.vertices.length-1].y)/2-t.position.y),r.endFill())}return r},u=function(e,t){var n=e.textures[t];return n||(n=e.textures[t]=PIXI.Texture.fromImage(t)),n}}()},{"../body/Composite":2,"../core/Common":14,"../core/Events":16,"../geometry/Bounds":26,"../geometry/Vector":28}]},{},[30])(30)}).call(this,n(5))},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyAntiGravity=t.applyAntiGravityTwoBody=t.antiGravity=t.antiGravityRanged=t.antiGravityManhattan=void 0;var s=a(n(1)),l=r(n(0));t.antiGravityManhattan=function(e,t,n){void 0===n&&(n=100);var o=n,i=l.distHoriz(e.position,t.position),r=l.distVerti(e.position,t.position),a=.5*(Math.sqrt(e.area)+Math.sqrt(t.area));return{x:i<1.5*a?o/(1e3+Math.pow(i,2)):0,y:r<1.5*a?o/(1e3+Math.pow(r,2)):0}},t.antiGravityRanged=function(e,t,n,o){void 0===n&&(n=100),void 0===o&&(o=3);var i=l.distEuclid(e.position,t.position),r=i<o*(.5*(Math.sqrt(e.area)+Math.sqrt(t.area)))?n/Math.pow(i,2):0,a=l.unitVec(e.position,t.position);return{x:r*a.x,y:r*a.y}},t.antiGravity=function(e,t,n){void 0===n&&(n=100);var o=l.distEuclid(e.position,t.position),i=n/Math.pow(o,2),r=l.unitVec(e.position,t.position);return{x:i*r.x,y:i*r.y}},t.applyAntiGravityTwoBody=function(e,n,o){var i,r;if(!n.isStatic&&!o.isStatic){var a=(i=n,r=o,t.antiGravityRanged(i,r,e.repulsionCoeff,e.repulsionRange));s.default.Body.applyForce(o,o.position,a),s.default.Body.applyForce(n,n.position,l.negate(a))}},t.applyAntiGravity=function(e,n){for(var o=0;o<n.length;o++)for(var i=o+1;i<n.length;i++)t.applyAntiGravityTwoBody(e,n[o],n[i])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(4).Knollbot.run()},function(e,t,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return r(t,e),t},s=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{l(o.next(e))}catch(e){r(e)}}function s(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((o=o.apply(e,t||[])).next())}))},l=this&&this.__generator||function(e,t){var n,o,i,r,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,o=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){a.label=r[1];break}if(6===r[0]&&a.label<i[1]){a.label=i[1],i=r;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(r);break}i[2]&&a.ops.pop(),a.trys.pop();continue}r=t.call(e,a)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},c=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var o=Array(e),i=0;for(t=0;t<n;t++)for(var r=arguments[t],a=0,s=r.length;a<s;a++,i++)o[i]=r[a];return o},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Knollbot=void 0;var d=u(n(1)),p=n(6),f=a(n(0)),v=a(n(2)),m=a(n(7)),g=a(n(10)),y=a(n(11));!function(e){var t=this;e.run=function(){var e=d.default.Engine.create(),n=e.world,i=d.default.Runner.create();n.forceOn=!0,n.gravity.y=0;var r=document.documentElement.clientWidth-20,a=document.documentElement.clientHeight-20,u=Math.floor(r/2),h=Math.floor(a/2),x=Math.floor(100)-5;p.imgPaths.length;n.pokeScale=p.params.pokeScale,n.pokeDecay=p.params.pokeDecay,n.alignmentForceCoeff=p.params.alignmentForceCoeff,n.alignmentForceRange=p.params.alignmentForceRange,n.alignmentForceWallRange=p.params.alignmentForceWallRange,n.repulsionCoeff=p.params.repulsionCoeff,n.repulsionRange=p.params.repulsionRange,n.groupingCoeff=p.params.groupingCoeff;var b,w=d.default.Render.create({element:document.body,engine:e,options:{width:r,height:a,showVelocity:!1,wireframes:!1,background:"#247c41"}}),S={inertia:1/0,frictionAir:p.params.frictionAir,friction:p.params.friction},P=Promise.all(p.imgPaths.map((function(e){return s(t,void 0,void 0,(function(){var t,n,i,s,c,u;return l(this,(function(l){switch(l.label){case 0:return[4,(p=e,new Promise((function(e,t){var n=new Image;n.onload=function(){var t=n.naturalWidth,o=n.naturalHeight;e({width:t,height:o})},n.onerror=function(){t("There was some problem with the image.")},n.src=p})))];case 1:return t=l.sent(),n=x+t.width/2,i=x+t.height/2,s=f.randRange(n,r-n),c=f.randRange(i,a-i),u=o(o({},S),{render:{sprite:{texture:e}}}),[2,d.default.Bodies.rectangle(s,c,t.width,t.height,u)]}var p}))}))}))),C={isStatic:!0,friction:p.params.wallFriction},_=d.default.Bodies.rectangle(u,-x,r+100,200,C),M=d.default.Bodies.rectangle(u,a+x,r+100,200,C),A=d.default.Bodies.rectangle(-x,h,200,a+100,C),B=d.default.Bodies.rectangle(r+x,h,200,a+100,C),k=d.default.Mouse.create(w.canvas),I=d.default.Constraint.create({pointA:k.position,pointB:{x:0,y:0},stiffness:.2,render:{visible:!1}}),R=d.default.MouseConstraint.create(e,{mouse:k,constraint:I});s(t,void 0,void 0,(function(){var t;return l(this,(function(o){switch(o.label){case 0:return[4,P];case 1:return t=o.sent(),b=c(t,[_,M,A,B]),d.default.World.add(n,b),d.default.World.add(n,R),d.default.Runner.run(i,e),d.default.Render.run(w),[2]}}))}));var T=0;return d.default.Events.on(e,"beforeUpdate",(function(e){(T+=1)%300==0&&console.log("counter: ",T),n.forceOn&&(T<180?g.applyGrouping(n,b):T<240?v.applyAntiGravity(n,b):m.applyAlignment(n,b),T%10==9&&(n.pokeScale*=n.pokeDecay),y.applyRandomPokes(n,b))})),document.addEventListener("keydown",(function(e){"Space"===e.code&&(n.forceOn=!n.forceOn,console.log("Toggled force: forceOn is "+n.forceOn+" now"))})),document.addEventListener("dblclick",(function(){console.log("--- Double click at t="+T+" ---"),b.filter((function(e){return!e.isStatic&&d.default.Bounds.contains(e.bounds,k.position)})).forEach((function(e){return d.default.Body.rotate(e,Math.PI/2)}))})),document.addEventListener("touchmove",(function(e){var t,n=e.changedTouches.item(0),o=Math.PI/180*(null!==(t=null==n?void 0:n.rotationAngle)&&void 0!==t?t:0);console.log("--- Touch rotation activated at t="+T+" ---"),console.log("    rotation angle = "+(null==n?void 0:n.rotationAngle)+" (deg)"),b.filter((function(e){return!e.isStatic&&d.default.Bounds.contains(e.bounds,k.position)})).forEach((function(e){return d.default.Body.rotate(e,o)}))})),{engine:e,runner:i,render:w,canvas:w.canvas,stop:function(){d.default.Render.stop(w),d.default.Runner.stop(i)}}}}(t.Knollbot||(t.Knollbot={}))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.params=t.imgPaths=void 0;t.imgPaths=["blue_1x2.png","blue_1x2.png","blue_1x2.png","blue_1x2.png","blue_1x2.png","blue_1x3.png","blue_1x3.png","green_1x2.png","green_1x2.png","green_1x2.png","green_1x2.png","green_2x2.png","green_2x2.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x1.png","orange_2x3.png","orange_2x3.png","red_1x4.png","red_1x4.png","red_1x4.png","red_2x2.png","red_2x2.png","yellow_2x1.png","yellow_2x1.png","yellow_2x1.png","yellow_2x1.png","yellow_2x1.png","yellow_3x2.png","yellow_3x2.png","yellow_3x2.png"].map((function(e){return"./public/lego/"+e})),t.params={frictionAir:.01,friction:0,wallFriction:.01,pokeScale:.05,pokeDecay:.95,alignmentForceCoeff:.001,alignmentForceRange:30,alignmentForceWallRange:15,repulsionCoeff:100,repulsionRange:3,groupingCoeff:400}},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyAlignment=void 0;var s=a(n(1)),l=r(n(0)),c=n(8),u=function(e,t,n){for(var o=[],i=0;i<t.length;i++)for(var r=i+1;r<t.length;r++){var a=t[i],s=t[r],c=n(a,s),u=c[0],d=c[1],p=c[2];if(p<e.alignmentForceRange&&(!a.isStatic||!s.isStatic)){var f={weight:p,pair:l.makeUnorderedPair(i,r),posSrc:u,posTgt:d,idxSrc:i,idxTgt:r};o.push(f)}}return{vertices:l.range(t.length),edges:o}},d=function(e,t,n){var o=n.posSrc.x<n.posTgt.x?-1:1,i=n.weight,r={x:e.alignmentForceCoeff*o*i,y:0},a=t[n.idxSrc],c=t[n.idxTgt];s.default.Body.applyForce(c,c.position,r),s.default.Body.applyForce(a,a.position,l.negate(r))},p=function(e,t,n){var o=n.posSrc.y<n.posTgt.y?-1:1,i=n.weight,r={x:0,y:e.alignmentForceCoeff*o*i},a=t[n.idxSrc],c=t[n.idxTgt];s.default.Body.applyForce(c,c.position,r),s.default.Body.applyForce(a,a.position,l.negate(r))},f=function(e,t){var n=function(e,t){return u(e,t,l.cloestPointPairX)}(e,t),o=function(e,t){return u(e,t,l.cloestPointPairY)}(e,t),i=c.kruskal(n),r=c.kruskal(o);i.forEach((function(n){return d(e,t,n)})),r.forEach((function(n){return p(e,t,n)}))};t.applyAlignment=function(e,t){var n=t.slice(0,t.length-4);f(e,n)}},function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.kruskal=void 0;var i=o(n(9));t.kruskal=function(e){for(var t=new i.default(e.vertices),n=[],o=0,r=e.edges.sort((function(e,t){return e.weight-t.weight}));o<r.length;o++){var a=r[o],s=a.pair.first,l=a.pair.second;t.areConnected(s,l)||(t.connect(s,l),n.push(a))}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=function(){function e(e){"number"==typeof e?(this.len=e,this.translate=new Map(o.range(e).map((function(e,t){return[t,t]})))):(this.len=e.length,this.translate=new Map(e.map((function(e,t){return[e,t]})))),this.parent=o.range(this.len).map((function(e){return-1}))}return e.prototype._isRoot=function(e){return this.parent[e]<0},e.prototype._root=function(e){for(;!this._isRoot(e);)e=this.parent[e];return e},e.prototype._depth=function(e){return-this.parent[this._root(e)]},e.prototype._index=function(e){var t,n=this.translate.get(e);return void 0===n?(t=this.len,this.translate.set(e,t),this.len+=1):t=n,t},e.prototype.areConnected=function(e,t){var n=this._index(e),o=this._index(t);return this._root(n)==this._root(o)},e.prototype.connect=function(e,t){var n=this._index(e),o=this._index(t);if(this._depth(n)<this._depth(o))return this.connect(t,e);var i=this._root(n),r=this._root(o);return i!=r&&(this.parent[i]+=this.parent[r],this.parent[r]=i,!0)},e.prototype.getRootAll=function(){var e=this;return o.range(this.len).map((function(t){return e._root(t)}))},e}();t.default=i;!function(){function e(e){var t=this;this.counter=new Map,e&&e.forEach((function(e){return t.add(e)}))}e.prototype.add=function(e){var t;this.counter.set(e,(null!==(t=this.counter.get(e))&&void 0!==t?t:0)+1)},e.prototype.get=function(e){var t;return null!==(t=this.counter.get(e))&&void 0!==t?t:0},e.prototype.has=function(e){return this.counter.has(e)},e.prototype.clear=function(){this.counter.clear()}}()},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyGrouping=t.applyAntiGravityDisjoint=void 0;var s=a(n(1)),l=n(2),c=r(n(0));t.applyAntiGravityDisjoint=function(e,t,n,o){for(var i,r,a=0;a<t.length;a++)for(var u=a+1;u<t.length;u++){var d=t[a],p=t[u];if(!d.isStatic&&!p.isStatic){var f=(i=d,r=p,l.antiGravityRanged(i,r,e.repulsionCoeff,e.repulsionRange));n.areConnected(a,u)&&(f.x=0),o.areConnected(a,u)&&(f.y=0),s.default.Body.applyForce(p,p.position,f),s.default.Body.applyForce(d,d.position,c.negate(f))}}};var u=function(e,t,n){var o,i;if(!t.isStatic&&!n.isStatic){var r=(o=t,i=n,l.antiGravity(o,i,e.groupingCoeff));(c.areSameWidth(t,n)||c.areSameHeight(t,n))&&(r=c.negate(r)),s.default.Body.applyForce(n,n.position,r),s.default.Body.applyForce(t,t.position,c.negate(r))}};t.applyGrouping=function(e,t){for(var n=0;n<t.length;n++)for(var o=n+1;o<t.length;o++)u(e,t[n],t[o])}},function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.applyRandomPokes=void 0;var s=a(n(1)),l=r(n(0));t.applyRandomPokes=function(e,t){t.forEach((function(t){return function(e,t){t.isStatic||s.default.Body.applyForce(t,t.position,{x:e.pokeScale*l.randn(),y:e.pokeScale*l.randn()})}(e,t)}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXR0ZXItanMvYnVpbGQvbWF0dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9yZXB1bHNpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9rbm9sbGJvdC50cyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FsaWdubWVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ3JhcGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaW9uZmluZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZ3JvdXBpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JhbmRvbXBva2VzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXJyTWF4IiwieHMiLCJyZWR1Y2UiLCJhY2MiLCJ4IiwiTWF0aCIsIm1heCIsIkluZmluaXR5IiwiYXJyTWluIiwibWluIiwiYXJyU3VtIiwiYXJyTWVhbiIsImxlbmd0aCIsImFyck1ldGFCeSIsImYiLCJ5cyIsIm1hcCIsInltYXgiLCJyZXMiLCJBcnJheSIsInB1c2giLCJhcnJNYXhCeSIsImFyck1pbkJ5IiwidmVjdG9yTWVhbiIsInZlYyIsInYiLCJ5IiwicmlnaHRtb3N0UG9pbnQiLCJwb2ludHMiLCJsZWZ0bW9zdFBvaW50IiwidG9wbW9zdFBvaW50IiwiYm90dG9tbW9zdFBvaW50IiwiZGlzdEhvcml6IiwicG9pbnRBIiwicG9pbnRCIiwiYWJzIiwiZGlzdFZlcnRpIiwiZGlzdEV1Y2xpZCIsImh5cG90IiwiY2xvZXN0UG9pbnRNZXRhIiwiYm9keTEiLCJib2R5MiIsImVkZ2VBIiwiZWRnZUIiLCJkaXN0RnVuYyIsIm9uZTEiLCJ2ZXJ0aWNlcyIsImFub3RoZXIxIiwib25lMiIsImFub3RoZXIyIiwiZGlzdCIsInAxIiwicDIiLCJjbG9lc3RQb2ludFBhaXJYIiwiY2xvZXN0UG9pbnRQYWlyWSIsInJhbmdlIiwic2l6ZSIsImZsb29yIiwiZnJvbSIsImtleXMiLCJyYW5kUmFuZ2UiLCJsbyIsImhpIiwidW5pdCIsImEiLCJiIiwicmFuZG9tIiwicmFuZG4iLCJ1IiwibnVtIiwic3FydCIsImxvZyIsImNvcyIsIlBJIiwidW5pdFZlYyIsInRvIiwibm9ybWFsaXplIiwibm9ybSIsIm5lZ2F0ZSIsIm1ha2VVbm9yZGVyZWRQYWlyIiwiZmlyc3QiLCJzZWNvbmQiLCJnZXRXaWR0aCIsImJsb2NrIiwiZ2V0SGVpZ2h0IiwiYXJlU2FtZUhlaWdodCIsImZvbyIsImJhciIsImFyZVNhbWVXaWR0aCIsImUiLCJFcnJvciIsImNvZGUiLCIxIiwiX2RlcmVxXyIsIkJvZHkiLCJWZXJ0aWNlcyIsIlZlY3RvciIsIlNsZWVwaW5nIiwiQ29tbW9uIiwiQm91bmRzIiwiQXhlcyIsIl9pbmVydGlhU2NhbGUiLCJfbmV4dENvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dENhdGVnb3J5Iiwib3B0aW9ucyIsImRlZmF1bHRzIiwiaWQiLCJuZXh0SWQiLCJ0eXBlIiwibGFiZWwiLCJwYXJ0cyIsInBsdWdpbiIsImFuZ2xlIiwiZnJvbVBhdGgiLCJwb3NpdGlvbiIsImZvcmNlIiwidG9ycXVlIiwicG9zaXRpb25JbXB1bHNlIiwiY29uc3RyYWludEltcHVsc2UiLCJ0b3RhbENvbnRhY3RzIiwic3BlZWQiLCJhbmd1bGFyU3BlZWQiLCJ2ZWxvY2l0eSIsImFuZ3VsYXJWZWxvY2l0eSIsImlzU2Vuc29yIiwiaXNTdGF0aWMiLCJpc1NsZWVwaW5nIiwibW90aW9uIiwic2xlZXBUaHJlc2hvbGQiLCJkZW5zaXR5IiwicmVzdGl0dXRpb24iLCJmcmljdGlvbiIsImZyaWN0aW9uU3RhdGljIiwiZnJpY3Rpb25BaXIiLCJjb2xsaXNpb25GaWx0ZXIiLCJjYXRlZ29yeSIsIm1hc2siLCJncm91cCIsInNsb3AiLCJ0aW1lU2NhbGUiLCJyZW5kZXIiLCJ2aXNpYmxlIiwib3BhY2l0eSIsInNwcml0ZSIsInhTY2FsZSIsInlTY2FsZSIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwibGluZVdpZHRoIiwiYm9keSIsImV4dGVuZCIsIl9pbml0UHJvcGVydGllcyIsIm5leHRHcm91cCIsImlzTm9uQ29sbGlkaW5nIiwibmV4dENhdGVnb3J5Iiwic2V0IiwiYm91bmRzIiwicG9zaXRpb25QcmV2IiwiY2xvbmUiLCJhbmdsZVByZXYiLCJwYXJlbnQiLCJyb3RhdGUiLCJheGVzIiwidXBkYXRlIiwiYXJlYSIsIm1hc3MiLCJpbmVydGlhIiwiZGVmYXVsdEZpbGxTdHlsZSIsImNob29zZSIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwic2V0dGluZ3MiLCJzZXRTdGF0aWMiLCJzZXRNYXNzIiwic2V0RGVuc2l0eSIsInNldEluZXJ0aWEiLCJzZXRWZXJ0aWNlcyIsInNldFBvc2l0aW9uIiwic2V0QW5nbGUiLCJzZXRWZWxvY2l0eSIsInNldEFuZ3VsYXJWZWxvY2l0eSIsInNldFBhcnRzIiwicGFydCIsIl9vcmlnaW5hbCIsImludmVyc2VNYXNzIiwiaW52ZXJzZUluZXJ0aWEiLCJtb21lbnQiLCJmcm9tVmVydGljZXMiLCJjZW50cmUiLCJ0cmFuc2xhdGUiLCJhdXRvSHVsbCIsInNsaWNlIiwiY29uY2F0IiwiY2xvY2t3aXNlU29ydCIsImh1bGwiLCJodWxsQ2VudHJlIiwidG90YWwiLCJfdG90YWxQcm9wZXJ0aWVzIiwiZGVsdGEiLCJzdWIiLCJyb3RhdGVBYm91dCIsIm1hZ25pdHVkZSIsInRyYW5zbGF0aW9uIiwiYWRkIiwicm90YXRpb24iLCJwb2ludCIsInNpbiIsImR4IiwiZHkiLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInRvdGFsQXJlYSIsInRvdGFsSW5lcnRpYSIsImNpcmNsZVJhZGl1cyIsImRlbHRhVGltZSIsImNvcnJlY3Rpb24iLCJkZWx0YVRpbWVTcXVhcmVkIiwicG93IiwidmVsb2NpdHlQcmV2WCIsInZlbG9jaXR5UHJldlkiLCJhcHBseUZvcmNlIiwib2Zmc2V0IiwicHJvcGVydGllcyIsIm11bHQiLCJkaXYiLCIyIiwiQ29tcG9zaXRlIiwiRXZlbnRzIiwiaXNNb2RpZmllZCIsImJvZGllcyIsImNvbnN0cmFpbnRzIiwiY29tcG9zaXRlcyIsInNldE1vZGlmaWVkIiwiY29tcG9zaXRlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiY2hpbGRDb21wb3NpdGUiLCJvYmplY3RzIiwidHJpZ2dlciIsIm9iaiIsIndhcm4iLCJhZGRCb2R5IiwiYWRkQ29uc3RyYWludCIsImFkZENvbXBvc2l0ZSIsImNvbnN0cmFpbnQiLCJyZW1vdmUiLCJkZWVwIiwicmVtb3ZlQm9keSIsInJlbW92ZUNvbnN0cmFpbnQiLCJyZW1vdmVDb21wb3NpdGUiLCJjb21wb3NpdGVBIiwiY29tcG9zaXRlQiIsImluZGV4T2YiLCJyZW1vdmVDb21wb3NpdGVBdCIsInNwbGljZSIsInJlbW92ZUJvZHlBdCIsInJlbW92ZUNvbnN0cmFpbnRBdCIsImNsZWFyIiwia2VlcFN0YXRpYyIsImZpbHRlciIsImFsbEJvZGllcyIsImFsbENvbnN0cmFpbnRzIiwiYWxsQ29tcG9zaXRlcyIsInRvU3RyaW5nIiwibW92ZSIsInJlYmFzZSIsInJlY3Vyc2l2ZSIsIjMiLCJXb3JsZCIsImdyYXZpdHkiLCI0IiwiQ29udGFjdCIsInZlcnRleCIsIm5vcm1hbEltcHVsc2UiLCJ0YW5nZW50SW1wdWxzZSIsImluZGV4IiwiNSIsIkRldGVjdG9yIiwiU0FUIiwiUGFpciIsImNvbGxpc2lvbnMiLCJicm9hZHBoYXNlUGFpcnMiLCJlbmdpbmUiLCJwYWlyc1RhYmxlIiwicGFpcnMiLCJ0YWJsZSIsImJvZHlBIiwiYm9keUIiLCJjYW5Db2xsaWRlIiwib3ZlcmxhcHMiLCJqIiwicGFydEEiLCJrIiwicGFydEIiLCJwcmV2aW91c0NvbGxpc2lvbiIsInBhaXIiLCJpc0FjdGl2ZSIsImNvbGxpc2lvbiIsImNvbGxpZGVzIiwiY29sbGlkZWQiLCJmaWx0ZXJBIiwiZmlsdGVyQiIsIjYiLCJHcmlkIiwiY29udHJvbGxlciIsImRldGVjdG9yIiwiYnVja2V0cyIsInBhaXJzTGlzdCIsImJ1Y2tldFdpZHRoIiwiYnVja2V0SGVpZ2h0IiwiZ3JpZCIsImZvcmNlVXBkYXRlIiwiY29sIiwicm93IiwiYnVja2V0IiwiYnVja2V0SWQiLCJ3b3JsZCIsImdyaWRDaGFuZ2VkIiwibmV3UmVnaW9uIiwiX2dldFJlZ2lvbiIsInJlZ2lvbiIsInVuaW9uIiwiX3JlZ2lvblVuaW9uIiwic3RhcnRDb2wiLCJlbmRDb2wiLCJzdGFydFJvdyIsImVuZFJvdyIsIl9nZXRCdWNrZXRJZCIsImlzSW5zaWRlTmV3UmVnaW9uIiwiaXNJbnNpZGVPbGRSZWdpb24iLCJfYnVja2V0UmVtb3ZlQm9keSIsIl9jcmVhdGVCdWNrZXQiLCJfYnVja2V0QWRkQm9keSIsIl9jcmVhdGVBY3RpdmVQYWlyc0xpc3QiLCJyZWdpb25BIiwicmVnaW9uQiIsIl9jcmVhdGVSZWdpb24iLCJjb2x1bW4iLCJwYWlySWQiLCJwYWlyS2V5cyIsIjciLCJ0aW1lc3RhbXAiLCJwYXJlbnRBIiwicGFyZW50QiIsImNvbnRhY3RzIiwiYWN0aXZlQ29udGFjdHMiLCJzZXBhcmF0aW9uIiwidGltZUNyZWF0ZWQiLCJ0aW1lVXBkYXRlZCIsInN1cHBvcnRzIiwic3VwcG9ydCIsImNvbnRhY3RJZCIsImNvbnRhY3QiLCJkZXB0aCIsInNldEFjdGl2ZSIsIjgiLCJQYWlycyIsIl9wYWlyTWF4SWRsZUxpZmUiLCJsaXN0IiwiY29sbGlzaW9uU3RhcnQiLCJjb2xsaXNpb25BY3RpdmUiLCJjb2xsaXNpb25FbmQiLCJhY3RpdmVQYWlySWRzIiwicmVtb3ZlT2xkIiwicGFpckluZGV4IiwiaW5kZXhlc1RvUmVtb3ZlIiwiOSIsIlF1ZXJ5IiwiQm9kaWVzIiwicmF5Iiwic3RhcnRQb2ludCIsImVuZFBvaW50IiwicmF5V2lkdGgiLCJyYXlBbmdsZSIsInJheUxlbmd0aCIsInJheVgiLCJyYXlZIiwicmVjdGFuZ2xlIiwib3V0c2lkZSIsInJlc3VsdCIsImNvbnRhaW5zIiwiMTAiLCJSZXNvbHZlciIsIl9yZXN0aW5nVGhyZXNoIiwiX3Jlc3RpbmdUaHJlc2hUYW5nZW50IiwiX3Bvc2l0aW9uRGFtcGVuIiwiX3Bvc2l0aW9uV2FybWluZyIsIl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXIiLCJwcmVTb2x2ZVBvc2l0aW9uIiwiYWN0aXZlQ291bnQiLCJzb2x2ZVBvc2l0aW9uIiwibm9ybWFsIiwiYm9keUJ0b0EiLCJjb250YWN0U2hhcmUiLCJ0ZW1wQSIsIl90ZW1wIiwidGVtcEIiLCJ0ZW1wQyIsInRlbXBEIiwicGVuZXRyYXRpb24iLCJkb3QiLCJwb3N0U29sdmVQb3NpdGlvbiIsInByZVNvbHZlVmVsb2NpdHkiLCJ0YW5nZW50IiwiY29udGFjdFZlcnRleCIsImltcHVsc2UiLCJjcm9zcyIsInNvbHZlVmVsb2NpdHkiLCJ0aW1lU2NhbGVTcXVhcmVkIiwidGVtcEUiLCJvZmZzZXRBIiwib2Zmc2V0QiIsInZlbG9jaXR5UG9pbnRBIiwicGVycCIsInZlbG9jaXR5UG9pbnRCIiwicmVsYXRpdmVWZWxvY2l0eSIsIm5vcm1hbFZlbG9jaXR5IiwidGFuZ2VudFZlbG9jaXR5IiwidGFuZ2VudFNwZWVkIiwidGFuZ2VudFZlbG9jaXR5RGlyZWN0aW9uIiwic2lnbiIsIm5vcm1hbEZvcmNlIiwiY2xhbXAiLCJtYXhGcmljdGlvbiIsIm9BY04iLCJvQmNOIiwic2hhcmUiLCJjb250YWN0Tm9ybWFsSW1wdWxzZSIsImNvbnRhY3RUYW5nZW50SW1wdWxzZSIsIjExIiwib3ZlcmxhcEFCIiwib3ZlcmxhcEJBIiwibWluT3ZlcmxhcCIsImNhblJldXNlUHJldkNvbCIsImF4aXNCb2R5QSIsImF4aXNCb2R5IiwiYXhpc0JvZHlCIiwiYXhpc051bWJlciIsIl9vdmVybGFwQXhlcyIsInJldXNlZCIsIm92ZXJsYXAiLCJheGlzIiwidmVydGljZXNCIiwiX2ZpbmRTdXBwb3J0cyIsInZlcnRpY2VzQSIsIm5lZyIsInByb2plY3Rpb25BIiwicHJvamVjdGlvbkIiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJfcHJvamVjdFRvQXhpcyIsInByb2plY3Rpb24iLCJkaXN0YW5jZSIsInZlcnRleEEiLCJ2ZXJ0ZXhCIiwibmVhcmVzdERpc3RhbmNlIiwidmVydGV4VG9Cb2R5IiwiYm9keUFQb3NpdGlvbiIsIjEyIiwiQ29uc3RyYWludCIsIl93YXJtaW5nIiwiX3RvcnF1ZURhbXBlbiIsIl9taW5MZW5ndGgiLCJpbml0aWFsUG9pbnRBIiwiaW5pdGlhbFBvaW50QiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJhbmd1bGFyU3RpZmZuZXNzIiwiYW5nbGVBIiwiYW5nbGVCIiwiYW5jaG9ycyIsInByZVNvbHZlQWxsIiwic29sdmVBbGwiLCJmaXhlZEEiLCJmaXhlZEIiLCJzb2x2ZSIsInBvaW50QVdvcmxkIiwicG9pbnRCV29ybGQiLCJjdXJyZW50TGVuZ3RoIiwiZGlmZmVyZW5jZSIsIm1hc3NUb3RhbCIsInJlc2lzdGFuY2VUb3RhbCIsInplcm8iLCJwb3N0U29sdmVBbGwiLCIxMyIsIk1vdXNlQ29uc3RyYWludCIsIk1vdXNlIiwibW91c2UiLCJjYW52YXMiLCJlbGVtZW50IiwibW91c2VDb25zdHJhaW50Iiwib24iLCJfdHJpZ2dlckV2ZW50cyIsImJ1dHRvbiIsIm1vdXNlRXZlbnRzIiwic291cmNlRXZlbnRzIiwibW91c2Vtb3ZlIiwibW91c2Vkb3duIiwibW91c2V1cCIsImNsZWFyU291cmNlRXZlbnRzIiwiMTQiLCJnbG9iYWwiLCJfbmV4dElkIiwiX3NlZWQiLCJfbm93U3RhcnRUaW1lIiwiRGF0ZSIsImFyZ3NTdGFydCIsImRlZXBDbG9uZSIsImFyZ3VtZW50cyIsInNvdXJjZSIsInByb3AiLCJjb25zdHJ1Y3RvciIsInZhbHVlcyIsInBhdGgiLCJiZWdpbiIsImVuZCIsInNwbGl0IiwidmFsIiwic2h1ZmZsZSIsImFycmF5IiwidGVtcCIsImNob2ljZXMiLCJpc0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc0FycmF5IiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJpc1N0cmluZyIsIm5vdyIsIndpbmRvdyIsInBlcmZvcm1hbmNlIiwid2Via2l0Tm93IiwiX3NlZWRlZFJhbmRvbSIsImNvbG9yVG9OdW1iZXIiLCJjb2xvclN0cmluZyIsInJlcGxhY2UiLCJjaGFyQXQiLCJwYXJzZUludCIsImxvZ0xldmVsIiwiY29uc29sZSIsImFwcGx5IiwiaW5mbyIsImhheXN0YWNrIiwibmVlZGxlIiwiZnVuYyIsIm1hcHBlZCIsInRvcG9sb2dpY2FsU29ydCIsImdyYXBoIiwidmlzaXRlZCIsIm5vZGUiLCJfdG9wb2xvZ2ljYWxTb3J0IiwibmVpZ2hib3JzIiwibmVpZ2hib3IiLCJjaGFpbiIsImZ1bmNzIiwiX2NoYWluZWQiLCJsYXN0UmVzdWx0IiwiYXJncyIsImNoYWluUGF0aEJlZm9yZSIsImJhc2UiLCJjaGFpblBhdGhBZnRlciIsIl9yZXF1aXJlR2xvYmFsIiwiZ2xvYmFsTmFtZSIsIm1vZHVsZU5hbWUiLCJ0aGlzIiwic2VsZiIsIjE1IiwiRW5naW5lIiwiUmVuZGVyIiwicG9zaXRpb25JdGVyYXRpb25zIiwidmVsb2NpdHlJdGVyYXRpb25zIiwiY29uc3RyYWludEl0ZXJhdGlvbnMiLCJlbmFibGVTbGVlcGluZyIsImV2ZW50cyIsInRpbWluZyIsImJyb2FkcGhhc2UiLCJyZW5kZXJEZWZhdWx0cyIsIm1ldHJpY3MiLCJleHRlbmRlZCIsImV2ZW50IiwiX2JvZGllc0FwcGx5R3Jhdml0eSIsIl9ib2RpZXNVcGRhdGUiLCJhZnRlckNvbGxpc2lvbnMiLCJfYm9kaWVzQ2xlYXJGb3JjZXMiLCJtZXJnZSIsImVuZ2luZUEiLCJlbmdpbmVCIiwiZ3Jhdml0eVNjYWxlIiwid29ybGRCb3VuZHMiLCIxNiIsImV2ZW50TmFtZXMiLCJjYWxsYmFjayIsIm5hbWVzIiwib2ZmIiwiam9pbiIsImNhbGxiYWNrcyIsIm5ld0NhbGxiYWNrcyIsImV2ZW50Q2xvbmUiLCIxNyIsIk1hdHRlciIsIlBsdWdpbiIsInZlcnNpb24iLCJ1c2VzIiwidXNlZCIsInVzZSIsImJlZm9yZSIsImFmdGVyIiwiMTgiLCIxOSIsImRvY3VtZW50IiwiYWJzb2x1dGUiLCJtb3VzZWRvd25Qb3NpdGlvbiIsIm1vdXNldXBQb3NpdGlvbiIsIndoZWVsRGVsdGEiLCJwaXhlbFJhdGlvIiwiZ2V0QXR0cmlidXRlIiwibW91c2V3aGVlbCIsIl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24iLCJjaGFuZ2VkVG91Y2hlcyIsInByZXZlbnREZWZhdWx0IiwiZGV0YWlsIiwic2V0RWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRPZmZzZXQiLCJzZXRTY2FsZSIsImVsZW1lbnRCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyb290Tm9kZSIsImRvY3VtZW50RWxlbWVudCIsInBhcmVudE5vZGUiLCJzY3JvbGxYIiwidW5kZWZpbmVkIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwidG91Y2hlcyIsInBhZ2VYIiwibGVmdCIsInBhZ2VZIiwidG9wIiwiY2xpZW50V2lkdGgiLCJ3aWR0aCIsImNsaWVudEhlaWdodCIsImhlaWdodCIsIjIwIiwiX3JlZ2lzdHJ5IiwicmVnaXN0ZXIiLCJpc1BsdWdpbiIsInJlZ2lzdGVyZWQiLCJwbHVnaW5WZXJzaW9uIiwidmVyc2lvblBhcnNlIiwibnVtYmVyIiwicmVnaXN0ZXJlZFZlcnNpb24iLCJyZXNvbHZlIiwiZGVwZW5kZW5jeSIsImRlcGVuZGVuY3lQYXJzZSIsImluc3RhbGwiLCJpc1VzZWQiLCJpc0ZvciIsInBhcnNlZCIsImZvciIsInZlcnNpb25TYXRpc2ZpZXMiLCJwbHVnaW5zIiwiZGVwZW5kZW5jaWVzIiwic29ydGVkRGVwZW5kZW5jaWVzIiwic3RhdHVzIiwiX3dhcm5lZCIsInRyYWNrZWQiLCJwYXJzZWRCYXNlIiwicmVzb2x2ZWQiLCJ0ZXN0IiwiaWRlbnRpZmllcnMiLCJpc1JhbmdlIiwiaXNOYU4iLCJzdWJzdHIiLCJvcGVyYXRvciIsInByZXJlbGVhc2UiLCJyYW5nZVBhcnNlZCIsInJhbmdlUGFydHMiLCJ2ZXJzaW9uUGFyc2VkIiwidmVyc2lvblBhcnRzIiwiMjEiLCJSdW5uZXIiLCJfcmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX2NhbmNlbEFuaW1hdGlvbkZyYW1lIiwiX2ZyYW1lVGltZW91dCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibXNDYW5jZWxBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5uZXIiLCJmcHMiLCJkZWx0YVNhbXBsZVNpemUiLCJjb3VudGVyVGltZXN0YW1wIiwiZnJhbWVDb3VudGVyIiwiZGVsdGFIaXN0b3J5IiwidGltZVByZXYiLCJ0aW1lU2NhbGVQcmV2IiwiZnJhbWVSZXF1ZXN0SWQiLCJpc0ZpeGVkIiwiZW5hYmxlZCIsImRlbHRhTWluIiwiZGVsdGFNYXgiLCJydW4iLCJ0aW1lIiwidGljayIsInN0b3AiLCJzdGFydCIsIjIyIiwiX21vdGlvbldha2VUaHJlc2hvbGQiLCJfbW90aW9uU2xlZXBUaHJlc2hvbGQiLCJfbWluQmlhcyIsInRpbWVGYWN0b3IiLCJtaW5Nb3Rpb24iLCJtYXhNb3Rpb24iLCJzbGVlcENvdW50ZXIiLCJzbGVlcGluZ0JvZHkiLCJtb3ZpbmdCb2R5Iiwid2FzU2xlZXBpbmciLCIyMyIsImRlY29tcCIsImNoYW1mZXIiLCJyYWRpdXMiLCJxdWFsaXR5IiwicXVhbGl0eU1pbiIsInF1YWxpdHlNYXgiLCJ0cmFwZXpvaWQiLCJzbG9wZSIsInZlcnRpY2VzUGF0aCIsIngxIiwieDIiLCJ4MyIsImNpcmNsZSIsIm1heFNpZGVzIiwic2lkZXMiLCJjZWlsIiwicG9seWdvbiIsInRoZXRhIiwieHgiLCJ5eSIsInRvRml4ZWQiLCJ2ZXJ0ZXhTZXRzIiwiZmxhZ0ludGVybmFsIiwicmVtb3ZlQ29sbGluZWFyIiwibWluaW11bUFyZWEiLCJpc0NvbnZleCIsInoiLCJjb25jYXZlIiwibWFrZUNDVyIsInJlbW92ZUNvbGxpbmVhclBvaW50cyIsImRlY29tcG9zZWQiLCJxdWlja0RlY29tcCIsImNodW5rVmVydGljZXMiLCJwYXYiLCJwYnYiLCJkYSIsIm1hZ25pdHVkZVNxdWFyZWQiLCJkYiIsImlzSW50ZXJuYWwiLCIyNCIsIkNvbXBvc2l0ZXMiLCJzdGFjayIsImNvbHVtbnMiLCJyb3dzIiwiY29sdW1uR2FwIiwicm93R2FwIiwibGFzdEJvZHkiLCJtYXhIZWlnaHQiLCJib2R5SGVpZ2h0IiwiYm9keVdpZHRoIiwieE9mZnNldEEiLCJ5T2Zmc2V0QSIsInhPZmZzZXRCIiwieU9mZnNldEIiLCJib2R5QUhlaWdodCIsImJvZHlBV2lkdGgiLCJib2R5QkhlaWdodCIsIm1lc2giLCJjcm9zc0JyYWNlIiwiYm9keUMiLCJweXJhbWlkIiwiYWN0dWFsUm93cyIsImxhc3RCb2R5V2lkdGgiLCJuZXd0b25zQ3JhZGxlIiwiY2FyIiwid2hlZWxTaXplIiwid2hlZWxBT2Zmc2V0Iiwid2hlZWxCT2Zmc2V0Iiwid2hlZWxBIiwid2hlZWxCIiwiYXhlbEEiLCJheGVsQiIsInNvZnRCb2R5IiwicGFydGljbGVSYWRpdXMiLCJwYXJ0aWNsZU9wdGlvbnMiLCJjb25zdHJhaW50T3B0aW9ucyIsIjI1Iiwibm9ybWFsaXNlIiwiZ3JhZGllbnQiLCIyNiIsImJvdW5kc0EiLCJib3VuZHNCIiwidmVjdG9yIiwic2hpZnQiLCJkZWx0YVgiLCJkZWx0YVkiLCIyNyIsIlN2ZyIsInBhdGhUb1ZlcnRpY2VzIiwic2FtcGxlTGVuZ3RoIiwiaWwiLCJzZWdtZW50Iiwic2VnbWVudHMiLCJzZWdtZW50c1F1ZXVlIiwibGFzdFNlZ21lbnQiLCJsYXN0UG9pbnQiLCJseCIsImx5IiwiYWRkUG9pbnQiLCJweCIsInB5IiwicGF0aFNlZ1R5cGUiLCJpc1JlbGF0aXZlIiwiYWRkU2VnbWVudFBvaW50Iiwic2VnVHlwZSIsInBhdGhTZWdUeXBlQXNMZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsIl9zdmdQYXRoVG9BYnNvbHV0ZSIsImdldFRvdGFsTGVuZ3RoIiwicGF0aFNlZ0xpc3QiLCJudW1iZXJPZkl0ZW1zIiwiZ2V0SXRlbSIsImdldFBhdGhTZWdBdExlbmd0aCIsImdldFBvaW50QXRMZW5ndGgiLCJ4MCIsInkwIiwieTEiLCJ5MiIsInNlZ3MiLCJsZW4iLCJzZWciLCJyZXBsYWNlSXRlbSIsImNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQXJjQWJzIiwicjEiLCJyMiIsImxhcmdlQXJjRmxhZyIsInN3ZWVwRmxhZyIsIjI4Iiwib3V0cHV0IiwidmVjdG9yQSIsInZlY3RvckIiLCJjcm9zczMiLCJ2ZWN0b3JDIiwic2NhbGFyIiwiYXRhbjIiLCIyOSIsIm1hdGNoIiwicGFyc2VGbG9hdCIsIm1lYW4iLCJhdmVyYWdlIiwic2lnbmVkIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJ2ZXJ0aWNlIiwibmV4dFZlcnRpY2UiLCJuZXdWZXJ0aWNlcyIsInByZXZWZXJ0ZXgiLCJuZXh0VmVydGV4IiwiY3VycmVudFJhZGl1cyIsInByZXZOb3JtYWwiLCJuZXh0Tm9ybWFsIiwiZGlhZ29uYWxSYWRpdXMiLCJyYWRpdXNWZWN0b3IiLCJtaWROb3JtYWwiLCJzY2FsZWRWZXJ0ZXgiLCJwcmVjaXNpb24iLCJhY29zIiwic29ydCIsImZsYWciLCJ1cHBlciIsImxvd2VyIiwicG9wIiwiMzAiLCJSZW5kZXJQaXhpIiwiMzEiLCJiYWNrZ3JvdW5kIiwid2lyZWZyYW1lQmFja2dyb3VuZCIsImhhc0JvdW5kcyIsIndpcmVmcmFtZXMiLCJzaG93U2xlZXBpbmciLCJzaG93RGVidWciLCJzaG93QnJvYWRwaGFzZSIsInNob3dCb3VuZHMiLCJzaG93VmVsb2NpdHkiLCJzaG93Q29sbGlzaW9ucyIsInNob3dTZXBhcmF0aW9ucyIsInNob3dBeGVzIiwic2hvd1Bvc2l0aW9ucyIsInNob3dBbmdsZUluZGljYXRvciIsInNob3dJZHMiLCJzaG93U2hhZG93cyIsInNob3dWZXJ0ZXhOdW1iZXJzIiwic2hvd0NvbnZleEh1bGxzIiwic2hvd0ludGVybmFsRWRnZXMiLCJzaG93TW91c2VQb3NpdGlvbiIsIl9jcmVhdGVDYW52YXMiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInRleHR1cmVzIiwic2V0UGl4ZWxSYXRpbyIsImFwcGVuZENoaWxkIiwibG9vcCIsIl9nZXRQaXhlbFJhdGlvIiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJsb29rQXQiLCJwYWRkaW5nIiwiY2VudGVyIiwidmlld0hlaWdodCIsIm91dGVyUmF0aW8iLCJpbm5lclJhdGlvIiwic3RhcnRWaWV3VHJhbnNmb3JtIiwiYm91bmRzV2lkdGgiLCJib3VuZHNIZWlnaHQiLCJib3VuZHNTY2FsZVgiLCJib3VuZHNTY2FsZVkiLCJlbmRWaWV3VHJhbnNmb3JtIiwic2V0VHJhbnNmb3JtIiwiY3VycmVudEJhY2tncm91bmQiLCJfYXBwbHlCYWNrZ3JvdW5kIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZmlsbFJlY3QiLCJib2R5Q29udmV4SHVsbHMiLCJib2R5V2lyZWZyYW1lcyIsImJvZHlCb3VuZHMiLCJib2R5QXhlcyIsImJvZHlQb3NpdGlvbnMiLCJib2R5VmVsb2NpdHkiLCJib2R5SWRzIiwic2VwYXJhdGlvbnMiLCJ2ZXJ0ZXhOdW1iZXJzIiwibW91c2VQb3NpdGlvbiIsImRlYnVnIiwiZGVidWdUaW1lc3RhbXAiLCJ0ZXh0Iiwicm91bmQiLCJkZWJ1Z1N0cmluZyIsImZvbnQiLCJmaWxsVGV4dCIsImJlZ2luUGF0aCIsImFyYyIsImNsb3NlUGF0aCIsIm1vdmVUbyIsImNvaWxzIiwibGluZVRvIiwic3Ryb2tlIiwiZmlsbCIsImJvZHlTaGFkb3dzIiwiZGlzdGFuY2VYIiwiZGlzdGFuY2VZIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsInNoYWRvd0JsdXIiLCJnbG9iYWxBbHBoYSIsInRleHR1cmUiLCJfZ2V0VGV4dHVyZSIsImRyYXdJbWFnZSIsInJlY3QiLCJub3JtYWxQb3NYIiwibm9ybWFsUG9zWSIsImJ1Y2tldEtleXMiLCJpbnNwZWN0b3IiLCJzZWxlY3RlZCIsIml0ZW0iLCJkYXRhIiwic2V0TGluZURhc2giLCJzZWxlY3RTdGFydCIsInNlbGVjdEJvdW5kcyIsImNyZWF0ZUVsZW1lbnQiLCJvbmNvbnRleHRtZW51Iiwib25zZWxlY3RzdGFydCIsImRldmljZVBpeGVsUmF0aW8iLCJ3ZWJraXRCYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwibW96QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1zQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm9CYWNraW5nU3RvcmVQaXhlbFJhdGlvIiwiYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImltYWdlUGF0aCIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJjc3NCYWNrZ3JvdW5kIiwiYmFja2dyb3VuZFNpemUiLCIzMiIsInJlbmRlcmVyIiwiY29udGFpbmVyIiwic3ByaXRlQ29udGFpbmVyIiwicGl4aU9wdGlvbnMiLCJ0cmFuc3BhcmVudCIsInZpZXciLCJhbnRpYWxpYXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJQSVhJIiwiV2ViR0xSZW5kZXJlciIsIkNvbnRhaW5lciIsInNwcml0ZXMiLCJwcmltaXRpdmVzIiwiYWRkQ2hpbGQiLCJjaGlsZHJlbiIsInJlbW92ZUNoaWxkIiwiYmdTcHJpdGUiLCJhZGRDaGlsZEF0Iiwic2V0QmFja2dyb3VuZCIsImlzQ29sb3IiLCJjb2xvciIsIlNwcml0ZSIsImNvbnN0cmFpbnRSZW5kZXIiLCJwcmltaXRpdmVJZCIsInByaW1pdGl2ZSIsIkdyYXBoaWNzIiwiYmVnaW5GaWxsIiwibGluZVN0eWxlIiwiZW5kRmlsbCIsImJvZHlSZW5kZXIiLCJzcHJpdGVJZCIsIl9jcmVhdGVCb2R5U3ByaXRlIiwiX2NyZWF0ZUJvZHlQcmltaXRpdmUiLCJpbml0aWFsQW5nbGUiLCJ0ZXh0dXJlUGF0aCIsImFuY2hvciIsInN0cm9rZVN0eWxlSW5kaWNhdG9yIiwic3Ryb2tlU3R5bGVXaXJlZnJhbWUiLCJzdHJva2VTdHlsZVdpcmVmcmFtZUluZGljYXRvciIsIlRleHR1cmUiLCJmcm9tSW1hZ2UiLCJhbnRpR3Jhdml0eU1hbmhhdHRhbiIsInRndCIsImNvZWZmIiwiZyIsInV0aWxzIiwiY2hhclNpemUiLCJhbnRpR3Jhdml0eVJhbmdlZCIsInJhbmdlRmFjdG9yIiwiYW50aUdyYXZpdHlNYWciLCJ1bml0U3JjVG9UZ3QiLCJhbnRpR3Jhdml0eSIsImFwcGx5QW50aUdyYXZpdHlUd29Cb2R5IiwiZm9yY2VBbnRpR3Jhdml0eSIsInJlcHVsc2lvbkNvZWZmIiwicmVwdWxzaW9uUmFuZ2UiLCJhcHBseUFudGlHcmF2aXR5IiwiYmxvY2tzIiwiS25vbGxib3QiLCJmb3JjZU9uIiwiU2NyZWVuV2lkdGgiLCJTY3JlZW5IZWlnaHQiLCJTY3JlZW5XaWR0aEhhbGYiLCJTY3JlZW5IZWlnaHRIYWxmIiwiV2FsbE9mZnNldCIsIldhbGxUaGlja25lc3MiLCJpbWdQYXRocyIsInBva2VTY2FsZSIsInBhcmFtcyIsInBva2VEZWNheSIsImFsaWdubWVudEZvcmNlQ29lZmYiLCJhbGlnbm1lbnRGb3JjZVJhbmdlIiwiYWxpZ25tZW50Rm9yY2VXYWxsUmFuZ2UiLCJncm91cGluZ0NvZWZmIiwiYm9keU9wdGlvbnMiLCJwcm9taXNlZEJveGVzIiwiUHJvbWlzZSIsImFsbCIsImltZ1BhdGgiLCJyZWplY3QiLCJpbWciLCJvbmxvYWQiLCJvbmVycm9yIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ3YWxsT3B0aW9ucyIsIndhbGxGcmljdGlvbiIsIndhbGxUb3AiLCJ3YWxsQm90dG9tIiwid2FsbExlZnQiLCJ3YWxsUmlnaHQiLCJib3hlcyIsImNvdW50ZXIiLCJncm91cGluZyIsImFwcGx5R3JvdXBpbmciLCJyZXB1bHNpb24iLCJhbGlnbiIsImFwcGx5QWxpZ25tZW50IiwicG9rZSIsImFwcGx5UmFuZG9tUG9rZXMiLCJmb3JFYWNoIiwidG91Y2giLCJhbmdsZUluUmFkaWFuIiwicm90YXRpb25BbmdsZSIsIkZ1bmN0aW9uIiwiY3JlYXRlQWxpZ25tZW50R3JhcGhNZXRhIiwicG9pbnRQYWlyRnVuYyIsImVkZ2VzIiwicG9zU3JjIiwicG9zVGd0Iiwid2VpZ2h0IiwiaWR4U3JjIiwiaWR4VGd0IiwiYXBwbHlBbGlnbm1lbnRGb3JjZVgiLCJlZGdlIiwiZm9yY2VPblRndCIsImFwcGx5QWxpZ25tZW50Rm9yY2VZIiwiYXBwbHlBbGlnbm1lbnRNU1QiLCJnWCIsImNyZWF0ZUFsaWdubWVudEdyYXBoWCIsImdZIiwiY3JlYXRlQWxpZ25tZW50R3JhcGhZIiwiZWRnZU1zdFgiLCJrcnVza2FsIiwiZWRnZU1zdFkiLCJ1ZiIsImUxIiwiZTIiLCJ2MSIsInYyIiwiYXJlQ29ubmVjdGVkIiwiY29ubmVjdCIsImFyZyIsIk1hcCIsIl8iLCJfaXNSb290IiwiX3Jvb3QiLCJfZGVwdGgiLCJfaW5kZXgiLCJpeCIsInRtcCIsIml5Iiwicm9vdFgiLCJyb290WSIsImdldFJvb3RBbGwiLCJoYXMiLCJhcHBseUFudGlHcmF2aXR5RGlzam9pbnQiLCJ1ZlgiLCJ1ZlkiLCJhcHBseUdyb3VwaW5nVHdvQm9keSIsImFwcGx5UmFuZG9tUG9rZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFB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L0csRUFBRzBULEVBQU00dkIsVUFBWXRCLEVBQU1qK0IsUUFDM0J6QyxFQUFHb1MsRUFBTTR2QixVQUFZdEIsRUFBTWorQixVQU1UMGtDLENBQWdCLzBCLEVBQU8zTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwiZXhwb3J0IHR5cGUgUGFpcjxUPiA9IHtcbiAgZmlyc3Q6IFQsXG4gIHNlY29uZDogVCxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZWN0b3Ige1xuICB4OiBudW1iZXIsXG4gIHk6IG51bWJlcixcbn1cblxuZXhwb3J0IGNvbnN0IGFyck1heCA9ICh4czogbnVtYmVyW10pOiBudW1iZXIgPT4geHMucmVkdWNlKChhY2MsIHgpID0+IE1hdGgubWF4KGFjYywgeCksIC1JbmZpbml0eSk7XG5leHBvcnQgY29uc3QgYXJyTWluID0gKHhzOiBudW1iZXJbXSk6IG51bWJlciA9PiB4cy5yZWR1Y2UoKGFjYywgeCkgPT4gTWF0aC5taW4oYWNjLCB4KSwgSW5maW5pdHkpO1xuZXhwb3J0IGNvbnN0IGFyclN1bSA9ICh4czogbnVtYmVyW10pOiBudW1iZXIgPT4geHMucmVkdWNlKChhY2MsIHgpID0+IGFjYyArIHgsIDApO1xuZXhwb3J0IGNvbnN0IGFyck1lYW4gPSAoeHM6IG51bWJlcltdKTogbnVtYmVyID0+IGFyclN1bSh4cykgLyB4cy5sZW5ndGg7XG5cbmV4cG9ydCBjb25zdCBhcnJNZXRhQnkgPSA8VD4oeHM6IFRbXSwgZjogKGE6IFQpID0+IG51bWJlciwgcmVkdWNlOiAoYTogbnVtYmVyW10pID0+IG51bWJlcik6IFRbXSA9PiB7XG4gIGxldCB5cyA9IHhzLm1hcChmKVxuICBsZXQgeW1heCA9IHJlZHVjZSh5cyk7XG4gIGxldCByZXMgPSBBcnJheTxUPigpO1xuICBmb3IgKGxldCBpIGluIHhzKSB7XG4gICAgaWYgKHlzW2ldID09IHltYXgpIHtcbiAgICAgIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbmV4cG9ydCBjb25zdCBhcnJNYXhCeSA9IDxUPih7IHhzLCBmIH06IHsgeHM6IFRbXTsgZjogKGE6IFQpID0+IG51bWJlcjsgfSk6IFRbXSA9PiB7XG4gIHJldHVybiBhcnJNZXRhQnkoeHMsIGYsIGFyck1heCk7XG59XG5cbmV4cG9ydCBjb25zdCBhcnJNaW5CeSA9IDxUPih7IHhzLCBmIH06IHsgeHM6IFRbXTsgZjogKGE6IFQpID0+IG51bWJlcjsgfSk6IFRbXSA9PiB7XG4gIHJldHVybiBhcnJNZXRhQnkoeHMsIGYsIGFyck1pbik7XG59XG5cbmV4cG9ydCBjb25zdCB2ZWN0b3JNZWFuID0gKHZlYzogVmVjdG9yW10pOiBWZWN0b3IgPT4ge1xuICBsZXQgeCA9IGFyck1lYW4odmVjLm1hcCh2ID0+IHYueCkpO1xuICBsZXQgeSA9IGFyck1lYW4odmVjLm1hcCh2ID0+IHYueSkpO1xuICByZXR1cm4geyB4OiB4LCB5OiB5IH07XG59XG5cbmV4cG9ydCBjb25zdCByaWdodG1vc3RQb2ludCA9IChwb2ludHM6IFZlY3RvcltdKTogVmVjdG9yID0+IHtcbiAgcmV0dXJuIHZlY3Rvck1lYW4oYXJyTWF4QnkoeyB4czogcG9pbnRzLCBmOiBwID0+IHAueCB9KSk7XG59XG5cbmV4cG9ydCBjb25zdCBsZWZ0bW9zdFBvaW50ID0gKHBvaW50czogVmVjdG9yW10pOiBWZWN0b3IgPT4ge1xuICByZXR1cm4gdmVjdG9yTWVhbihhcnJNaW5CeSh7IHhzOiBwb2ludHMsIGY6IHAgPT4gcC54IH0pKTtcbn1cblxuZXhwb3J0IGNvbnN0IHRvcG1vc3RQb2ludCA9IChwb2ludHM6IFZlY3RvcltdKTogVmVjdG9yID0+IHtcbiAgcmV0dXJuIHZlY3Rvck1lYW4oYXJyTWluQnkoeyB4czogcG9pbnRzLCBmOiBwID0+IHAueSB9KSk7XG59XG5cbmV4cG9ydCBjb25zdCBib3R0b21tb3N0UG9pbnQgPSAocG9pbnRzOiBWZWN0b3JbXSk6IFZlY3RvciA9PiB7XG4gIHJldHVybiB2ZWN0b3JNZWFuKGFyck1heEJ5KHsgeHM6IHBvaW50cywgZjogcCA9PiBwLnkgfSkpO1xufVxuXG5leHBvcnQgY29uc3QgZGlzdEhvcml6ID0gKHBvaW50QTogVmVjdG9yLCBwb2ludEI6IFZlY3Rvcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBNYXRoLmFicyhwb2ludEEueCAtIHBvaW50Qi54KTtcbn1cblxuZXhwb3J0IGNvbnN0IGRpc3RWZXJ0aSA9IChwb2ludEE6IFZlY3RvciwgcG9pbnRCOiBWZWN0b3IpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gTWF0aC5hYnMocG9pbnRBLnkgLSBwb2ludEIueSk7XG59XG5cbmV4cG9ydCBjb25zdCBkaXN0RXVjbGlkID0gKHBvaW50QTogVmVjdG9yLCBwb2ludEI6IFZlY3Rvcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBNYXRoLmh5cG90KHBvaW50QS54IC0gcG9pbnRCLngsIHBvaW50QS55IC0gcG9pbnRCLnkpO1xufVxuXG5jb25zdCBjbG9lc3RQb2ludE1ldGEgPSAoYm9keTE6IE1hdHRlci5Cb2R5LCBib2R5MjogTWF0dGVyLkJvZHksIGVkZ2VBOiAodnM6IFZlY3RvcltdKSA9PiBWZWN0b3IsIGVkZ2VCOiAodnM6IFZlY3RvcltdKSA9PiBWZWN0b3IsIGRpc3RGdW5jOiAodjE6IFZlY3RvciwgdjI6IFZlY3RvcikgPT4gbnVtYmVyKTogW1ZlY3RvciwgVmVjdG9yLCBudW1iZXJdID0+IHtcbiAgbGV0IG9uZTEgPSBlZGdlQShib2R5MS52ZXJ0aWNlcyk7XG4gIGxldCBhbm90aGVyMSA9IGVkZ2VCKGJvZHkxLnZlcnRpY2VzKTtcbiAgbGV0IG9uZTIgPSBlZGdlQShib2R5Mi52ZXJ0aWNlcyk7XG4gIGxldCBhbm90aGVyMiA9IGVkZ2VCKGJvZHkyLnZlcnRpY2VzKTtcbiAgbGV0IHJlczogW1ZlY3RvciwgVmVjdG9yLCBudW1iZXJdID0gW29uZTEsIGFub3RoZXIxLCBJbmZpbml0eV07XG4gIGxldCBkaXN0ID0gSW5maW5pdHk7XG4gIGZvciAobGV0IHAxIG9mIFtvbmUxLCBhbm90aGVyMV0pIHtcbiAgICBmb3IgKGxldCBwMiBvZiBbb25lMiwgYW5vdGhlcjJdKSB7XG4gICAgICBsZXQgZCA9IGRpc3RGdW5jKHAxLCBwMik7XG4gICAgICBpZiAoZCA8IGRpc3QpIHtcbiAgICAgICAgZGlzdCA9IGQ7XG4gICAgICAgIHJlcyA9IFtwMSwgcDIsIGRpc3RdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgY29uc3QgY2xvZXN0UG9pbnRQYWlyWCA9IChib2R5MTogTWF0dGVyLkJvZHksIGJvZHkyOiBNYXR0ZXIuQm9keSk6IFtWZWN0b3IsIFZlY3RvciwgbnVtYmVyXSA9PiB7XG4gIHJldHVybiBjbG9lc3RQb2ludE1ldGEoYm9keTEsIGJvZHkyLCBsZWZ0bW9zdFBvaW50LCByaWdodG1vc3RQb2ludCwgZGlzdEhvcml6KTtcbn1cblxuZXhwb3J0IGNvbnN0IGNsb2VzdFBvaW50UGFpclkgPSAoYm9keTE6IE1hdHRlci5Cb2R5LCBib2R5MjogTWF0dGVyLkJvZHkpOiBbVmVjdG9yLCBWZWN0b3IsIG51bWJlcl0gPT4ge1xuICByZXR1cm4gY2xvZXN0UG9pbnRNZXRhKGJvZHkxLCBib2R5MiwgdG9wbW9zdFBvaW50LCBib3R0b21tb3N0UG9pbnQsIGRpc3RWZXJ0aSk7XG59XG5cbmV4cG9ydCBjb25zdCByYW5nZSA9IChzaXplOiBudW1iZXIpOiBudW1iZXJbXSA9PiB7XG4gIHNpemUgPSBNYXRoLmZsb29yKHNpemUpO1xuICByZXR1cm4gQXJyYXkuZnJvbShBcnJheShzaXplKS5rZXlzKCkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHJhbmRSYW5nZSA9IChsbzogbnVtYmVyLCBoaTogbnVtYmVyLCB1bml0OiBudW1iZXIgPSAxKTogbnVtYmVyID0+IHtcbiAgbGV0IGEgPSBNYXRoLmZsb29yKGxvKTtcbiAgbGV0IGIgPSBNYXRoLmZsb29yKGhpKTtcbiAgcmV0dXJuIGEgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoYiAtIGEpIC8gdW5pdCkgKiB1bml0XG59XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI1NTgyODgyL2phdmFzY3JpcHQtbWF0aC1yYW5kb20tbm9ybWFsLWRpc3RyaWJ1dGlvbi1nYXVzc2lhbi1iZWxsLWN1cnZlXG5leHBvcnQgY29uc3QgcmFuZG4gPSAoKTogbnVtYmVyID0+IHtcbiAgbGV0IHUgPSAwO1xuICBsZXQgdiA9IDA7XG4gIHdoaWxlICh1ID09PSAwKSB1ID0gTWF0aC5yYW5kb20oKTsgLy9Db252ZXJ0aW5nIFswLDEpIHRvICgwLDEpXG4gIHdoaWxlICh2ID09PSAwKSB2ID0gTWF0aC5yYW5kb20oKTtcbiAgbGV0IG51bSA9IE1hdGguc3FydCgtMi4wICogTWF0aC5sb2codSkpICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHYpO1xuICBudW0gPSBudW0gLyAxMC4wICsgMC41OyAvLyBUcmFuc2xhdGUgdG8gMCAtPiAxXG4gIGlmIChudW0gPiAxIHx8IG51bSA8IDApIHJldHVybiByYW5kbigpOyAvLyByZXNhbXBsZSBiZXR3ZWVuIDAgYW5kIDFcbiAgcmV0dXJuIG51bSAtIDAuNTtcbn1cblxuZXhwb3J0IGNvbnN0IHVuaXRWZWMgPSAoZnJvbTogVmVjdG9yLCB0bzogVmVjdG9yKTogVmVjdG9yID0+IHtcbiAgbGV0IGQgPSBkaXN0RXVjbGlkKGZyb20sIHRvKVxuICByZXR1cm4ge1xuICAgIHg6ICh0by54IC0gZnJvbS54KSAvIGQsXG4gICAgeTogKHRvLnkgLSBmcm9tLnkpIC8gZCxcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplID0gKHY6IFZlY3Rvcik6IFZlY3RvciA9PiB7XG4gIGxldCBub3JtID0gTWF0aC5oeXBvdCh2LngsIHYueSk7XG4gIHJldHVybiB7XG4gICAgeDogdi54IC8gbm9ybSxcbiAgICB5OiB2LnkgLyBub3JtLFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBuZWdhdGUgPSAodjogVmVjdG9yKTogVmVjdG9yID0+IHtcbiAgcmV0dXJuIHsgeDogLXYueCwgeTogLXYueSB9O1xufVxuXG5leHBvcnQgY29uc3QgbWFrZVVub3JkZXJlZFBhaXIgPSA8VD4oYTogVCwgYjogVCk6IFBhaXI8VD4gPT4ge1xuICBpZiAoYiA8IGEpIHtcbiAgICBbYSwgYl0gPSBbYiwgYV07XG4gIH1cbiAgcmV0dXJuIHsgZmlyc3Q6IGEsIHNlY29uZDogYiB9O1xufVxuXG5leHBvcnQgY29uc3QgZ2V0V2lkdGggPSAoYmxvY2s6IE1hdHRlci5Cb2R5KTogbnVtYmVyID0+IHtcbiAgbGV0IHhzID0gYmxvY2sudmVydGljZXMubWFwKHYgPT4gdi54KTtcbiAgcmV0dXJuIGFyck1heCh4cykgLSBhcnJNaW4oeHMpO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0SGVpZ2h0ID0gKGJsb2NrOiBNYXR0ZXIuQm9keSk6IG51bWJlciA9PiB7XG4gIGxldCB5cyA9IGJsb2NrLnZlcnRpY2VzLm1hcCh2ID0+IHYueSk7XG4gIHJldHVybiBhcnJNYXgoeXMpIC0gYXJyTWluKHlzKTtcbn1cblxuZXhwb3J0IGNvbnN0IGFyZVNhbWVIZWlnaHQgPSAoZm9vOiBNYXR0ZXIuQm9keSwgYmFyOiBNYXR0ZXIuQm9keSkgPT4ge1xuICByZXR1cm4gZ2V0SGVpZ2h0KGZvbykgPT0gZ2V0SGVpZ2h0KGJhcik7XG59XG5cbmV4cG9ydCBjb25zdCBhcmVTYW1lV2lkdGggPSAoZm9vOiBNYXR0ZXIuQm9keSwgYmFyOiBNYXR0ZXIuQm9keSkgPT4ge1xuICByZXR1cm4gZ2V0V2lkdGgoZm9vKSA9PSBnZXRXaWR0aChiYXIpO1xufVxuIiwiLyoqXG4qIG1hdHRlci1qcyAwLjE0LjIgYnkgQGxpYWJydSAyMDE4LTA2LTExXG4qIGh0dHA6Ly9icm0uaW8vbWF0dGVyLWpzL1xuKiBMaWNlbnNlIE1JVFxuKi9cblxuLyoqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIFxuICogQ29weXJpZ2h0IChjKSBMaWFtIEJydW1taXR0IGFuZCBjb250cmlidXRvcnMuXG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4oZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5NYXR0ZXIgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBib2R5IG1vZGVscy5cbiogQSBgTWF0dGVyLkJvZHlgIGlzIGEgcmlnaWQgYm9keSB0aGF0IGNhbiBiZSBzaW11bGF0ZWQgYnkgYSBgTWF0dGVyLkVuZ2luZWAuXG4qIEZhY3RvcmllcyBmb3IgY29tbW9ubHkgdXNlZCBib2R5IGNvbmZpZ3VyYXRpb25zIChzdWNoIGFzIHJlY3RhbmdsZXMsIGNpcmNsZXMgYW5kIG90aGVyIHBvbHlnb25zKSBjYW4gYmUgZm91bmQgaW4gdGhlIG1vZHVsZSBgTWF0dGVyLkJvZGllc2AuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG5cbiogQGNsYXNzIEJvZHlcbiovXG5cbnZhciBCb2R5ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQm9keTtcblxudmFyIFZlcnRpY2VzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcbnZhciBTbGVlcGluZyA9IF9kZXJlcV8oJy4uL2NvcmUvU2xlZXBpbmcnKTtcbnZhciBSZW5kZXIgPSBfZGVyZXFfKCcuLi9yZW5kZXIvUmVuZGVyJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcbnZhciBCb3VuZHMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBBeGVzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQXhlcycpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICBCb2R5Ll9pbmVydGlhU2NhbGUgPSA0O1xuICAgIEJvZHkuX25leHRDb2xsaWRpbmdHcm91cElkID0gMTtcbiAgICBCb2R5Ll9uZXh0Tm9uQ29sbGlkaW5nR3JvdXBJZCA9IC0xO1xuICAgIEJvZHkuX25leHRDYXRlZ29yeSA9IDB4MDAwMTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmlnaWQgYm9keSBtb2RlbC4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogQWxsIHByb3BlcnRpZXMgaGF2ZSBkZWZhdWx0IHZhbHVlcywgYW5kIG1hbnkgYXJlIHByZS1jYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gb3RoZXIgcHJvcGVydGllcy5cbiAgICAgKiBWZXJ0aWNlcyBtdXN0IGJlIHNwZWNpZmllZCBpbiBjbG9ja3dpc2Ugb3JkZXIuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7Ym9keX0gYm9keVxuICAgICAqL1xuICAgIEJvZHkuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBpZDogQ29tbW9uLm5leHRJZCgpLFxuICAgICAgICAgICAgdHlwZTogJ2JvZHknLFxuICAgICAgICAgICAgbGFiZWw6ICdCb2R5JyxcbiAgICAgICAgICAgIHBhcnRzOiBbXSxcbiAgICAgICAgICAgIHBsdWdpbjoge30sXG4gICAgICAgICAgICBhbmdsZTogMCxcbiAgICAgICAgICAgIHZlcnRpY2VzOiBWZXJ0aWNlcy5mcm9tUGF0aCgnTCAwIDAgTCA0MCAwIEwgNDAgNDAgTCAwIDQwJyksXG4gICAgICAgICAgICBwb3NpdGlvbjogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICBmb3JjZTogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICB0b3JxdWU6IDAsXG4gICAgICAgICAgICBwb3NpdGlvbkltcHVsc2U6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgY29uc3RyYWludEltcHVsc2U6IHsgeDogMCwgeTogMCwgYW5nbGU6IDAgfSxcbiAgICAgICAgICAgIHRvdGFsQ29udGFjdHM6IDAsXG4gICAgICAgICAgICBzcGVlZDogMCxcbiAgICAgICAgICAgIGFuZ3VsYXJTcGVlZDogMCxcbiAgICAgICAgICAgIHZlbG9jaXR5OiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIGFuZ3VsYXJWZWxvY2l0eTogMCxcbiAgICAgICAgICAgIGlzU2Vuc29yOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU3RhdGljOiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2xlZXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgbW90aW9uOiAwLFxuICAgICAgICAgICAgc2xlZXBUaHJlc2hvbGQ6IDYwLFxuICAgICAgICAgICAgZGVuc2l0eTogMC4wMDEsXG4gICAgICAgICAgICByZXN0aXR1dGlvbjogMCxcbiAgICAgICAgICAgIGZyaWN0aW9uOiAwLjEsXG4gICAgICAgICAgICBmcmljdGlvblN0YXRpYzogMC41LFxuICAgICAgICAgICAgZnJpY3Rpb25BaXI6IDAuMDEsXG4gICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogMHgwMDAxLFxuICAgICAgICAgICAgICAgIG1hc2s6IDB4RkZGRkZGRkYsXG4gICAgICAgICAgICAgICAgZ3JvdXA6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzbG9wOiAwLjA1LFxuICAgICAgICAgICAgdGltZVNjYWxlOiAxLFxuICAgICAgICAgICAgcmVuZGVyOiB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHNwcml0ZToge1xuICAgICAgICAgICAgICAgICAgICB4U2NhbGU6IDEsXG4gICAgICAgICAgICAgICAgICAgIHlTY2FsZTogMSxcbiAgICAgICAgICAgICAgICAgICAgeE9mZnNldDogMCxcbiAgICAgICAgICAgICAgICAgICAgeU9mZnNldDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGJvZHkgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBfaW5pdFByb3BlcnRpZXMoYm9keSwgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5leHQgdW5pcXVlIGdyb3VwIGluZGV4IGZvciB3aGljaCBib2RpZXMgd2lsbCBjb2xsaWRlLlxuICAgICAqIElmIGBpc05vbkNvbGxpZGluZ2AgaXMgYHRydWVgLCByZXR1cm5zIHRoZSBuZXh0IHVuaXF1ZSBncm91cCBpbmRleCBmb3Igd2hpY2ggYm9kaWVzIHdpbGwgX25vdF8gY29sbGlkZS5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBAbWV0aG9kIG5leHRHcm91cFxuICAgICAqIEBwYXJhbSB7Ym9vbH0gW2lzTm9uQ29sbGlkaW5nPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gVW5pcXVlIGdyb3VwIGluZGV4XG4gICAgICovXG4gICAgQm9keS5uZXh0R3JvdXAgPSBmdW5jdGlvbihpc05vbkNvbGxpZGluZykge1xuICAgICAgICBpZiAoaXNOb25Db2xsaWRpbmcpXG4gICAgICAgICAgICByZXR1cm4gQm9keS5fbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQtLTtcblxuICAgICAgICByZXR1cm4gQm9keS5fbmV4dENvbGxpZGluZ0dyb3VwSWQrKztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCB1bmlxdWUgY2F0ZWdvcnkgYml0ZmllbGQgKHN0YXJ0aW5nIGFmdGVyIHRoZSBpbml0aWFsIGRlZmF1bHQgY2F0ZWdvcnkgYDB4MDAwMWApLlxuICAgICAqIFRoZXJlIGFyZSAzMiBhdmFpbGFibGUuIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqIEBtZXRob2QgbmV4dENhdGVnb3J5XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgY2F0ZWdvcnkgYml0ZmllbGRcbiAgICAgKi9cbiAgICBCb2R5Lm5leHRDYXRlZ29yeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBCb2R5Ll9uZXh0Q2F0ZWdvcnkgPSBCb2R5Ll9uZXh0Q2F0ZWdvcnkgPDwgMTtcbiAgICAgICAgcmV0dXJuIEJvZHkuX25leHRDYXRlZ29yeTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZXMgYm9keSBwcm9wZXJ0aWVzLlxuICAgICAqIEBtZXRob2QgX2luaXRQcm9wZXJ0aWVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge30gW29wdGlvbnNdXG4gICAgICovXG4gICAgdmFyIF9pbml0UHJvcGVydGllcyA9IGZ1bmN0aW9uKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgLy8gaW5pdCByZXF1aXJlZCBwcm9wZXJ0aWVzIChvcmRlciBpcyBpbXBvcnRhbnQpXG4gICAgICAgIEJvZHkuc2V0KGJvZHksIHtcbiAgICAgICAgICAgIGJvdW5kczogYm9keS5ib3VuZHMgfHwgQm91bmRzLmNyZWF0ZShib2R5LnZlcnRpY2VzKSxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJldjogYm9keS5wb3NpdGlvblByZXYgfHwgVmVjdG9yLmNsb25lKGJvZHkucG9zaXRpb24pLFxuICAgICAgICAgICAgYW5nbGVQcmV2OiBib2R5LmFuZ2xlUHJldiB8fCBib2R5LmFuZ2xlLFxuICAgICAgICAgICAgdmVydGljZXM6IGJvZHkudmVydGljZXMsXG4gICAgICAgICAgICBwYXJ0czogYm9keS5wYXJ0cyB8fCBbYm9keV0sXG4gICAgICAgICAgICBpc1N0YXRpYzogYm9keS5pc1N0YXRpYyxcbiAgICAgICAgICAgIGlzU2xlZXBpbmc6IGJvZHkuaXNTbGVlcGluZyxcbiAgICAgICAgICAgIHBhcmVudDogYm9keS5wYXJlbnQgfHwgYm9keVxuICAgICAgICB9KTtcblxuICAgICAgICBWZXJ0aWNlcy5yb3RhdGUoYm9keS52ZXJ0aWNlcywgYm9keS5hbmdsZSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgIEF4ZXMucm90YXRlKGJvZHkuYXhlcywgYm9keS5hbmdsZSk7XG4gICAgICAgIEJvdW5kcy51cGRhdGUoYm9keS5ib3VuZHMsIGJvZHkudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuXG4gICAgICAgIC8vIGFsbG93IG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBwcm9wZXJ0aWVzXG4gICAgICAgIEJvZHkuc2V0KGJvZHksIHtcbiAgICAgICAgICAgIGF4ZXM6IG9wdGlvbnMuYXhlcyB8fCBib2R5LmF4ZXMsXG4gICAgICAgICAgICBhcmVhOiBvcHRpb25zLmFyZWEgfHwgYm9keS5hcmVhLFxuICAgICAgICAgICAgbWFzczogb3B0aW9ucy5tYXNzIHx8IGJvZHkubWFzcyxcbiAgICAgICAgICAgIGluZXJ0aWE6IG9wdGlvbnMuaW5lcnRpYSB8fCBib2R5LmluZXJ0aWFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVyIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIGRlZmF1bHRGaWxsU3R5bGUgPSAoYm9keS5pc1N0YXRpYyA/ICcjMmUyYjQ0JyA6IENvbW1vbi5jaG9vc2UoWycjMDA2QkE2JywgJyMwNDk2RkYnLCAnI0ZGQkM0MicsICcjRDgxMTU5JywgJyM4RjJENTYnXSkpLFxuICAgICAgICAgICAgZGVmYXVsdFN0cm9rZVN0eWxlID0gJyMwMDAnO1xuICAgICAgICBib2R5LnJlbmRlci5maWxsU3R5bGUgPSBib2R5LnJlbmRlci5maWxsU3R5bGUgfHwgZGVmYXVsdEZpbGxTdHlsZTtcbiAgICAgICAgYm9keS5yZW5kZXIuc3Ryb2tlU3R5bGUgPSBib2R5LnJlbmRlci5zdHJva2VTdHlsZSB8fCBkZWZhdWx0U3Ryb2tlU3R5bGU7XG4gICAgICAgIGJvZHkucmVuZGVyLnNwcml0ZS54T2Zmc2V0ICs9IC0oYm9keS5ib3VuZHMubWluLnggLSBib2R5LnBvc2l0aW9uLngpIC8gKGJvZHkuYm91bmRzLm1heC54IC0gYm9keS5ib3VuZHMubWluLngpO1xuICAgICAgICBib2R5LnJlbmRlci5zcHJpdGUueU9mZnNldCArPSAtKGJvZHkuYm91bmRzLm1pbi55IC0gYm9keS5wb3NpdGlvbi55KSAvIChib2R5LmJvdW5kcy5tYXgueSAtIGJvZHkuYm91bmRzLm1pbi55KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBwcm9wZXJ0eSBhbmQgYSB2YWx1ZSAob3IgbWFwIG9mKSwgc2V0cyB0aGUgcHJvcGVydHkocykgb24gdGhlIGJvZHksIHVzaW5nIHRoZSBhcHByb3ByaWF0ZSBzZXR0ZXIgZnVuY3Rpb25zIGlmIHRoZXkgZXhpc3QuXG4gICAgICogUHJlZmVyIHRvIHVzZSB0aGUgYWN0dWFsIHNldHRlciBmdW5jdGlvbnMgaW4gcGVyZm9ybWFuY2UgY3JpdGljYWwgc2l0dWF0aW9ucy5cbiAgICAgKiBAbWV0aG9kIHNldFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7fSBzZXR0aW5ncyBBIHByb3BlcnR5IG5hbWUgKG9yIG1hcCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMpIHRvIHNldCBvbiB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0ge30gdmFsdWUgVGhlIHZhbHVlIHRvIHNldCBpZiBgc2V0dGluZ3NgIGlzIGEgc2luZ2xlIHByb3BlcnR5IG5hbWUuXG4gICAgICovXG4gICAgQm9keS5zZXQgPSBmdW5jdGlvbihib2R5LCBzZXR0aW5ncywgdmFsdWUpIHtcbiAgICAgICAgdmFyIHByb3BlcnR5O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IHNldHRpbmdzO1xuICAgICAgICAgICAgc2V0dGluZ3MgPSB7fTtcbiAgICAgICAgICAgIHNldHRpbmdzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBzZXR0aW5ncykge1xuICAgICAgICAgICAgdmFsdWUgPSBzZXR0aW5nc1twcm9wZXJ0eV07XG5cbiAgICAgICAgICAgIGlmICghc2V0dGluZ3MuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5KSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ2lzU3RhdGljJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldFN0YXRpYyhib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc1NsZWVwaW5nJzpcbiAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWFzcyc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRNYXNzKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RlbnNpdHknOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0RGVuc2l0eShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpbmVydGlhJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldEluZXJ0aWEoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndmVydGljZXMnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0VmVydGljZXMoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncG9zaXRpb24nOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYW5nbGUnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0QW5nbGUoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndmVsb2NpdHknOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0VmVsb2NpdHkoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYW5ndWxhclZlbG9jaXR5JzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldEFuZ3VsYXJWZWxvY2l0eShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwYXJ0cyc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRQYXJ0cyhib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJvZHlbcHJvcGVydHldID0gdmFsdWU7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBib2R5IGFzIHN0YXRpYywgaW5jbHVkaW5nIGlzU3RhdGljIGZsYWcgYW5kIHNldHRpbmcgbWFzcyBhbmQgaW5lcnRpYSB0byBJbmZpbml0eS5cbiAgICAgKiBAbWV0aG9kIHNldFN0YXRpY1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7Ym9vbH0gaXNTdGF0aWNcbiAgICAgKi9cbiAgICBCb2R5LnNldFN0YXRpYyA9IGZ1bmN0aW9uKGJvZHksIGlzU3RhdGljKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuICAgICAgICAgICAgcGFydC5pc1N0YXRpYyA9IGlzU3RhdGljO1xuXG4gICAgICAgICAgICBpZiAoaXNTdGF0aWMpIHtcbiAgICAgICAgICAgICAgICBwYXJ0Ll9vcmlnaW5hbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdGl0dXRpb246IHBhcnQucmVzdGl0dXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGZyaWN0aW9uOiBwYXJ0LmZyaWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBtYXNzOiBwYXJ0Lm1hc3MsXG4gICAgICAgICAgICAgICAgICAgIGluZXJ0aWE6IHBhcnQuaW5lcnRpYSxcbiAgICAgICAgICAgICAgICAgICAgZGVuc2l0eTogcGFydC5kZW5zaXR5LFxuICAgICAgICAgICAgICAgICAgICBpbnZlcnNlTWFzczogcGFydC5pbnZlcnNlTWFzcyxcbiAgICAgICAgICAgICAgICAgICAgaW52ZXJzZUluZXJ0aWE6IHBhcnQuaW52ZXJzZUluZXJ0aWFcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcGFydC5yZXN0aXR1dGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5mcmljdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgcGFydC5tYXNzID0gcGFydC5pbmVydGlhID0gcGFydC5kZW5zaXR5ID0gSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnZlcnNlTWFzcyA9IHBhcnQuaW52ZXJzZUluZXJ0aWEgPSAwO1xuXG4gICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvblByZXYueCA9IHBhcnQucG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uUHJldi55ID0gcGFydC5wb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHBhcnQuYW5nbGVQcmV2ID0gcGFydC5hbmdsZTtcbiAgICAgICAgICAgICAgICBwYXJ0LmFuZ3VsYXJWZWxvY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5zcGVlZCA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5hbmd1bGFyU3BlZWQgPSAwO1xuICAgICAgICAgICAgICAgIHBhcnQubW90aW9uID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydC5fb3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICBwYXJ0LnJlc3RpdHV0aW9uID0gcGFydC5fb3JpZ2luYWwucmVzdGl0dXRpb247XG4gICAgICAgICAgICAgICAgcGFydC5mcmljdGlvbiA9IHBhcnQuX29yaWdpbmFsLmZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIHBhcnQubWFzcyA9IHBhcnQuX29yaWdpbmFsLm1hc3M7XG4gICAgICAgICAgICAgICAgcGFydC5pbmVydGlhID0gcGFydC5fb3JpZ2luYWwuaW5lcnRpYTtcbiAgICAgICAgICAgICAgICBwYXJ0LmRlbnNpdHkgPSBwYXJ0Ll9vcmlnaW5hbC5kZW5zaXR5O1xuICAgICAgICAgICAgICAgIHBhcnQuaW52ZXJzZU1hc3MgPSBwYXJ0Ll9vcmlnaW5hbC5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICBwYXJ0LmludmVyc2VJbmVydGlhID0gcGFydC5fb3JpZ2luYWwuaW52ZXJzZUluZXJ0aWE7XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgcGFydC5fb3JpZ2luYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFzcyBvZiB0aGUgYm9keS4gSW52ZXJzZSBtYXNzLCBkZW5zaXR5IGFuZCBpbmVydGlhIGFyZSBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgY2hhbmdlLlxuICAgICAqIEBtZXRob2Qgc2V0TWFzc1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXNzXG4gICAgICovXG4gICAgQm9keS5zZXRNYXNzID0gZnVuY3Rpb24oYm9keSwgbWFzcykge1xuICAgICAgICB2YXIgbW9tZW50ID0gYm9keS5pbmVydGlhIC8gKGJvZHkubWFzcyAvIDYpO1xuICAgICAgICBib2R5LmluZXJ0aWEgPSBtb21lbnQgKiAobWFzcyAvIDYpO1xuICAgICAgICBib2R5LmludmVyc2VJbmVydGlhID0gMSAvIGJvZHkuaW5lcnRpYTtcblxuICAgICAgICBib2R5Lm1hc3MgPSBtYXNzO1xuICAgICAgICBib2R5LmludmVyc2VNYXNzID0gMSAvIGJvZHkubWFzcztcbiAgICAgICAgYm9keS5kZW5zaXR5ID0gYm9keS5tYXNzIC8gYm9keS5hcmVhO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkZW5zaXR5IG9mIHRoZSBib2R5LiBNYXNzIGFuZCBpbmVydGlhIGFyZSBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgY2hhbmdlLlxuICAgICAqIEBtZXRob2Qgc2V0RGVuc2l0eVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZW5zaXR5XG4gICAgICovXG4gICAgQm9keS5zZXREZW5zaXR5ID0gZnVuY3Rpb24oYm9keSwgZGVuc2l0eSkge1xuICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgZGVuc2l0eSAqIGJvZHkuYXJlYSk7XG4gICAgICAgIGJvZHkuZGVuc2l0eSA9IGRlbnNpdHk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1vbWVudCBvZiBpbmVydGlhIChpLmUuIHNlY29uZCBtb21lbnQgb2YgYXJlYSkgb2YgdGhlIGJvZHkgb2YgdGhlIGJvZHkuIFxuICAgICAqIEludmVyc2UgaW5lcnRpYSBpcyBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgY2hhbmdlLiBNYXNzIGlzIG5vdCBjaGFuZ2VkLlxuICAgICAqIEBtZXRob2Qgc2V0SW5lcnRpYVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmVydGlhXG4gICAgICovXG4gICAgQm9keS5zZXRJbmVydGlhID0gZnVuY3Rpb24oYm9keSwgaW5lcnRpYSkge1xuICAgICAgICBib2R5LmluZXJ0aWEgPSBpbmVydGlhO1xuICAgICAgICBib2R5LmludmVyc2VJbmVydGlhID0gMSAvIGJvZHkuaW5lcnRpYTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYm9keSdzIHZlcnRpY2VzIGFuZCB1cGRhdGVzIGJvZHkgcHJvcGVydGllcyBhY2NvcmRpbmdseSwgaW5jbHVkaW5nIGluZXJ0aWEsIGFyZWEgYW5kIG1hc3MgKHdpdGggcmVzcGVjdCB0byBgYm9keS5kZW5zaXR5YCkuXG4gICAgICogVmVydGljZXMgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHRyYW5zZm9ybWVkIHRvIGJlIG9yaWVudGF0ZWQgYXJvdW5kIHRoZWlyIGNlbnRyZSBvZiBtYXNzIGFzIHRoZSBvcmlnaW4uXG4gICAgICogVGhleSBhcmUgdGhlbiBhdXRvbWF0aWNhbGx5IHRyYW5zbGF0ZWQgdG8gd29ybGQgc3BhY2UgYmFzZWQgb24gYGJvZHkucG9zaXRpb25gLlxuICAgICAqXG4gICAgICogVGhlIGB2ZXJ0aWNlc2AgYXJndW1lbnQgc2hvdWxkIGJlIHBhc3NlZCBhcyBhbiBhcnJheSBvZiBgTWF0dGVyLlZlY3RvcmAgcG9pbnRzIChvciBhIGBNYXR0ZXIuVmVydGljZXNgIGFycmF5KS5cbiAgICAgKiBWZXJ0aWNlcyBtdXN0IGZvcm0gYSBjb252ZXggaHVsbCwgY29uY2F2ZSBodWxscyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0VmVydGljZXNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge3ZlY3RvcltdfSB2ZXJ0aWNlc1xuICAgICAqL1xuICAgIEJvZHkuc2V0VmVydGljZXMgPSBmdW5jdGlvbihib2R5LCB2ZXJ0aWNlcykge1xuICAgICAgICAvLyBjaGFuZ2UgdmVydGljZXNcbiAgICAgICAgaWYgKHZlcnRpY2VzWzBdLmJvZHkgPT09IGJvZHkpIHtcbiAgICAgICAgICAgIGJvZHkudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvZHkudmVydGljZXMgPSBWZXJ0aWNlcy5jcmVhdGUodmVydGljZXMsIGJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHByb3BlcnRpZXNcbiAgICAgICAgYm9keS5heGVzID0gQXhlcy5mcm9tVmVydGljZXMoYm9keS52ZXJ0aWNlcyk7XG4gICAgICAgIGJvZHkuYXJlYSA9IFZlcnRpY2VzLmFyZWEoYm9keS52ZXJ0aWNlcyk7XG4gICAgICAgIEJvZHkuc2V0TWFzcyhib2R5LCBib2R5LmRlbnNpdHkgKiBib2R5LmFyZWEpO1xuXG4gICAgICAgIC8vIG9yaWVudCB2ZXJ0aWNlcyBhcm91bmQgdGhlIGNlbnRyZSBvZiBtYXNzIGF0IG9yaWdpbiAoMCwgMClcbiAgICAgICAgdmFyIGNlbnRyZSA9IFZlcnRpY2VzLmNlbnRyZShib2R5LnZlcnRpY2VzKTtcbiAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKGJvZHkudmVydGljZXMsIGNlbnRyZSwgLTEpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBpbmVydGlhIHdoaWxlIHZlcnRpY2VzIGFyZSBhdCBvcmlnaW4gKDAsIDApXG4gICAgICAgIEJvZHkuc2V0SW5lcnRpYShib2R5LCBCb2R5Ll9pbmVydGlhU2NhbGUgKiBWZXJ0aWNlcy5pbmVydGlhKGJvZHkudmVydGljZXMsIGJvZHkubWFzcykpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBnZW9tZXRyeVxuICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUoYm9keS52ZXJ0aWNlcywgYm9keS5wb3NpdGlvbik7XG4gICAgICAgIEJvdW5kcy51cGRhdGUoYm9keS5ib3VuZHMsIGJvZHkudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwYXJ0cyBvZiB0aGUgYGJvZHlgIGFuZCB1cGRhdGVzIG1hc3MsIGluZXJ0aWEgYW5kIGNlbnRyb2lkLlxuICAgICAqIEVhY2ggcGFydCB3aWxsIGhhdmUgaXRzIHBhcmVudCBzZXQgdG8gYGJvZHlgLlxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIGNvbnZleCBodWxsIHdpbGwgYmUgYXV0b21hdGljYWxseSBjb21wdXRlZCBhbmQgc2V0IG9uIGBib2R5YCwgdW5sZXNzIGBhdXRvSHVsbGAgaXMgc2V0IHRvIGBmYWxzZS5gXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIHdpbGwgZW5zdXJlIHRoYXQgdGhlIGZpcnN0IHBhcnQgaW4gYGJvZHkucGFydHNgIHdpbGwgYWx3YXlzIGJlIHRoZSBgYm9keWAuXG4gICAgICogQG1ldGhvZCBzZXRQYXJ0c1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSBbYm9keV0gcGFydHNcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFthdXRvSHVsbD10cnVlXVxuICAgICAqL1xuICAgIEJvZHkuc2V0UGFydHMgPSBmdW5jdGlvbihib2R5LCBwYXJ0cywgYXV0b0h1bGwpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgLy8gYWRkIGFsbCB0aGUgcGFydHMsIGVuc3VyaW5nIHRoYXQgdGhlIGZpcnN0IHBhcnQgaXMgYWx3YXlzIHRoZSBwYXJlbnQgYm9keVxuICAgICAgICBwYXJ0cyA9IHBhcnRzLnNsaWNlKDApO1xuICAgICAgICBib2R5LnBhcnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIGJvZHkucGFydHMucHVzaChib2R5KTtcbiAgICAgICAgYm9keS5wYXJlbnQgPSBib2R5O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSBib2R5KSB7XG4gICAgICAgICAgICAgICAgcGFydC5wYXJlbnQgPSBib2R5O1xuICAgICAgICAgICAgICAgIGJvZHkucGFydHMucHVzaChwYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5LnBhcnRzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBhdXRvSHVsbCA9IHR5cGVvZiBhdXRvSHVsbCAhPT0gJ3VuZGVmaW5lZCcgPyBhdXRvSHVsbCA6IHRydWU7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgY29udmV4IGh1bGwgb2YgYWxsIHBhcnRzIHRvIHNldCBvbiB0aGUgcGFyZW50IGJvZHlcbiAgICAgICAgaWYgKGF1dG9IdWxsKSB7XG4gICAgICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gdmVydGljZXMuY29uY2F0KHBhcnRzW2ldLnZlcnRpY2VzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgVmVydGljZXMuY2xvY2t3aXNlU29ydCh2ZXJ0aWNlcyk7XG5cbiAgICAgICAgICAgIHZhciBodWxsID0gVmVydGljZXMuaHVsbCh2ZXJ0aWNlcyksXG4gICAgICAgICAgICAgICAgaHVsbENlbnRyZSA9IFZlcnRpY2VzLmNlbnRyZShodWxsKTtcblxuICAgICAgICAgICAgQm9keS5zZXRWZXJ0aWNlcyhib2R5LCBodWxsKTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShib2R5LnZlcnRpY2VzLCBodWxsQ2VudHJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN1bSB0aGUgcHJvcGVydGllcyBvZiBhbGwgY29tcG91bmQgcGFydHMgb2YgdGhlIHBhcmVudCBib2R5XG4gICAgICAgIHZhciB0b3RhbCA9IEJvZHkuX3RvdGFsUHJvcGVydGllcyhib2R5KTtcblxuICAgICAgICBib2R5LmFyZWEgPSB0b3RhbC5hcmVhO1xuICAgICAgICBib2R5LnBhcmVudCA9IGJvZHk7XG4gICAgICAgIGJvZHkucG9zaXRpb24ueCA9IHRvdGFsLmNlbnRyZS54O1xuICAgICAgICBib2R5LnBvc2l0aW9uLnkgPSB0b3RhbC5jZW50cmUueTtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCA9IHRvdGFsLmNlbnRyZS54O1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi55ID0gdG90YWwuY2VudHJlLnk7XG5cbiAgICAgICAgQm9keS5zZXRNYXNzKGJvZHksIHRvdGFsLm1hc3MpO1xuICAgICAgICBCb2R5LnNldEluZXJ0aWEoYm9keSwgdG90YWwuaW5lcnRpYSk7XG4gICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwgdG90YWwuY2VudHJlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIGJvZHkgaW5zdGFudGx5LiBWZWxvY2l0eSwgYW5nbGUsIGZvcmNlIGV0Yy4gYXJlIHVuY2hhbmdlZC5cbiAgICAgKiBAbWV0aG9kIHNldFBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvc2l0aW9uXG4gICAgICovXG4gICAgQm9keS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKGJvZHksIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBkZWx0YSA9IFZlY3Rvci5zdWIocG9zaXRpb24sIGJvZHkucG9zaXRpb24pO1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ICs9IGRlbHRhLng7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgKz0gZGVsdGEueTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHkucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tpXTtcbiAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueCArPSBkZWx0YS54O1xuICAgICAgICAgICAgcGFydC5wb3NpdGlvbi55ICs9IGRlbHRhLnk7XG4gICAgICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUocGFydC52ZXJ0aWNlcywgZGVsdGEpO1xuICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShwYXJ0LmJvdW5kcywgcGFydC52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYW5nbGUgb2YgdGhlIGJvZHkgaW5zdGFudGx5LiBBbmd1bGFyIHZlbG9jaXR5LCBwb3NpdGlvbiwgZm9yY2UgZXRjLiBhcmUgdW5jaGFuZ2VkLlxuICAgICAqIEBtZXRob2Qgc2V0QW5nbGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVcbiAgICAgKi9cbiAgICBCb2R5LnNldEFuZ2xlID0gZnVuY3Rpb24oYm9keSwgYW5nbGUpIHtcbiAgICAgICAgdmFyIGRlbHRhID0gYW5nbGUgLSBib2R5LmFuZ2xlO1xuICAgICAgICBib2R5LmFuZ2xlUHJldiArPSBkZWx0YTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHkucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tpXTtcbiAgICAgICAgICAgIHBhcnQuYW5nbGUgKz0gZGVsdGE7XG4gICAgICAgICAgICBWZXJ0aWNlcy5yb3RhdGUocGFydC52ZXJ0aWNlcywgZGVsdGEsIGJvZHkucG9zaXRpb24pO1xuICAgICAgICAgICAgQXhlcy5yb3RhdGUocGFydC5heGVzLCBkZWx0YSk7XG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKHBhcnQuYm91bmRzLCBwYXJ0LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgIFZlY3Rvci5yb3RhdGVBYm91dChwYXJ0LnBvc2l0aW9uLCBkZWx0YSwgYm9keS5wb3NpdGlvbiwgcGFydC5wb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGluZWFyIHZlbG9jaXR5IG9mIHRoZSBib2R5IGluc3RhbnRseS4gUG9zaXRpb24sIGFuZ2xlLCBmb3JjZSBldGMuIGFyZSB1bmNoYW5nZWQuIFNlZSBhbHNvIGBCb2R5LmFwcGx5Rm9yY2VgLlxuICAgICAqIEBtZXRob2Qgc2V0VmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVsb2NpdHlcbiAgICAgKi9cbiAgICBCb2R5LnNldFZlbG9jaXR5ID0gZnVuY3Rpb24oYm9keSwgdmVsb2NpdHkpIHtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCA9IGJvZHkucG9zaXRpb24ueCAtIHZlbG9jaXR5Lng7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgPSBib2R5LnBvc2l0aW9uLnkgLSB2ZWxvY2l0eS55O1xuICAgICAgICBib2R5LnZlbG9jaXR5LnggPSB2ZWxvY2l0eS54O1xuICAgICAgICBib2R5LnZlbG9jaXR5LnkgPSB2ZWxvY2l0eS55O1xuICAgICAgICBib2R5LnNwZWVkID0gVmVjdG9yLm1hZ25pdHVkZShib2R5LnZlbG9jaXR5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYW5ndWxhciB2ZWxvY2l0eSBvZiB0aGUgYm9keSBpbnN0YW50bHkuIFBvc2l0aW9uLCBhbmdsZSwgZm9yY2UgZXRjLiBhcmUgdW5jaGFuZ2VkLiBTZWUgYWxzbyBgQm9keS5hcHBseUZvcmNlYC5cbiAgICAgKiBAbWV0aG9kIHNldEFuZ3VsYXJWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2ZWxvY2l0eVxuICAgICAqL1xuICAgIEJvZHkuc2V0QW5ndWxhclZlbG9jaXR5ID0gZnVuY3Rpb24oYm9keSwgdmVsb2NpdHkpIHtcbiAgICAgICAgYm9keS5hbmdsZVByZXYgPSBib2R5LmFuZ2xlIC0gdmVsb2NpdHk7XG4gICAgICAgIGJvZHkuYW5ndWxhclZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgICAgIGJvZHkuYW5ndWxhclNwZWVkID0gTWF0aC5hYnMoYm9keS5hbmd1bGFyVmVsb2NpdHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBhIGJvZHkgYnkgYSBnaXZlbiB2ZWN0b3IgcmVsYXRpdmUgdG8gaXRzIGN1cnJlbnQgcG9zaXRpb24sIHdpdGhvdXQgaW1wYXJ0aW5nIGFueSB2ZWxvY2l0eS5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB0cmFuc2xhdGlvblxuICAgICAqL1xuICAgIEJvZHkudHJhbnNsYXRlID0gZnVuY3Rpb24oYm9keSwgdHJhbnNsYXRpb24pIHtcbiAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCBWZWN0b3IuYWRkKGJvZHkucG9zaXRpb24sIHRyYW5zbGF0aW9uKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgYSBib2R5IGJ5IGEgZ2l2ZW4gYW5nbGUgcmVsYXRpdmUgdG8gaXRzIGN1cnJlbnQgYW5nbGUsIHdpdGhvdXQgaW1wYXJ0aW5nIGFueSBhbmd1bGFyIHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtwb2ludF1cbiAgICAgKi9cbiAgICBCb2R5LnJvdGF0ZSA9IGZ1bmN0aW9uKGJvZHksIHJvdGF0aW9uLCBwb2ludCkge1xuICAgICAgICBpZiAoIXBvaW50KSB7XG4gICAgICAgICAgICBCb2R5LnNldEFuZ2xlKGJvZHksIGJvZHkuYW5nbGUgKyByb3RhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29zID0gTWF0aC5jb3Mocm90YXRpb24pLFxuICAgICAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKHJvdGF0aW9uKSxcbiAgICAgICAgICAgICAgICBkeCA9IGJvZHkucG9zaXRpb24ueCAtIHBvaW50LngsXG4gICAgICAgICAgICAgICAgZHkgPSBib2R5LnBvc2l0aW9uLnkgLSBwb2ludC55O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB7XG4gICAgICAgICAgICAgICAgeDogcG9pbnQueCArIChkeCAqIGNvcyAtIGR5ICogc2luKSxcbiAgICAgICAgICAgICAgICB5OiBwb2ludC55ICsgKGR4ICogc2luICsgZHkgKiBjb3MpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgQm9keS5zZXRBbmdsZShib2R5LCBib2R5LmFuZ2xlICsgcm90YXRpb24pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNjYWxlcyB0aGUgYm9keSwgaW5jbHVkaW5nIHVwZGF0aW5nIHBoeXNpY2FsIHByb3BlcnRpZXMgKG1hc3MsIGFyZWEsIGF4ZXMsIGluZXJ0aWEpLCBmcm9tIGEgd29ybGQtc3BhY2UgcG9pbnQgKGRlZmF1bHQgaXMgYm9keSBjZW50cmUpLlxuICAgICAqIEBtZXRob2Qgc2NhbGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVYXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbcG9pbnRdXG4gICAgICovXG4gICAgQm9keS5zY2FsZSA9IGZ1bmN0aW9uKGJvZHksIHNjYWxlWCwgc2NhbGVZLCBwb2ludCkge1xuICAgICAgICB2YXIgdG90YWxBcmVhID0gMCxcbiAgICAgICAgICAgIHRvdGFsSW5lcnRpYSA9IDA7XG5cbiAgICAgICAgcG9pbnQgPSBwb2ludCB8fCBib2R5LnBvc2l0aW9uO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuXG4gICAgICAgICAgICAvLyBzY2FsZSB2ZXJ0aWNlc1xuICAgICAgICAgICAgVmVydGljZXMuc2NhbGUocGFydC52ZXJ0aWNlcywgc2NhbGVYLCBzY2FsZVksIHBvaW50KTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIHByb3BlcnRpZXNcbiAgICAgICAgICAgIHBhcnQuYXhlcyA9IEF4ZXMuZnJvbVZlcnRpY2VzKHBhcnQudmVydGljZXMpO1xuICAgICAgICAgICAgcGFydC5hcmVhID0gVmVydGljZXMuYXJlYShwYXJ0LnZlcnRpY2VzKTtcbiAgICAgICAgICAgIEJvZHkuc2V0TWFzcyhwYXJ0LCBib2R5LmRlbnNpdHkgKiBwYXJ0LmFyZWEpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgaW5lcnRpYSAocmVxdWlyZXMgdmVydGljZXMgdG8gYmUgYXQgb3JpZ2luKVxuICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIHsgeDogLXBhcnQucG9zaXRpb24ueCwgeTogLXBhcnQucG9zaXRpb24ueSB9KTtcbiAgICAgICAgICAgIEJvZHkuc2V0SW5lcnRpYShwYXJ0LCBCb2R5Ll9pbmVydGlhU2NhbGUgKiBWZXJ0aWNlcy5pbmVydGlhKHBhcnQudmVydGljZXMsIHBhcnQubWFzcykpO1xuICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIHsgeDogcGFydC5wb3NpdGlvbi54LCB5OiBwYXJ0LnBvc2l0aW9uLnkgfSk7XG5cbiAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgIHRvdGFsQXJlYSArPSBwYXJ0LmFyZWE7XG4gICAgICAgICAgICAgICAgdG90YWxJbmVydGlhICs9IHBhcnQuaW5lcnRpYTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2NhbGUgcG9zaXRpb25cbiAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueCA9IHBvaW50LnggKyAocGFydC5wb3NpdGlvbi54IC0gcG9pbnQueCkgKiBzY2FsZVg7XG4gICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnkgPSBwb2ludC55ICsgKHBhcnQucG9zaXRpb24ueSAtIHBvaW50LnkpICogc2NhbGVZO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgYm91bmRzXG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKHBhcnQuYm91bmRzLCBwYXJ0LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBwYXJlbnQgYm9keVxuICAgICAgICBpZiAoYm9keS5wYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBib2R5LmFyZWEgPSB0b3RhbEFyZWE7XG5cbiAgICAgICAgICAgIGlmICghYm9keS5pc1N0YXRpYykge1xuICAgICAgICAgICAgICAgIEJvZHkuc2V0TWFzcyhib2R5LCBib2R5LmRlbnNpdHkgKiB0b3RhbEFyZWEpO1xuICAgICAgICAgICAgICAgIEJvZHkuc2V0SW5lcnRpYShib2R5LCB0b3RhbEluZXJ0aWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIGNpcmNsZXNcbiAgICAgICAgaWYgKGJvZHkuY2lyY2xlUmFkaXVzKSB7IFxuICAgICAgICAgICAgaWYgKHNjYWxlWCA9PT0gc2NhbGVZKSB7XG4gICAgICAgICAgICAgICAgYm9keS5jaXJjbGVSYWRpdXMgKj0gc2NhbGVYO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBib2R5IGlzIG5vIGxvbmdlciBhIGNpcmNsZVxuICAgICAgICAgICAgICAgIGJvZHkuY2lyY2xlUmFkaXVzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHNpbXVsYXRpb24gc3RlcCBmb3IgdGhlIGdpdmVuIGBib2R5YCwgaW5jbHVkaW5nIHVwZGF0aW5nIHBvc2l0aW9uIGFuZCBhbmdsZSB1c2luZyBWZXJsZXQgaW50ZWdyYXRpb24uXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3JyZWN0aW9uXG4gICAgICovXG4gICAgQm9keS51cGRhdGUgPSBmdW5jdGlvbihib2R5LCBkZWx0YVRpbWUsIHRpbWVTY2FsZSwgY29ycmVjdGlvbikge1xuICAgICAgICB2YXIgZGVsdGFUaW1lU3F1YXJlZCA9IE1hdGgucG93KGRlbHRhVGltZSAqIHRpbWVTY2FsZSAqIGJvZHkudGltZVNjYWxlLCAyKTtcblxuICAgICAgICAvLyBmcm9tIHRoZSBwcmV2aW91cyBzdGVwXG4gICAgICAgIHZhciBmcmljdGlvbkFpciA9IDEgLSBib2R5LmZyaWN0aW9uQWlyICogdGltZVNjYWxlICogYm9keS50aW1lU2NhbGUsXG4gICAgICAgICAgICB2ZWxvY2l0eVByZXZYID0gYm9keS5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvblByZXYueCxcbiAgICAgICAgICAgIHZlbG9jaXR5UHJldlkgPSBib2R5LnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uUHJldi55O1xuXG4gICAgICAgIC8vIHVwZGF0ZSB2ZWxvY2l0eSB3aXRoIFZlcmxldCBpbnRlZ3JhdGlvblxuICAgICAgICBib2R5LnZlbG9jaXR5LnggPSAodmVsb2NpdHlQcmV2WCAqIGZyaWN0aW9uQWlyICogY29ycmVjdGlvbikgKyAoYm9keS5mb3JjZS54IC8gYm9keS5tYXNzKSAqIGRlbHRhVGltZVNxdWFyZWQ7XG4gICAgICAgIGJvZHkudmVsb2NpdHkueSA9ICh2ZWxvY2l0eVByZXZZICogZnJpY3Rpb25BaXIgKiBjb3JyZWN0aW9uKSArIChib2R5LmZvcmNlLnkgLyBib2R5Lm1hc3MpICogZGVsdGFUaW1lU3F1YXJlZDtcblxuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gYm9keS5wb3NpdGlvbi54O1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi55ID0gYm9keS5wb3NpdGlvbi55O1xuICAgICAgICBib2R5LnBvc2l0aW9uLnggKz0gYm9keS52ZWxvY2l0eS54O1xuICAgICAgICBib2R5LnBvc2l0aW9uLnkgKz0gYm9keS52ZWxvY2l0eS55O1xuXG4gICAgICAgIC8vIHVwZGF0ZSBhbmd1bGFyIHZlbG9jaXR5IHdpdGggVmVybGV0IGludGVncmF0aW9uXG4gICAgICAgIGJvZHkuYW5ndWxhclZlbG9jaXR5ID0gKChib2R5LmFuZ2xlIC0gYm9keS5hbmdsZVByZXYpICogZnJpY3Rpb25BaXIgKiBjb3JyZWN0aW9uKSArIChib2R5LnRvcnF1ZSAvIGJvZHkuaW5lcnRpYSkgKiBkZWx0YVRpbWVTcXVhcmVkO1xuICAgICAgICBib2R5LmFuZ2xlUHJldiA9IGJvZHkuYW5nbGU7XG4gICAgICAgIGJvZHkuYW5nbGUgKz0gYm9keS5hbmd1bGFyVmVsb2NpdHk7XG5cbiAgICAgICAgLy8gdHJhY2sgc3BlZWQgYW5kIGFjY2VsZXJhdGlvblxuICAgICAgICBib2R5LnNwZWVkID0gVmVjdG9yLm1hZ25pdHVkZShib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgYm9keS5hbmd1bGFyU3BlZWQgPSBNYXRoLmFicyhib2R5LmFuZ3VsYXJWZWxvY2l0eSk7XG5cbiAgICAgICAgLy8gdHJhbnNmb3JtIHRoZSBib2R5IGdlb21ldHJ5XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuXG4gICAgICAgICAgICBWZXJ0aWNlcy50cmFuc2xhdGUocGFydC52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueCArPSBib2R5LnZlbG9jaXR5Lng7XG4gICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi55ICs9IGJvZHkudmVsb2NpdHkueTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvZHkuYW5ndWxhclZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgVmVydGljZXMucm90YXRlKHBhcnQudmVydGljZXMsIGJvZHkuYW5ndWxhclZlbG9jaXR5LCBib2R5LnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBBeGVzLnJvdGF0ZShwYXJ0LmF4ZXMsIGJvZHkuYW5ndWxhclZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZUFib3V0KHBhcnQucG9zaXRpb24sIGJvZHkuYW5ndWxhclZlbG9jaXR5LCBib2R5LnBvc2l0aW9uLCBwYXJ0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYSBmb3JjZSB0byBhIGJvZHkgZnJvbSBhIGdpdmVuIHdvcmxkLXNwYWNlIHBvc2l0aW9uLCBpbmNsdWRpbmcgcmVzdWx0aW5nIHRvcnF1ZS5cbiAgICAgKiBAbWV0aG9kIGFwcGx5Rm9yY2VcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gZm9yY2VcbiAgICAgKi9cbiAgICBCb2R5LmFwcGx5Rm9yY2UgPSBmdW5jdGlvbihib2R5LCBwb3NpdGlvbiwgZm9yY2UpIHtcbiAgICAgICAgYm9keS5mb3JjZS54ICs9IGZvcmNlLng7XG4gICAgICAgIGJvZHkuZm9yY2UueSArPSBmb3JjZS55O1xuICAgICAgICB2YXIgb2Zmc2V0ID0geyB4OiBwb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvbi54LCB5OiBwb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvbi55IH07XG4gICAgICAgIGJvZHkudG9ycXVlICs9IG9mZnNldC54ICogZm9yY2UueSAtIG9mZnNldC55ICogZm9yY2UueDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3VtcyBvZiB0aGUgcHJvcGVydGllcyBvZiBhbGwgY29tcG91bmQgcGFydHMgb2YgdGhlIHBhcmVudCBib2R5LlxuICAgICAqIEBtZXRob2QgX3RvdGFsUHJvcGVydGllc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHJldHVybiB7fVxuICAgICAqL1xuICAgIEJvZHkuX3RvdGFsUHJvcGVydGllcyA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICAgLy8gZnJvbSBlcXVhdGlvbnMgYXQ6XG4gICAgICAgIC8vIGh0dHBzOi8vZWNvdXJzZXMub3UuZWR1L2NnaS1iaW4vZWJvb2suY2dpP2RvYz0mdG9waWM9c3QmY2hhcF9zZWM9MDcuMiZwYWdlPXRoZW9yeVxuICAgICAgICAvLyBodHRwOi8vb3V0cHV0LnRvL3NpZGV3YXkvZGVmYXVsdC5hc3A/cW5vPTEyMTEwMDA4N1xuXG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgbWFzczogMCxcbiAgICAgICAgICAgIGFyZWE6IDAsXG4gICAgICAgICAgICBpbmVydGlhOiAwLFxuICAgICAgICAgICAgY2VudHJlOiB7IHg6IDAsIHk6IDAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN1bSB0aGUgcHJvcGVydGllcyBvZiBhbGwgY29tcG91bmQgcGFydHMgb2YgdGhlIHBhcmVudCBib2R5XG4gICAgICAgIGZvciAodmFyIGkgPSBib2R5LnBhcnRzLmxlbmd0aCA9PT0gMSA/IDAgOiAxOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldLFxuICAgICAgICAgICAgICAgIG1hc3MgPSBwYXJ0Lm1hc3MgIT09IEluZmluaXR5ID8gcGFydC5tYXNzIDogMTtcblxuICAgICAgICAgICAgcHJvcGVydGllcy5tYXNzICs9IG1hc3M7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmFyZWEgKz0gcGFydC5hcmVhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5pbmVydGlhICs9IHBhcnQuaW5lcnRpYTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuY2VudHJlID0gVmVjdG9yLmFkZChwcm9wZXJ0aWVzLmNlbnRyZSwgVmVjdG9yLm11bHQocGFydC5wb3NpdGlvbiwgbWFzcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvcGVydGllcy5jZW50cmUgPSBWZWN0b3IuZGl2KHByb3BlcnRpZXMuY2VudHJlLCBwcm9wZXJ0aWVzLm1hc3MpO1xuXG4gICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBFdmVudHMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIGEgYm9keSBzdGFydHMgc2xlZXBpbmcgKHdoZXJlIGB0aGlzYCBpcyB0aGUgYm9keSkuXG4gICAgKlxuICAgICogQGV2ZW50IHNsZWVwU3RhcnRcbiAgICAqIEB0aGlzIHtib2R5fSBUaGUgYm9keSB0aGF0IGhhcyBzdGFydGVkIHNsZWVwaW5nXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGJvZHkgZW5kcyBzbGVlcGluZyAod2hlcmUgYHRoaXNgIGlzIHRoZSBib2R5KS5cbiAgICAqXG4gICAgKiBAZXZlbnQgc2xlZXBFbmRcbiAgICAqIEB0aGlzIHtib2R5fSBUaGUgYm9keSB0aGF0IGhhcyBlbmRlZCBzbGVlcGluZ1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdW5pcXVlbHkgaWRlbnRpZnlpbmcgbnVtYmVyIGdlbmVyYXRlZCBpbiBgQm9keS5jcmVhdGVgIGJ5IGBDb21tb24ubmV4dElkYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCBkZW5vdGluZyB0aGUgdHlwZSBvZiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiYm9keVwiXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcmJpdHJhcnkgYFN0cmluZ2AgbmFtZSB0byBoZWxwIHRoZSB1c2VyIGlkZW50aWZ5IGFuZCBtYW5hZ2UgYm9kaWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGxhYmVsXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJCb2R5XCJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGJvZGllcyB0aGF0IG1ha2UgdXAgdGhpcyBib2R5LiBcbiAgICAgKiBUaGUgZmlyc3QgYm9keSBpbiB0aGUgYXJyYXkgbXVzdCBhbHdheXMgYmUgYSBzZWxmIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBib2R5IGluc3RhbmNlLlxuICAgICAqIEFsbCBib2RpZXMgaW4gdGhlIGBwYXJ0c2AgYXJyYXkgdG9nZXRoZXIgZm9ybSBhIHNpbmdsZSByaWdpZCBjb21wb3VuZCBib2R5LlxuICAgICAqIFBhcnRzIGFyZSBhbGxvd2VkIHRvIG92ZXJsYXAsIGhhdmUgZ2FwcyBvciBob2xlcyBvciBldmVuIGZvcm0gY29uY2F2ZSBib2RpZXMuXG4gICAgICogUGFydHMgdGhlbXNlbHZlcyBzaG91bGQgbmV2ZXIgYmUgYWRkZWQgdG8gYSBgV29ybGRgLCBvbmx5IHRoZSBwYXJlbnQgYm9keSBzaG91bGQgYmUuXG4gICAgICogVXNlIGBCb2R5LnNldFBhcnRzYCB3aGVuIHNldHRpbmcgcGFydHMgdG8gZW5zdXJlIGNvcnJlY3QgdXBkYXRlcyBvZiBhbGwgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwYXJ0c1xuICAgICAqIEB0eXBlIGJvZHlbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHJlc2VydmVkIGZvciBzdG9yaW5nIHBsdWdpbi1zcGVjaWZpYyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBsdWdpblxuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIHNlbGYgcmVmZXJlbmNlIGlmIHRoZSBib2R5IGlzIF9ub3RfIGEgcGFydCBvZiBhbm90aGVyIGJvZHkuXG4gICAgICogT3RoZXJ3aXNlIHRoaXMgaXMgYSByZWZlcmVuY2UgdG8gdGhlIGJvZHkgdGhhdCB0aGlzIGlzIGEgcGFydCBvZi5cbiAgICAgKiBTZWUgYGJvZHkucGFydHNgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBhcmVudFxuICAgICAqIEB0eXBlIGJvZHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgc3BlY2lmeWluZyB0aGUgYW5nbGUgb2YgdGhlIGJvZHksIGluIHJhZGlhbnMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYW5nbGVcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBgVmVjdG9yYCBvYmplY3RzIHRoYXQgc3BlY2lmeSB0aGUgY29udmV4IGh1bGwgb2YgdGhlIHJpZ2lkIGJvZHkuXG4gICAgICogVGhlc2Ugc2hvdWxkIGJlIHByb3ZpZGVkIGFib3V0IHRoZSBvcmlnaW4gYCgwLCAwKWAuIEUuZy5cbiAgICAgKlxuICAgICAqICAgICBbeyB4OiAwLCB5OiAwIH0sIHsgeDogMjUsIHk6IDUwIH0sIHsgeDogNTAsIHk6IDAgfV1cbiAgICAgKlxuICAgICAqIFdoZW4gcGFzc2VkIHZpYSBgQm9keS5jcmVhdGVgLCB0aGUgdmVydGljZXMgYXJlIHRyYW5zbGF0ZWQgcmVsYXRpdmUgdG8gYGJvZHkucG9zaXRpb25gIChpLmUuIHdvcmxkLXNwYWNlLCBhbmQgY29uc3RhbnRseSB1cGRhdGVkIGJ5IGBCb2R5LnVwZGF0ZWAgZHVyaW5nIHNpbXVsYXRpb24pLlxuICAgICAqIFRoZSBgVmVjdG9yYCBvYmplY3RzIGFyZSBhbHNvIGF1Z21lbnRlZCB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcyByZXF1aXJlZCBmb3IgZWZmaWNpZW50IGNvbGxpc2lvbiBkZXRlY3Rpb24uIFxuICAgICAqXG4gICAgICogT3RoZXIgcHJvcGVydGllcyBzdWNoIGFzIGBpbmVydGlhYCBhbmQgYGJvdW5kc2AgYXJlIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCBmcm9tIHRoZSBwYXNzZWQgdmVydGljZXMgKHVubGVzcyBwcm92aWRlZCB2aWEgYG9wdGlvbnNgKS5cbiAgICAgKiBDb25jYXZlIGh1bGxzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4gVGhlIG1vZHVsZSBgTWF0dGVyLlZlcnRpY2VzYCBjb250YWlucyB1c2VmdWwgbWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIHZlcnRpY2VzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHZlcnRpY2VzXG4gICAgICogQHR5cGUgdmVjdG9yW11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFZlY3RvcmAgdGhhdCBzcGVjaWZpZXMgdGhlIGN1cnJlbnQgd29ybGQtc3BhY2UgcG9zaXRpb24gb2YgdGhlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcG9zaXRpb25cbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IHNwZWNpZmllcyB0aGUgZm9yY2UgdG8gYXBwbHkgaW4gdGhlIGN1cnJlbnQgc3RlcC4gSXQgaXMgemVyb2VkIGFmdGVyIGV2ZXJ5IGBCb2R5LnVwZGF0ZWAuIFNlZSBhbHNvIGBCb2R5LmFwcGx5Rm9yY2VgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGZvcmNlXG4gICAgICogQHR5cGUgdmVjdG9yXG4gICAgICogQGRlZmF1bHQgeyB4OiAwLCB5OiAwIH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIHRvcnF1ZSAodHVybmluZyBmb3JjZSkgdG8gYXBwbHkgaW4gdGhlIGN1cnJlbnQgc3RlcC4gSXQgaXMgemVyb2VkIGFmdGVyIGV2ZXJ5IGBCb2R5LnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdG9ycXVlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IF9tZWFzdXJlc18gdGhlIGN1cnJlbnQgc3BlZWQgb2YgdGhlIGJvZHkgYWZ0ZXIgdGhlIGxhc3QgYEJvZHkudXBkYXRlYC4gSXQgaXMgcmVhZC1vbmx5IGFuZCBhbHdheXMgcG9zaXRpdmUgKGl0J3MgdGhlIG1hZ25pdHVkZSBvZiBgYm9keS52ZWxvY2l0eWApLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IHNwZWVkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IF9tZWFzdXJlc18gdGhlIGN1cnJlbnQgYW5ndWxhciBzcGVlZCBvZiB0aGUgYm9keSBhZnRlciB0aGUgbGFzdCBgQm9keS51cGRhdGVgLiBJdCBpcyByZWFkLW9ubHkgYW5kIGFsd2F5cyBwb3NpdGl2ZSAoaXQncyB0aGUgbWFnbml0dWRlIG9mIGBib2R5LmFuZ3VsYXJWZWxvY2l0eWApLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IGFuZ3VsYXJTcGVlZFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFZlY3RvcmAgdGhhdCBfbWVhc3VyZXNfIHRoZSBjdXJyZW50IHZlbG9jaXR5IG9mIHRoZSBib2R5IGFmdGVyIHRoZSBsYXN0IGBCb2R5LnVwZGF0ZWAuIEl0IGlzIHJlYWQtb25seS4gXG4gICAgICogSWYgeW91IG5lZWQgdG8gbW9kaWZ5IGEgYm9keSdzIHZlbG9jaXR5IGRpcmVjdGx5LCB5b3Ugc2hvdWxkIGVpdGhlciBhcHBseSBhIGZvcmNlIG9yIHNpbXBseSBjaGFuZ2UgdGhlIGJvZHkncyBgcG9zaXRpb25gIChhcyB0aGUgZW5naW5lIHVzZXMgcG9zaXRpb24tVmVybGV0IGludGVncmF0aW9uKS5cbiAgICAgKlxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSB2ZWxvY2l0eVxuICAgICAqIEB0eXBlIHZlY3RvclxuICAgICAqIEBkZWZhdWx0IHsgeDogMCwgeTogMCB9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgY3VycmVudCBhbmd1bGFyIHZlbG9jaXR5IG9mIHRoZSBib2R5IGFmdGVyIHRoZSBsYXN0IGBCb2R5LnVwZGF0ZWAuIEl0IGlzIHJlYWQtb25seS4gXG4gICAgICogSWYgeW91IG5lZWQgdG8gbW9kaWZ5IGEgYm9keSdzIGFuZ3VsYXIgdmVsb2NpdHkgZGlyZWN0bHksIHlvdSBzaG91bGQgYXBwbHkgYSB0b3JxdWUgb3Igc2ltcGx5IGNoYW5nZSB0aGUgYm9keSdzIGBhbmdsZWAgKGFzIHRoZSBlbmdpbmUgdXNlcyBwb3NpdGlvbi1WZXJsZXQgaW50ZWdyYXRpb24pLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IGFuZ3VsYXJWZWxvY2l0eVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGEgYm9keSBpcyBjb25zaWRlcmVkIHN0YXRpYy4gQSBzdGF0aWMgYm9keSBjYW4gbmV2ZXIgY2hhbmdlIHBvc2l0aW9uIG9yIGFuZ2xlIGFuZCBpcyBjb21wbGV0ZWx5IGZpeGVkLlxuICAgICAqIElmIHlvdSBuZWVkIHRvIHNldCBhIGJvZHkgYXMgc3RhdGljIGFmdGVyIGl0cyBjcmVhdGlvbiwgeW91IHNob3VsZCB1c2UgYEJvZHkuc2V0U3RhdGljYCBhcyB0aGlzIHJlcXVpcmVzIG1vcmUgdGhhbiBqdXN0IHNldHRpbmcgdGhpcyBmbGFnLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlzU3RhdGljXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBhIGJvZHkgaXMgYSBzZW5zb3IuIFNlbnNvciB0cmlnZ2VycyBjb2xsaXNpb24gZXZlbnRzLCBidXQgZG9lc24ndCByZWFjdCB3aXRoIGNvbGxpZGluZyBib2R5IHBoeXNpY2FsbHkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNTZW5zb3JcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBib2R5IGlzIGNvbnNpZGVyZWQgc2xlZXBpbmcuIEEgc2xlZXBpbmcgYm9keSBhY3RzIHNpbWlsYXIgdG8gYSBzdGF0aWMgYm9keSwgZXhjZXB0IGl0IGlzIG9ubHkgdGVtcG9yYXJ5IGFuZCBjYW4gYmUgYXdva2VuLlxuICAgICAqIElmIHlvdSBuZWVkIHRvIHNldCBhIGJvZHkgYXMgc2xlZXBpbmcsIHlvdSBzaG91bGQgdXNlIGBTbGVlcGluZy5zZXRgIGFzIHRoaXMgcmVxdWlyZXMgbW9yZSB0aGFuIGp1c3Qgc2V0dGluZyB0aGlzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNTbGVlcGluZ1xuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IF9tZWFzdXJlc18gdGhlIGFtb3VudCBvZiBtb3ZlbWVudCBhIGJvZHkgY3VycmVudGx5IGhhcyAoYSBjb21iaW5hdGlvbiBvZiBgc3BlZWRgIGFuZCBgYW5ndWxhclNwZWVkYCkuIEl0IGlzIHJlYWQtb25seSBhbmQgYWx3YXlzIHBvc2l0aXZlLlxuICAgICAqIEl0IGlzIHVzZWQgYW5kIHVwZGF0ZWQgYnkgdGhlIGBNYXR0ZXIuU2xlZXBpbmdgIG1vZHVsZSBkdXJpbmcgc2ltdWxhdGlvbiB0byBkZWNpZGUgaWYgYSBib2R5IGhhcyBjb21lIHRvIHJlc3QuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgbW90aW9uXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIG51bWJlciBvZiB1cGRhdGVzIGluIHdoaWNoIHRoaXMgYm9keSBtdXN0IGhhdmUgbmVhci16ZXJvIHZlbG9jaXR5IGJlZm9yZSBpdCBpcyBzZXQgYXMgc2xlZXBpbmcgYnkgdGhlIGBNYXR0ZXIuU2xlZXBpbmdgIG1vZHVsZSAoaWYgc2xlZXBpbmcgaXMgZW5hYmxlZCBieSB0aGUgZW5naW5lKS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBzbGVlcFRocmVzaG9sZFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDYwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgZGVuc2l0eSBvZiB0aGUgYm9keSwgdGhhdCBpcyBpdHMgbWFzcyBwZXIgdW5pdCBhcmVhLlxuICAgICAqIElmIHlvdSBwYXNzIHRoZSBkZW5zaXR5IHZpYSBgQm9keS5jcmVhdGVgIHRoZSBgbWFzc2AgcHJvcGVydHkgaXMgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGZvciB5b3UgYmFzZWQgb24gdGhlIHNpemUgKGFyZWEpIG9mIHRoZSBvYmplY3QuXG4gICAgICogVGhpcyBpcyBnZW5lcmFsbHkgcHJlZmVyYWJsZSB0byBzaW1wbHkgc2V0dGluZyBtYXNzIGFuZCBhbGxvd3MgZm9yIG1vcmUgaW50dWl0aXZlIGRlZmluaXRpb24gb2YgbWF0ZXJpYWxzIChlLmcuIHJvY2sgaGFzIGEgaGlnaGVyIGRlbnNpdHkgdGhhbiB3b29kKS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBkZW5zaXR5XG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4wMDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBtYXNzIG9mIHRoZSBib2R5LCBhbHRob3VnaCBpdCBtYXkgYmUgbW9yZSBhcHByb3ByaWF0ZSB0byBzcGVjaWZ5IHRoZSBgZGVuc2l0eWAgcHJvcGVydHkgaW5zdGVhZC5cbiAgICAgKiBJZiB5b3UgbW9kaWZ5IHRoaXMgdmFsdWUsIHlvdSBtdXN0IGFsc28gbW9kaWZ5IHRoZSBgYm9keS5pbnZlcnNlTWFzc2AgcHJvcGVydHkgKGAxIC8gbWFzc2ApLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG1hc3NcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBpbnZlcnNlIG1hc3Mgb2YgdGhlIGJvZHkgKGAxIC8gbWFzc2ApLlxuICAgICAqIElmIHlvdSBtb2RpZnkgdGhpcyB2YWx1ZSwgeW91IG11c3QgYWxzbyBtb2RpZnkgdGhlIGBib2R5Lm1hc3NgIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGludmVyc2VNYXNzXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgbW9tZW50IG9mIGluZXJ0aWEgKGkuZS4gc2Vjb25kIG1vbWVudCBvZiBhcmVhKSBvZiB0aGUgYm9keS5cbiAgICAgKiBJdCBpcyBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgZnJvbSB0aGUgZ2l2ZW4gY29udmV4IGh1bGwgKGB2ZXJ0aWNlc2AgYXJyYXkpIGFuZCBkZW5zaXR5IGluIGBCb2R5LmNyZWF0ZWAuXG4gICAgICogSWYgeW91IG1vZGlmeSB0aGlzIHZhbHVlLCB5b3UgbXVzdCBhbHNvIG1vZGlmeSB0aGUgYGJvZHkuaW52ZXJzZUluZXJ0aWFgIHByb3BlcnR5IChgMSAvIGluZXJ0aWFgKS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpbmVydGlhXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgaW52ZXJzZSBtb21lbnQgb2YgaW5lcnRpYSBvZiB0aGUgYm9keSAoYDEgLyBpbmVydGlhYCkuXG4gICAgICogSWYgeW91IG1vZGlmeSB0aGlzIHZhbHVlLCB5b3UgbXVzdCBhbHNvIG1vZGlmeSB0aGUgYGJvZHkuaW5lcnRpYWAgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaW52ZXJzZUluZXJ0aWFcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSByZXN0aXR1dGlvbiAoZWxhc3RpY2l0eSkgb2YgdGhlIGJvZHkuIFRoZSB2YWx1ZSBpcyBhbHdheXMgcG9zaXRpdmUgYW5kIGlzIGluIHRoZSByYW5nZSBgKDAsIDEpYC5cbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyBjb2xsaXNpb25zIG1heSBiZSBwZXJmZWN0bHkgaW5lbGFzdGljIGFuZCBubyBib3VuY2luZyBtYXkgb2NjdXIuIFxuICAgICAqIEEgdmFsdWUgb2YgYDAuOGAgbWVhbnMgdGhlIGJvZHkgbWF5IGJvdW5jZSBiYWNrIHdpdGggYXBwcm94aW1hdGVseSA4MCUgb2YgaXRzIGtpbmV0aWMgZW5lcmd5LlxuICAgICAqIE5vdGUgdGhhdCBjb2xsaXNpb24gcmVzcG9uc2UgaXMgYmFzZWQgb24gX3BhaXJzXyBvZiBib2RpZXMsIGFuZCB0aGF0IGByZXN0aXR1dGlvbmAgdmFsdWVzIGFyZSBfY29tYmluZWRfIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtdWxhOlxuICAgICAqXG4gICAgICogICAgIE1hdGgubWF4KGJvZHlBLnJlc3RpdHV0aW9uLCBib2R5Qi5yZXN0aXR1dGlvbilcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZXN0aXR1dGlvblxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBmcmljdGlvbiBvZiB0aGUgYm9keS4gVGhlIHZhbHVlIGlzIGFsd2F5cyBwb3NpdGl2ZSBhbmQgaXMgaW4gdGhlIHJhbmdlIGAoMCwgMSlgLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIHRoYXQgdGhlIGJvZHkgbWF5IHNsaWRlIGluZGVmaW5pdGVseS5cbiAgICAgKiBBIHZhbHVlIG9mIGAxYCBtZWFucyB0aGUgYm9keSBtYXkgY29tZSB0byBhIHN0b3AgYWxtb3N0IGluc3RhbnRseSBhZnRlciBhIGZvcmNlIGlzIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBUaGUgZWZmZWN0cyBvZiB0aGUgdmFsdWUgbWF5IGJlIG5vbi1saW5lYXIuIFxuICAgICAqIEhpZ2ggdmFsdWVzIG1heSBiZSB1bnN0YWJsZSBkZXBlbmRpbmcgb24gdGhlIGJvZHkuXG4gICAgICogVGhlIGVuZ2luZSB1c2VzIGEgQ291bG9tYiBmcmljdGlvbiBtb2RlbCBpbmNsdWRpbmcgc3RhdGljIGFuZCBraW5ldGljIGZyaWN0aW9uLlxuICAgICAqIE5vdGUgdGhhdCBjb2xsaXNpb24gcmVzcG9uc2UgaXMgYmFzZWQgb24gX3BhaXJzXyBvZiBib2RpZXMsIGFuZCB0aGF0IGBmcmljdGlvbmAgdmFsdWVzIGFyZSBfY29tYmluZWRfIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtdWxhOlxuICAgICAqXG4gICAgICogICAgIE1hdGgubWluKGJvZHlBLmZyaWN0aW9uLCBib2R5Qi5mcmljdGlvbilcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBmcmljdGlvblxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIHN0YXRpYyBmcmljdGlvbiBvZiB0aGUgYm9keSAoaW4gdGhlIENvdWxvbWIgZnJpY3Rpb24gbW9kZWwpLiBcbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyB0aGUgYm9keSB3aWxsIG5ldmVyICdzdGljaycgd2hlbiBpdCBpcyBuZWFybHkgc3RhdGlvbmFyeSBhbmQgb25seSBkeW5hbWljIGBmcmljdGlvbmAgaXMgdXNlZC5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSAoZS5nLiBgMTBgKSwgdGhlIG1vcmUgZm9yY2UgaXQgd2lsbCB0YWtlIHRvIGluaXRpYWxseSBnZXQgdGhlIGJvZHkgbW92aW5nIHdoZW4gbmVhcmx5IHN0YXRpb25hcnkuXG4gICAgICogVGhpcyB2YWx1ZSBpcyBtdWx0aXBsaWVkIHdpdGggdGhlIGBmcmljdGlvbmAgcHJvcGVydHkgdG8gbWFrZSBpdCBlYXNpZXIgdG8gY2hhbmdlIGBmcmljdGlvbmAgYW5kIG1haW50YWluIGFuIGFwcHJvcHJpYXRlIGFtb3VudCBvZiBzdGF0aWMgZnJpY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZnJpY3Rpb25TdGF0aWNcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwLjVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBhaXIgZnJpY3Rpb24gb2YgdGhlIGJvZHkgKGFpciByZXNpc3RhbmNlKS4gXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgbWVhbnMgdGhlIGJvZHkgd2lsbCBuZXZlciBzbG93IGFzIGl0IG1vdmVzIHRocm91Z2ggc3BhY2UuXG4gICAgICogVGhlIGhpZ2hlciB0aGUgdmFsdWUsIHRoZSBmYXN0ZXIgYSBib2R5IHNsb3dzIHdoZW4gbW92aW5nIHRocm91Z2ggc3BhY2UuXG4gICAgICogVGhlIGVmZmVjdHMgb2YgdGhlIHZhbHVlIGFyZSBub24tbGluZWFyLiBcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBmcmljdGlvbkFpclxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuMDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGBPYmplY3RgIHRoYXQgc3BlY2lmaWVzIHRoZSBjb2xsaXNpb24gZmlsdGVyaW5nIHByb3BlcnRpZXMgb2YgdGhpcyBib2R5LlxuICAgICAqXG4gICAgICogQ29sbGlzaW9ucyBiZXR3ZWVuIHR3byBib2RpZXMgd2lsbCBvYmV5IHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4gICAgICogLSBJZiB0aGUgdHdvIGJvZGllcyBoYXZlIHRoZSBzYW1lIG5vbi16ZXJvIHZhbHVlIG9mIGBjb2xsaXNpb25GaWx0ZXIuZ3JvdXBgLFxuICAgICAqICAgdGhleSB3aWxsIGFsd2F5cyBjb2xsaWRlIGlmIHRoZSB2YWx1ZSBpcyBwb3NpdGl2ZSwgYW5kIHRoZXkgd2lsbCBuZXZlciBjb2xsaWRlXG4gICAgICogICBpZiB0aGUgdmFsdWUgaXMgbmVnYXRpdmUuXG4gICAgICogLSBJZiB0aGUgdHdvIGJvZGllcyBoYXZlIGRpZmZlcmVudCB2YWx1ZXMgb2YgYGNvbGxpc2lvbkZpbHRlci5ncm91cGAgb3IgaWYgb25lXG4gICAgICogICAob3IgYm90aCkgb2YgdGhlIGJvZGllcyBoYXMgYSB2YWx1ZSBvZiAwLCB0aGVuIHRoZSBjYXRlZ29yeS9tYXNrIHJ1bGVzIGFwcGx5IGFzIGZvbGxvd3M6XG4gICAgICpcbiAgICAgKiBFYWNoIGJvZHkgYmVsb25ncyB0byBhIGNvbGxpc2lvbiBjYXRlZ29yeSwgZ2l2ZW4gYnkgYGNvbGxpc2lvbkZpbHRlci5jYXRlZ29yeWAuIFRoaXNcbiAgICAgKiB2YWx1ZSBpcyB1c2VkIGFzIGEgYml0IGZpZWxkIGFuZCB0aGUgY2F0ZWdvcnkgc2hvdWxkIGhhdmUgb25seSBvbmUgYml0IHNldCwgbWVhbmluZyB0aGF0XG4gICAgICogdGhlIHZhbHVlIG9mIHRoaXMgcHJvcGVydHkgaXMgYSBwb3dlciBvZiB0d28gaW4gdGhlIHJhbmdlIFsxLCAyXjMxXS4gVGh1cywgdGhlcmUgYXJlIDMyXG4gICAgICogZGlmZmVyZW50IGNvbGxpc2lvbiBjYXRlZ29yaWVzIGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqIEVhY2ggYm9keSBhbHNvIGRlZmluZXMgYSBjb2xsaXNpb24gYml0bWFzaywgZ2l2ZW4gYnkgYGNvbGxpc2lvbkZpbHRlci5tYXNrYCB3aGljaCBzcGVjaWZpZXNcbiAgICAgKiB0aGUgY2F0ZWdvcmllcyBpdCBjb2xsaWRlcyB3aXRoICh0aGUgdmFsdWUgaXMgdGhlIGJpdHdpc2UgQU5EIHZhbHVlIG9mIGFsbCB0aGVzZSBjYXRlZ29yaWVzKS5cbiAgICAgKlxuICAgICAqIFVzaW5nIHRoZSBjYXRlZ29yeS9tYXNrIHJ1bGVzLCB0d28gYm9kaWVzIGBBYCBhbmQgYEJgIGNvbGxpZGUgaWYgZWFjaCBpbmNsdWRlcyB0aGUgb3RoZXInc1xuICAgICAqIGNhdGVnb3J5IGluIGl0cyBtYXNrLCBpLmUuIGAoY2F0ZWdvcnlBICYgbWFza0IpICE9PSAwYCBhbmQgYChjYXRlZ29yeUIgJiBtYXNrQSkgIT09IDBgXG4gICAgICogYXJlIGJvdGggdHJ1ZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb2xsaXNpb25GaWx0ZXJcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIEludGVnZXIgYE51bWJlcmAsIHRoYXQgc3BlY2lmaWVzIHRoZSBjb2xsaXNpb24gZ3JvdXAgdGhpcyBib2R5IGJlbG9uZ3MgdG8uXG4gICAgICogU2VlIGBib2R5LmNvbGxpc2lvbkZpbHRlcmAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29sbGlzaW9uRmlsdGVyLmdyb3VwXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBiaXQgZmllbGQgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBjYXRlZ29yeSB0aGlzIGJvZHkgYmVsb25ncyB0by5cbiAgICAgKiBUaGUgY2F0ZWdvcnkgdmFsdWUgc2hvdWxkIGhhdmUgb25seSBvbmUgYml0IHNldCwgZm9yIGV4YW1wbGUgYDB4MDAwMWAuXG4gICAgICogVGhpcyBtZWFucyB0aGVyZSBhcmUgdXAgdG8gMzIgdW5pcXVlIGNvbGxpc2lvbiBjYXRlZ29yaWVzIGF2YWlsYWJsZS5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb2xsaXNpb25GaWx0ZXIuY2F0ZWdvcnlcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGJpdCBtYXNrIHRoYXQgc3BlY2lmaWVzIHRoZSBjb2xsaXNpb24gY2F0ZWdvcmllcyB0aGlzIGJvZHkgbWF5IGNvbGxpZGUgd2l0aC5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb2xsaXNpb25GaWx0ZXIubWFza1xuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IC0xXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIGEgdG9sZXJhbmNlIG9uIGhvdyBmYXIgYSBib2R5IGlzIGFsbG93ZWQgdG8gJ3NpbmsnIG9yIHJvdGF0ZSBpbnRvIG90aGVyIGJvZGllcy5cbiAgICAgKiBBdm9pZCBjaGFuZ2luZyB0aGlzIHZhbHVlIHVubGVzcyB5b3UgdW5kZXJzdGFuZCB0aGUgcHVycG9zZSBvZiBgc2xvcGAgaW4gcGh5c2ljcyBlbmdpbmVzLlxuICAgICAqIFRoZSBkZWZhdWx0IHNob3VsZCBnZW5lcmFsbHkgc3VmZmljZSwgYWx0aG91Z2ggdmVyeSBsYXJnZSBib2RpZXMgbWF5IHJlcXVpcmUgbGFyZ2VyIHZhbHVlcyBmb3Igc3RhYmxlIHN0YWNraW5nLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHNsb3BcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwLjA1XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgYWxsb3dzIHBlci1ib2R5IHRpbWUgc2NhbGluZywgZS5nLiBhIGZvcmNlLWZpZWxkIHdoZXJlIGJvZGllcyBpbnNpZGUgYXJlIGluIHNsb3ctbW90aW9uLCB3aGlsZSBvdGhlcnMgYXJlIGF0IGZ1bGwgc3BlZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdGltZVNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBkZWZpbmVzIHRoZSByZW5kZXJpbmcgcHJvcGVydGllcyB0byBiZSBjb25zdW1lZCBieSB0aGUgbW9kdWxlIGBNYXR0ZXIuUmVuZGVyYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXJcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgYm9keSBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnZpc2libGVcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgb3BhY2l0eSB0byB1c2Ugd2hlbiByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLm9wYWNpdHlcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGBPYmplY3RgIHRoYXQgZGVmaW5lcyB0aGUgc3ByaXRlIHByb3BlcnRpZXMgdG8gdXNlIHdoZW4gcmVuZGVyaW5nLCBpZiBhbnkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnNwcml0ZVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYFN0cmluZ2AgdGhhdCBkZWZpbmVzIHRoZSBwYXRoIHRvIHRoZSBpbWFnZSB0byB1c2UgYXMgdGhlIHNwcml0ZSB0ZXh0dXJlLCBpZiBhbnkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnNwcml0ZS50ZXh0dXJlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICovXG4gICAgIFxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBzY2FsaW5nIGluIHRoZSB4LWF4aXMgZm9yIHRoZSBzcHJpdGUsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnhTY2FsZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBzY2FsaW5nIGluIHRoZSB5LWF4aXMgZm9yIHRoZSBzcHJpdGUsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnlTY2FsZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgeC1heGlzIGZvciB0aGUgc3ByaXRlIChub3JtYWxpc2VkIGJ5IHRleHR1cmUgd2lkdGgpLlxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnNwcml0ZS54T2Zmc2V0XG4gICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSB5LWF4aXMgZm9yIHRoZSBzcHJpdGUgKG5vcm1hbGlzZWQgYnkgdGV4dHVyZSBoZWlnaHQpLlxuICAgICAgKlxuICAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnNwcml0ZS55T2Zmc2V0XG4gICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGxpbmUgd2lkdGggdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRoZSBib2R5IG91dGxpbmUgKGlmIGEgc3ByaXRlIGlzIG5vdCBkZWZpbmVkKS5cbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyBubyBvdXRsaW5lIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLmxpbmVXaWR0aFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgdGhhdCBkZWZpbmVzIHRoZSBmaWxsIHN0eWxlIHRvIHVzZSB3aGVuIHJlbmRlcmluZyB0aGUgYm9keSAoaWYgYSBzcHJpdGUgaXMgbm90IGRlZmluZWQpLlxuICAgICAqIEl0IGlzIHRoZSBzYW1lIGFzIHdoZW4gdXNpbmcgYSBjYW52YXMsIHNvIGl0IGFjY2VwdHMgQ1NTIHN0eWxlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuZmlsbFN0eWxlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgYSByYW5kb20gY29sb3VyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIHRoYXQgZGVmaW5lcyB0aGUgc3Ryb2tlIHN0eWxlIHRvIHVzZSB3aGVuIHJlbmRlcmluZyB0aGUgYm9keSBvdXRsaW5lIChpZiBhIHNwcml0ZSBpcyBub3QgZGVmaW5lZCkuXG4gICAgICogSXQgaXMgdGhlIHNhbWUgYXMgd2hlbiB1c2luZyBhIGNhbnZhcywgc28gaXQgYWNjZXB0cyBDU1Mgc3R5bGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5zdHJva2VTdHlsZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IGEgcmFuZG9tIGNvbG91clxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgdW5pcXVlIGF4aXMgdmVjdG9ycyAoZWRnZSBub3JtYWxzKSB1c2VkIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICAgICAqIFRoZXNlIGFyZSBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgZnJvbSB0aGUgZ2l2ZW4gY29udmV4IGh1bGwgKGB2ZXJ0aWNlc2AgYXJyYXkpIGluIGBCb2R5LmNyZWF0ZWAuXG4gICAgICogVGhleSBhcmUgY29uc3RhbnRseSB1cGRhdGVkIGJ5IGBCb2R5LnVwZGF0ZWAgZHVyaW5nIHRoZSBzaW11bGF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGF4ZXNcbiAgICAgKiBAdHlwZSB2ZWN0b3JbXVxuICAgICAqL1xuICAgICBcbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgX21lYXN1cmVzXyB0aGUgYXJlYSBvZiB0aGUgYm9keSdzIGNvbnZleCBodWxsLCBjYWxjdWxhdGVkIGF0IGNyZWF0aW9uIGJ5IGBCb2R5LmNyZWF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYXJlYVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgQm91bmRzYCBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSBBQUJCIHJlZ2lvbiBmb3IgdGhlIGJvZHkuXG4gICAgICogSXQgaXMgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGZyb20gdGhlIGdpdmVuIGNvbnZleCBodWxsIChgdmVydGljZXNgIGFycmF5KSBpbiBgQm9keS5jcmVhdGVgIGFuZCBjb25zdGFudGx5IHVwZGF0ZWQgYnkgYEJvZHkudXBkYXRlYCBkdXJpbmcgc2ltdWxhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib3VuZHNcbiAgICAgKiBAdHlwZSBib3VuZHNcbiAgICAgKi9cblxufSkoKTtcblxufSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9TbGVlcGluZ1wiOjIyLFwiLi4vZ2VvbWV0cnkvQXhlc1wiOjI1LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6MjksXCIuLi9yZW5kZXIvUmVuZGVyXCI6MzF9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Db21wb3NpdGVgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGNvbXBvc2l0ZSBib2RpZXMuXG4qIEEgY29tcG9zaXRlIGJvZHkgaXMgYSBjb2xsZWN0aW9uIG9mIGBNYXR0ZXIuQm9keWAsIGBNYXR0ZXIuQ29uc3RyYWludGAgYW5kIG90aGVyIGBNYXR0ZXIuQ29tcG9zaXRlYCwgdGhlcmVmb3JlIGNvbXBvc2l0ZXMgZm9ybSBhIHRyZWUgc3RydWN0dXJlLlxuKiBJdCBpcyBpbXBvcnRhbnQgdG8gdXNlIHRoZSBmdW5jdGlvbnMgaW4gdGhpcyBtb2R1bGUgdG8gbW9kaWZ5IGNvbXBvc2l0ZXMsIHJhdGhlciB0aGFuIGRpcmVjdGx5IG1vZGlmeWluZyB0aGVpciBwcm9wZXJ0aWVzLlxuKiBOb3RlIHRoYXQgdGhlIGBNYXR0ZXIuV29ybGRgIG9iamVjdCBpcyBhbHNvIGEgdHlwZSBvZiBgTWF0dGVyLkNvbXBvc2l0ZWAgYW5kIGFzIHN1Y2ggYWxsIGNvbXBvc2l0ZSBtZXRob2RzIGhlcmUgY2FuIGFsc28gb3BlcmF0ZSBvbiBhIGBNYXR0ZXIuV29ybGRgLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgQ29tcG9zaXRlXG4qL1xuXG52YXIgQ29tcG9zaXRlID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9zaXRlO1xuXG52YXIgRXZlbnRzID0gX2RlcmVxXygnLi4vY29yZS9FdmVudHMnKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xudmFyIEJvZHkgPSBfZGVyZXFfKCcuL0JvZHknKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb21wb3NpdGUuIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVyaXRlcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge30gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGVcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZCh7IFxuICAgICAgICAgICAgaWQ6IENvbW1vbi5uZXh0SWQoKSxcbiAgICAgICAgICAgIHR5cGU6ICdjb21wb3NpdGUnLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgaXNNb2RpZmllZDogZmFsc2UsXG4gICAgICAgICAgICBib2RpZXM6IFtdLCBcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzOiBbXSwgXG4gICAgICAgICAgICBjb21wb3NpdGVzOiBbXSxcbiAgICAgICAgICAgIGxhYmVsOiAnQ29tcG9zaXRlJyxcbiAgICAgICAgICAgIHBsdWdpbjoge31cbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXBvc2l0ZSdzIGBpc01vZGlmaWVkYCBmbGFnLiBcbiAgICAgKiBJZiBgdXBkYXRlUGFyZW50c2AgaXMgdHJ1ZSwgYWxsIHBhcmVudHMgd2lsbCBiZSBzZXQgKGRlZmF1bHQ6IGZhbHNlKS5cbiAgICAgKiBJZiBgdXBkYXRlQ2hpbGRyZW5gIGlzIHRydWUsIGFsbCBjaGlsZHJlbiB3aWxsIGJlIHNldCAoZGVmYXVsdDogZmFsc2UpLlxuICAgICAqIEBtZXRob2Qgc2V0TW9kaWZpZWRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc01vZGlmaWVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlUGFyZW50cz1mYWxzZV1cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVDaGlsZHJlbj1mYWxzZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQgPSBmdW5jdGlvbihjb21wb3NpdGUsIGlzTW9kaWZpZWQsIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5pc01vZGlmaWVkID0gaXNNb2RpZmllZDtcblxuICAgICAgICBpZiAodXBkYXRlUGFyZW50cyAmJiBjb21wb3NpdGUucGFyZW50KSB7XG4gICAgICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLnBhcmVudCwgaXNNb2RpZmllZCwgdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVwZGF0ZUNoaWxkcmVuKSB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRDb21wb3NpdGUgPSBjb21wb3NpdGUuY29tcG9zaXRlc1tpXTtcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY2hpbGRDb21wb3NpdGUsIGlzTW9kaWZpZWQsIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmljIGFkZCBmdW5jdGlvbi4gQWRkcyBvbmUgb3IgbWFueSBib2R5KHMpLCBjb25zdHJhaW50KHMpIG9yIGEgY29tcG9zaXRlKHMpIHRvIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogVHJpZ2dlcnMgYGJlZm9yZUFkZGAgYW5kIGBhZnRlckFkZGAgZXZlbnRzIG9uIHRoZSBgY29tcG9zaXRlYC5cbiAgICAgKiBAbWV0aG9kIGFkZFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIG9iamVjdHMgYWRkZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWRkID0gZnVuY3Rpb24oY29tcG9zaXRlLCBvYmplY3QpIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSBbXS5jb25jYXQob2JqZWN0KTtcblxuICAgICAgICBFdmVudHMudHJpZ2dlcihjb21wb3NpdGUsICdiZWZvcmVBZGQnLCB7IG9iamVjdDogb2JqZWN0IH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG9iamVjdHNbaV07XG5cbiAgICAgICAgICAgIHN3aXRjaCAob2JqLnR5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBhZGRpbmcgY29tcG91bmQgcGFydHNcbiAgICAgICAgICAgICAgICBpZiAob2JqLnBhcmVudCAhPT0gb2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdDb21wb3NpdGUuYWRkOiBza2lwcGVkIGFkZGluZyBhIGNvbXBvdW5kIGJvZHkgcGFydCAoeW91IG11c3QgYWRkIGl0cyBwYXJlbnQgaW5zdGVhZCknKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZEJvZHkoY29tcG9zaXRlLCBvYmopO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29uc3RyYWludCc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY29tcG9zaXRlLCBvYmopO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tcG9zaXRlJzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29tcG9zaXRlKGNvbXBvc2l0ZSwgb2JqKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vdXNlQ29uc3RyYWludCc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY29tcG9zaXRlLCBvYmouY29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGNvbXBvc2l0ZSwgJ2FmdGVyQWRkJywgeyBvYmplY3Q6IG9iamVjdCB9KTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmljIHJlbW92ZSBmdW5jdGlvbi4gUmVtb3ZlcyBvbmUgb3IgbWFueSBib2R5KHMpLCBjb25zdHJhaW50KHMpIG9yIGEgY29tcG9zaXRlKHMpIHRvIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogT3B0aW9uYWxseSBzZWFyY2hpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIFRyaWdnZXJzIGBiZWZvcmVSZW1vdmVgIGFuZCBgYWZ0ZXJSZW1vdmVgIGV2ZW50cyBvbiB0aGUgYGNvbXBvc2l0ZWAuXG4gICAgICogQG1ldGhvZCByZW1vdmVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHt9IG9iamVjdFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlZXA9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIG9iamVjdHMgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmUgPSBmdW5jdGlvbihjb21wb3NpdGUsIG9iamVjdCwgZGVlcCkge1xuICAgICAgICB2YXIgb2JqZWN0cyA9IFtdLmNvbmNhdChvYmplY3QpO1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGNvbXBvc2l0ZSwgJ2JlZm9yZVJlbW92ZScsIHsgb2JqZWN0OiBvYmplY3QgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gb2JqZWN0c1tpXTtcblxuICAgICAgICAgICAgc3dpdGNoIChvYmoudHlwZSkge1xuXG4gICAgICAgICAgICBjYXNlICdib2R5JzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQm9keShjb21wb3NpdGUsIG9iaiwgZGVlcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb25zdHJhaW50JzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29uc3RyYWludChjb21wb3NpdGUsIG9iaiwgZGVlcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21wb3NpdGUnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb21wb3NpdGUoY29tcG9zaXRlLCBvYmosIGRlZXApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW91c2VDb25zdHJhaW50JzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29uc3RyYWludChjb21wb3NpdGUsIG9iai5jb25zdHJhaW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoY29tcG9zaXRlLCAnYWZ0ZXJSZW1vdmUnLCB7IG9iamVjdDogb2JqZWN0IH0pO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBjb21wb3NpdGUgdG8gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYWRkQ29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZUFcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlQlxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZUEgd2l0aCB0aGUgb2JqZWN0cyBmcm9tIGNvbXBvc2l0ZUIgYWRkZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWRkQ29tcG9zaXRlID0gZnVuY3Rpb24oY29tcG9zaXRlQSwgY29tcG9zaXRlQikge1xuICAgICAgICBjb21wb3NpdGVBLmNvbXBvc2l0ZXMucHVzaChjb21wb3NpdGVCKTtcbiAgICAgICAgY29tcG9zaXRlQi5wYXJlbnQgPSBjb21wb3NpdGVBO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlQSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlQTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNvbXBvc2l0ZSBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUsIGFuZCBvcHRpb25hbGx5IHNlYXJjaGluZyBpdHMgY2hpbGRyZW4gcmVjdXJzaXZlbHkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVBXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZUJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZUEgd2l0aCB0aGUgY29tcG9zaXRlIHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlQ29tcG9zaXRlID0gZnVuY3Rpb24oY29tcG9zaXRlQSwgY29tcG9zaXRlQiwgZGVlcCkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBDb21tb24uaW5kZXhPZihjb21wb3NpdGVBLmNvbXBvc2l0ZXMsIGNvbXBvc2l0ZUIpO1xuICAgICAgICBpZiAocG9zaXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29tcG9zaXRlQXQoY29tcG9zaXRlQSwgcG9zaXRpb24pO1xuICAgICAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZUEsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZUEuY29tcG9zaXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZShjb21wb3NpdGVBLmNvbXBvc2l0ZXNbaV0sIGNvbXBvc2l0ZUIsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZUE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjb21wb3NpdGUgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb21wb3NpdGVBdFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgY29tcG9zaXRlIHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlQ29tcG9zaXRlQXQgPSBmdW5jdGlvbihjb21wb3NpdGUsIHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5jb21wb3NpdGVzLnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGJvZHkgdG8gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYWRkQm9keVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgYm9keSBhZGRlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hZGRCb2R5ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBib2R5KSB7XG4gICAgICAgIGNvbXBvc2l0ZS5ib2RpZXMucHVzaChib2R5KTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgYm9keSBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUsIGFuZCBvcHRpb25hbGx5IHNlYXJjaGluZyBpdHMgY2hpbGRyZW4gcmVjdXJzaXZlbHkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUJvZHlcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgYm9keSByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUJvZHkgPSBmdW5jdGlvbihjb21wb3NpdGUsIGJvZHksIGRlZXApIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gQ29tbW9uLmluZGV4T2YoY29tcG9zaXRlLmJvZGllcywgYm9keSk7XG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVCb2R5QXQoY29tcG9zaXRlLCBwb3NpdGlvbik7XG4gICAgICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUJvZHkoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0sIGJvZHksIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVCb2R5QXRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGJvZHkgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVCb2R5QXQgPSBmdW5jdGlvbihjb21wb3NpdGUsIHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5ib2RpZXMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgY29uc3RyYWludCB0byB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBhZGRDb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBjb25zdHJhaW50IGFkZGVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQgPSBmdW5jdGlvbihjb21wb3NpdGUsIGNvbnN0cmFpbnQpIHtcbiAgICAgICAgY29tcG9zaXRlLmNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNvbnN0cmFpbnQgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBhbmQgb3B0aW9uYWxseSBzZWFyY2hpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlZXA9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGNvbnN0cmFpbnQgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBjb25zdHJhaW50LCBkZWVwKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IENvbW1vbi5pbmRleE9mKGNvbXBvc2l0ZS5jb25zdHJhaW50cywgY29uc3RyYWludCk7XG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50QXQoY29tcG9zaXRlLCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnQoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0sIGNvbnN0cmFpbnQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb25zdHJhaW50QXRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGNvbnN0cmFpbnQgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50QXQgPSBmdW5jdGlvbihjb21wb3NpdGUsIHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5jb25zdHJhaW50cy5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGJvZGllcywgY29uc3RyYWludHMgYW5kIGNvbXBvc2l0ZXMgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIE9wdGlvbmFsbHkgY2xlYXJpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBrZWVwU3RhdGljXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUuY2xlYXIgPSBmdW5jdGlvbihjb21wb3NpdGUsIGtlZXBTdGF0aWMsIGRlZXApIHtcbiAgICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5jbGVhcihjb21wb3NpdGUuY29tcG9zaXRlc1tpXSwga2VlcFN0YXRpYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChrZWVwU3RhdGljKSB7XG4gICAgICAgICAgICBjb21wb3NpdGUuYm9kaWVzID0gY29tcG9zaXRlLmJvZGllcy5maWx0ZXIoZnVuY3Rpb24oYm9keSkgeyByZXR1cm4gYm9keS5pc1N0YXRpYzsgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wb3NpdGUuYm9kaWVzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb21wb3NpdGUuY29uc3RyYWludHMubGVuZ3RoID0gMDtcbiAgICAgICAgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoID0gMDtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGJvZGllcyBpbiB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBpbmNsdWRpbmcgYWxsIGJvZGllcyBpbiBpdHMgY2hpbGRyZW4sIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBtZXRob2QgYWxsQm9kaWVzXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEByZXR1cm4ge2JvZHlbXX0gQWxsIHRoZSBib2RpZXNcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWxsQm9kaWVzID0gZnVuY3Rpb24oY29tcG9zaXRlKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSBbXS5jb25jYXQoY29tcG9zaXRlLmJvZGllcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGJvZGllcyA9IGJvZGllcy5jb25jYXQoQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUuY29tcG9zaXRlc1tpXSkpO1xuXG4gICAgICAgIHJldHVybiBib2RpZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGNvbnN0cmFpbnRzIGluIHRoZSBnaXZlbiBjb21wb3NpdGUsIGluY2x1ZGluZyBhbGwgY29uc3RyYWludHMgaW4gaXRzIGNoaWxkcmVuLCByZWN1cnNpdmVseS5cbiAgICAgKiBAbWV0aG9kIGFsbENvbnN0cmFpbnRzXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEByZXR1cm4ge2NvbnN0cmFpbnRbXX0gQWxsIHRoZSBjb25zdHJhaW50c1xuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSkge1xuICAgICAgICB2YXIgY29uc3RyYWludHMgPSBbXS5jb25jYXQoY29tcG9zaXRlLmNvbnN0cmFpbnRzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgY29uc3RyYWludHMgPSBjb25zdHJhaW50cy5jb25jYXQoQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldKSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnN0cmFpbnRzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBjb21wb3NpdGVzIGluIHRoZSBnaXZlbiBjb21wb3NpdGUsIGluY2x1ZGluZyBhbGwgY29tcG9zaXRlcyBpbiBpdHMgY2hpbGRyZW4sIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBtZXRob2QgYWxsQ29tcG9zaXRlc1xuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGVbXX0gQWxsIHRoZSBjb21wb3NpdGVzXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXMgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgdmFyIGNvbXBvc2l0ZXMgPSBbXS5jb25jYXQoY29tcG9zaXRlLmNvbXBvc2l0ZXMpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBjb21wb3NpdGVzID0gY29tcG9zaXRlcy5jb25jYXQoQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXMoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0pKTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgdGhlIGNvbXBvc2l0ZSByZWN1cnNpdmVseSBmb3IgYW4gb2JqZWN0IG1hdGNoaW5nIHRoZSB0eXBlIGFuZCBpZCBzdXBwbGllZCwgbnVsbCBpZiBub3QgZm91bmQuXG4gICAgICogQG1ldGhvZCBnZXRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGlkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSByZXF1ZXN0ZWQgb2JqZWN0LCBpZiBmb3VuZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5nZXQgPSBmdW5jdGlvbihjb21wb3NpdGUsIGlkLCB0eXBlKSB7XG4gICAgICAgIHZhciBvYmplY3RzLFxuICAgICAgICAgICAgb2JqZWN0O1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdib2R5JzpcbiAgICAgICAgICAgIG9iamVjdHMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY29uc3RyYWludCc6XG4gICAgICAgICAgICBvYmplY3RzID0gQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKGNvbXBvc2l0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY29tcG9zaXRlJzpcbiAgICAgICAgICAgIG9iamVjdHMgPSBDb21wb3NpdGUuYWxsQ29tcG9zaXRlcyhjb21wb3NpdGUpLmNvbmNhdChjb21wb3NpdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9iamVjdHMpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBvYmplY3QgPSBvYmplY3RzLmZpbHRlcihmdW5jdGlvbihvYmplY3QpIHsgXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0LmlkLnRvU3RyaW5nKCkgPT09IGlkLnRvU3RyaW5nKCk7IFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb2JqZWN0Lmxlbmd0aCA9PT0gMCA/IG51bGwgOiBvYmplY3RbMF07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIHRoZSBnaXZlbiBvYmplY3QocykgZnJvbSBjb21wb3NpdGVBIHRvIGNvbXBvc2l0ZUIgKGVxdWFsIHRvIGEgcmVtb3ZlIGZvbGxvd2VkIGJ5IGFuIGFkZCkuXG4gICAgICogQG1ldGhvZCBtb3ZlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGVBfSBjb21wb3NpdGVBXG4gICAgICogQHBhcmFtIHtvYmplY3RbXX0gb2JqZWN0c1xuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlQn0gY29tcG9zaXRlQlxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gUmV0dXJucyBjb21wb3NpdGVBXG4gICAgICovXG4gICAgQ29tcG9zaXRlLm1vdmUgPSBmdW5jdGlvbihjb21wb3NpdGVBLCBvYmplY3RzLCBjb21wb3NpdGVCKSB7XG4gICAgICAgIENvbXBvc2l0ZS5yZW1vdmUoY29tcG9zaXRlQSwgb2JqZWN0cyk7XG4gICAgICAgIENvbXBvc2l0ZS5hZGQoY29tcG9zaXRlQiwgb2JqZWN0cyk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGVBO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG5ldyBpZHMgZm9yIGFsbCBvYmplY3RzIGluIHRoZSBjb21wb3NpdGUsIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBtZXRob2QgcmViYXNlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gUmV0dXJucyBjb21wb3NpdGVcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmViYXNlID0gZnVuY3Rpb24oY29tcG9zaXRlKSB7XG4gICAgICAgIHZhciBvYmplY3RzID0gQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyhjb21wb3NpdGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChDb21wb3NpdGUuYWxsQ29tcG9zaXRlcyhjb21wb3NpdGUpKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG9iamVjdHNbaV0uaWQgPSBDb21tb24ubmV4dElkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyBhbGwgY2hpbGRyZW4gaW4gdGhlIGNvbXBvc2l0ZSBieSBhIGdpdmVuIHZlY3RvciByZWxhdGl2ZSB0byB0aGVpciBjdXJyZW50IHBvc2l0aW9ucywgXG4gICAgICogd2l0aG91dCBpbXBhcnRpbmcgYW55IHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2QgdHJhbnNsYXRlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB0cmFuc2xhdGlvblxuICAgICAqIEBwYXJhbSB7Ym9vbH0gW3JlY3Vyc2l2ZT10cnVlXVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS50cmFuc2xhdGUgPSBmdW5jdGlvbihjb21wb3NpdGUsIHRyYW5zbGF0aW9uLCByZWN1cnNpdmUpIHtcbiAgICAgICAgdmFyIGJvZGllcyA9IHJlY3Vyc2l2ZSA/IENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlKSA6IGNvbXBvc2l0ZS5ib2RpZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIEJvZHkudHJhbnNsYXRlKGJvZGllc1tpXSwgdHJhbnNsYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgYWxsIGNoaWxkcmVuIGluIHRoZSBjb21wb3NpdGUgYnkgYSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgZ2l2ZW4gcG9pbnQsIHdpdGhvdXQgaW1wYXJ0aW5nIGFueSBhbmd1bGFyIHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEBwYXJhbSB7Ym9vbH0gW3JlY3Vyc2l2ZT10cnVlXVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yb3RhdGUgPSBmdW5jdGlvbihjb21wb3NpdGUsIHJvdGF0aW9uLCBwb2ludCwgcmVjdXJzaXZlKSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhyb3RhdGlvbiksXG4gICAgICAgICAgICBzaW4gPSBNYXRoLnNpbihyb3RhdGlvbiksXG4gICAgICAgICAgICBib2RpZXMgPSByZWN1cnNpdmUgPyBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSkgOiBjb21wb3NpdGUuYm9kaWVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBkeCA9IGJvZHkucG9zaXRpb24ueCAtIHBvaW50LngsXG4gICAgICAgICAgICAgICAgZHkgPSBib2R5LnBvc2l0aW9uLnkgLSBwb2ludC55O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB7XG4gICAgICAgICAgICAgICAgeDogcG9pbnQueCArIChkeCAqIGNvcyAtIGR5ICogc2luKSxcbiAgICAgICAgICAgICAgICB5OiBwb2ludC55ICsgKGR4ICogc2luICsgZHkgKiBjb3MpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgQm9keS5yb3RhdGUoYm9keSwgcm90YXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNjYWxlcyBhbGwgY2hpbGRyZW4gaW4gdGhlIGNvbXBvc2l0ZSwgaW5jbHVkaW5nIHVwZGF0aW5nIHBoeXNpY2FsIHByb3BlcnRpZXMgKG1hc3MsIGFyZWEsIGF4ZXMsIGluZXJ0aWEpLCBmcm9tIGEgd29ybGQtc3BhY2UgcG9pbnQuXG4gICAgICogQG1ldGhvZCBzY2FsZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVYXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEBwYXJhbSB7Ym9vbH0gW3JlY3Vyc2l2ZT10cnVlXVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5zY2FsZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgc2NhbGVYLCBzY2FsZVksIHBvaW50LCByZWN1cnNpdmUpIHtcbiAgICAgICAgdmFyIGJvZGllcyA9IHJlY3Vyc2l2ZSA/IENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlKSA6IGNvbXBvc2l0ZS5ib2RpZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIGR4ID0gYm9keS5wb3NpdGlvbi54IC0gcG9pbnQueCxcbiAgICAgICAgICAgICAgICBkeSA9IGJvZHkucG9zaXRpb24ueSAtIHBvaW50Lnk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIHtcbiAgICAgICAgICAgICAgICB4OiBwb2ludC54ICsgZHggKiBzY2FsZVgsXG4gICAgICAgICAgICAgICAgeTogcG9pbnQueSArIGR5ICogc2NhbGVZXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgQm9keS5zY2FsZShib2R5LCBzY2FsZVgsIHNjYWxlWSk7XG4gICAgICAgIH1cblxuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5pb24gb2YgdGhlIGJvdW5kcyBvZiBhbGwgb2YgdGhlIGNvbXBvc2l0ZSdzIGJvZGllcy5cbiAgICAgKiBAbWV0aG9kIGJvdW5kc1xuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGUgVGhlIGNvbXBvc2l0ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym91bmRzfSBUaGUgY29tcG9zaXRlIGJvdW5kcy5cbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYm91bmRzID0gZnVuY3Rpb24oY29tcG9zaXRlKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSksXG4gICAgICAgICAgICB2ZXJ0aWNlcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goYm9keS5ib3VuZHMubWluLCBib2R5LmJvdW5kcy5tYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJvdW5kcy5jcmVhdGUodmVydGljZXMpO1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBFdmVudHMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIGEgY2FsbCB0byBgQ29tcG9zaXRlLmFkZGAgaXMgbWFkZSwgYmVmb3JlIG9iamVjdHMgaGF2ZSBiZWVuIGFkZGVkLlxuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVBZGRcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5vYmplY3QgVGhlIG9iamVjdChzKSB0byBiZSBhZGRlZCAobWF5IGJlIGEgc2luZ2xlIGJvZHksIGNvbnN0cmFpbnQsIGNvbXBvc2l0ZSBvciBhIG1peGVkIGFycmF5IG9mIHRoZXNlKVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBjYWxsIHRvIGBDb21wb3NpdGUuYWRkYCBpcyBtYWRlLCBhZnRlciBvYmplY3RzIGhhdmUgYmVlbiBhZGRlZC5cbiAgICAqXG4gICAgKiBAZXZlbnQgYWZ0ZXJBZGRcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5vYmplY3QgVGhlIG9iamVjdChzKSB0aGF0IGhhdmUgYmVlbiBhZGRlZCAobWF5IGJlIGEgc2luZ2xlIGJvZHksIGNvbnN0cmFpbnQsIGNvbXBvc2l0ZSBvciBhIG1peGVkIGFycmF5IG9mIHRoZXNlKVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBjYWxsIHRvIGBDb21wb3NpdGUucmVtb3ZlYCBpcyBtYWRlLCBiZWZvcmUgb2JqZWN0cyBoYXZlIGJlZW4gcmVtb3ZlZC5cbiAgICAqXG4gICAgKiBAZXZlbnQgYmVmb3JlUmVtb3ZlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQub2JqZWN0IFRoZSBvYmplY3QocykgdG8gYmUgcmVtb3ZlZCAobWF5IGJlIGEgc2luZ2xlIGJvZHksIGNvbnN0cmFpbnQsIGNvbXBvc2l0ZSBvciBhIG1peGVkIGFycmF5IG9mIHRoZXNlKVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBjYWxsIHRvIGBDb21wb3NpdGUucmVtb3ZlYCBpcyBtYWRlLCBhZnRlciBvYmplY3RzIGhhdmUgYmVlbiByZW1vdmVkLlxuICAgICpcbiAgICAqIEBldmVudCBhZnRlclJlbW92ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm9iamVjdCBUaGUgb2JqZWN0KHMpIHRoYXQgaGF2ZSBiZWVuIHJlbW92ZWQgKG1heSBiZSBhIHNpbmdsZSBib2R5LCBjb25zdHJhaW50LCBjb21wb3NpdGUgb3IgYSBtaXhlZCBhcnJheSBvZiB0aGVzZSlcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlZ2VyIGBOdW1iZXJgIHVuaXF1ZWx5IGlkZW50aWZ5aW5nIG51bWJlciBnZW5lcmF0ZWQgaW4gYENvbXBvc2l0ZS5jcmVhdGVgIGJ5IGBDb21tb24ubmV4dElkYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCBkZW5vdGluZyB0aGUgdHlwZSBvZiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiY29tcG9zaXRlXCJcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFyYml0cmFyeSBgU3RyaW5nYCBuYW1lIHRvIGhlbHAgdGhlIHVzZXIgaWRlbnRpZnkgYW5kIG1hbmFnZSBjb21wb3NpdGVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGxhYmVsXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJDb21wb3NpdGVcIlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIGNvbXBvc2l0ZSBoYXMgYmVlbiBtb2RpZmllZCBkdXJpbmcgdGhlIGN1cnJlbnQgc3RlcC5cbiAgICAgKiBNb3N0IGBNYXR0ZXIuQ29tcG9zaXRlYCBtZXRob2RzIHdpbGwgYXV0b21hdGljYWxseSBzZXQgdGhpcyBmbGFnIHRvIGB0cnVlYCB0byBpbmZvcm0gdGhlIGVuZ2luZSBvZiBjaGFuZ2VzIHRvIGJlIGhhbmRsZWQuXG4gICAgICogSWYgeW91IG5lZWQgdG8gY2hhbmdlIGl0IG1hbnVhbGx5LCB5b3Ugc2hvdWxkIHVzZSB0aGUgYENvbXBvc2l0ZS5zZXRNb2RpZmllZGAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlzTW9kaWZpZWRcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBgQ29tcG9zaXRlYCB0aGF0IGlzIHRoZSBwYXJlbnQgb2YgdGhpcyBjb21wb3NpdGUuIEl0IGlzIGF1dG9tYXRpY2FsbHkgbWFuYWdlZCBieSB0aGUgYE1hdHRlci5Db21wb3NpdGVgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGFyZW50XG4gICAgICogQHR5cGUgY29tcG9zaXRlXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgYEJvZHlgIHRoYXQgYXJlIF9kaXJlY3RfIGNoaWxkcmVuIG9mIHRoaXMgY29tcG9zaXRlLlxuICAgICAqIFRvIGFkZCBvciByZW1vdmUgYm9kaWVzIHlvdSBzaG91bGQgdXNlIGBDb21wb3NpdGUuYWRkYCBhbmQgYENvbXBvc2l0ZS5yZW1vdmVgIG1ldGhvZHMgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICogSWYgeW91IHdpc2ggdG8gcmVjdXJzaXZlbHkgZmluZCBhbGwgZGVzY2VuZGFudHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLmFsbEJvZGllc2AgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvZGllc1xuICAgICAqIEB0eXBlIGJvZHlbXVxuICAgICAqIEBkZWZhdWx0IFtdXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBgQ29uc3RyYWludGAgdGhhdCBhcmUgX2RpcmVjdF8gY2hpbGRyZW4gb2YgdGhpcyBjb21wb3NpdGUuXG4gICAgICogVG8gYWRkIG9yIHJlbW92ZSBjb25zdHJhaW50cyB5b3Ugc2hvdWxkIHVzZSBgQ29tcG9zaXRlLmFkZGAgYW5kIGBDb21wb3NpdGUucmVtb3ZlYCBtZXRob2RzIHJhdGhlciB0aGFuIGRpcmVjdGx5IG1vZGlmeWluZyB0aGlzIHByb3BlcnR5LlxuICAgICAqIElmIHlvdSB3aXNoIHRvIHJlY3Vyc2l2ZWx5IGZpbmQgYWxsIGRlc2NlbmRhbnRzLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYENvbXBvc2l0ZS5hbGxDb25zdHJhaW50c2AgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbnN0cmFpbnRzXG4gICAgICogQHR5cGUgY29uc3RyYWludFtdXG4gICAgICogQGRlZmF1bHQgW11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGBDb21wb3NpdGVgIHRoYXQgYXJlIF9kaXJlY3RfIGNoaWxkcmVuIG9mIHRoaXMgY29tcG9zaXRlLlxuICAgICAqIFRvIGFkZCBvciByZW1vdmUgY29tcG9zaXRlcyB5b3Ugc2hvdWxkIHVzZSBgQ29tcG9zaXRlLmFkZGAgYW5kIGBDb21wb3NpdGUucmVtb3ZlYCBtZXRob2RzIHJhdGhlciB0aGFuIGRpcmVjdGx5IG1vZGlmeWluZyB0aGlzIHByb3BlcnR5LlxuICAgICAqIElmIHlvdSB3aXNoIHRvIHJlY3Vyc2l2ZWx5IGZpbmQgYWxsIGRlc2NlbmRhbnRzLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYENvbXBvc2l0ZS5hbGxDb21wb3NpdGVzYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29tcG9zaXRlc1xuICAgICAqIEB0eXBlIGNvbXBvc2l0ZVtdXG4gICAgICogQGRlZmF1bHQgW11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCByZXNlcnZlZCBmb3Igc3RvcmluZyBwbHVnaW4tc3BlY2lmaWMgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwbHVnaW5cbiAgICAgKiBAdHlwZSB7fVxuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL0V2ZW50c1wiOjE2LFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuL0JvZHlcIjoxfV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuV29ybGRgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHRoZSB3b3JsZCBjb21wb3NpdGUuXG4qIEEgYE1hdHRlci5Xb3JsZGAgaXMgYSBgTWF0dGVyLkNvbXBvc2l0ZWAgYm9keSwgd2hpY2ggaXMgYSBjb2xsZWN0aW9uIG9mIGBNYXR0ZXIuQm9keWAsIGBNYXR0ZXIuQ29uc3RyYWludGAgYW5kIG90aGVyIGBNYXR0ZXIuQ29tcG9zaXRlYC5cbiogQSBgTWF0dGVyLldvcmxkYCBoYXMgYSBmZXcgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGluY2x1ZGluZyBgZ3Jhdml0eWAgYW5kIGBib3VuZHNgLlxuKiBJdCBpcyBpbXBvcnRhbnQgdG8gdXNlIHRoZSBmdW5jdGlvbnMgaW4gdGhlIGBNYXR0ZXIuQ29tcG9zaXRlYCBtb2R1bGUgdG8gbW9kaWZ5IHRoZSB3b3JsZCBjb21wb3NpdGUsIHJhdGhlciB0aGFuIGRpcmVjdGx5IG1vZGlmeWluZyBpdHMgcHJvcGVydGllcy5cbiogVGhlcmUgYXJlIGFsc28gYSBmZXcgbWV0aG9kcyBoZXJlIHRoYXQgYWxpYXMgdGhvc2UgaW4gYE1hdHRlci5Db21wb3NpdGVgIGZvciBlYXNpZXIgcmVhZGFiaWxpdHkuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBXb3JsZFxuKiBAZXh0ZW5kcyBDb21wb3NpdGVcbiovXG5cbnZhciBXb3JsZCA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmxkO1xuXG52YXIgQ29tcG9zaXRlID0gX2RlcmVxXygnLi9Db21wb3NpdGUnKTtcbnZhciBDb25zdHJhaW50ID0gX2RlcmVxXygnLi4vY29uc3RyYWludC9Db25zdHJhaW50Jyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB3b3JsZCBjb21wb3NpdGUuIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge30gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge3dvcmxkfSBBIG5ldyB3b3JsZFxuICAgICAqL1xuICAgIFdvcmxkLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNvbXBvc2l0ZSA9IENvbXBvc2l0ZS5jcmVhdGUoKTtcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBsYWJlbDogJ1dvcmxkJyxcbiAgICAgICAgICAgIGdyYXZpdHk6IHtcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDEsXG4gICAgICAgICAgICAgICAgc2NhbGU6IDAuMDAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm91bmRzOiB7IFxuICAgICAgICAgICAgICAgIG1pbjogeyB4OiAtSW5maW5pdHksIHk6IC1JbmZpbml0eSB9LCBcbiAgICAgICAgICAgICAgICBtYXg6IHsgeDogSW5maW5pdHksIHk6IEluZmluaXR5IH0gXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZChjb21wb3NpdGUsIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ3Jhdml0eSB0byBhcHBseSBvbiB0aGUgd29ybGQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZ3Jhdml0eVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdyYXZpdHkgeCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZ3Jhdml0eS54XG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdyYXZpdHkgeSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZ3Jhdml0eS55XG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdyYXZpdHkgc2NhbGUgZmFjdG9yLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGdyYXZpdHkuc2NhbGVcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAwLjAwMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgQm91bmRzYCBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSB3b3JsZCBib3VuZHMgZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm91bmRzXG4gICAgICogQHR5cGUgYm91bmRzXG4gICAgICogQGRlZmF1bHQgeyBtaW46IHsgeDogLUluZmluaXR5LCB5OiAtSW5maW5pdHkgfSwgbWF4OiB7IHg6IEluZmluaXR5LCB5OiBJbmZpbml0eSB9IH1cbiAgICAgKi9cblxuICAgIC8vIFdvcmxkIGlzIGEgQ29tcG9zaXRlIGJvZHlcbiAgICAvLyBzZWUgc3JjL21vZHVsZS9PdXRyby5qcyBmb3IgdGhlc2UgYWxpYXNlczpcbiAgICBcbiAgICAvKipcbiAgICAgKiBBbiBhbGlhcyBmb3IgQ29tcG9zaXRlLmFkZFxuICAgICAqIEBtZXRob2QgYWRkXG4gICAgICogQHBhcmFtIHt3b3JsZH0gd29ybGRcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgd29ybGQgd2l0aCB0aGUgb2JqZWN0cyBhZGRlZFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgZm9yIENvbXBvc2l0ZS5yZW1vdmVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZVxuICAgICAqIEBwYXJhbSB7d29ybGR9IHdvcmxkXG4gICAgICogQHBhcmFtIHt9IG9iamVjdFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlZXA9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgd29ybGQgd2l0aCB0aGUgb2JqZWN0cyByZW1vdmVkXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhbGlhcyBmb3IgQ29tcG9zaXRlLmNsZWFyXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7d29ybGR9IHdvcmxkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBrZWVwU3RhdGljXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhbGlhcyBmb3IgQ29tcG9zaXRlLmFkZENvbXBvc2l0ZVxuICAgICAqIEBtZXRob2QgYWRkQ29tcG9zaXRlXG4gICAgICogQHBhcmFtIHt3b3JsZH0gd29ybGRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHJldHVybiB7d29ybGR9IFRoZSBvcmlnaW5hbCB3b3JsZCB3aXRoIHRoZSBvYmplY3RzIGZyb20gY29tcG9zaXRlIGFkZGVkXG4gICAgICovXG4gICAgXG4gICAgIC8qKlxuICAgICAgKiBBbiBhbGlhcyBmb3IgQ29tcG9zaXRlLmFkZEJvZHlcbiAgICAgICogQG1ldGhvZCBhZGRCb2R5XG4gICAgICAqIEBwYXJhbSB7d29ybGR9IHdvcmxkXG4gICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAgKiBAcmV0dXJuIHt3b3JsZH0gVGhlIG9yaWdpbmFsIHdvcmxkIHdpdGggdGhlIGJvZHkgYWRkZWRcbiAgICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEFuIGFsaWFzIGZvciBDb21wb3NpdGUuYWRkQ29uc3RyYWludFxuICAgICAgKiBAbWV0aG9kIGFkZENvbnN0cmFpbnRcbiAgICAgICogQHBhcmFtIHt3b3JsZH0gd29ybGRcbiAgICAgICogQHBhcmFtIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICAqIEByZXR1cm4ge3dvcmxkfSBUaGUgb3JpZ2luYWwgd29ybGQgd2l0aCB0aGUgY29uc3RyYWludCBhZGRlZFxuICAgICAgKi9cblxufSkoKTtcblxufSx7XCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIjoxMixcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuL0NvbXBvc2l0ZVwiOjJ9XSw0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Db250YWN0YCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb2xsaXNpb24gY29udGFjdHMuXG4qXG4qIEBjbGFzcyBDb250YWN0XG4qL1xuXG52YXIgQ29udGFjdCA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRhY3Q7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29udGFjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7dmVydGV4fSB2ZXJ0ZXhcbiAgICAgKiBAcmV0dXJuIHtjb250YWN0fSBBIG5ldyBjb250YWN0XG4gICAgICovXG4gICAgQ29udGFjdC5jcmVhdGUgPSBmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBDb250YWN0LmlkKHZlcnRleCksXG4gICAgICAgICAgICB2ZXJ0ZXg6IHZlcnRleCxcbiAgICAgICAgICAgIG5vcm1hbEltcHVsc2U6IDAsXG4gICAgICAgICAgICB0YW5nZW50SW1wdWxzZTogMFxuICAgICAgICB9O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgY29udGFjdCBpZC5cbiAgICAgKiBAbWV0aG9kIGlkXG4gICAgICogQHBhcmFtIHt2ZXJ0ZXh9IHZlcnRleFxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVW5pcXVlIGNvbnRhY3RJRFxuICAgICAqL1xuICAgIENvbnRhY3QuaWQgPSBmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgICAgcmV0dXJuIHZlcnRleC5ib2R5LmlkICsgJ18nICsgdmVydGV4LmluZGV4O1xuICAgIH07XG5cbn0pKCk7XG5cbn0se31dLDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkRldGVjdG9yYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgZGV0ZWN0aW5nIGNvbGxpc2lvbnMgZ2l2ZW4gYSBzZXQgb2YgcGFpcnMuXG4qXG4qIEBjbGFzcyBEZXRlY3RvclxuKi9cblxuLy8gVE9ETzogc3BlY3VsYXRpdmUgY29udGFjdHNcblxudmFyIERldGVjdG9yID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gRGV0ZWN0b3I7XG5cbnZhciBTQVQgPSBfZGVyZXFfKCcuL1NBVCcpO1xudmFyIFBhaXIgPSBfZGVyZXFfKCcuL1BhaXInKTtcbnZhciBCb3VuZHMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogRmluZHMgYWxsIGNvbGxpc2lvbnMgZ2l2ZW4gYSBsaXN0IG9mIHBhaXJzLlxuICAgICAqIEBtZXRob2QgY29sbGlzaW9uc1xuICAgICAqIEBwYXJhbSB7cGFpcltdfSBicm9hZHBoYXNlUGFpcnNcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHJldHVybiB7YXJyYXl9IGNvbGxpc2lvbnNcbiAgICAgKi9cbiAgICBEZXRlY3Rvci5jb2xsaXNpb25zID0gZnVuY3Rpb24oYnJvYWRwaGFzZVBhaXJzLCBlbmdpbmUpIHtcbiAgICAgICAgdmFyIGNvbGxpc2lvbnMgPSBbXSxcbiAgICAgICAgICAgIHBhaXJzVGFibGUgPSBlbmdpbmUucGFpcnMudGFibGU7XG5cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnJvYWRwaGFzZVBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keUEgPSBicm9hZHBoYXNlUGFpcnNbaV1bMF0sIFxuICAgICAgICAgICAgICAgIGJvZHlCID0gYnJvYWRwaGFzZVBhaXJzW2ldWzFdO1xuXG4gICAgICAgICAgICBpZiAoKGJvZHlBLmlzU3RhdGljIHx8IGJvZHlBLmlzU2xlZXBpbmcpICYmIChib2R5Qi5pc1N0YXRpYyB8fCBib2R5Qi5pc1NsZWVwaW5nKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFEZXRlY3Rvci5jYW5Db2xsaWRlKGJvZHlBLmNvbGxpc2lvbkZpbHRlciwgYm9keUIuY29sbGlzaW9uRmlsdGVyKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuXG4gICAgICAgICAgICAvLyBtaWQgcGhhc2VcbiAgICAgICAgICAgIGlmIChCb3VuZHMub3ZlcmxhcHMoYm9keUEuYm91bmRzLCBib2R5Qi5ib3VuZHMpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IGJvZHlBLnBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IGJvZHlBLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0QSA9IGJvZHlBLnBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSBib2R5Qi5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBib2R5Qi5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRCID0gYm9keUIucGFydHNba107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocGFydEEgPT09IGJvZHlBICYmIHBhcnRCID09PSBib2R5QikgfHwgQm91bmRzLm92ZXJsYXBzKHBhcnRBLmJvdW5kcywgcGFydEIuYm91bmRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgYSBwcmV2aW91cyBjb2xsaXNpb24gd2UgY291bGQgcmV1c2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFpcklkID0gUGFpci5pZChwYXJ0QSwgcGFydEIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWlyID0gcGFpcnNUYWJsZVtwYWlySWRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbGxpc2lvbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWlyICYmIHBhaXIuaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbGxpc2lvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmFycm93IHBoYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxpc2lvbiA9IFNBVC5jb2xsaWRlcyhwYXJ0QSwgcGFydEIsIHByZXZpb3VzQ29sbGlzaW9uKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbi5jb2xsaWRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25zLnB1c2goY29sbGlzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sbGlzaW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgYm90aCBzdXBwbGllZCBjb2xsaXNpb24gZmlsdGVycyB3aWxsIGFsbG93IGEgY29sbGlzaW9uIHRvIG9jY3VyLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqIEBtZXRob2QgY2FuQ29sbGlkZVxuICAgICAqIEBwYXJhbSB7fSBmaWx0ZXJBXG4gICAgICogQHBhcmFtIHt9IGZpbHRlckJcbiAgICAgKiBAcmV0dXJuIHtib29sfSBgdHJ1ZWAgaWYgY29sbGlzaW9uIGNhbiBvY2N1clxuICAgICAqL1xuICAgIERldGVjdG9yLmNhbkNvbGxpZGUgPSBmdW5jdGlvbihmaWx0ZXJBLCBmaWx0ZXJCKSB7XG4gICAgICAgIGlmIChmaWx0ZXJBLmdyb3VwID09PSBmaWx0ZXJCLmdyb3VwICYmIGZpbHRlckEuZ3JvdXAgIT09IDApXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyQS5ncm91cCA+IDA7XG5cbiAgICAgICAgcmV0dXJuIChmaWx0ZXJBLm1hc2sgJiBmaWx0ZXJCLmNhdGVnb3J5KSAhPT0gMCAmJiAoZmlsdGVyQi5tYXNrICYgZmlsdGVyQS5jYXRlZ29yeSkgIT09IDA7XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4vUGFpclwiOjcsXCIuL1NBVFwiOjExfV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuR3JpZGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgY29sbGlzaW9uIGJyb2FkcGhhc2UgZ3JpZCBzdHJ1Y3R1cmVzLlxuKlxuKiBAY2xhc3MgR3JpZFxuKi9cblxudmFyIEdyaWQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBHcmlkO1xuXG52YXIgUGFpciA9IF9kZXJlcV8oJy4vUGFpcicpO1xudmFyIERldGVjdG9yID0gX2RlcmVxXygnLi9EZXRlY3RvcicpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZ3JpZC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7Z3JpZH0gQSBuZXcgZ3JpZFxuICAgICAqL1xuICAgIEdyaWQuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBHcmlkLFxuICAgICAgICAgICAgZGV0ZWN0b3I6IERldGVjdG9yLmNvbGxpc2lvbnMsXG4gICAgICAgICAgICBidWNrZXRzOiB7fSxcbiAgICAgICAgICAgIHBhaXJzOiB7fSxcbiAgICAgICAgICAgIHBhaXJzTGlzdDogW10sXG4gICAgICAgICAgICBidWNrZXRXaWR0aDogNDgsXG4gICAgICAgICAgICBidWNrZXRIZWlnaHQ6IDQ4XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgYSBzaW5nbGUgZ3JpZCBidWNrZXQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYnVja2V0V2lkdGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCA0OFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiBhIHNpbmdsZSBncmlkIGJ1Y2tldC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBidWNrZXRIZWlnaHRcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCA0OFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZ3JpZC5cbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7Z3JpZH0gZ3JpZFxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmb3JjZVVwZGF0ZVxuICAgICAqL1xuICAgIEdyaWQudXBkYXRlID0gZnVuY3Rpb24oZ3JpZCwgYm9kaWVzLCBlbmdpbmUsIGZvcmNlVXBkYXRlKSB7XG4gICAgICAgIHZhciBpLCBjb2wsIHJvdyxcbiAgICAgICAgICAgIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgYnVja2V0cyA9IGdyaWQuYnVja2V0cyxcbiAgICAgICAgICAgIGJ1Y2tldCxcbiAgICAgICAgICAgIGJ1Y2tldElkLFxuICAgICAgICAgICAgZ3JpZENoYW5nZWQgPSBmYWxzZTtcblxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5pc1NsZWVwaW5nICYmICFmb3JjZVVwZGF0ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gZG9uJ3QgdXBkYXRlIG91dCBvZiB3b3JsZCBib2RpZXNcbiAgICAgICAgICAgIGlmIChib2R5LmJvdW5kcy5tYXgueCA8IHdvcmxkLmJvdW5kcy5taW4ueCB8fCBib2R5LmJvdW5kcy5taW4ueCA+IHdvcmxkLmJvdW5kcy5tYXgueFxuICAgICAgICAgICAgICAgIHx8IGJvZHkuYm91bmRzLm1heC55IDwgd29ybGQuYm91bmRzLm1pbi55IHx8IGJvZHkuYm91bmRzLm1pbi55ID4gd29ybGQuYm91bmRzLm1heC55KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgbmV3UmVnaW9uID0gR3JpZC5fZ2V0UmVnaW9uKGdyaWQsIGJvZHkpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgYm9keSBoYXMgY2hhbmdlZCBncmlkIHJlZ2lvblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlZ2lvbiB8fCBuZXdSZWdpb24uaWQgIT09IGJvZHkucmVnaW9uLmlkIHx8IGZvcmNlVXBkYXRlKSB7XG5cblxuICAgICAgICAgICAgICAgIGlmICghYm9keS5yZWdpb24gfHwgZm9yY2VVcGRhdGUpXG4gICAgICAgICAgICAgICAgICAgIGJvZHkucmVnaW9uID0gbmV3UmVnaW9uO1xuXG4gICAgICAgICAgICAgICAgdmFyIHVuaW9uID0gR3JpZC5fcmVnaW9uVW5pb24obmV3UmVnaW9uLCBib2R5LnJlZ2lvbik7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZ3JpZCBidWNrZXRzIGFmZmVjdGVkIGJ5IHJlZ2lvbiBjaGFuZ2VcbiAgICAgICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIHVuaW9uIG9mIGJvdGggcmVnaW9uc1xuICAgICAgICAgICAgICAgIGZvciAoY29sID0gdW5pb24uc3RhcnRDb2w7IGNvbCA8PSB1bmlvbi5lbmRDb2w7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAocm93ID0gdW5pb24uc3RhcnRSb3c7IHJvdyA8PSB1bmlvbi5lbmRSb3c7IHJvdysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXRJZCA9IEdyaWQuX2dldEJ1Y2tldElkKGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldCA9IGJ1Y2tldHNbYnVja2V0SWRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNJbnNpZGVOZXdSZWdpb24gPSAoY29sID49IG5ld1JlZ2lvbi5zdGFydENvbCAmJiBjb2wgPD0gbmV3UmVnaW9uLmVuZENvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgcm93ID49IG5ld1JlZ2lvbi5zdGFydFJvdyAmJiByb3cgPD0gbmV3UmVnaW9uLmVuZFJvdyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0luc2lkZU9sZFJlZ2lvbiA9IChjb2wgPj0gYm9keS5yZWdpb24uc3RhcnRDb2wgJiYgY29sIDw9IGJvZHkucmVnaW9uLmVuZENvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgcm93ID49IGJvZHkucmVnaW9uLnN0YXJ0Um93ICYmIHJvdyA8PSBib2R5LnJlZ2lvbi5lbmRSb3cpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZnJvbSBvbGQgcmVnaW9uIGJ1Y2tldHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNJbnNpZGVOZXdSZWdpb24gJiYgaXNJbnNpZGVPbGRSZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbnNpZGVPbGRSZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyaWQuX2J1Y2tldFJlbW92ZUJvZHkoZ3JpZCwgYnVja2V0LCBib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0byBuZXcgcmVnaW9uIGJ1Y2tldHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5LnJlZ2lvbiA9PT0gbmV3UmVnaW9uIHx8IChpc0luc2lkZU5ld1JlZ2lvbiAmJiAhaXNJbnNpZGVPbGRSZWdpb24pIHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFidWNrZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldCA9IEdyaWQuX2NyZWF0ZUJ1Y2tldChidWNrZXRzLCBidWNrZXRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JpZC5fYnVja2V0QWRkQm9keShncmlkLCBidWNrZXQsIGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBuZXcgcmVnaW9uXG4gICAgICAgICAgICAgICAgYm9keS5yZWdpb24gPSBuZXdSZWdpb247XG5cbiAgICAgICAgICAgICAgICAvLyBmbGFnIGNoYW5nZXMgc28gd2UgY2FuIHVwZGF0ZSBwYWlyc1xuICAgICAgICAgICAgICAgIGdyaWRDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBwYWlycyBsaXN0IG9ubHkgaWYgcGFpcnMgY2hhbmdlZCAoaS5lLiBhIGJvZHkgY2hhbmdlZCByZWdpb24pXG4gICAgICAgIGlmIChncmlkQ2hhbmdlZClcbiAgICAgICAgICAgIGdyaWQucGFpcnNMaXN0ID0gR3JpZC5fY3JlYXRlQWN0aXZlUGFpcnNMaXN0KGdyaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGdyaWQuXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7Z3JpZH0gZ3JpZFxuICAgICAqL1xuICAgIEdyaWQuY2xlYXIgPSBmdW5jdGlvbihncmlkKSB7XG4gICAgICAgIGdyaWQuYnVja2V0cyA9IHt9O1xuICAgICAgICBncmlkLnBhaXJzID0ge307XG4gICAgICAgIGdyaWQucGFpcnNMaXN0ID0gW107XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSB1bmlvbiBvZiB0d28gcmVnaW9ucy5cbiAgICAgKiBAbWV0aG9kIF9yZWdpb25VbmlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IHJlZ2lvbkFcbiAgICAgKiBAcGFyYW0ge30gcmVnaW9uQlxuICAgICAqIEByZXR1cm4ge30gcmVnaW9uXG4gICAgICovXG4gICAgR3JpZC5fcmVnaW9uVW5pb24gPSBmdW5jdGlvbihyZWdpb25BLCByZWdpb25CKSB7XG4gICAgICAgIHZhciBzdGFydENvbCA9IE1hdGgubWluKHJlZ2lvbkEuc3RhcnRDb2wsIHJlZ2lvbkIuc3RhcnRDb2wpLFxuICAgICAgICAgICAgZW5kQ29sID0gTWF0aC5tYXgocmVnaW9uQS5lbmRDb2wsIHJlZ2lvbkIuZW5kQ29sKSxcbiAgICAgICAgICAgIHN0YXJ0Um93ID0gTWF0aC5taW4ocmVnaW9uQS5zdGFydFJvdywgcmVnaW9uQi5zdGFydFJvdyksXG4gICAgICAgICAgICBlbmRSb3cgPSBNYXRoLm1heChyZWdpb25BLmVuZFJvdywgcmVnaW9uQi5lbmRSb3cpO1xuXG4gICAgICAgIHJldHVybiBHcmlkLl9jcmVhdGVSZWdpb24oc3RhcnRDb2wsIGVuZENvbCwgc3RhcnRSb3csIGVuZFJvdyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlZ2lvbiBhIGdpdmVuIGJvZHkgZmFsbHMgaW4gZm9yIGEgZ2l2ZW4gZ3JpZC5cbiAgICAgKiBAbWV0aG9kIF9nZXRSZWdpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBncmlkXG4gICAgICogQHBhcmFtIHt9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHt9IHJlZ2lvblxuICAgICAqL1xuICAgIEdyaWQuX2dldFJlZ2lvbiA9IGZ1bmN0aW9uKGdyaWQsIGJvZHkpIHtcbiAgICAgICAgdmFyIGJvdW5kcyA9IGJvZHkuYm91bmRzLFxuICAgICAgICAgICAgc3RhcnRDb2wgPSBNYXRoLmZsb29yKGJvdW5kcy5taW4ueCAvIGdyaWQuYnVja2V0V2lkdGgpLFxuICAgICAgICAgICAgZW5kQ29sID0gTWF0aC5mbG9vcihib3VuZHMubWF4LnggLyBncmlkLmJ1Y2tldFdpZHRoKSxcbiAgICAgICAgICAgIHN0YXJ0Um93ID0gTWF0aC5mbG9vcihib3VuZHMubWluLnkgLyBncmlkLmJ1Y2tldEhlaWdodCksXG4gICAgICAgICAgICBlbmRSb3cgPSBNYXRoLmZsb29yKGJvdW5kcy5tYXgueSAvIGdyaWQuYnVja2V0SGVpZ2h0KTtcblxuICAgICAgICByZXR1cm4gR3JpZC5fY3JlYXRlUmVnaW9uKHN0YXJ0Q29sLCBlbmRDb2wsIHN0YXJ0Um93LCBlbmRSb3cpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVnaW9uLlxuICAgICAqIEBtZXRob2QgX2NyZWF0ZVJlZ2lvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IHN0YXJ0Q29sXG4gICAgICogQHBhcmFtIHt9IGVuZENvbFxuICAgICAqIEBwYXJhbSB7fSBzdGFydFJvd1xuICAgICAqIEBwYXJhbSB7fSBlbmRSb3dcbiAgICAgKiBAcmV0dXJuIHt9IHJlZ2lvblxuICAgICAqL1xuICAgIEdyaWQuX2NyZWF0ZVJlZ2lvbiA9IGZ1bmN0aW9uKHN0YXJ0Q29sLCBlbmRDb2wsIHN0YXJ0Um93LCBlbmRSb3cpIHtcbiAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICBpZDogc3RhcnRDb2wgKyAnLCcgKyBlbmRDb2wgKyAnLCcgKyBzdGFydFJvdyArICcsJyArIGVuZFJvdyxcbiAgICAgICAgICAgIHN0YXJ0Q29sOiBzdGFydENvbCwgXG4gICAgICAgICAgICBlbmRDb2w6IGVuZENvbCwgXG4gICAgICAgICAgICBzdGFydFJvdzogc3RhcnRSb3csIFxuICAgICAgICAgICAgZW5kUm93OiBlbmRSb3cgXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGJ1Y2tldCBpZCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gICAgICogQG1ldGhvZCBfZ2V0QnVja2V0SWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBjb2x1bW5cbiAgICAgKiBAcGFyYW0ge30gcm93XG4gICAgICogQHJldHVybiB7c3RyaW5nfSBidWNrZXQgaWRcbiAgICAgKi9cbiAgICBHcmlkLl9nZXRCdWNrZXRJZCA9IGZ1bmN0aW9uKGNvbHVtbiwgcm93KSB7XG4gICAgICAgIHJldHVybiAnQycgKyBjb2x1bW4gKyAnUicgKyByb3c7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBidWNrZXQuXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQnVja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gYnVja2V0c1xuICAgICAqIEBwYXJhbSB7fSBidWNrZXRJZFxuICAgICAqIEByZXR1cm4ge30gYnVja2V0XG4gICAgICovXG4gICAgR3JpZC5fY3JlYXRlQnVja2V0ID0gZnVuY3Rpb24oYnVja2V0cywgYnVja2V0SWQpIHtcbiAgICAgICAgdmFyIGJ1Y2tldCA9IGJ1Y2tldHNbYnVja2V0SWRdID0gW107XG4gICAgICAgIHJldHVybiBidWNrZXQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBib2R5IHRvIGEgYnVja2V0LlxuICAgICAqIEBtZXRob2QgX2J1Y2tldEFkZEJvZHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBncmlkXG4gICAgICogQHBhcmFtIHt9IGJ1Y2tldFxuICAgICAqIEBwYXJhbSB7fSBib2R5XG4gICAgICovXG4gICAgR3JpZC5fYnVja2V0QWRkQm9keSA9IGZ1bmN0aW9uKGdyaWQsIGJ1Y2tldCwgYm9keSkge1xuICAgICAgICAvLyBhZGQgbmV3IHBhaXJzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVja2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keUIgPSBidWNrZXRbaV07XG5cbiAgICAgICAgICAgIGlmIChib2R5LmlkID09PSBib2R5Qi5pZCB8fCAoYm9keS5pc1N0YXRpYyAmJiBib2R5Qi5pc1N0YXRpYykpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIG51bWJlciBvZiBidWNrZXRzIHRoZSBwYWlyIGV4aXN0cyBpblxuICAgICAgICAgICAgLy8gaW1wb3J0YW50IGZvciBHcmlkLnVwZGF0ZSB0byB3b3JrXG4gICAgICAgICAgICB2YXIgcGFpcklkID0gUGFpci5pZChib2R5LCBib2R5QiksXG4gICAgICAgICAgICAgICAgcGFpciA9IGdyaWQucGFpcnNbcGFpcklkXTtcblxuICAgICAgICAgICAgaWYgKHBhaXIpIHtcbiAgICAgICAgICAgICAgICBwYWlyWzJdICs9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdyaWQucGFpcnNbcGFpcklkXSA9IFtib2R5LCBib2R5QiwgMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgdG8gYm9kaWVzIChhZnRlciBwYWlycywgb3RoZXJ3aXNlIHBhaXJzIHdpdGggc2VsZilcbiAgICAgICAgYnVja2V0LnB1c2goYm9keSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBib2R5IGZyb20gYSBidWNrZXQuXG4gICAgICogQG1ldGhvZCBfYnVja2V0UmVtb3ZlQm9keVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGdyaWRcbiAgICAgKiBAcGFyYW0ge30gYnVja2V0XG4gICAgICogQHBhcmFtIHt9IGJvZHlcbiAgICAgKi9cbiAgICBHcmlkLl9idWNrZXRSZW1vdmVCb2R5ID0gZnVuY3Rpb24oZ3JpZCwgYnVja2V0LCBib2R5KSB7XG4gICAgICAgIC8vIHJlbW92ZSBmcm9tIGJ1Y2tldFxuICAgICAgICBidWNrZXQuc3BsaWNlKENvbW1vbi5pbmRleE9mKGJ1Y2tldCwgYm9keSksIDEpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYWlyIGNvdW50c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1Y2tldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgbnVtYmVyIG9mIGJ1Y2tldHMgdGhlIHBhaXIgZXhpc3RzIGluXG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQgZm9yIF9jcmVhdGVBY3RpdmVQYWlyc0xpc3QgdG8gd29ya1xuICAgICAgICAgICAgdmFyIGJvZHlCID0gYnVja2V0W2ldLFxuICAgICAgICAgICAgICAgIHBhaXJJZCA9IFBhaXIuaWQoYm9keSwgYm9keUIpLFxuICAgICAgICAgICAgICAgIHBhaXIgPSBncmlkLnBhaXJzW3BhaXJJZF07XG5cbiAgICAgICAgICAgIGlmIChwYWlyKVxuICAgICAgICAgICAgICAgIHBhaXJbMl0gLT0gMTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBsaXN0IG9mIHRoZSBhY3RpdmUgcGFpcnMgaW4gdGhlIGdyaWQuXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQWN0aXZlUGFpcnNMaXN0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZ3JpZFxuICAgICAqIEByZXR1cm4gW10gcGFpcnNcbiAgICAgKi9cbiAgICBHcmlkLl9jcmVhdGVBY3RpdmVQYWlyc0xpc3QgPSBmdW5jdGlvbihncmlkKSB7XG4gICAgICAgIHZhciBwYWlyS2V5cyxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBwYWlycyA9IFtdO1xuXG4gICAgICAgIC8vIGdyaWQucGFpcnMgaXMgdXNlZCBhcyBhIGhhc2htYXBcbiAgICAgICAgcGFpcktleXMgPSBDb21tb24ua2V5cyhncmlkLnBhaXJzKTtcblxuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgZ3JpZC5wYWlyc1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHBhaXJLZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBwYWlyID0gZ3JpZC5wYWlyc1twYWlyS2V5c1trXV07XG5cbiAgICAgICAgICAgIC8vIGlmIHBhaXIgZXhpc3RzIGluIGF0IGxlYXN0IG9uZSBidWNrZXRcbiAgICAgICAgICAgIC8vIGl0IGlzIGEgcGFpciB0aGF0IG5lZWRzIGZ1cnRoZXIgY29sbGlzaW9uIHRlc3Rpbmcgc28gcHVzaCBpdFxuICAgICAgICAgICAgaWYgKHBhaXJbMl0gPiAwKSB7XG4gICAgICAgICAgICAgICAgcGFpcnMucHVzaChwYWlyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGdyaWQucGFpcnNbcGFpcktleXNba11dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhaXJzO1xuICAgIH07XG4gICAgXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuL0RldGVjdG9yXCI6NSxcIi4vUGFpclwiOjd9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5QYWlyYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb2xsaXNpb24gcGFpcnMuXG4qXG4qIEBjbGFzcyBQYWlyXG4qL1xuXG52YXIgUGFpciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhaXI7XG5cbnZhciBDb250YWN0ID0gX2RlcmVxXygnLi9Db250YWN0Jyk7XG5cbihmdW5jdGlvbigpIHtcbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGFpci5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7Y29sbGlzaW9ufSBjb2xsaXNpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wXG4gICAgICogQHJldHVybiB7cGFpcn0gQSBuZXcgcGFpclxuICAgICAqL1xuICAgIFBhaXIuY3JlYXRlID0gZnVuY3Rpb24oY29sbGlzaW9uLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIGJvZHlBID0gY29sbGlzaW9uLmJvZHlBLFxuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24uYm9keUIsXG4gICAgICAgICAgICBwYXJlbnRBID0gY29sbGlzaW9uLnBhcmVudEEsXG4gICAgICAgICAgICBwYXJlbnRCID0gY29sbGlzaW9uLnBhcmVudEI7XG5cbiAgICAgICAgdmFyIHBhaXIgPSB7XG4gICAgICAgICAgICBpZDogUGFpci5pZChib2R5QSwgYm9keUIpLFxuICAgICAgICAgICAgYm9keUE6IGJvZHlBLFxuICAgICAgICAgICAgYm9keUI6IGJvZHlCLFxuICAgICAgICAgICAgY29udGFjdHM6IHt9LFxuICAgICAgICAgICAgYWN0aXZlQ29udGFjdHM6IFtdLFxuICAgICAgICAgICAgc2VwYXJhdGlvbjogMCxcbiAgICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgaXNTZW5zb3I6IGJvZHlBLmlzU2Vuc29yIHx8IGJvZHlCLmlzU2Vuc29yLFxuICAgICAgICAgICAgdGltZUNyZWF0ZWQ6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgIHRpbWVVcGRhdGVkOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICBpbnZlcnNlTWFzczogcGFyZW50QS5pbnZlcnNlTWFzcyArIHBhcmVudEIuaW52ZXJzZU1hc3MsXG4gICAgICAgICAgICBmcmljdGlvbjogTWF0aC5taW4ocGFyZW50QS5mcmljdGlvbiwgcGFyZW50Qi5mcmljdGlvbiksXG4gICAgICAgICAgICBmcmljdGlvblN0YXRpYzogTWF0aC5tYXgocGFyZW50QS5mcmljdGlvblN0YXRpYywgcGFyZW50Qi5mcmljdGlvblN0YXRpYyksXG4gICAgICAgICAgICByZXN0aXR1dGlvbjogTWF0aC5tYXgocGFyZW50QS5yZXN0aXR1dGlvbiwgcGFyZW50Qi5yZXN0aXR1dGlvbiksXG4gICAgICAgICAgICBzbG9wOiBNYXRoLm1heChwYXJlbnRBLnNsb3AsIHBhcmVudEIuc2xvcClcbiAgICAgICAgfTtcblxuICAgICAgICBQYWlyLnVwZGF0ZShwYWlyLCBjb2xsaXNpb24sIHRpbWVzdGFtcCk7XG5cbiAgICAgICAgcmV0dXJuIHBhaXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYSBwYWlyIGdpdmVuIGEgY29sbGlzaW9uLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtwYWlyfSBwYWlyXG4gICAgICogQHBhcmFtIHtjb2xsaXNpb259IGNvbGxpc2lvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBQYWlyLnVwZGF0ZSA9IGZ1bmN0aW9uKHBhaXIsIGNvbGxpc2lvbiwgdGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBjb250YWN0cyA9IHBhaXIuY29udGFjdHMsXG4gICAgICAgICAgICBzdXBwb3J0cyA9IGNvbGxpc2lvbi5zdXBwb3J0cyxcbiAgICAgICAgICAgIGFjdGl2ZUNvbnRhY3RzID0gcGFpci5hY3RpdmVDb250YWN0cyxcbiAgICAgICAgICAgIHBhcmVudEEgPSBjb2xsaXNpb24ucGFyZW50QSxcbiAgICAgICAgICAgIHBhcmVudEIgPSBjb2xsaXNpb24ucGFyZW50QjtcbiAgICAgICAgXG4gICAgICAgIHBhaXIuY29sbGlzaW9uID0gY29sbGlzaW9uO1xuICAgICAgICBwYWlyLmludmVyc2VNYXNzID0gcGFyZW50QS5pbnZlcnNlTWFzcyArIHBhcmVudEIuaW52ZXJzZU1hc3M7XG4gICAgICAgIHBhaXIuZnJpY3Rpb24gPSBNYXRoLm1pbihwYXJlbnRBLmZyaWN0aW9uLCBwYXJlbnRCLmZyaWN0aW9uKTtcbiAgICAgICAgcGFpci5mcmljdGlvblN0YXRpYyA9IE1hdGgubWF4KHBhcmVudEEuZnJpY3Rpb25TdGF0aWMsIHBhcmVudEIuZnJpY3Rpb25TdGF0aWMpO1xuICAgICAgICBwYWlyLnJlc3RpdHV0aW9uID0gTWF0aC5tYXgocGFyZW50QS5yZXN0aXR1dGlvbiwgcGFyZW50Qi5yZXN0aXR1dGlvbik7XG4gICAgICAgIHBhaXIuc2xvcCA9IE1hdGgubWF4KHBhcmVudEEuc2xvcCwgcGFyZW50Qi5zbG9wKTtcbiAgICAgICAgYWN0aXZlQ29udGFjdHMubGVuZ3RoID0gMDtcbiAgICAgICAgXG4gICAgICAgIGlmIChjb2xsaXNpb24uY29sbGlkZWQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VwcG9ydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VwcG9ydCA9IHN1cHBvcnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBjb250YWN0SWQgPSBDb250YWN0LmlkKHN1cHBvcnQpLFxuICAgICAgICAgICAgICAgICAgICBjb250YWN0ID0gY29udGFjdHNbY29udGFjdElkXTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250YWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUNvbnRhY3RzLnB1c2goY29udGFjdCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ29udGFjdHMucHVzaChjb250YWN0c1tjb250YWN0SWRdID0gQ29udGFjdC5jcmVhdGUoc3VwcG9ydCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFpci5zZXBhcmF0aW9uID0gY29sbGlzaW9uLmRlcHRoO1xuICAgICAgICAgICAgUGFpci5zZXRBY3RpdmUocGFpciwgdHJ1ZSwgdGltZXN0YW1wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwYWlyLmlzQWN0aXZlID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIFBhaXIuc2V0QWN0aXZlKHBhaXIsIGZhbHNlLCB0aW1lc3RhbXApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBTZXQgYSBwYWlyIGFzIGFjdGl2ZSBvciBpbmFjdGl2ZS5cbiAgICAgKiBAbWV0aG9kIHNldEFjdGl2ZVxuICAgICAqIEBwYXJhbSB7cGFpcn0gcGFpclxuICAgICAqIEBwYXJhbSB7Ym9vbH0gaXNBY3RpdmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wXG4gICAgICovXG4gICAgUGFpci5zZXRBY3RpdmUgPSBmdW5jdGlvbihwYWlyLCBpc0FjdGl2ZSwgdGltZXN0YW1wKSB7XG4gICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgcGFpci5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBwYWlyLnRpbWVVcGRhdGVkID0gdGltZXN0YW1wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFpci5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcGFpci5hY3RpdmVDb250YWN0cy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaWQgZm9yIHRoZSBnaXZlbiBwYWlyLlxuICAgICAqIEBtZXRob2QgaWRcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlBXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5QlxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gVW5pcXVlIHBhaXJJZFxuICAgICAqL1xuICAgIFBhaXIuaWQgPSBmdW5jdGlvbihib2R5QSwgYm9keUIpIHtcbiAgICAgICAgaWYgKGJvZHlBLmlkIDwgYm9keUIuaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAnQScgKyBib2R5QS5pZCArICdCJyArIGJvZHlCLmlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdBJyArIGJvZHlCLmlkICsgJ0InICsgYm9keUEuaWQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4vQ29udGFjdFwiOjR9XSw4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5QYWlyc2AgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgY29sbGlzaW9uIHBhaXIgc2V0cy5cbipcbiogQGNsYXNzIFBhaXJzXG4qL1xuXG52YXIgUGFpcnMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWlycztcblxudmFyIFBhaXIgPSBfZGVyZXFfKCcuL1BhaXInKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgUGFpcnMuX3BhaXJNYXhJZGxlTGlmZSA9IDEwMDA7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHBhaXJzIHN0cnVjdHVyZS5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7cGFpcnN9IEEgbmV3IHBhaXJzIHN0cnVjdHVyZVxuICAgICAqL1xuICAgIFBhaXJzLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5leHRlbmQoeyBcbiAgICAgICAgICAgIHRhYmxlOiB7fSxcbiAgICAgICAgICAgIGxpc3Q6IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uU3RhcnQ6IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uQWN0aXZlOiBbXSxcbiAgICAgICAgICAgIGNvbGxpc2lvbkVuZDogW11cbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgcGFpcnMgZ2l2ZW4gYSBsaXN0IG9mIGNvbGxpc2lvbnMuXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFpcnNcbiAgICAgKiBAcGFyYW0ge2NvbGxpc2lvbltdfSBjb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIFBhaXJzLnVwZGF0ZSA9IGZ1bmN0aW9uKHBhaXJzLCBjb2xsaXNpb25zLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIHBhaXJzTGlzdCA9IHBhaXJzLmxpc3QsXG4gICAgICAgICAgICBwYWlyc1RhYmxlID0gcGFpcnMudGFibGUsXG4gICAgICAgICAgICBjb2xsaXNpb25TdGFydCA9IHBhaXJzLmNvbGxpc2lvblN0YXJ0LFxuICAgICAgICAgICAgY29sbGlzaW9uRW5kID0gcGFpcnMuY29sbGlzaW9uRW5kLFxuICAgICAgICAgICAgY29sbGlzaW9uQWN0aXZlID0gcGFpcnMuY29sbGlzaW9uQWN0aXZlLFxuICAgICAgICAgICAgYWN0aXZlUGFpcklkcyA9IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgcGFpcklkLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gY2xlYXIgY29sbGlzaW9uIHN0YXRlIGFycmF5cywgYnV0IG1haW50YWluIG9sZCByZWZlcmVuY2VcbiAgICAgICAgY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcbiAgICAgICAgY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbGxpc2lvbkFjdGl2ZS5sZW5ndGggPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2xsaXNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb2xsaXNpb24gPSBjb2xsaXNpb25zW2ldO1xuXG4gICAgICAgICAgICBpZiAoY29sbGlzaW9uLmNvbGxpZGVkKSB7XG4gICAgICAgICAgICAgICAgcGFpcklkID0gUGFpci5pZChjb2xsaXNpb24uYm9keUEsIGNvbGxpc2lvbi5ib2R5Qik7XG4gICAgICAgICAgICAgICAgYWN0aXZlUGFpcklkcy5wdXNoKHBhaXJJZCk7XG5cbiAgICAgICAgICAgICAgICBwYWlyID0gcGFpcnNUYWJsZVtwYWlySWRdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChwYWlyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgYWxyZWFkeSBleGlzdHMgKGJ1dCBtYXkgb3IgbWF5IG5vdCBiZSBhY3RpdmUpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWlyLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwYWlyIGV4aXN0cyBhbmQgaXMgYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25BY3RpdmUucHVzaChwYWlyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgZXhpc3RzIGJ1dCB3YXMgaW5hY3RpdmUsIHNvIGEgY29sbGlzaW9uIGhhcyBqdXN0IHN0YXJ0ZWQgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvblN0YXJ0LnB1c2gocGFpcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHBhaXJcbiAgICAgICAgICAgICAgICAgICAgUGFpci51cGRhdGUocGFpciwgY29sbGlzaW9uLCB0aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgZGlkIG5vdCBleGlzdCwgY3JlYXRlIGEgbmV3IHBhaXJcbiAgICAgICAgICAgICAgICAgICAgcGFpciA9IFBhaXIuY3JlYXRlKGNvbGxpc2lvbiwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgcGFpcnNUYWJsZVtwYWlySWRdID0gcGFpcjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHRoZSBuZXcgcGFpclxuICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25TdGFydC5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgICAgICAgICBwYWlyc0xpc3QucHVzaChwYWlyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZWFjdGl2YXRlIHByZXZpb3VzbHkgYWN0aXZlIHBhaXJzIHRoYXQgYXJlIG5vdyBpbmFjdGl2ZVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNMaXN0W2ldO1xuICAgICAgICAgICAgaWYgKHBhaXIuaXNBY3RpdmUgJiYgQ29tbW9uLmluZGV4T2YoYWN0aXZlUGFpcklkcywgcGFpci5pZCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgUGFpci5zZXRBY3RpdmUocGFpciwgZmFsc2UsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uRW5kLnB1c2gocGFpcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFuZCByZW1vdmVzIHBhaXJzIHRoYXQgaGF2ZSBiZWVuIGluYWN0aXZlIGZvciBhIHNldCBhbW91bnQgb2YgdGltZS5cbiAgICAgKiBAbWV0aG9kIHJlbW92ZU9sZFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBQYWlycy5yZW1vdmVPbGQgPSBmdW5jdGlvbihwYWlycywgdGltZXN0YW1wKSB7XG4gICAgICAgIHZhciBwYWlyc0xpc3QgPSBwYWlycy5saXN0LFxuICAgICAgICAgICAgcGFpcnNUYWJsZSA9IHBhaXJzLnRhYmxlLFxuICAgICAgICAgICAgaW5kZXhlc1RvUmVtb3ZlID0gW10sXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgcGFpckluZGV4LFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNMaXN0W2ldO1xuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIG5ldmVyIHJlbW92ZSBzbGVlcGluZyBwYWlyc1xuICAgICAgICAgICAgaWYgKGNvbGxpc2lvbi5ib2R5QS5pc1NsZWVwaW5nIHx8IGNvbGxpc2lvbi5ib2R5Qi5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFpci50aW1lVXBkYXRlZCA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgcGFpciBpcyBpbmFjdGl2ZSBmb3IgdG9vIGxvbmcsIG1hcmsgaXQgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcCAtIHBhaXIudGltZVVwZGF0ZWQgPiBQYWlycy5fcGFpck1heElkbGVMaWZlKSB7XG4gICAgICAgICAgICAgICAgaW5kZXhlc1RvUmVtb3ZlLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgbWFya2VkIHBhaXJzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmRleGVzVG9SZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXJJbmRleCA9IGluZGV4ZXNUb1JlbW92ZVtpXSAtIGk7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNMaXN0W3BhaXJJbmRleF07XG4gICAgICAgICAgICBkZWxldGUgcGFpcnNUYWJsZVtwYWlyLmlkXTtcbiAgICAgICAgICAgIHBhaXJzTGlzdC5zcGxpY2UocGFpckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGdpdmVuIHBhaXJzIHN0cnVjdHVyZS5cbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtwYWlyc30gcGFpcnNcbiAgICAgKiBAcmV0dXJuIHtwYWlyc30gcGFpcnNcbiAgICAgKi9cbiAgICBQYWlycy5jbGVhciA9IGZ1bmN0aW9uKHBhaXJzKSB7XG4gICAgICAgIHBhaXJzLnRhYmxlID0ge307XG4gICAgICAgIHBhaXJzLmxpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgcGFpcnMuY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcbiAgICAgICAgcGFpcnMuY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA9IDA7XG4gICAgICAgIHBhaXJzLmNvbGxpc2lvbkVuZC5sZW5ndGggPSAwO1xuICAgICAgICByZXR1cm4gcGFpcnM7XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi9QYWlyXCI6N31dLDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlF1ZXJ5YCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgcGVyZm9ybWluZyBjb2xsaXNpb24gcXVlcmllcy5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIFF1ZXJ5XG4qL1xuXG52YXIgUXVlcnkgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBRdWVyeTtcblxudmFyIFZlY3RvciA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIFNBVCA9IF9kZXJlcV8oJy4vU0FUJyk7XG52YXIgQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG52YXIgQm9kaWVzID0gX2RlcmVxXygnLi4vZmFjdG9yeS9Cb2RpZXMnKTtcbnZhciBWZXJ0aWNlcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGNvbGxpc2lvbnMgYmV0d2VlbiBgYm9keWAgYW5kIGBib2RpZXNgLlxuICAgICAqIEBtZXRob2QgY29sbGlkZXNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHJldHVybiB7b2JqZWN0W119IENvbGxpc2lvbnNcbiAgICAgKi9cbiAgICBRdWVyeS5jb2xsaWRlcyA9IGZ1bmN0aW9uKGJvZHksIGJvZGllcykge1xuICAgICAgICB2YXIgY29sbGlzaW9ucyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keUEgPSBib2RpZXNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChCb3VuZHMub3ZlcmxhcHMoYm9keUEuYm91bmRzLCBib2R5LmJvdW5kcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gYm9keUEucGFydHMubGVuZ3RoID09PSAxID8gMCA6IDE7IGogPCBib2R5QS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHlBLnBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChCb3VuZHMub3ZlcmxhcHMocGFydC5ib3VuZHMsIGJvZHkuYm91bmRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxpc2lvbiA9IFNBVC5jb2xsaWRlcyhwYXJ0LCBib2R5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbi5jb2xsaWRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbnMucHVzaChjb2xsaXNpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbGxpc2lvbnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGEgcmF5IHNlZ21lbnQgYWdhaW5zdCBhIHNldCBvZiBib2RpZXMgYW5kIHJldHVybnMgYWxsIGNvbGxpc2lvbnMsIHJheSB3aWR0aCBpcyBvcHRpb25hbC4gSW50ZXJzZWN0aW9uIHBvaW50cyBhcmUgbm90IHByb3ZpZGVkLlxuICAgICAqIEBtZXRob2QgcmF5XG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBzdGFydFBvaW50XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IGVuZFBvaW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYXlXaWR0aF1cbiAgICAgKiBAcmV0dXJuIHtvYmplY3RbXX0gQ29sbGlzaW9uc1xuICAgICAqL1xuICAgIFF1ZXJ5LnJheSA9IGZ1bmN0aW9uKGJvZGllcywgc3RhcnRQb2ludCwgZW5kUG9pbnQsIHJheVdpZHRoKSB7XG4gICAgICAgIHJheVdpZHRoID0gcmF5V2lkdGggfHwgMWUtMTAwO1xuXG4gICAgICAgIHZhciByYXlBbmdsZSA9IFZlY3Rvci5hbmdsZShzdGFydFBvaW50LCBlbmRQb2ludCksXG4gICAgICAgICAgICByYXlMZW5ndGggPSBWZWN0b3IubWFnbml0dWRlKFZlY3Rvci5zdWIoc3RhcnRQb2ludCwgZW5kUG9pbnQpKSxcbiAgICAgICAgICAgIHJheVggPSAoZW5kUG9pbnQueCArIHN0YXJ0UG9pbnQueCkgKiAwLjUsXG4gICAgICAgICAgICByYXlZID0gKGVuZFBvaW50LnkgKyBzdGFydFBvaW50LnkpICogMC41LFxuICAgICAgICAgICAgcmF5ID0gQm9kaWVzLnJlY3RhbmdsZShyYXlYLCByYXlZLCByYXlMZW5ndGgsIHJheVdpZHRoLCB7IGFuZ2xlOiByYXlBbmdsZSB9KSxcbiAgICAgICAgICAgIGNvbGxpc2lvbnMgPSBRdWVyeS5jb2xsaWRlcyhyYXksIGJvZGllcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xsaXNpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gY29sbGlzaW9uc1tpXTtcbiAgICAgICAgICAgIGNvbGxpc2lvbi5ib2R5ID0gY29sbGlzaW9uLmJvZHlCID0gY29sbGlzaW9uLmJvZHlBOyAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbGxpc2lvbnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGJvZGllcyB3aG9zZSBib3VuZHMgYXJlIGluc2lkZSAob3Igb3V0c2lkZSBpZiBzZXQpIHRoZSBnaXZlbiBzZXQgb2YgYm91bmRzLCBmcm9tIHRoZSBnaXZlbiBzZXQgb2YgYm9kaWVzLlxuICAgICAqIEBtZXRob2QgcmVnaW9uXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtvdXRzaWRlPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge2JvZHlbXX0gVGhlIGJvZGllcyBtYXRjaGluZyB0aGUgcXVlcnlcbiAgICAgKi9cbiAgICBRdWVyeS5yZWdpb24gPSBmdW5jdGlvbihib2RpZXMsIGJvdW5kcywgb3V0c2lkZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIG92ZXJsYXBzID0gQm91bmRzLm92ZXJsYXBzKGJvZHkuYm91bmRzLCBib3VuZHMpO1xuICAgICAgICAgICAgaWYgKChvdmVybGFwcyAmJiAhb3V0c2lkZSkgfHwgKCFvdmVybGFwcyAmJiBvdXRzaWRlKSlcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChib2R5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGJvZGllcyB3aG9zZSB2ZXJ0aWNlcyBjb250YWluIHRoZSBnaXZlbiBwb2ludCwgZnJvbSB0aGUgZ2l2ZW4gc2V0IG9mIGJvZGllcy5cbiAgICAgKiBAbWV0aG9kIHBvaW50XG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEByZXR1cm4ge2JvZHlbXX0gVGhlIGJvZGllcyBtYXRjaGluZyB0aGUgcXVlcnlcbiAgICAgKi9cbiAgICBRdWVyeS5wb2ludCA9IGZ1bmN0aW9uKGJvZGllcywgcG9pbnQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKEJvdW5kcy5jb250YWlucyhib2R5LmJvdW5kcywgcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IGJvZHkucGFydHMubGVuZ3RoID09PSAxID8gMCA6IDE7IGogPCBib2R5LnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tqXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoQm91bmRzLmNvbnRhaW5zKHBhcnQuYm91bmRzLCBwb2ludClcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIFZlcnRpY2VzLmNvbnRhaW5zKHBhcnQudmVydGljZXMsIHBvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9mYWN0b3J5L0JvZGllc1wiOjIzLFwiLi4vZ2VvbWV0cnkvQm91bmRzXCI6MjYsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6MjksXCIuL1NBVFwiOjExfV0sMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlJlc29sdmVyYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgcmVzb2x2aW5nIGNvbGxpc2lvbiBwYWlycy5cbipcbiogQGNsYXNzIFJlc29sdmVyXG4qL1xuXG52YXIgUmVzb2x2ZXIgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXNvbHZlcjtcblxudmFyIFZlcnRpY2VzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICBSZXNvbHZlci5fcmVzdGluZ1RocmVzaCA9IDQ7XG4gICAgUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2hUYW5nZW50ID0gNjtcbiAgICBSZXNvbHZlci5fcG9zaXRpb25EYW1wZW4gPSAwLjk7XG4gICAgUmVzb2x2ZXIuX3Bvc2l0aW9uV2FybWluZyA9IDAuODtcbiAgICBSZXNvbHZlci5fZnJpY3Rpb25Ob3JtYWxNdWx0aXBsaWVyID0gNTtcblxuICAgIC8qKlxuICAgICAqIFByZXBhcmUgcGFpcnMgZm9yIHBvc2l0aW9uIHNvbHZpbmcuXG4gICAgICogQG1ldGhvZCBwcmVTb2x2ZVBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtwYWlyW119IHBhaXJzXG4gICAgICovXG4gICAgUmVzb2x2ZXIucHJlU29sdmVQb3NpdGlvbiA9IGZ1bmN0aW9uKHBhaXJzKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGFjdGl2ZUNvdW50O1xuXG4gICAgICAgIC8vIGZpbmQgdG90YWwgY29udGFjdHMgb24gZWFjaCBib2R5XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpciA9IHBhaXJzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFjdGl2ZUNvdW50ID0gcGFpci5hY3RpdmVDb250YWN0cy5sZW5ndGg7XG4gICAgICAgICAgICBwYWlyLmNvbGxpc2lvbi5wYXJlbnRBLnRvdGFsQ29udGFjdHMgKz0gYWN0aXZlQ291bnQ7XG4gICAgICAgICAgICBwYWlyLmNvbGxpc2lvbi5wYXJlbnRCLnRvdGFsQ29udGFjdHMgKz0gYWN0aXZlQ291bnQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmluZCBhIHNvbHV0aW9uIGZvciBwYWlyIHBvc2l0aW9ucy5cbiAgICAgKiBAbWV0aG9kIHNvbHZlUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNjYWxlXG4gICAgICovXG4gICAgUmVzb2x2ZXIuc29sdmVQb3NpdGlvbiA9IGZ1bmN0aW9uKHBhaXJzLCB0aW1lU2NhbGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIG5vcm1hbCxcbiAgICAgICAgICAgIGJvZHlCdG9BLFxuICAgICAgICAgICAgY29udGFjdFNoYXJlLFxuICAgICAgICAgICAgcG9zaXRpb25JbXB1bHNlLFxuICAgICAgICAgICAgY29udGFjdENvdW50ID0ge30sXG4gICAgICAgICAgICB0ZW1wQSA9IFZlY3Rvci5fdGVtcFswXSxcbiAgICAgICAgICAgIHRlbXBCID0gVmVjdG9yLl90ZW1wWzFdLFxuICAgICAgICAgICAgdGVtcEMgPSBWZWN0b3IuX3RlbXBbMl0sXG4gICAgICAgICAgICB0ZW1wRCA9IFZlY3Rvci5fdGVtcFszXTtcblxuICAgICAgICAvLyBmaW5kIGltcHVsc2VzIHJlcXVpcmVkIHRvIHJlc29sdmUgcGVuZXRyYXRpb25cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSB8fCBwYWlyLmlzU2Vuc29yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIGJvZHlBID0gY29sbGlzaW9uLnBhcmVudEE7XG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCO1xuICAgICAgICAgICAgbm9ybWFsID0gY29sbGlzaW9uLm5vcm1hbDtcblxuICAgICAgICAgICAgLy8gZ2V0IGN1cnJlbnQgc2VwYXJhdGlvbiBiZXR3ZWVuIGJvZHkgZWRnZXMgaW52b2x2ZWQgaW4gY29sbGlzaW9uXG4gICAgICAgICAgICBib2R5QnRvQSA9IFZlY3Rvci5zdWIoVmVjdG9yLmFkZChib2R5Qi5wb3NpdGlvbkltcHVsc2UsIGJvZHlCLnBvc2l0aW9uLCB0ZW1wQSksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yLmFkZChib2R5QS5wb3NpdGlvbkltcHVsc2UsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlY3Rvci5zdWIoYm9keUIucG9zaXRpb24sIGNvbGxpc2lvbi5wZW5ldHJhdGlvbiwgdGVtcEIpLCB0ZW1wQyksIHRlbXBEKTtcblxuICAgICAgICAgICAgcGFpci5zZXBhcmF0aW9uID0gVmVjdG9yLmRvdChub3JtYWwsIGJvZHlCdG9BKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSB8fCBwYWlyLmlzU2Vuc29yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIGJvZHlBID0gY29sbGlzaW9uLnBhcmVudEE7XG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCO1xuICAgICAgICAgICAgbm9ybWFsID0gY29sbGlzaW9uLm5vcm1hbDtcbiAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZSA9IChwYWlyLnNlcGFyYXRpb24gLSBwYWlyLnNsb3ApICogdGltZVNjYWxlO1xuXG4gICAgICAgICAgICBpZiAoYm9keUEuaXNTdGF0aWMgfHwgYm9keUIuaXNTdGF0aWMpXG4gICAgICAgICAgICAgICAgcG9zaXRpb25JbXB1bHNlICo9IDI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghKGJvZHlBLmlzU3RhdGljIHx8IGJvZHlBLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgY29udGFjdFNoYXJlID0gUmVzb2x2ZXIuX3Bvc2l0aW9uRGFtcGVuIC8gYm9keUEudG90YWxDb250YWN0cztcbiAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvbkltcHVsc2UueCArPSBub3JtYWwueCAqIHBvc2l0aW9uSW1wdWxzZSAqIGNvbnRhY3RTaGFyZTtcbiAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvbkltcHVsc2UueSArPSBub3JtYWwueSAqIHBvc2l0aW9uSW1wdWxzZSAqIGNvbnRhY3RTaGFyZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEoYm9keUIuaXNTdGF0aWMgfHwgYm9keUIuaXNTbGVlcGluZykpIHtcbiAgICAgICAgICAgICAgICBjb250YWN0U2hhcmUgPSBSZXNvbHZlci5fcG9zaXRpb25EYW1wZW4gLyBib2R5Qi50b3RhbENvbnRhY3RzO1xuICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uSW1wdWxzZS54IC09IG5vcm1hbC54ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uSW1wdWxzZS55IC09IG5vcm1hbC55ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHBvc2l0aW9uIHJlc29sdXRpb24uXG4gICAgICogQG1ldGhvZCBwb3N0U29sdmVQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKi9cbiAgICBSZXNvbHZlci5wb3N0U29sdmVQb3NpdGlvbiA9IGZ1bmN0aW9uKGJvZGllcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIC8vIHJlc2V0IGNvbnRhY3QgY291bnRcbiAgICAgICAgICAgIGJvZHkudG90YWxDb250YWN0cyA9IDA7XG5cbiAgICAgICAgICAgIGlmIChib2R5LnBvc2l0aW9uSW1wdWxzZS54ICE9PSAwIHx8IGJvZHkucG9zaXRpb25JbXB1bHNlLnkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgYm9keSBnZW9tZXRyeVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbal07XG4gICAgICAgICAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCBib2R5LnBvc2l0aW9uSW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnggKz0gYm9keS5wb3NpdGlvbkltcHVsc2UueDtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi55ICs9IGJvZHkucG9zaXRpb25JbXB1bHNlLnk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbW92ZSB0aGUgYm9keSB3aXRob3V0IGNoYW5naW5nIHZlbG9jaXR5XG4gICAgICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCArPSBib2R5LnBvc2l0aW9uSW1wdWxzZS54O1xuICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgKz0gYm9keS5wb3NpdGlvbkltcHVsc2UueTtcblxuICAgICAgICAgICAgICAgIGlmIChWZWN0b3IuZG90KGJvZHkucG9zaXRpb25JbXB1bHNlLCBib2R5LnZlbG9jaXR5KSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgY2FjaGVkIGltcHVsc2UgaWYgdGhlIGJvZHkgaGFzIHZlbG9jaXR5IGFsb25nIGl0XG4gICAgICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnggPSAwO1xuICAgICAgICAgICAgICAgICAgICBib2R5LnBvc2l0aW9uSW1wdWxzZS55ID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB3YXJtIHRoZSBuZXh0IGl0ZXJhdGlvblxuICAgICAgICAgICAgICAgICAgICBib2R5LnBvc2l0aW9uSW1wdWxzZS54ICo9IFJlc29sdmVyLl9wb3NpdGlvbldhcm1pbmc7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnkgKj0gUmVzb2x2ZXIuX3Bvc2l0aW9uV2FybWluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBwYWlycyBmb3IgdmVsb2NpdHkgc29sdmluZy5cbiAgICAgKiBAbWV0aG9kIHByZVNvbHZlVmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKi9cbiAgICBSZXNvbHZlci5wcmVTb2x2ZVZlbG9jaXR5ID0gZnVuY3Rpb24ocGFpcnMpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGNvbnRhY3RzLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIG5vcm1hbCxcbiAgICAgICAgICAgIHRhbmdlbnQsXG4gICAgICAgICAgICBjb250YWN0LFxuICAgICAgICAgICAgY29udGFjdFZlcnRleCxcbiAgICAgICAgICAgIG5vcm1hbEltcHVsc2UsXG4gICAgICAgICAgICB0YW5nZW50SW1wdWxzZSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIGltcHVsc2UgPSBWZWN0b3IuX3RlbXBbMF0sXG4gICAgICAgICAgICB0ZW1wQSA9IFZlY3Rvci5fdGVtcFsxXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpciA9IHBhaXJzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUgfHwgcGFpci5pc1NlbnNvcilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udGFjdHMgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzO1xuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5wYXJlbnRBO1xuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24ucGFyZW50QjtcbiAgICAgICAgICAgIG5vcm1hbCA9IGNvbGxpc2lvbi5ub3JtYWw7XG4gICAgICAgICAgICB0YW5nZW50ID0gY29sbGlzaW9uLnRhbmdlbnQ7XG5cbiAgICAgICAgICAgIC8vIHJlc29sdmUgZWFjaCBjb250YWN0XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29udGFjdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb250YWN0ID0gY29udGFjdHNbal07XG4gICAgICAgICAgICAgICAgY29udGFjdFZlcnRleCA9IGNvbnRhY3QudmVydGV4O1xuICAgICAgICAgICAgICAgIG5vcm1hbEltcHVsc2UgPSBjb250YWN0Lm5vcm1hbEltcHVsc2U7XG4gICAgICAgICAgICAgICAgdGFuZ2VudEltcHVsc2UgPSBjb250YWN0LnRhbmdlbnRJbXB1bHNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbEltcHVsc2UgIT09IDAgfHwgdGFuZ2VudEltcHVsc2UgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdG90YWwgaW1wdWxzZSBmcm9tIGNvbnRhY3RcbiAgICAgICAgICAgICAgICAgICAgaW1wdWxzZS54ID0gKG5vcm1hbC54ICogbm9ybWFsSW1wdWxzZSkgKyAodGFuZ2VudC54ICogdGFuZ2VudEltcHVsc2UpO1xuICAgICAgICAgICAgICAgICAgICBpbXB1bHNlLnkgPSAobm9ybWFsLnkgKiBub3JtYWxJbXB1bHNlKSArICh0YW5nZW50LnkgKiB0YW5nZW50SW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhcHBseSBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIShib2R5QS5pc1N0YXRpYyB8fCBib2R5QS5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gVmVjdG9yLnN1Yihjb250YWN0VmVydGV4LCBib2R5QS5wb3NpdGlvbiwgdGVtcEEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnggKz0gaW1wdWxzZS54ICogYm9keUEuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueSArPSBpbXB1bHNlLnkgKiBib2R5QS5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlBLmFuZ2xlUHJldiArPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0LCBpbXB1bHNlKSAqIGJvZHlBLmludmVyc2VJbmVydGlhO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYm9keUIuaXNTdGF0aWMgfHwgYm9keUIuaXNTbGVlcGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IFZlY3Rvci5zdWIoY29udGFjdFZlcnRleCwgYm9keUIucG9zaXRpb24sIHRlbXBBKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi54IC09IGltcHVsc2UueCAqIGJvZHlCLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25QcmV2LnkgLT0gaW1wdWxzZS55ICogYm9keUIuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5Qi5hbmdsZVByZXYgLT0gVmVjdG9yLmNyb3NzKG9mZnNldCwgaW1wdWxzZSkgKiBib2R5Qi5pbnZlcnNlSW5lcnRpYTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgc29sdXRpb24gZm9yIHBhaXIgdmVsb2NpdGllcy5cbiAgICAgKiBAbWV0aG9kIHNvbHZlVmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVNjYWxlXG4gICAgICovXG4gICAgUmVzb2x2ZXIuc29sdmVWZWxvY2l0eSA9IGZ1bmN0aW9uKHBhaXJzLCB0aW1lU2NhbGUpIHtcbiAgICAgICAgdmFyIHRpbWVTY2FsZVNxdWFyZWQgPSB0aW1lU2NhbGUgKiB0aW1lU2NhbGUsXG4gICAgICAgICAgICBpbXB1bHNlID0gVmVjdG9yLl90ZW1wWzBdLFxuICAgICAgICAgICAgdGVtcEEgPSBWZWN0b3IuX3RlbXBbMV0sXG4gICAgICAgICAgICB0ZW1wQiA9IFZlY3Rvci5fdGVtcFsyXSxcbiAgICAgICAgICAgIHRlbXBDID0gVmVjdG9yLl90ZW1wWzNdLFxuICAgICAgICAgICAgdGVtcEQgPSBWZWN0b3IuX3RlbXBbNF0sXG4gICAgICAgICAgICB0ZW1wRSA9IFZlY3Rvci5fdGVtcFs1XTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSB8fCBwYWlyLmlzU2Vuc29yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb24sXG4gICAgICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24ucGFyZW50QSxcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCLFxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IGNvbGxpc2lvbi5ub3JtYWwsXG4gICAgICAgICAgICAgICAgdGFuZ2VudCA9IGNvbGxpc2lvbi50YW5nZW50LFxuICAgICAgICAgICAgICAgIGNvbnRhY3RzID0gcGFpci5hY3RpdmVDb250YWN0cyxcbiAgICAgICAgICAgICAgICBjb250YWN0U2hhcmUgPSAxIC8gY29udGFjdHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgYm9keSB2ZWxvY2l0aWVzXG4gICAgICAgICAgICBib2R5QS52ZWxvY2l0eS54ID0gYm9keUEucG9zaXRpb24ueCAtIGJvZHlBLnBvc2l0aW9uUHJldi54O1xuICAgICAgICAgICAgYm9keUEudmVsb2NpdHkueSA9IGJvZHlBLnBvc2l0aW9uLnkgLSBib2R5QS5wb3NpdGlvblByZXYueTtcbiAgICAgICAgICAgIGJvZHlCLnZlbG9jaXR5LnggPSBib2R5Qi5wb3NpdGlvbi54IC0gYm9keUIucG9zaXRpb25QcmV2Lng7XG4gICAgICAgICAgICBib2R5Qi52ZWxvY2l0eS55ID0gYm9keUIucG9zaXRpb24ueSAtIGJvZHlCLnBvc2l0aW9uUHJldi55O1xuICAgICAgICAgICAgYm9keUEuYW5ndWxhclZlbG9jaXR5ID0gYm9keUEuYW5nbGUgLSBib2R5QS5hbmdsZVByZXY7XG4gICAgICAgICAgICBib2R5Qi5hbmd1bGFyVmVsb2NpdHkgPSBib2R5Qi5hbmdsZSAtIGJvZHlCLmFuZ2xlUHJldjtcblxuICAgICAgICAgICAgLy8gcmVzb2x2ZSBlYWNoIGNvbnRhY3RcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29udGFjdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFjdCA9IGNvbnRhY3RzW2pdLFxuICAgICAgICAgICAgICAgICAgICBjb250YWN0VmVydGV4ID0gY29udGFjdC52ZXJ0ZXgsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldEEgPSBWZWN0b3Iuc3ViKGNvbnRhY3RWZXJ0ZXgsIGJvZHlBLnBvc2l0aW9uLCB0ZW1wQSksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldEIgPSBWZWN0b3Iuc3ViKGNvbnRhY3RWZXJ0ZXgsIGJvZHlCLnBvc2l0aW9uLCB0ZW1wQiksXG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5UG9pbnRBID0gVmVjdG9yLmFkZChib2R5QS52ZWxvY2l0eSwgVmVjdG9yLm11bHQoVmVjdG9yLnBlcnAob2Zmc2V0QSksIGJvZHlBLmFuZ3VsYXJWZWxvY2l0eSksIHRlbXBDKSxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHlQb2ludEIgPSBWZWN0b3IuYWRkKGJvZHlCLnZlbG9jaXR5LCBWZWN0b3IubXVsdChWZWN0b3IucGVycChvZmZzZXRCKSwgYm9keUIuYW5ndWxhclZlbG9jaXR5KSwgdGVtcEQpLCBcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVWZWxvY2l0eSA9IFZlY3Rvci5zdWIodmVsb2NpdHlQb2ludEEsIHZlbG9jaXR5UG9pbnRCLCB0ZW1wRSksXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFZlbG9jaXR5ID0gVmVjdG9yLmRvdChub3JtYWwsIHJlbGF0aXZlVmVsb2NpdHkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhbmdlbnRWZWxvY2l0eSA9IFZlY3Rvci5kb3QodGFuZ2VudCwgcmVsYXRpdmVWZWxvY2l0eSksXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRTcGVlZCA9IE1hdGguYWJzKHRhbmdlbnRWZWxvY2l0eSksXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRWZWxvY2l0eURpcmVjdGlvbiA9IENvbW1vbi5zaWduKHRhbmdlbnRWZWxvY2l0eSk7XG5cbiAgICAgICAgICAgICAgICAvLyByYXcgaW1wdWxzZXNcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsSW1wdWxzZSA9ICgxICsgcGFpci5yZXN0aXR1dGlvbikgKiBub3JtYWxWZWxvY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsRm9yY2UgPSBDb21tb24uY2xhbXAocGFpci5zZXBhcmF0aW9uICsgbm9ybWFsVmVsb2NpdHksIDAsIDEpICogUmVzb2x2ZXIuX2ZyaWN0aW9uTm9ybWFsTXVsdGlwbGllcjtcblxuICAgICAgICAgICAgICAgIC8vIGNvdWxvbWIgZnJpY3Rpb25cbiAgICAgICAgICAgICAgICB2YXIgdGFuZ2VudEltcHVsc2UgPSB0YW5nZW50VmVsb2NpdHksXG4gICAgICAgICAgICAgICAgICAgIG1heEZyaWN0aW9uID0gSW5maW5pdHk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGFuZ2VudFNwZWVkID4gcGFpci5mcmljdGlvbiAqIHBhaXIuZnJpY3Rpb25TdGF0aWMgKiBub3JtYWxGb3JjZSAqIHRpbWVTY2FsZVNxdWFyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4RnJpY3Rpb24gPSB0YW5nZW50U3BlZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gQ29tbW9uLmNsYW1wKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFpci5mcmljdGlvbiAqIHRhbmdlbnRWZWxvY2l0eURpcmVjdGlvbiAqIHRpbWVTY2FsZVNxdWFyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAtbWF4RnJpY3Rpb24sIG1heEZyaWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbW9kaWZ5IGltcHVsc2VzIGFjY291bnRpbmcgZm9yIG1hc3MsIGluZXJ0aWEgYW5kIG9mZnNldFxuICAgICAgICAgICAgICAgIHZhciBvQWNOID0gVmVjdG9yLmNyb3NzKG9mZnNldEEsIG5vcm1hbCksXG4gICAgICAgICAgICAgICAgICAgIG9CY04gPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0Qiwgbm9ybWFsKSxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmUgPSBjb250YWN0U2hhcmUgLyAoYm9keUEuaW52ZXJzZU1hc3MgKyBib2R5Qi5pbnZlcnNlTWFzcyArIGJvZHlBLmludmVyc2VJbmVydGlhICogb0FjTiAqIG9BY04gICsgYm9keUIuaW52ZXJzZUluZXJ0aWEgKiBvQmNOICogb0JjTik7XG5cbiAgICAgICAgICAgICAgICBub3JtYWxJbXB1bHNlICo9IHNoYXJlO1xuICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlICo9IHNoYXJlO1xuXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGhpZ2ggdmVsb2NpdHkgYW5kIHJlc3RpbmcgY29sbGlzaW9ucyBzZXBhcmF0ZWx5XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbFZlbG9jaXR5IDwgMCAmJiBub3JtYWxWZWxvY2l0eSAqIG5vcm1hbFZlbG9jaXR5ID4gUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2ggKiB0aW1lU2NhbGVTcXVhcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZ2ggbm9ybWFsIHZlbG9jaXR5IHNvIGNsZWFyIGNhY2hlZCBjb250YWN0IG5vcm1hbCBpbXB1bHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3Qubm9ybWFsSW1wdWxzZSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc29sdmUgcmVzdGluZyBjb2xsaXNpb24gY29uc3RyYWludHMgdXNpbmcgRXJpbiBDYXR0bydzIG1ldGhvZCAoR0RDMDgpXG4gICAgICAgICAgICAgICAgICAgIC8vIGltcHVsc2UgY29uc3RyYWludCB0ZW5kcyB0byAwXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0Tm9ybWFsSW1wdWxzZSA9IGNvbnRhY3Qubm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5ub3JtYWxJbXB1bHNlID0gTWF0aC5taW4oY29udGFjdC5ub3JtYWxJbXB1bHNlICsgbm9ybWFsSW1wdWxzZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbEltcHVsc2UgPSBjb250YWN0Lm5vcm1hbEltcHVsc2UgLSBjb250YWN0Tm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgaGlnaCB2ZWxvY2l0eSBhbmQgcmVzdGluZyBjb2xsaXNpb25zIHNlcGFyYXRlbHlcbiAgICAgICAgICAgICAgICBpZiAodGFuZ2VudFZlbG9jaXR5ICogdGFuZ2VudFZlbG9jaXR5ID4gUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2hUYW5nZW50ICogdGltZVNjYWxlU3F1YXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBoaWdoIHRhbmdlbnQgdmVsb2NpdHkgc28gY2xlYXIgY2FjaGVkIGNvbnRhY3QgdGFuZ2VudCBpbXB1bHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QudGFuZ2VudEltcHVsc2UgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNvbHZlIHJlc3RpbmcgY29sbGlzaW9uIGNvbnN0cmFpbnRzIHVzaW5nIEVyaW4gQ2F0dG8ncyBtZXRob2QgKEdEQzA4KVxuICAgICAgICAgICAgICAgICAgICAvLyB0YW5nZW50IGltcHVsc2UgdGVuZHMgdG8gLXRhbmdlbnRTcGVlZCBvciArdGFuZ2VudFNwZWVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250YWN0VGFuZ2VudEltcHVsc2UgPSBjb250YWN0LnRhbmdlbnRJbXB1bHNlO1xuICAgICAgICAgICAgICAgICAgICBjb250YWN0LnRhbmdlbnRJbXB1bHNlID0gQ29tbW9uLmNsYW1wKGNvbnRhY3QudGFuZ2VudEltcHVsc2UgKyB0YW5nZW50SW1wdWxzZSwgLW1heEZyaWN0aW9uLCBtYXhGcmljdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gY29udGFjdC50YW5nZW50SW1wdWxzZSAtIGNvbnRhY3RUYW5nZW50SW1wdWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0b3RhbCBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgIGltcHVsc2UueCA9IChub3JtYWwueCAqIG5vcm1hbEltcHVsc2UpICsgKHRhbmdlbnQueCAqIHRhbmdlbnRJbXB1bHNlKTtcbiAgICAgICAgICAgICAgICBpbXB1bHNlLnkgPSAobm9ybWFsLnkgKiBub3JtYWxJbXB1bHNlKSArICh0YW5nZW50LnkgKiB0YW5nZW50SW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gYXBwbHkgaW1wdWxzZSBmcm9tIGNvbnRhY3RcbiAgICAgICAgICAgICAgICBpZiAoIShib2R5QS5pc1N0YXRpYyB8fCBib2R5QS5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueCArPSBpbXB1bHNlLnggKiBib2R5QS5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnkgKz0gaW1wdWxzZS55ICogYm9keUEuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlBLmFuZ2xlUHJldiArPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0QSwgaW1wdWxzZSkgKiBib2R5QS5pbnZlcnNlSW5lcnRpYTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIShib2R5Qi5pc1N0YXRpYyB8fCBib2R5Qi5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvblByZXYueCAtPSBpbXB1bHNlLnggKiBib2R5Qi5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25QcmV2LnkgLT0gaW1wdWxzZS55ICogYm9keUIuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlCLmFuZ2xlUHJldiAtPSBWZWN0b3IuY3Jvc3Mob2Zmc2V0QiwgaW1wdWxzZSkgKiBib2R5Qi5pbnZlcnNlSW5lcnRpYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOX1dLDExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5TQVRgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBkZXRlY3RpbmcgY29sbGlzaW9ucyB1c2luZyB0aGUgU2VwYXJhdGluZyBBeGlzIFRoZW9yZW0uXG4qXG4qIEBjbGFzcyBTQVRcbiovXG5cbi8vIFRPRE86IHRydWUgY2lyY2xlcyBhbmQgY3VydmVzXG5cbnZhciBTQVQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBTQVQ7XG5cbnZhciBWZXJ0aWNlcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG52YXIgVmVjdG9yID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIERldGVjdCBjb2xsaXNpb24gYmV0d2VlbiB0d28gYm9kaWVzIHVzaW5nIHRoZSBTZXBhcmF0aW5nIEF4aXMgVGhlb3JlbS5cbiAgICAgKiBAbWV0aG9kIGNvbGxpZGVzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5QVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUJcbiAgICAgKiBAcGFyYW0ge2NvbGxpc2lvbn0gcHJldmlvdXNDb2xsaXNpb25cbiAgICAgKiBAcmV0dXJuIHtjb2xsaXNpb259IGNvbGxpc2lvblxuICAgICAqL1xuICAgIFNBVC5jb2xsaWRlcyA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5QiwgcHJldmlvdXNDb2xsaXNpb24pIHtcbiAgICAgICAgdmFyIG92ZXJsYXBBQixcbiAgICAgICAgICAgIG92ZXJsYXBCQSwgXG4gICAgICAgICAgICBtaW5PdmVybGFwLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgY2FuUmV1c2VQcmV2Q29sID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHByZXZpb3VzQ29sbGlzaW9uKSB7XG4gICAgICAgICAgICAvLyBlc3RpbWF0ZSB0b3RhbCBtb3Rpb25cbiAgICAgICAgICAgIHZhciBwYXJlbnRBID0gYm9keUEucGFyZW50LFxuICAgICAgICAgICAgICAgIHBhcmVudEIgPSBib2R5Qi5wYXJlbnQsXG4gICAgICAgICAgICAgICAgbW90aW9uID0gcGFyZW50QS5zcGVlZCAqIHBhcmVudEEuc3BlZWQgKyBwYXJlbnRBLmFuZ3VsYXJTcGVlZCAqIHBhcmVudEEuYW5ndWxhclNwZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICsgcGFyZW50Qi5zcGVlZCAqIHBhcmVudEIuc3BlZWQgKyBwYXJlbnRCLmFuZ3VsYXJTcGVlZCAqIHBhcmVudEIuYW5ndWxhclNwZWVkO1xuXG4gICAgICAgICAgICAvLyB3ZSBtYXkgYmUgYWJsZSB0byAocGFydGlhbGx5KSByZXVzZSBjb2xsaXNpb24gcmVzdWx0IFxuICAgICAgICAgICAgLy8gYnV0IG9ubHkgc2FmZSBpZiBjb2xsaXNpb24gd2FzIHJlc3RpbmdcbiAgICAgICAgICAgIGNhblJldXNlUHJldkNvbCA9IHByZXZpb3VzQ29sbGlzaW9uICYmIHByZXZpb3VzQ29sbGlzaW9uLmNvbGxpZGVkICYmIG1vdGlvbiA8IDAuMjtcblxuICAgICAgICAgICAgLy8gcmV1c2UgY29sbGlzaW9uIG9iamVjdFxuICAgICAgICAgICAgY29sbGlzaW9uID0gcHJldmlvdXNDb2xsaXNpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2xsaXNpb24gPSB7IGNvbGxpZGVkOiBmYWxzZSwgYm9keUE6IGJvZHlBLCBib2R5QjogYm9keUIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2aW91c0NvbGxpc2lvbiAmJiBjYW5SZXVzZVByZXZDb2wpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGNhbiByZXVzZSB0aGUgY29sbGlzaW9uIHJlc3VsdFxuICAgICAgICAgICAgLy8gd2Ugb25seSBuZWVkIHRvIHRlc3QgdGhlIHByZXZpb3VzbHkgZm91bmQgYXhpc1xuICAgICAgICAgICAgdmFyIGF4aXNCb2R5QSA9IGNvbGxpc2lvbi5heGlzQm9keSxcbiAgICAgICAgICAgICAgICBheGlzQm9keUIgPSBheGlzQm9keUEgPT09IGJvZHlBID8gYm9keUIgOiBib2R5QSxcbiAgICAgICAgICAgICAgICBheGVzID0gW2F4aXNCb2R5QS5heGVzW3ByZXZpb3VzQ29sbGlzaW9uLmF4aXNOdW1iZXJdXTtcblxuICAgICAgICAgICAgbWluT3ZlcmxhcCA9IFNBVC5fb3ZlcmxhcEF4ZXMoYXhpc0JvZHlBLnZlcnRpY2VzLCBheGlzQm9keUIudmVydGljZXMsIGF4ZXMpO1xuICAgICAgICAgICAgY29sbGlzaW9uLnJldXNlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChtaW5PdmVybGFwLm92ZXJsYXAgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNvbGxpc2lvbi5jb2xsaWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsaXNpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBjYW4ndCByZXVzZSBhIHJlc3VsdCwgcGVyZm9ybSBhIGZ1bGwgU0FUIHRlc3RcblxuICAgICAgICAgICAgb3ZlcmxhcEFCID0gU0FULl9vdmVybGFwQXhlcyhib2R5QS52ZXJ0aWNlcywgYm9keUIudmVydGljZXMsIGJvZHlBLmF4ZXMpO1xuXG4gICAgICAgICAgICBpZiAob3ZlcmxhcEFCLm92ZXJsYXAgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNvbGxpc2lvbi5jb2xsaWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2xsaXNpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG92ZXJsYXBCQSA9IFNBVC5fb3ZlcmxhcEF4ZXMoYm9keUIudmVydGljZXMsIGJvZHlBLnZlcnRpY2VzLCBib2R5Qi5heGVzKTtcblxuICAgICAgICAgICAgaWYgKG92ZXJsYXBCQS5vdmVybGFwIDw9IDApIHtcbiAgICAgICAgICAgICAgICBjb2xsaXNpb24uY29sbGlkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sbGlzaW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3ZlcmxhcEFCLm92ZXJsYXAgPCBvdmVybGFwQkEub3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIG1pbk92ZXJsYXAgPSBvdmVybGFwQUI7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmF4aXNCb2R5ID0gYm9keUE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pbk92ZXJsYXAgPSBvdmVybGFwQkE7XG4gICAgICAgICAgICAgICAgY29sbGlzaW9uLmF4aXNCb2R5ID0gYm9keUI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGltcG9ydGFudCBmb3IgcmV1c2UgbGF0ZXJcbiAgICAgICAgICAgIGNvbGxpc2lvbi5heGlzTnVtYmVyID0gbWluT3ZlcmxhcC5heGlzTnVtYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgY29sbGlzaW9uLmJvZHlBID0gYm9keUEuaWQgPCBib2R5Qi5pZCA/IGJvZHlBIDogYm9keUI7XG4gICAgICAgIGNvbGxpc2lvbi5ib2R5QiA9IGJvZHlBLmlkIDwgYm9keUIuaWQgPyBib2R5QiA6IGJvZHlBO1xuICAgICAgICBjb2xsaXNpb24uY29sbGlkZWQgPSB0cnVlO1xuICAgICAgICBjb2xsaXNpb24uZGVwdGggPSBtaW5PdmVybGFwLm92ZXJsYXA7XG4gICAgICAgIGNvbGxpc2lvbi5wYXJlbnRBID0gY29sbGlzaW9uLmJvZHlBLnBhcmVudDtcbiAgICAgICAgY29sbGlzaW9uLnBhcmVudEIgPSBjb2xsaXNpb24uYm9keUIucGFyZW50O1xuICAgICAgICBcbiAgICAgICAgYm9keUEgPSBjb2xsaXNpb24uYm9keUE7XG4gICAgICAgIGJvZHlCID0gY29sbGlzaW9uLmJvZHlCO1xuXG4gICAgICAgIC8vIGVuc3VyZSBub3JtYWwgaXMgZmFjaW5nIGF3YXkgZnJvbSBib2R5QVxuICAgICAgICBpZiAoVmVjdG9yLmRvdChtaW5PdmVybGFwLmF4aXMsIFZlY3Rvci5zdWIoYm9keUIucG9zaXRpb24sIGJvZHlBLnBvc2l0aW9uKSkgPCAwKSB7XG4gICAgICAgICAgICBjb2xsaXNpb24ubm9ybWFsID0ge1xuICAgICAgICAgICAgICAgIHg6IG1pbk92ZXJsYXAuYXhpcy54LFxuICAgICAgICAgICAgICAgIHk6IG1pbk92ZXJsYXAuYXhpcy55XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sbGlzaW9uLm5vcm1hbCA9IHtcbiAgICAgICAgICAgICAgICB4OiAtbWluT3ZlcmxhcC5heGlzLngsXG4gICAgICAgICAgICAgICAgeTogLW1pbk92ZXJsYXAuYXhpcy55XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29sbGlzaW9uLnRhbmdlbnQgPSBWZWN0b3IucGVycChjb2xsaXNpb24ubm9ybWFsKTtcblxuICAgICAgICBjb2xsaXNpb24ucGVuZXRyYXRpb24gPSBjb2xsaXNpb24ucGVuZXRyYXRpb24gfHwge307XG4gICAgICAgIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi54ID0gY29sbGlzaW9uLm5vcm1hbC54ICogY29sbGlzaW9uLmRlcHRoO1xuICAgICAgICBjb2xsaXNpb24ucGVuZXRyYXRpb24ueSA9IGNvbGxpc2lvbi5ub3JtYWwueSAqIGNvbGxpc2lvbi5kZXB0aDsgXG5cbiAgICAgICAgLy8gZmluZCBzdXBwb3J0IHBvaW50cywgdGhlcmUgaXMgYWx3YXlzIGVpdGhlciBleGFjdGx5IG9uZSBvciB0d29cbiAgICAgICAgdmFyIHZlcnRpY2VzQiA9IFNBVC5fZmluZFN1cHBvcnRzKGJvZHlBLCBib2R5QiwgY29sbGlzaW9uLm5vcm1hbCksXG4gICAgICAgICAgICBzdXBwb3J0cyA9IFtdO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIHN1cHBvcnRzIGZyb20gYm9keUIgdGhhdCBhcmUgaW5zaWRlIGJvZHlBXG4gICAgICAgIGlmIChWZXJ0aWNlcy5jb250YWlucyhib2R5QS52ZXJ0aWNlcywgdmVydGljZXNCWzBdKSlcbiAgICAgICAgICAgIHN1cHBvcnRzLnB1c2godmVydGljZXNCWzBdKTtcblxuICAgICAgICBpZiAoVmVydGljZXMuY29udGFpbnMoYm9keUEudmVydGljZXMsIHZlcnRpY2VzQlsxXSkpXG4gICAgICAgICAgICBzdXBwb3J0cy5wdXNoKHZlcnRpY2VzQlsxXSk7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgc3VwcG9ydHMgZnJvbSBib2R5QSB0aGF0IGFyZSBpbnNpZGUgYm9keUJcbiAgICAgICAgaWYgKHN1cHBvcnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlc0EgPSBTQVQuX2ZpbmRTdXBwb3J0cyhib2R5QiwgYm9keUEsIFZlY3Rvci5uZWcoY29sbGlzaW9uLm5vcm1hbCkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKFZlcnRpY2VzLmNvbnRhaW5zKGJvZHlCLnZlcnRpY2VzLCB2ZXJ0aWNlc0FbMF0pKVxuICAgICAgICAgICAgICAgIHN1cHBvcnRzLnB1c2godmVydGljZXNBWzBdKTtcblxuICAgICAgICAgICAgaWYgKHN1cHBvcnRzLmxlbmd0aCA8IDIgJiYgVmVydGljZXMuY29udGFpbnMoYm9keUIudmVydGljZXMsIHZlcnRpY2VzQVsxXSkpXG4gICAgICAgICAgICAgICAgc3VwcG9ydHMucHVzaCh2ZXJ0aWNlc0FbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWNjb3VudCBmb3IgdGhlIGVkZ2UgY2FzZSBvZiBvdmVybGFwcGluZyBidXQgbm8gdmVydGV4IGNvbnRhaW5tZW50XG4gICAgICAgIGlmIChzdXBwb3J0cy5sZW5ndGggPCAxKVxuICAgICAgICAgICAgc3VwcG9ydHMgPSBbdmVydGljZXNCWzBdXTtcbiAgICAgICAgXG4gICAgICAgIGNvbGxpc2lvbi5zdXBwb3J0cyA9IHN1cHBvcnRzO1xuXG4gICAgICAgIHJldHVybiBjb2xsaXNpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIG92ZXJsYXAgYmV0d2VlbiB0d28gc2V0cyBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIF9vdmVybGFwQXhlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IHZlcnRpY2VzQVxuICAgICAqIEBwYXJhbSB7fSB2ZXJ0aWNlc0JcbiAgICAgKiBAcGFyYW0ge30gYXhlc1xuICAgICAqIEByZXR1cm4gcmVzdWx0XG4gICAgICovXG4gICAgU0FULl9vdmVybGFwQXhlcyA9IGZ1bmN0aW9uKHZlcnRpY2VzQSwgdmVydGljZXNCLCBheGVzKSB7XG4gICAgICAgIHZhciBwcm9qZWN0aW9uQSA9IFZlY3Rvci5fdGVtcFswXSwgXG4gICAgICAgICAgICBwcm9qZWN0aW9uQiA9IFZlY3Rvci5fdGVtcFsxXSxcbiAgICAgICAgICAgIHJlc3VsdCA9IHsgb3ZlcmxhcDogTnVtYmVyLk1BWF9WQUxVRSB9LFxuICAgICAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgICAgIGF4aXM7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBheGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBheGlzID0gYXhlc1tpXTtcblxuICAgICAgICAgICAgU0FULl9wcm9qZWN0VG9BeGlzKHByb2plY3Rpb25BLCB2ZXJ0aWNlc0EsIGF4aXMpO1xuICAgICAgICAgICAgU0FULl9wcm9qZWN0VG9BeGlzKHByb2plY3Rpb25CLCB2ZXJ0aWNlc0IsIGF4aXMpO1xuXG4gICAgICAgICAgICBvdmVybGFwID0gTWF0aC5taW4ocHJvamVjdGlvbkEubWF4IC0gcHJvamVjdGlvbkIubWluLCBwcm9qZWN0aW9uQi5tYXggLSBwcm9qZWN0aW9uQS5taW4pO1xuXG4gICAgICAgICAgICBpZiAob3ZlcmxhcCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm92ZXJsYXAgPSBvdmVybGFwO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvdmVybGFwIDwgcmVzdWx0Lm92ZXJsYXApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQub3ZlcmxhcCA9IG92ZXJsYXA7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmF4aXMgPSBheGlzO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5heGlzTnVtYmVyID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFByb2plY3RzIHZlcnRpY2VzIG9uIGFuIGF4aXMgYW5kIHJldHVybnMgYW4gaW50ZXJ2YWwuXG4gICAgICogQG1ldGhvZCBfcHJvamVjdFRvQXhpc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IHByb2plY3Rpb25cbiAgICAgKiBAcGFyYW0ge30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge30gYXhpc1xuICAgICAqL1xuICAgIFNBVC5fcHJvamVjdFRvQXhpcyA9IGZ1bmN0aW9uKHByb2plY3Rpb24sIHZlcnRpY2VzLCBheGlzKSB7XG4gICAgICAgIHZhciBtaW4gPSBWZWN0b3IuZG90KHZlcnRpY2VzWzBdLCBheGlzKSxcbiAgICAgICAgICAgIG1heCA9IG1pbjtcblxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgZG90ID0gVmVjdG9yLmRvdCh2ZXJ0aWNlc1tpXSwgYXhpcyk7XG5cbiAgICAgICAgICAgIGlmIChkb3QgPiBtYXgpIHsgXG4gICAgICAgICAgICAgICAgbWF4ID0gZG90OyBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZG90IDwgbWluKSB7IFxuICAgICAgICAgICAgICAgIG1pbiA9IGRvdDsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwcm9qZWN0aW9uLm1pbiA9IG1pbjtcbiAgICAgICAgcHJvamVjdGlvbi5tYXggPSBtYXg7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBGaW5kcyBzdXBwb3J0aW5nIHZlcnRpY2VzIGdpdmVuIHR3byBib2RpZXMgYWxvbmcgYSBnaXZlbiBkaXJlY3Rpb24gdXNpbmcgaGlsbC1jbGltYmluZy5cbiAgICAgKiBAbWV0aG9kIF9maW5kU3VwcG9ydHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBib2R5QVxuICAgICAqIEBwYXJhbSB7fSBib2R5QlxuICAgICAqIEBwYXJhbSB7fSBub3JtYWxcbiAgICAgKiBAcmV0dXJuIFt2ZWN0b3JdXG4gICAgICovXG4gICAgU0FULl9maW5kU3VwcG9ydHMgPSBmdW5jdGlvbihib2R5QSwgYm9keUIsIG5vcm1hbCkge1xuICAgICAgICB2YXIgbmVhcmVzdERpc3RhbmNlID0gTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgICAgIHZlcnRleFRvQm9keSA9IFZlY3Rvci5fdGVtcFswXSxcbiAgICAgICAgICAgIHZlcnRpY2VzID0gYm9keUIudmVydGljZXMsXG4gICAgICAgICAgICBib2R5QVBvc2l0aW9uID0gYm9keUEucG9zaXRpb24sXG4gICAgICAgICAgICBkaXN0YW5jZSxcbiAgICAgICAgICAgIHZlcnRleCxcbiAgICAgICAgICAgIHZlcnRleEEsXG4gICAgICAgICAgICB2ZXJ0ZXhCO1xuXG4gICAgICAgIC8vIGZpbmQgY2xvc2VzdCB2ZXJ0ZXggb24gYm9keUJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICAgICAgICB2ZXJ0ZXhUb0JvZHkueCA9IHZlcnRleC54IC0gYm9keUFQb3NpdGlvbi54O1xuICAgICAgICAgICAgdmVydGV4VG9Cb2R5LnkgPSB2ZXJ0ZXgueSAtIGJvZHlBUG9zaXRpb24ueTtcbiAgICAgICAgICAgIGRpc3RhbmNlID0gLVZlY3Rvci5kb3Qobm9ybWFsLCB2ZXJ0ZXhUb0JvZHkpO1xuXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCBuZWFyZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBuZWFyZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhBID0gdmVydGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmluZCBuZXh0IGNsb3Nlc3QgdmVydGV4IHVzaW5nIHRoZSB0d28gY29ubmVjdGVkIHRvIGl0XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSB2ZXJ0ZXhBLmluZGV4IC0gMSA+PSAwID8gdmVydGV4QS5pbmRleCAtIDEgOiB2ZXJ0aWNlcy5sZW5ndGggLSAxO1xuICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1twcmV2SW5kZXhdO1xuICAgICAgICB2ZXJ0ZXhUb0JvZHkueCA9IHZlcnRleC54IC0gYm9keUFQb3NpdGlvbi54O1xuICAgICAgICB2ZXJ0ZXhUb0JvZHkueSA9IHZlcnRleC55IC0gYm9keUFQb3NpdGlvbi55O1xuICAgICAgICBuZWFyZXN0RGlzdGFuY2UgPSAtVmVjdG9yLmRvdChub3JtYWwsIHZlcnRleFRvQm9keSk7XG4gICAgICAgIHZlcnRleEIgPSB2ZXJ0ZXg7XG5cbiAgICAgICAgdmFyIG5leHRJbmRleCA9ICh2ZXJ0ZXhBLmluZGV4ICsgMSkgJSB2ZXJ0aWNlcy5sZW5ndGg7XG4gICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW25leHRJbmRleF07XG4gICAgICAgIHZlcnRleFRvQm9keS54ID0gdmVydGV4LnggLSBib2R5QVBvc2l0aW9uLng7XG4gICAgICAgIHZlcnRleFRvQm9keS55ID0gdmVydGV4LnkgLSBib2R5QVBvc2l0aW9uLnk7XG4gICAgICAgIGRpc3RhbmNlID0gLVZlY3Rvci5kb3Qobm9ybWFsLCB2ZXJ0ZXhUb0JvZHkpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBuZWFyZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgIHZlcnRleEIgPSB2ZXJ0ZXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW3ZlcnRleEEsIHZlcnRleEJdO1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6MjgsXCIuLi9nZW9tZXRyeS9WZXJ0aWNlc1wiOjI5fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbnN0cmFpbnRgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGNvbnN0cmFpbnRzLlxuKiBDb25zdHJhaW50cyBhcmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGF0IGEgZml4ZWQgZGlzdGFuY2UgbXVzdCBiZSBtYWludGFpbmVkIGJldHdlZW4gdHdvIGJvZGllcyAob3IgYSBib2R5IGFuZCBhIGZpeGVkIHdvcmxkLXNwYWNlIHBvc2l0aW9uKS5cbiogVGhlIHN0aWZmbmVzcyBvZiBjb25zdHJhaW50cyBjYW4gYmUgbW9kaWZpZWQgdG8gY3JlYXRlIHNwcmluZ3Mgb3IgZWxhc3RpYy5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIENvbnN0cmFpbnRcbiovXG5cbnZhciBDb25zdHJhaW50ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29uc3RyYWludDtcblxudmFyIFZlcnRpY2VzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcbnZhciBTbGVlcGluZyA9IF9kZXJlcV8oJy4uL2NvcmUvU2xlZXBpbmcnKTtcbnZhciBCb3VuZHMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBBeGVzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQXhlcycpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIENvbnN0cmFpbnQuX3dhcm1pbmcgPSAwLjQ7XG4gICAgQ29uc3RyYWludC5fdG9ycXVlRGFtcGVuID0gMTtcbiAgICBDb25zdHJhaW50Ll9taW5MZW5ndGggPSAwLjAwMDAwMTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29uc3RyYWludC5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFRvIHNpbXVsYXRlIGEgcmV2b2x1dGUgY29uc3RyYWludCAob3IgcGluIGpvaW50KSBzZXQgYGxlbmd0aDogMGAgYW5kIGEgaGlnaCBgc3RpZmZuZXNzYCB2YWx1ZSAoZS5nLiBgMC43YCBvciBhYm92ZSkuXG4gICAgICogSWYgdGhlIGNvbnN0cmFpbnQgaXMgdW5zdGFibGUsIHRyeSBsb3dlcmluZyB0aGUgYHN0aWZmbmVzc2AgdmFsdWUgYW5kIC8gb3IgaW5jcmVhc2luZyBgZW5naW5lLmNvbnN0cmFpbnRJdGVyYXRpb25zYC5cbiAgICAgKiBGb3IgY29tcG91bmQgYm9kaWVzLCBjb25zdHJhaW50cyBtdXN0IGJlIGFwcGxpZWQgdG8gdGhlIHBhcmVudCBib2R5IChub3Qgb25lIG9mIGl0cyBwYXJ0cykuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqL1xuICAgIENvbnN0cmFpbnQuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgY29uc3RyYWludCA9IG9wdGlvbnM7XG5cbiAgICAgICAgLy8gaWYgYm9kaWVzIGRlZmluZWQgYnV0IG5vIHBvaW50cywgdXNlIGJvZHkgY2VudHJlXG4gICAgICAgIGlmIChjb25zdHJhaW50LmJvZHlBICYmICFjb25zdHJhaW50LnBvaW50QSlcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRBID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGlmIChjb25zdHJhaW50LmJvZHlCICYmICFjb25zdHJhaW50LnBvaW50QilcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRCID0geyB4OiAwLCB5OiAwIH07XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHN0YXRpYyBsZW5ndGggdXNpbmcgaW5pdGlhbCB3b3JsZCBzcGFjZSBwb2ludHNcbiAgICAgICAgdmFyIGluaXRpYWxQb2ludEEgPSBjb25zdHJhaW50LmJvZHlBID8gVmVjdG9yLmFkZChjb25zdHJhaW50LmJvZHlBLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QSkgOiBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgIGluaXRpYWxQb2ludEIgPSBjb25zdHJhaW50LmJvZHlCID8gVmVjdG9yLmFkZChjb25zdHJhaW50LmJvZHlCLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QikgOiBjb25zdHJhaW50LnBvaW50QixcbiAgICAgICAgICAgIGxlbmd0aCA9IFZlY3Rvci5tYWduaXR1ZGUoVmVjdG9yLnN1Yihpbml0aWFsUG9pbnRBLCBpbml0aWFsUG9pbnRCKSk7XG4gICAgXG4gICAgICAgIGNvbnN0cmFpbnQubGVuZ3RoID0gdHlwZW9mIGNvbnN0cmFpbnQubGVuZ3RoICE9PSAndW5kZWZpbmVkJyA/IGNvbnN0cmFpbnQubGVuZ3RoIDogbGVuZ3RoO1xuXG4gICAgICAgIC8vIG9wdGlvbiBkZWZhdWx0c1xuICAgICAgICBjb25zdHJhaW50LmlkID0gY29uc3RyYWludC5pZCB8fCBDb21tb24ubmV4dElkKCk7XG4gICAgICAgIGNvbnN0cmFpbnQubGFiZWwgPSBjb25zdHJhaW50LmxhYmVsIHx8ICdDb25zdHJhaW50JztcbiAgICAgICAgY29uc3RyYWludC50eXBlID0gJ2NvbnN0cmFpbnQnO1xuICAgICAgICBjb25zdHJhaW50LnN0aWZmbmVzcyA9IGNvbnN0cmFpbnQuc3RpZmZuZXNzIHx8IChjb25zdHJhaW50Lmxlbmd0aCA+IDAgPyAxIDogMC43KTtcbiAgICAgICAgY29uc3RyYWludC5kYW1waW5nID0gY29uc3RyYWludC5kYW1waW5nIHx8IDA7XG4gICAgICAgIGNvbnN0cmFpbnQuYW5ndWxhclN0aWZmbmVzcyA9IGNvbnN0cmFpbnQuYW5ndWxhclN0aWZmbmVzcyB8fCAwO1xuICAgICAgICBjb25zdHJhaW50LmFuZ2xlQSA9IGNvbnN0cmFpbnQuYm9keUEgPyBjb25zdHJhaW50LmJvZHlBLmFuZ2xlIDogY29uc3RyYWludC5hbmdsZUE7XG4gICAgICAgIGNvbnN0cmFpbnQuYW5nbGVCID0gY29uc3RyYWludC5ib2R5QiA/IGNvbnN0cmFpbnQuYm9keUIuYW5nbGUgOiBjb25zdHJhaW50LmFuZ2xlQjtcbiAgICAgICAgY29uc3RyYWludC5wbHVnaW4gPSB7fTtcblxuICAgICAgICAvLyByZW5kZXJcbiAgICAgICAgdmFyIHJlbmRlciA9IHtcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDIsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogJyNmZmZmZmYnLFxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgYW5jaG9yczogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25zdHJhaW50Lmxlbmd0aCA9PT0gMCAmJiBjb25zdHJhaW50LnN0aWZmbmVzcyA+IDAuMSkge1xuICAgICAgICAgICAgcmVuZGVyLnR5cGUgPSAncGluJztcbiAgICAgICAgICAgIHJlbmRlci5hbmNob3JzID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc3RyYWludC5zdGlmZm5lc3MgPCAwLjkpIHtcbiAgICAgICAgICAgIHJlbmRlci50eXBlID0gJ3NwcmluZyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJhaW50LnJlbmRlciA9IENvbW1vbi5leHRlbmQocmVuZGVyLCBjb25zdHJhaW50LnJlbmRlcik7XG5cbiAgICAgICAgcmV0dXJuIGNvbnN0cmFpbnQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFByZXBhcmVzIGZvciBzb2x2aW5nIGJ5IGNvbnN0cmFpbnQgd2FybWluZy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcHJlU29sdmVBbGxcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgQ29uc3RyYWludC5wcmVTb2x2ZUFsbCA9IGZ1bmN0aW9uKGJvZGllcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgaW1wdWxzZSA9IGJvZHkuY29uc3RyYWludEltcHVsc2U7XG5cbiAgICAgICAgICAgIGlmIChib2R5LmlzU3RhdGljIHx8IChpbXB1bHNlLnggPT09IDAgJiYgaW1wdWxzZS55ID09PSAwICYmIGltcHVsc2UuYW5nbGUgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJvZHkucG9zaXRpb24ueCArPSBpbXB1bHNlLng7XG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uLnkgKz0gaW1wdWxzZS55O1xuICAgICAgICAgICAgYm9keS5hbmdsZSArPSBpbXB1bHNlLmFuZ2xlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNvbHZlcyBhbGwgY29uc3RyYWludHMgaW4gYSBsaXN0IG9mIGNvbGxpc2lvbnMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHNvbHZlQWxsXG4gICAgICogQHBhcmFtIHtjb25zdHJhaW50W119IGNvbnN0cmFpbnRzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqL1xuICAgIENvbnN0cmFpbnQuc29sdmVBbGwgPSBmdW5jdGlvbihjb25zdHJhaW50cywgdGltZVNjYWxlKSB7XG4gICAgICAgIC8vIFNvbHZlIGZpeGVkIGNvbnN0cmFpbnRzIGZpcnN0LlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldLFxuICAgICAgICAgICAgICAgIGZpeGVkQSA9ICFjb25zdHJhaW50LmJvZHlBIHx8IChjb25zdHJhaW50LmJvZHlBICYmIGNvbnN0cmFpbnQuYm9keUEuaXNTdGF0aWMpLFxuICAgICAgICAgICAgICAgIGZpeGVkQiA9ICFjb25zdHJhaW50LmJvZHlCIHx8IChjb25zdHJhaW50LmJvZHlCICYmIGNvbnN0cmFpbnQuYm9keUIuaXNTdGF0aWMpO1xuXG4gICAgICAgICAgICBpZiAoZml4ZWRBIHx8IGZpeGVkQikge1xuICAgICAgICAgICAgICAgIENvbnN0cmFpbnQuc29sdmUoY29uc3RyYWludHNbaV0sIHRpbWVTY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb2x2ZSBmcmVlIGNvbnN0cmFpbnRzIGxhc3QuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25zdHJhaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldO1xuICAgICAgICAgICAgZml4ZWRBID0gIWNvbnN0cmFpbnQuYm9keUEgfHwgKGNvbnN0cmFpbnQuYm9keUEgJiYgY29uc3RyYWludC5ib2R5QS5pc1N0YXRpYyk7XG4gICAgICAgICAgICBmaXhlZEIgPSAhY29uc3RyYWludC5ib2R5QiB8fCAoY29uc3RyYWludC5ib2R5QiAmJiBjb25zdHJhaW50LmJvZHlCLmlzU3RhdGljKTtcblxuICAgICAgICAgICAgaWYgKCFmaXhlZEEgJiYgIWZpeGVkQikge1xuICAgICAgICAgICAgICAgIENvbnN0cmFpbnQuc29sdmUoY29uc3RyYWludHNbaV0sIHRpbWVTY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU29sdmVzIGEgZGlzdGFuY2UgY29uc3RyYWludCB3aXRoIEdhdXNzLVNpZWRlbCBtZXRob2QuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHNvbHZlXG4gICAgICogQHBhcmFtIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqL1xuICAgIENvbnN0cmFpbnQuc29sdmUgPSBmdW5jdGlvbihjb25zdHJhaW50LCB0aW1lU2NhbGUpIHtcbiAgICAgICAgdmFyIGJvZHlBID0gY29uc3RyYWludC5ib2R5QSxcbiAgICAgICAgICAgIGJvZHlCID0gY29uc3RyYWludC5ib2R5QixcbiAgICAgICAgICAgIHBvaW50QSA9IGNvbnN0cmFpbnQucG9pbnRBLFxuICAgICAgICAgICAgcG9pbnRCID0gY29uc3RyYWludC5wb2ludEI7XG5cbiAgICAgICAgaWYgKCFib2R5QSAmJiAhYm9keUIpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgLy8gdXBkYXRlIHJlZmVyZW5jZSBhbmdsZVxuICAgICAgICBpZiAoYm9keUEgJiYgIWJvZHlBLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBWZWN0b3Iucm90YXRlKHBvaW50QSwgYm9keUEuYW5nbGUgLSBjb25zdHJhaW50LmFuZ2xlQSwgcG9pbnRBKTtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQuYW5nbGVBID0gYm9keUEuYW5nbGU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIHVwZGF0ZSByZWZlcmVuY2UgYW5nbGVcbiAgICAgICAgaWYgKGJvZHlCICYmICFib2R5Qi5pc1N0YXRpYykge1xuICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZShwb2ludEIsIGJvZHlCLmFuZ2xlIC0gY29uc3RyYWludC5hbmdsZUIsIHBvaW50Qik7XG4gICAgICAgICAgICBjb25zdHJhaW50LmFuZ2xlQiA9IGJvZHlCLmFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvaW50QVdvcmxkID0gcG9pbnRBLFxuICAgICAgICAgICAgcG9pbnRCV29ybGQgPSBwb2ludEI7XG5cbiAgICAgICAgaWYgKGJvZHlBKSBwb2ludEFXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUEucG9zaXRpb24sIHBvaW50QSk7XG4gICAgICAgIGlmIChib2R5QikgcG9pbnRCV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlCLnBvc2l0aW9uLCBwb2ludEIpO1xuXG4gICAgICAgIGlmICghcG9pbnRBV29ybGQgfHwgIXBvaW50QldvcmxkKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHZhciBkZWx0YSA9IFZlY3Rvci5zdWIocG9pbnRBV29ybGQsIHBvaW50QldvcmxkKSxcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggPSBWZWN0b3IubWFnbml0dWRlKGRlbHRhKTtcblxuICAgICAgICAvLyBwcmV2ZW50IHNpbmd1bGFyaXR5XG4gICAgICAgIGlmIChjdXJyZW50TGVuZ3RoIDwgQ29uc3RyYWludC5fbWluTGVuZ3RoKSB7XG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gQ29uc3RyYWludC5fbWluTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc29sdmUgZGlzdGFuY2UgY29uc3RyYWludCB3aXRoIEdhdXNzLVNpZWRlbCBtZXRob2RcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSAoY3VycmVudExlbmd0aCAtIGNvbnN0cmFpbnQubGVuZ3RoKSAvIGN1cnJlbnRMZW5ndGgsXG4gICAgICAgICAgICBzdGlmZm5lc3MgPSBjb25zdHJhaW50LnN0aWZmbmVzcyA8IDEgPyBjb25zdHJhaW50LnN0aWZmbmVzcyAqIHRpbWVTY2FsZSA6IGNvbnN0cmFpbnQuc3RpZmZuZXNzLFxuICAgICAgICAgICAgZm9yY2UgPSBWZWN0b3IubXVsdChkZWx0YSwgZGlmZmVyZW5jZSAqIHN0aWZmbmVzcyksXG4gICAgICAgICAgICBtYXNzVG90YWwgPSAoYm9keUEgPyBib2R5QS5pbnZlcnNlTWFzcyA6IDApICsgKGJvZHlCID8gYm9keUIuaW52ZXJzZU1hc3MgOiAwKSxcbiAgICAgICAgICAgIGluZXJ0aWFUb3RhbCA9IChib2R5QSA/IGJvZHlBLmludmVyc2VJbmVydGlhIDogMCkgKyAoYm9keUIgPyBib2R5Qi5pbnZlcnNlSW5lcnRpYSA6IDApLFxuICAgICAgICAgICAgcmVzaXN0YW5jZVRvdGFsID0gbWFzc1RvdGFsICsgaW5lcnRpYVRvdGFsLFxuICAgICAgICAgICAgdG9ycXVlLFxuICAgICAgICAgICAgc2hhcmUsXG4gICAgICAgICAgICBub3JtYWwsXG4gICAgICAgICAgICBub3JtYWxWZWxvY2l0eSxcbiAgICAgICAgICAgIHJlbGF0aXZlVmVsb2NpdHk7XG5cbiAgICAgICAgaWYgKGNvbnN0cmFpbnQuZGFtcGluZykge1xuICAgICAgICAgICAgdmFyIHplcm8gPSBWZWN0b3IuY3JlYXRlKCk7XG4gICAgICAgICAgICBub3JtYWwgPSBWZWN0b3IuZGl2KGRlbHRhLCBjdXJyZW50TGVuZ3RoKTtcblxuICAgICAgICAgICAgcmVsYXRpdmVWZWxvY2l0eSA9IFZlY3Rvci5zdWIoXG4gICAgICAgICAgICAgICAgYm9keUIgJiYgVmVjdG9yLnN1Yihib2R5Qi5wb3NpdGlvbiwgYm9keUIucG9zaXRpb25QcmV2KSB8fCB6ZXJvLFxuICAgICAgICAgICAgICAgIGJvZHlBICYmIFZlY3Rvci5zdWIoYm9keUEucG9zaXRpb24sIGJvZHlBLnBvc2l0aW9uUHJldikgfHwgemVyb1xuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbm9ybWFsVmVsb2NpdHkgPSBWZWN0b3IuZG90KG5vcm1hbCwgcmVsYXRpdmVWZWxvY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keUEgJiYgIWJvZHlBLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBzaGFyZSA9IGJvZHlBLmludmVyc2VNYXNzIC8gbWFzc1RvdGFsO1xuXG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGFwcGxpZWQgaW1wdWxzZXMgZm9yIHBvc3Qgc29sdmluZ1xuICAgICAgICAgICAgYm9keUEuY29uc3RyYWludEltcHVsc2UueCAtPSBmb3JjZS54ICogc2hhcmU7XG4gICAgICAgICAgICBib2R5QS5jb25zdHJhaW50SW1wdWxzZS55IC09IGZvcmNlLnkgKiBzaGFyZTtcblxuICAgICAgICAgICAgLy8gYXBwbHkgZm9yY2VzXG4gICAgICAgICAgICBib2R5QS5wb3NpdGlvbi54IC09IGZvcmNlLnggKiBzaGFyZTtcbiAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uLnkgLT0gZm9yY2UueSAqIHNoYXJlO1xuXG4gICAgICAgICAgICAvLyBhcHBseSBkYW1waW5nXG4gICAgICAgICAgICBpZiAoY29uc3RyYWludC5kYW1waW5nKSB7XG4gICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnggLT0gY29uc3RyYWludC5kYW1waW5nICogbm9ybWFsLnggKiBub3JtYWxWZWxvY2l0eSAqIHNoYXJlO1xuICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uUHJldi55IC09IGNvbnN0cmFpbnQuZGFtcGluZyAqIG5vcm1hbC55ICogbm9ybWFsVmVsb2NpdHkgKiBzaGFyZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYXBwbHkgdG9ycXVlXG4gICAgICAgICAgICB0b3JxdWUgPSAoVmVjdG9yLmNyb3NzKHBvaW50QSwgZm9yY2UpIC8gcmVzaXN0YW5jZVRvdGFsKSAqIENvbnN0cmFpbnQuX3RvcnF1ZURhbXBlbiAqIGJvZHlBLmludmVyc2VJbmVydGlhICogKDEgLSBjb25zdHJhaW50LmFuZ3VsYXJTdGlmZm5lc3MpO1xuICAgICAgICAgICAgYm9keUEuY29uc3RyYWludEltcHVsc2UuYW5nbGUgLT0gdG9ycXVlO1xuICAgICAgICAgICAgYm9keUEuYW5nbGUgLT0gdG9ycXVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlCICYmICFib2R5Qi5pc1N0YXRpYykge1xuICAgICAgICAgICAgc2hhcmUgPSBib2R5Qi5pbnZlcnNlTWFzcyAvIG1hc3NUb3RhbDtcblxuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiBhcHBsaWVkIGltcHVsc2VzIGZvciBwb3N0IHNvbHZpbmdcbiAgICAgICAgICAgIGJvZHlCLmNvbnN0cmFpbnRJbXB1bHNlLnggKz0gZm9yY2UueCAqIHNoYXJlO1xuICAgICAgICAgICAgYm9keUIuY29uc3RyYWludEltcHVsc2UueSArPSBmb3JjZS55ICogc2hhcmU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFwcGx5IGZvcmNlc1xuICAgICAgICAgICAgYm9keUIucG9zaXRpb24ueCArPSBmb3JjZS54ICogc2hhcmU7XG4gICAgICAgICAgICBib2R5Qi5wb3NpdGlvbi55ICs9IGZvcmNlLnkgKiBzaGFyZTtcblxuICAgICAgICAgICAgLy8gYXBwbHkgZGFtcGluZ1xuICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQuZGFtcGluZykge1xuICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi54ICs9IGNvbnN0cmFpbnQuZGFtcGluZyAqIG5vcm1hbC54ICogbm9ybWFsVmVsb2NpdHkgKiBzaGFyZTtcbiAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvblByZXYueSArPSBjb25zdHJhaW50LmRhbXBpbmcgKiBub3JtYWwueSAqIG5vcm1hbFZlbG9jaXR5ICogc2hhcmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFwcGx5IHRvcnF1ZVxuICAgICAgICAgICAgdG9ycXVlID0gKFZlY3Rvci5jcm9zcyhwb2ludEIsIGZvcmNlKSAvIHJlc2lzdGFuY2VUb3RhbCkgKiBDb25zdHJhaW50Ll90b3JxdWVEYW1wZW4gKiBib2R5Qi5pbnZlcnNlSW5lcnRpYSAqICgxIC0gY29uc3RyYWludC5hbmd1bGFyU3RpZmZuZXNzKTtcbiAgICAgICAgICAgIGJvZHlCLmNvbnN0cmFpbnRJbXB1bHNlLmFuZ2xlICs9IHRvcnF1ZTtcbiAgICAgICAgICAgIGJvZHlCLmFuZ2xlICs9IHRvcnF1ZTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGJvZHkgdXBkYXRlcyByZXF1aXJlZCBhZnRlciBzb2x2aW5nIGNvbnN0cmFpbnRzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBwb3N0U29sdmVBbGxcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgQ29uc3RyYWludC5wb3N0U29sdmVBbGwgPSBmdW5jdGlvbihib2RpZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIGltcHVsc2UgPSBib2R5LmNvbnN0cmFpbnRJbXB1bHNlO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5pc1N0YXRpYyB8fCAoaW1wdWxzZS54ID09PSAwICYmIGltcHVsc2UueSA9PT0gMCAmJiBpbXB1bHNlLmFuZ2xlID09PSAwKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTbGVlcGluZy5zZXQoYm9keSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgZ2VvbWV0cnkgYW5kIHJlc2V0XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJvZHkucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbal07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIGltcHVsc2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueCArPSBpbXB1bHNlLng7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueSArPSBpbXB1bHNlLnk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGltcHVsc2UuYW5nbGUgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgVmVydGljZXMucm90YXRlKHBhcnQudmVydGljZXMsIGltcHVsc2UuYW5nbGUsIGJvZHkucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBBeGVzLnJvdGF0ZShwYXJ0LmF4ZXMsIGltcHVsc2UuYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZlY3Rvci5yb3RhdGVBYm91dChwYXJ0LnBvc2l0aW9uLCBpbXB1bHNlLmFuZ2xlLCBib2R5LnBvc2l0aW9uLCBwYXJ0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkYW1wZW4gdGhlIGNhY2hlZCBpbXB1bHNlIGZvciB3YXJtaW5nIG5leHQgc3RlcFxuICAgICAgICAgICAgaW1wdWxzZS5hbmdsZSAqPSBDb25zdHJhaW50Ll93YXJtaW5nO1xuICAgICAgICAgICAgaW1wdWxzZS54ICo9IENvbnN0cmFpbnQuX3dhcm1pbmc7XG4gICAgICAgICAgICBpbXB1bHNlLnkgKj0gQ29uc3RyYWludC5fd2FybWluZztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdW5pcXVlbHkgaWRlbnRpZnlpbmcgbnVtYmVyIGdlbmVyYXRlZCBpbiBgQ29tcG9zaXRlLmNyZWF0ZWAgYnkgYENvbW1vbi5uZXh0SWRgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIGRlbm90aW5nIHRoZSB0eXBlIG9mIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0eXBlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJjb25zdHJhaW50XCJcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFyYml0cmFyeSBgU3RyaW5nYCBuYW1lIHRvIGhlbHAgdGhlIHVzZXIgaWRlbnRpZnkgYW5kIG1hbmFnZSBib2RpZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbGFiZWxcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcIkNvbnN0cmFpbnRcIlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBkZWZpbmVzIHRoZSByZW5kZXJpbmcgcHJvcGVydGllcyB0byBiZSBjb25zdW1lZCBieSB0aGUgbW9kdWxlIGBNYXR0ZXIuUmVuZGVyYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXJcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgY29uc3RyYWludCBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnZpc2libGVcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGxpbmUgd2lkdGggdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRoZSBjb25zdHJhaW50IG91dGxpbmUuXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgbWVhbnMgbm8gb3V0bGluZSB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5saW5lV2lkdGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIHRoYXQgZGVmaW5lcyB0aGUgc3Ryb2tlIHN0eWxlIHRvIHVzZSB3aGVuIHJlbmRlcmluZyB0aGUgY29uc3RyYWludCBvdXRsaW5lLlxuICAgICAqIEl0IGlzIHRoZSBzYW1lIGFzIHdoZW4gdXNpbmcgYSBjYW52YXMsIHNvIGl0IGFjY2VwdHMgQ1NTIHN0eWxlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3Ryb2tlU3R5bGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBhIHJhbmRvbSBjb2xvdXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgdGhhdCBkZWZpbmVzIHRoZSBjb25zdHJhaW50IHJlbmRlcmluZyB0eXBlLiBcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZSAnbGluZScsICdwaW4nLCAnc3ByaW5nJy5cbiAgICAgKiBBbiBhcHByb3ByaWF0ZSByZW5kZXIgdHlwZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2hvc2VuIHVubGVzcyBvbmUgaXMgZ2l2ZW4gaW4gb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIudHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0ICdsaW5lJ1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgQm9vbGVhbmAgdGhhdCBkZWZpbmVzIGlmIHRoZSBjb25zdHJhaW50J3MgYW5jaG9yIHBvaW50cyBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLmFuY2hvcnNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpcnN0IHBvc3NpYmxlIGBCb2R5YCB0aGF0IHRoaXMgY29uc3RyYWludCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib2R5QVxuICAgICAqIEB0eXBlIGJvZHlcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2Vjb25kIHBvc3NpYmxlIGBCb2R5YCB0aGF0IHRoaXMgY29uc3RyYWludCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib2R5QlxuICAgICAqIEB0eXBlIGJvZHlcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBWZWN0b3JgIHRoYXQgc3BlY2lmaWVzIHRoZSBvZmZzZXQgb2YgdGhlIGNvbnN0cmFpbnQgZnJvbSBjZW50ZXIgb2YgdGhlIGBjb25zdHJhaW50LmJvZHlBYCBpZiBkZWZpbmVkLCBvdGhlcndpc2UgYSB3b3JsZC1zcGFjZSBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwb2ludEFcbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IHNwZWNpZmllcyB0aGUgb2Zmc2V0IG9mIHRoZSBjb25zdHJhaW50IGZyb20gY2VudGVyIG9mIHRoZSBgY29uc3RyYWludC5ib2R5QmAgaWYgZGVmaW5lZCwgb3RoZXJ3aXNlIGEgd29ybGQtc3BhY2UgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcG9pbnRCXG4gICAgICogQHR5cGUgdmVjdG9yXG4gICAgICogQGRlZmF1bHQgeyB4OiAwLCB5OiAwIH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIHN0aWZmbmVzcyBvZiB0aGUgY29uc3RyYWludCwgaS5lLiB0aGUgcmF0ZSBhdCB3aGljaCBpdCByZXR1cm5zIHRvIGl0cyByZXN0aW5nIGBjb25zdHJhaW50Lmxlbmd0aGAuXG4gICAgICogQSB2YWx1ZSBvZiBgMWAgbWVhbnMgdGhlIGNvbnN0cmFpbnQgc2hvdWxkIGJlIHZlcnkgc3RpZmYuXG4gICAgICogQSB2YWx1ZSBvZiBgMC4yYCBtZWFucyB0aGUgY29uc3RyYWludCBhY3RzIGxpa2UgYSBzb2Z0IHNwcmluZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBzdGlmZm5lc3NcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBkYW1waW5nIG9mIHRoZSBjb25zdHJhaW50LCBcbiAgICAgKiBpLmUuIHRoZSBhbW91bnQgb2YgcmVzaXN0YW5jZSBhcHBsaWVkIHRvIGVhY2ggYm9keSBiYXNlZCBvbiB0aGVpciB2ZWxvY2l0aWVzIHRvIGxpbWl0IHRoZSBhbW91bnQgb2Ygb3NjaWxsYXRpb24uXG4gICAgICogRGFtcGluZyB3aWxsIG9ubHkgYmUgYXBwYXJlbnQgd2hlbiB0aGUgY29uc3RyYWludCBhbHNvIGhhcyBhIHZlcnkgbG93IGBzdGlmZm5lc3NgLlxuICAgICAqIEEgdmFsdWUgb2YgYDAuMWAgbWVhbnMgdGhlIGNvbnN0cmFpbnQgd2lsbCBhcHBseSBoZWF2eSBkYW1waW5nLCByZXN1bHRpbmcgaW4gbGl0dGxlIHRvIG5vIG9zY2lsbGF0aW9uLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIHRoZSBjb25zdHJhaW50IHdpbGwgYXBwbHkgbm8gZGFtcGluZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBkYW1waW5nXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgdGFyZ2V0IHJlc3RpbmcgbGVuZ3RoIG9mIHRoZSBjb25zdHJhaW50LiBcbiAgICAgKiBJdCBpcyBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgaW4gYENvbnN0cmFpbnQuY3JlYXRlYCBmcm9tIGluaXRpYWwgcG9zaXRpb25zIG9mIHRoZSBgY29uc3RyYWludC5ib2R5QWAgYW5kIGBjb25zdHJhaW50LmJvZHlCYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBsZW5ndGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCByZXNlcnZlZCBmb3Igc3RvcmluZyBwbHVnaW4tc3BlY2lmaWMgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwbHVnaW5cbiAgICAgKiBAdHlwZSB7fVxuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9jb3JlL1NsZWVwaW5nXCI6MjIsXCIuLi9nZW9tZXRyeS9BeGVzXCI6MjUsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOX1dLDEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Nb3VzZUNvbnN0cmFpbnRgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBtb3VzZSBjb25zdHJhaW50cy5cbiogTW91c2UgY29uc3RyYWludHMgYXJlIHVzZWQgZm9yIGFsbG93aW5nIHVzZXIgaW50ZXJhY3Rpb24sIHByb3ZpZGluZyB0aGUgYWJpbGl0eSB0byBtb3ZlIGJvZGllcyB2aWEgdGhlIG1vdXNlIG9yIHRvdWNoLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgTW91c2VDb25zdHJhaW50XG4qL1xuXG52YXIgTW91c2VDb25zdHJhaW50ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gTW91c2VDb25zdHJhaW50O1xuXG52YXIgVmVydGljZXMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZXJ0aWNlcycpO1xudmFyIFNsZWVwaW5nID0gX2RlcmVxXygnLi4vY29yZS9TbGVlcGluZycpO1xudmFyIE1vdXNlID0gX2RlcmVxXygnLi4vY29yZS9Nb3VzZScpO1xudmFyIEV2ZW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvRXZlbnRzJyk7XG52YXIgRGV0ZWN0b3IgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vRGV0ZWN0b3InKTtcbnZhciBDb25zdHJhaW50ID0gX2RlcmVxXygnLi9Db25zdHJhaW50Jyk7XG52YXIgQ29tcG9zaXRlID0gX2RlcmVxXygnLi4vYm9keS9Db21wb3NpdGUnKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG1vdXNlIGNvbnN0cmFpbnQuXG4gICAgICogQWxsIHByb3BlcnRpZXMgaGF2ZSBkZWZhdWx0IHZhbHVlcywgYW5kIG1hbnkgYXJlIHByZS1jYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gb3RoZXIgcHJvcGVydGllcy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7TW91c2VDb25zdHJhaW50fSBBIG5ldyBNb3VzZUNvbnN0cmFpbnRcbiAgICAgKi9cbiAgICBNb3VzZUNvbnN0cmFpbnQuY3JlYXRlID0gZnVuY3Rpb24oZW5naW5lLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtb3VzZSA9IChlbmdpbmUgPyBlbmdpbmUubW91c2UgOiBudWxsKSB8fCAob3B0aW9ucyA/IG9wdGlvbnMubW91c2UgOiBudWxsKTtcblxuICAgICAgICBpZiAoIW1vdXNlKSB7XG4gICAgICAgICAgICBpZiAoZW5naW5lICYmIGVuZ2luZS5yZW5kZXIgJiYgZW5naW5lLnJlbmRlci5jYW52YXMpIHtcbiAgICAgICAgICAgICAgICBtb3VzZSA9IE1vdXNlLmNyZWF0ZShlbmdpbmUucmVuZGVyLmNhbnZhcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbW91c2UgPSBNb3VzZS5jcmVhdGUob3B0aW9ucy5lbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW91c2UgPSBNb3VzZS5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybignTW91c2VDb25zdHJhaW50LmNyZWF0ZTogb3B0aW9ucy5tb3VzZSB3YXMgdW5kZWZpbmVkLCBvcHRpb25zLmVsZW1lbnQgd2FzIHVuZGVmaW5lZCwgbWF5IG5vdCBmdW5jdGlvbiBhcyBleHBlY3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBDb25zdHJhaW50LmNyZWF0ZSh7IFxuICAgICAgICAgICAgbGFiZWw6ICdNb3VzZSBDb25zdHJhaW50JyxcbiAgICAgICAgICAgIHBvaW50QTogbW91c2UucG9zaXRpb24sXG4gICAgICAgICAgICBwb2ludEI6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgbGVuZ3RoOiAwLjAxLCBcbiAgICAgICAgICAgIHN0aWZmbmVzczogMC4xLFxuICAgICAgICAgICAgYW5ndWxhclN0aWZmbmVzczogMSxcbiAgICAgICAgICAgIHJlbmRlcjoge1xuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiAnIzkwRUU5MCcsXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdtb3VzZUNvbnN0cmFpbnQnLFxuICAgICAgICAgICAgbW91c2U6IG1vdXNlLFxuICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgIGJvZHk6IG51bGwsXG4gICAgICAgICAgICBjb25zdHJhaW50OiBjb25zdHJhaW50LFxuICAgICAgICAgICAgY29sbGlzaW9uRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IDB4MDAwMSxcbiAgICAgICAgICAgICAgICBtYXNrOiAweEZGRkZGRkZGLFxuICAgICAgICAgICAgICAgIGdyb3VwOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIG1vdXNlQ29uc3RyYWludCA9IENvbW1vbi5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIEV2ZW50cy5vbihlbmdpbmUsICdiZWZvcmVVcGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhbGxCb2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKGVuZ2luZS53b3JsZCk7XG4gICAgICAgICAgICBNb3VzZUNvbnN0cmFpbnQudXBkYXRlKG1vdXNlQ29uc3RyYWludCwgYWxsQm9kaWVzKTtcbiAgICAgICAgICAgIE1vdXNlQ29uc3RyYWludC5fdHJpZ2dlckV2ZW50cyhtb3VzZUNvbnN0cmFpbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbW91c2VDb25zdHJhaW50O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBnaXZlbiBtb3VzZSBjb25zdHJhaW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge01vdXNlQ29uc3RyYWludH0gbW91c2VDb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIE1vdXNlQ29uc3RyYWludC51cGRhdGUgPSBmdW5jdGlvbihtb3VzZUNvbnN0cmFpbnQsIGJvZGllcykge1xuICAgICAgICB2YXIgbW91c2UgPSBtb3VzZUNvbnN0cmFpbnQubW91c2UsXG4gICAgICAgICAgICBjb25zdHJhaW50ID0gbW91c2VDb25zdHJhaW50LmNvbnN0cmFpbnQsXG4gICAgICAgICAgICBib2R5ID0gbW91c2VDb25zdHJhaW50LmJvZHk7XG5cbiAgICAgICAgaWYgKG1vdXNlLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKCFjb25zdHJhaW50LmJvZHlCKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5jb250YWlucyhib2R5LmJvdW5kcywgbW91c2UucG9zaXRpb24pIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIERldGVjdG9yLmNhbkNvbGxpZGUoYm9keS5jb2xsaXNpb25GaWx0ZXIsIG1vdXNlQ29uc3RyYWludC5jb2xsaXNpb25GaWx0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gYm9keS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGogPCBib2R5LnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWZXJ0aWNlcy5jb250YWlucyhwYXJ0LnZlcnRpY2VzLCBtb3VzZS5wb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEEgPSBtb3VzZS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5ib2R5QiA9IG1vdXNlQ29uc3RyYWludC5ib2R5ID0gYm9keTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEIgPSB7IHg6IG1vdXNlLnBvc2l0aW9uLnggLSBib2R5LnBvc2l0aW9uLngsIHk6IG1vdXNlLnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uLnkgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RyYWludC5hbmdsZUIgPSBib2R5LmFuZ2xlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKG1vdXNlQ29uc3RyYWludCwgJ3N0YXJ0ZHJhZycsIHsgbW91c2U6IG1vdXNlLCBib2R5OiBib2R5IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGNvbnN0cmFpbnQuYm9keUIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50LnBvaW50QSA9IG1vdXNlLnBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3RyYWludC5ib2R5QiA9IG1vdXNlQ29uc3RyYWludC5ib2R5ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRCID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKGJvZHkpXG4gICAgICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnZW5kZHJhZycsIHsgbW91c2U6IG1vdXNlLCBib2R5OiBib2R5IH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIG1vdXNlIGNvbnN0cmFpbnQgZXZlbnRzLlxuICAgICAqIEBtZXRob2QgX3RyaWdnZXJFdmVudHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bW91c2V9IG1vdXNlQ29uc3RyYWludFxuICAgICAqL1xuICAgIE1vdXNlQ29uc3RyYWludC5fdHJpZ2dlckV2ZW50cyA9IGZ1bmN0aW9uKG1vdXNlQ29uc3RyYWludCkge1xuICAgICAgICB2YXIgbW91c2UgPSBtb3VzZUNvbnN0cmFpbnQubW91c2UsXG4gICAgICAgICAgICBtb3VzZUV2ZW50cyA9IG1vdXNlLnNvdXJjZUV2ZW50cztcblxuICAgICAgICBpZiAobW91c2VFdmVudHMubW91c2Vtb3ZlKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnbW91c2Vtb3ZlJywgeyBtb3VzZTogbW91c2UgfSk7XG5cbiAgICAgICAgaWYgKG1vdXNlRXZlbnRzLm1vdXNlZG93bilcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKG1vdXNlQ29uc3RyYWludCwgJ21vdXNlZG93bicsIHsgbW91c2U6IG1vdXNlIH0pO1xuXG4gICAgICAgIGlmIChtb3VzZUV2ZW50cy5tb3VzZXVwKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIobW91c2VDb25zdHJhaW50LCAnbW91c2V1cCcsIHsgbW91c2U6IG1vdXNlIH0pO1xuXG4gICAgICAgIC8vIHJlc2V0IHRoZSBtb3VzZSBzdGF0ZSByZWFkeSBmb3IgdGhlIG5leHQgc3RlcFxuICAgICAgICBNb3VzZS5jbGVhclNvdXJjZUV2ZW50cyhtb3VzZSk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIEV2ZW50cyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIG1vdXNlIGhhcyBtb3ZlZCAob3IgYSB0b3VjaCBtb3ZlcykgZHVyaW5nIHRoZSBsYXN0IHN0ZXBcbiAgICAqXG4gICAgKiBAZXZlbnQgbW91c2Vtb3ZlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge21vdXNlfSBldmVudC5tb3VzZSBUaGUgZW5naW5lJ3MgbW91c2UgaW5zdGFuY2VcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIHRoZSBtb3VzZSBpcyBkb3duIChvciBhIHRvdWNoIGhhcyBzdGFydGVkKSBkdXJpbmcgdGhlIGxhc3Qgc3RlcFxuICAgICpcbiAgICAqIEBldmVudCBtb3VzZWRvd25cbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bW91c2V9IGV2ZW50Lm1vdXNlIFRoZSBlbmdpbmUncyBtb3VzZSBpbnN0YW5jZVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIG1vdXNlIGlzIHVwIChvciBhIHRvdWNoIGhhcyBlbmRlZCkgZHVyaW5nIHRoZSBsYXN0IHN0ZXBcbiAgICAqXG4gICAgKiBAZXZlbnQgbW91c2V1cFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiB0aGUgdXNlciBzdGFydHMgZHJhZ2dpbmcgYSBib2R5XG4gICAgKlxuICAgICogQGV2ZW50IHN0YXJ0ZHJhZ1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge2JvZHl9IGV2ZW50LmJvZHkgVGhlIGJvZHkgYmVpbmcgZHJhZ2dlZFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIHVzZXIgZW5kcyBkcmFnZ2luZyBhIGJvZHlcbiAgICAqXG4gICAgKiBAZXZlbnQgZW5kZHJhZ1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge2JvZHl9IGV2ZW50LmJvZHkgVGhlIGJvZHkgdGhhdCBoYXMgc3RvcHBlZCBiZWluZyBkcmFnZ2VkXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCBkZW5vdGluZyB0aGUgdHlwZSBvZiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiY29uc3RyYWludFwiXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYE1vdXNlYCBpbnN0YW5jZSBpbiB1c2UuIElmIG5vdCBzdXBwbGllZCBpbiBgTW91c2VDb25zdHJhaW50LmNyZWF0ZWAsIG9uZSB3aWxsIGJlIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbW91c2VcbiAgICAgKiBAdHlwZSBtb3VzZVxuICAgICAqIEBkZWZhdWx0IG1vdXNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYEJvZHlgIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIG1vdmVkIGJ5IHRoZSB1c2VyLCBvciBgbnVsbGAgaWYgbm8gYm9keS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib2R5XG4gICAgICogQHR5cGUgYm9keVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBgQ29uc3RyYWludGAgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBtb3ZlIHRoZSBib2R5IGR1cmluZyBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb25zdHJhaW50XG4gICAgICogQHR5cGUgY29uc3RyYWludFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBmaWx0ZXIgcHJvcGVydGllcy5cbiAgICAgKiBUaGUgY29sbGlzaW9uIGZpbHRlciBhbGxvd3MgdGhlIHVzZXIgdG8gZGVmaW5lIHdoaWNoIHR5cGVzIG9mIGJvZHkgdGhpcyBtb3VzZSBjb25zdHJhaW50IGNhbiBpbnRlcmFjdCB3aXRoLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG59KSgpO1xuXG59LHtcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2NvbGxpc2lvbi9EZXRlY3RvclwiOjUsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2NvcmUvTW91c2VcIjoxOSxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMixcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOSxcIi4vQ29uc3RyYWludFwiOjEyfV0sMTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbW1vbmAgbW9kdWxlIGNvbnRhaW5zIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgYXJlIGNvbW1vbiB0byBhbGwgbW9kdWxlcy5cbipcbiogQGNsYXNzIENvbW1vblxuKi9cblxudmFyIENvbW1vbiA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1vbjtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgQ29tbW9uLl9uZXh0SWQgPSAwO1xuICAgIENvbW1vbi5fc2VlZCA9IDA7XG4gICAgQ29tbW9uLl9ub3dTdGFydFRpbWUgPSArKG5ldyBEYXRlKCkpO1xuXG4gICAgLyoqXG4gICAgICogRXh0ZW5kcyB0aGUgb2JqZWN0IGluIHRoZSBmaXJzdCBhcmd1bWVudCB1c2luZyB0aGUgb2JqZWN0IGluIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICAgICogQG1ldGhvZCBleHRlbmRcbiAgICAgKiBAcGFyYW0ge30gb2JqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkZWVwXG4gICAgICogQHJldHVybiB7fSBvYmogZXh0ZW5kZWRcbiAgICAgKi9cbiAgICBDb21tb24uZXh0ZW5kID0gZnVuY3Rpb24ob2JqLCBkZWVwKSB7XG4gICAgICAgIHZhciBhcmdzU3RhcnQsXG4gICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgZGVlcENsb25lO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGVlcCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhcmdzU3RhcnQgPSAyO1xuICAgICAgICAgICAgZGVlcENsb25lID0gZGVlcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3NTdGFydCA9IDE7XG4gICAgICAgICAgICBkZWVwQ2xvbmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGFyZ3NTdGFydDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWVwQ2xvbmUgJiYgc291cmNlW3Byb3BdICYmIHNvdXJjZVtwcm9wXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9ialtwcm9wXSB8fCBvYmpbcHJvcF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IG9ialtwcm9wXSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21tb24uZXh0ZW5kKG9ialtwcm9wXSwgZGVlcENsb25lLCBzb3VyY2VbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY2xvbmUgb2YgdGhlIG9iamVjdCwgaWYgZGVlcCBpcyB0cnVlIHJlZmVyZW5jZXMgd2lsbCBhbHNvIGJlIGNsb25lZC5cbiAgICAgKiBAbWV0aG9kIGNsb25lXG4gICAgICogQHBhcmFtIHt9IG9ialxuICAgICAqIEBwYXJhbSB7Ym9vbH0gZGVlcFxuICAgICAqIEByZXR1cm4ge30gb2JqIGNsb25lZFxuICAgICAqL1xuICAgIENvbW1vbi5jbG9uZSA9IGZ1bmN0aW9uKG9iaiwgZGVlcCkge1xuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZCh7fSwgZGVlcCwgb2JqKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBrZXlzIGZvciB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2Qga2V5c1xuICAgICAqIEBwYXJhbSB7fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0ga2V5c1xuICAgICAqL1xuICAgIENvbW1vbi5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cylcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopO1xuXG4gICAgICAgIC8vIGF2b2lkIGhhc093blByb3BlcnR5IGZvciBwZXJmb3JtYW5jZVxuICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKVxuICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIHZhbHVlcyBmb3IgdGhlIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7fSBvYmpcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQXJyYXkgb2YgdGhlIG9iamVjdHMgcHJvcGVydHkgdmFsdWVzXG4gICAgICovXG4gICAgQ29tbW9uLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgIFxuICAgICAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9ialtrZXlzW2ldXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iailcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9ialtrZXldKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHZhbHVlIGZyb20gYGJhc2VgIHJlbGF0aXZlIHRvIHRoZSBgcGF0aGAgc3RyaW5nLlxuICAgICAqIEBtZXRob2QgZ2V0XG4gICAgICogQHBhcmFtIHt9IG9iaiBUaGUgYmFzZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgYmFzZWAsIGUuZy4gJ0Zvby5CYXIuYmF6J1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYmVnaW5dIFBhdGggc2xpY2UgYmVnaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF0gUGF0aCBzbGljZSBlbmRcbiAgICAgKiBAcmV0dXJuIHt9IFRoZSBvYmplY3QgYXQgdGhlIGdpdmVuIHBhdGhcbiAgICAgKi9cbiAgICBDb21tb24uZ2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoLCBiZWdpbiwgZW5kKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KCcuJykuc2xpY2UoYmVnaW4sIGVuZCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBvYmogPSBvYmpbcGF0aFtpXV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgb24gYGJhc2VgIHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBgcGF0aGAgc3RyaW5nLlxuICAgICAqIEBtZXRob2Qgc2V0XG4gICAgICogQHBhcmFtIHt9IG9iaiBUaGUgYmFzZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgYmFzZWAsIGUuZy4gJ0Zvby5CYXIuYmF6J1xuICAgICAqIEBwYXJhbSB7fSB2YWwgVGhlIHZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYmVnaW5dIFBhdGggc2xpY2UgYmVnaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF0gUGF0aCBzbGljZSBlbmRcbiAgICAgKiBAcmV0dXJuIHt9IFBhc3MgdGhyb3VnaCBgdmFsYCBmb3IgY2hhaW5pbmdcbiAgICAgKi9cbiAgICBDb21tb24uc2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoLCB2YWwsIGJlZ2luLCBlbmQpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgnLicpLnNsaWNlKGJlZ2luLCBlbmQpO1xuICAgICAgICBDb21tb24uZ2V0KG9iaiwgcGF0aCwgMCwgLTEpW3BhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXSA9IHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2h1ZmZsZXMgdGhlIGdpdmVuIGFycmF5IGluLXBsYWNlLlxuICAgICAqIFRoZSBmdW5jdGlvbiB1c2VzIGEgc2VlZGVkIHJhbmRvbSBnZW5lcmF0b3IuXG4gICAgICogQG1ldGhvZCBzaHVmZmxlXG4gICAgICogQHBhcmFtIHthcnJheX0gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gYXJyYXkgc2h1ZmZsZWQgcmFuZG9tbHlcbiAgICAgKi9cbiAgICBDb21tb24uc2h1ZmZsZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgaiA9IE1hdGguZmxvb3IoQ29tbW9uLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgICAgICAgICB2YXIgdGVtcCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgYXJyYXlbaV0gPSBhcnJheVtqXTtcbiAgICAgICAgICAgIGFycmF5W2pdID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJhbmRvbWx5IGNob29zZXMgYSB2YWx1ZSBmcm9tIGEgbGlzdCB3aXRoIGVxdWFsIHByb2JhYmlsaXR5LlxuICAgICAqIFRoZSBmdW5jdGlvbiB1c2VzIGEgc2VlZGVkIHJhbmRvbSBnZW5lcmF0b3IuXG4gICAgICogQG1ldGhvZCBjaG9vc2VcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBjaG9pY2VzXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBBIHJhbmRvbSBjaG9pY2Ugb2JqZWN0IGZyb20gdGhlIGFycmF5XG4gICAgICovXG4gICAgQ29tbW9uLmNob29zZSA9IGZ1bmN0aW9uKGNob2ljZXMpIHtcbiAgICAgICAgcmV0dXJuIGNob2ljZXNbTWF0aC5mbG9vcihDb21tb24ucmFuZG9tKCkgKiBjaG9pY2VzLmxlbmd0aCldO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBhIEhUTUxFbGVtZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICogQG1ldGhvZCBpc0VsZW1lbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgSFRNTEVsZW1lbnQsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlICYmIG9iai5ub2RlTmFtZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGFuIGFycmF5LlxuICAgICAqIEBtZXRob2QgaXNBcnJheVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYW4gYXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBmdW5jdGlvbi5cbiAgICAgKiBAbWV0aG9kIGlzRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgZnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2QgaXNQbGFpbk9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYSBwbGFpbiBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBzdHJpbmcuXG4gICAgICogQG1ldGhvZCBpc1N0cmluZ1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYSBzdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc1N0cmluZyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGdpdmVuIHZhbHVlIGNsYW1wZWQgYmV0d2VlbiBhIG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWUuXG4gICAgICogQG1ldGhvZCBjbGFtcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmFsdWUgY2xhbXBlZCBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluY2x1c2l2ZVxuICAgICAqL1xuICAgIENvbW1vbi5jbGFtcCA9IGZ1bmN0aW9uKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgICBpZiAodmFsdWUgPCBtaW4pXG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICBpZiAodmFsdWUgPiBtYXgpXG4gICAgICAgICAgICByZXR1cm4gbWF4O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaWduIG9mIHRoZSBnaXZlbiB2YWx1ZS5cbiAgICAgKiBAbWV0aG9kIHNpZ25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0xIGlmIG5lZ2F0aXZlLCArMSBpZiAwIG9yIHBvc2l0aXZlXG4gICAgICovXG4gICAgQ29tbW9uLnNpZ24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPCAwID8gLTEgOiAxO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB0aW1lc3RhbXAgc2luY2UgdGhlIHRpbWUgb3JpZ2luIChlLmcuIGZyb20gcGFnZSBsb2FkKS5cbiAgICAgKiBUaGUgcmVzdWx0IHdpbGwgYmUgaGlnaC1yZXNvbHV0aW9uIGluY2x1ZGluZyBkZWNpbWFsIHBsYWNlcyBpZiBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBub3dcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBjdXJyZW50IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIENvbW1vbi5ub3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cucGVyZm9ybWFuY2Uud2Via2l0Tm93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZS53ZWJraXROb3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobmV3IERhdGUoKSkgLSBDb21tb24uX25vd1N0YXJ0VGltZTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByYW5kb20gdmFsdWUgYmV0d2VlbiBhIG1pbmltdW0gYW5kIGEgbWF4aW11bSB2YWx1ZSBpbmNsdXNpdmUuXG4gICAgICogVGhlIGZ1bmN0aW9uIHVzZXMgYSBzZWVkZWQgcmFuZG9tIGdlbmVyYXRvci5cbiAgICAgKiBAbWV0aG9kIHJhbmRvbVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBBIHJhbmRvbSBudW1iZXIgYmV0d2VlbiBtaW4gYW5kIG1heCBpbmNsdXNpdmVcbiAgICAgKi9cbiAgICBDb21tb24ucmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICAgICAgbWluID0gKHR5cGVvZiBtaW4gIT09IFwidW5kZWZpbmVkXCIpID8gbWluIDogMDtcbiAgICAgICAgbWF4ID0gKHR5cGVvZiBtYXggIT09IFwidW5kZWZpbmVkXCIpID8gbWF4IDogMTtcbiAgICAgICAgcmV0dXJuIG1pbiArIF9zZWVkZWRSYW5kb20oKSAqIChtYXggLSBtaW4pO1xuICAgIH07XG5cbiAgICB2YXIgX3NlZWRlZFJhbmRvbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lYXJfY29uZ3J1ZW50aWFsX2dlbmVyYXRvclxuICAgICAgICBDb21tb24uX3NlZWQgPSAoQ29tbW9uLl9zZWVkICogOTMwMSArIDQ5Mjk3KSAlIDIzMzI4MDtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5fc2VlZCAvIDIzMzI4MDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBDU1MgaGV4IGNvbG91ciBzdHJpbmcgaW50byBhbiBpbnRlZ2VyLlxuICAgICAqIEBtZXRob2QgY29sb3JUb051bWJlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvclN0cmluZ1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gQW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIENTUyBoZXggc3RyaW5nXG4gICAgICovXG4gICAgQ29tbW9uLmNvbG9yVG9OdW1iZXIgPSBmdW5jdGlvbihjb2xvclN0cmluZykge1xuICAgICAgICBjb2xvclN0cmluZyA9IGNvbG9yU3RyaW5nLnJlcGxhY2UoJyMnLCcnKTtcblxuICAgICAgICBpZiAoY29sb3JTdHJpbmcubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgIGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcuY2hhckF0KDApICsgY29sb3JTdHJpbmcuY2hhckF0KDApXG4gICAgICAgICAgICAgICAgICAgICAgICArIGNvbG9yU3RyaW5nLmNoYXJBdCgxKSArIGNvbG9yU3RyaW5nLmNoYXJBdCgxKVxuICAgICAgICAgICAgICAgICAgICAgICAgKyBjb2xvclN0cmluZy5jaGFyQXQoMikgKyBjb2xvclN0cmluZy5jaGFyQXQoMik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29sb3JTdHJpbmcsIDE2KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnNvbGUgbG9nZ2luZyBsZXZlbCB0byB1c2UsIHdoZXJlIGVhY2ggbGV2ZWwgaW5jbHVkZXMgYWxsIGxldmVscyBhYm92ZSBhbmQgZXhjbHVkZXMgdGhlIGxldmVscyBiZWxvdy5cbiAgICAgKiBUaGUgZGVmYXVsdCBsZXZlbCBpcyAnZGVidWcnIHdoaWNoIHNob3dzIGFsbCBjb25zb2xlIG1lc3NhZ2VzLiAgXG4gICAgICpcbiAgICAgKiBQb3NzaWJsZSBsZXZlbCB2YWx1ZXMgYXJlOlxuICAgICAqIC0gMCA9IE5vbmVcbiAgICAgKiAtIDEgPSBEZWJ1Z1xuICAgICAqIC0gMiA9IEluZm9cbiAgICAgKiAtIDMgPSBXYXJuXG4gICAgICogLSA0ID0gRXJyb3JcbiAgICAgKiBAcHJvcGVydHkgQ29tbW9uLmxvZ0xldmVsXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgQ29tbW9uLmxvZ0xldmVsID0gMTtcblxuICAgIC8qKlxuICAgICAqIFNob3dzIGEgYGNvbnNvbGUubG9nYCBtZXNzYWdlIG9ubHkgaWYgdGhlIGN1cnJlbnQgYENvbW1vbi5sb2dMZXZlbGAgYWxsb3dzIGl0LlxuICAgICAqIFRoZSBtZXNzYWdlIHdpbGwgYmUgcHJlZml4ZWQgd2l0aCAnbWF0dGVyLWpzJyB0byBtYWtlIGl0IGVhc2lseSBpZGVudGlmaWFibGUuXG4gICAgICogQG1ldGhvZCBsb2dcbiAgICAgKiBAcGFyYW0gLi4ub2JqcyB7fSBUaGUgb2JqZWN0cyB0byBsb2cuXG4gICAgICovXG4gICAgQ29tbW9uLmxvZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY29uc29sZSAmJiBDb21tb24ubG9nTGV2ZWwgPiAwICYmIENvbW1vbi5sb2dMZXZlbCA8PSAzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBbJ21hdHRlci1qczonXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3dzIGEgYGNvbnNvbGUuaW5mb2AgbWVzc2FnZSBvbmx5IGlmIHRoZSBjdXJyZW50IGBDb21tb24ubG9nTGV2ZWxgIGFsbG93cyBpdC5cbiAgICAgKiBUaGUgbWVzc2FnZSB3aWxsIGJlIHByZWZpeGVkIHdpdGggJ21hdHRlci1qcycgdG8gbWFrZSBpdCBlYXNpbHkgaWRlbnRpZmlhYmxlLlxuICAgICAqIEBtZXRob2QgaW5mb1xuICAgICAqIEBwYXJhbSAuLi5vYmpzIHt9IFRoZSBvYmplY3RzIHRvIGxvZy5cbiAgICAgKi9cbiAgICBDb21tb24uaW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY29uc29sZSAmJiBDb21tb24ubG9nTGV2ZWwgPiAwICYmIENvbW1vbi5sb2dMZXZlbCA8PSAyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgWydtYXR0ZXItanM6J10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTaG93cyBhIGBjb25zb2xlLndhcm5gIG1lc3NhZ2Ugb25seSBpZiB0aGUgY3VycmVudCBgQ29tbW9uLmxvZ0xldmVsYCBhbGxvd3MgaXQuXG4gICAgICogVGhlIG1lc3NhZ2Ugd2lsbCBiZSBwcmVmaXhlZCB3aXRoICdtYXR0ZXItanMnIHRvIG1ha2UgaXQgZWFzaWx5IGlkZW50aWZpYWJsZS5cbiAgICAgKiBAbWV0aG9kIHdhcm5cbiAgICAgKiBAcGFyYW0gLi4ub2JqcyB7fSBUaGUgb2JqZWN0cyB0byBsb2cuXG4gICAgICovXG4gICAgQ29tbW9uLndhcm4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNvbnNvbGUgJiYgQ29tbW9uLmxvZ0xldmVsID4gMCAmJiBDb21tb24ubG9nTGV2ZWwgPD0gMykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsIFsnbWF0dGVyLWpzOiddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCB1bmlxdWUgc2VxdWVudGlhbCBJRC5cbiAgICAgKiBAbWV0aG9kIG5leHRJZFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gVW5pcXVlIHNlcXVlbnRpYWwgSURcbiAgICAgKi9cbiAgICBDb21tb24ubmV4dElkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uX25leHRJZCsrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGNyb3NzIGJyb3dzZXIgY29tcGF0aWJsZSBpbmRleE9mIGltcGxlbWVudGF0aW9uLlxuICAgICAqIEBtZXRob2QgaW5kZXhPZlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGhheXN0YWNrXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5lZWRsZVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBvc2l0aW9uIG9mIG5lZWRsZSBpbiBoYXlzdGFjaywgb3RoZXJ3aXNlIC0xLlxuICAgICAqL1xuICAgIENvbW1vbi5pbmRleE9mID0gZnVuY3Rpb24oaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgICAgICBpZiAoaGF5c3RhY2suaW5kZXhPZilcbiAgICAgICAgICAgIHJldHVybiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXlzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhheXN0YWNrW2ldID09PSBuZWVkbGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgY3Jvc3MgYnJvd3NlciBjb21wYXRpYmxlIGFycmF5IG1hcCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBAbWV0aG9kIG1hcFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGxpc3RcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gICAgICogQHJldHVybiB7YXJyYXl9IFZhbHVlcyBmcm9tIGxpc3QgdHJhbnNmb3JtZWQgYnkgZnVuYy5cbiAgICAgKi9cbiAgICBDb21tb24ubWFwID0gZnVuY3Rpb24obGlzdCwgZnVuYykge1xuICAgICAgICBpZiAobGlzdC5tYXApIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0Lm1hcChmdW5jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXBwZWQgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG1hcHBlZC5wdXNoKGZ1bmMobGlzdFtpXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBkaXJlY3RlZCBncmFwaCBhbmQgcmV0dXJucyB0aGUgcGFydGlhbGx5IG9yZGVyZWQgc2V0IG9mIHZlcnRpY2VzIGluIHRvcG9sb2dpY2FsIG9yZGVyLlxuICAgICAqIENpcmN1bGFyIGRlcGVuZGVuY2llcyBhcmUgYWxsb3dlZC5cbiAgICAgKiBAbWV0aG9kIHRvcG9sb2dpY2FsU29ydFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBncmFwaFxuICAgICAqIEByZXR1cm4ge2FycmF5fSBQYXJ0aWFsbHkgb3JkZXJlZCBzZXQgb2YgdmVydGljZXMgaW4gdG9wb2xvZ2ljYWwgb3JkZXIuXG4gICAgICovXG4gICAgQ29tbW9uLnRvcG9sb2dpY2FsU29ydCA9IGZ1bmN0aW9uKGdyYXBoKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZ2VjaGV2L2phdmFzY3JpcHQtYWxnb3JpdGhtc1xuICAgICAgICAvLyBDb3B5cmlnaHQgKGMpIE1pbmtvIEdlY2hldiAoTUlUIGxpY2Vuc2UpXG4gICAgICAgIC8vIE1vZGlmaWNhdGlvbnM6IHRpZHkgZm9ybWF0dGluZyBhbmQgbmFtaW5nXG4gICAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICAgIHZpc2l0ZWQgPSBbXSxcbiAgICAgICAgICAgIHRlbXAgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBub2RlIGluIGdyYXBoKSB7XG4gICAgICAgICAgICBpZiAoIXZpc2l0ZWRbbm9kZV0gJiYgIXRlbXBbbm9kZV0pIHtcbiAgICAgICAgICAgICAgICBDb21tb24uX3RvcG9sb2dpY2FsU29ydChub2RlLCB2aXNpdGVkLCB0ZW1wLCBncmFwaCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIENvbW1vbi5fdG9wb2xvZ2ljYWxTb3J0ID0gZnVuY3Rpb24obm9kZSwgdmlzaXRlZCwgdGVtcCwgZ3JhcGgsIHJlc3VsdCkge1xuICAgICAgICB2YXIgbmVpZ2hib3JzID0gZ3JhcGhbbm9kZV0gfHwgW107XG4gICAgICAgIHRlbXBbbm9kZV0gPSB0cnVlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3JzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XG5cbiAgICAgICAgICAgIGlmICh0ZW1wW25laWdoYm9yXSkge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdmlzaXRlZFtuZWlnaGJvcl0pIHtcbiAgICAgICAgICAgICAgICBDb21tb24uX3RvcG9sb2dpY2FsU29ydChuZWlnaGJvciwgdmlzaXRlZCwgdGVtcCwgZ3JhcGgsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0ZW1wW25vZGVdID0gZmFsc2U7XG4gICAgICAgIHZpc2l0ZWRbbm9kZV0gPSB0cnVlO1xuXG4gICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBfbl8gZnVuY3Rpb25zIGFzIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBhIG5ldyBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZW0gaW4gb3JkZXIuXG4gICAgICogVGhlIGFyZ3VtZW50cyBhcHBsaWVkIHdoZW4gY2FsbGluZyB0aGUgbmV3IGZ1bmN0aW9uIHdpbGwgYWxzbyBiZSBhcHBsaWVkIHRvIGV2ZXJ5IGZ1bmN0aW9uIHBhc3NlZC5cbiAgICAgKiBUaGUgdmFsdWUgb2YgYHRoaXNgIHJlZmVycyB0byB0aGUgbGFzdCB2YWx1ZSByZXR1cm5lZCBpbiB0aGUgY2hhaW4gdGhhdCB3YXMgbm90IGB1bmRlZmluZWRgLlxuICAgICAqIFRoZXJlZm9yZSBpZiBhIHBhc3NlZCBmdW5jdGlvbiBkb2VzIG5vdCByZXR1cm4gYSB2YWx1ZSwgdGhlIHByZXZpb3VzbHkgcmV0dXJuZWQgdmFsdWUgaXMgbWFpbnRhaW5lZC5cbiAgICAgKiBBZnRlciBhbGwgcGFzc2VkIGZ1bmN0aW9ucyBoYXZlIGJlZW4gY2FsbGVkIHRoZSBuZXcgZnVuY3Rpb24gcmV0dXJucyB0aGUgbGFzdCByZXR1cm5lZCB2YWx1ZSAoaWYgYW55KS5cbiAgICAgKiBJZiBhbnkgb2YgdGhlIHBhc3NlZCBmdW5jdGlvbnMgYXJlIGEgY2hhaW4sIHRoZW4gdGhlIGNoYWluIHdpbGwgYmUgZmxhdHRlbmVkLlxuICAgICAqIEBtZXRob2QgY2hhaW5cbiAgICAgKiBAcGFyYW0gLi4uZnVuY3Mge2Z1bmN0aW9ufSBUaGUgZnVuY3Rpb25zIHRvIGNoYWluLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZSBwYXNzZWQgZnVuY3Rpb25zIGluIG9yZGVyLlxuICAgICAqL1xuICAgIENvbW1vbi5jaGFpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZnVuY3MgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGZ1bmMgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgICAgIGlmIChmdW5jLl9jaGFpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZmxhdHRlbiBhbHJlYWR5IGNoYWluZWQgZnVuY3Rpb25zXG4gICAgICAgICAgICAgICAgZnVuY3MucHVzaC5hcHBseShmdW5jcywgZnVuYy5fY2hhaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZ1bmNzLnB1c2goZnVuYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hhaW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWUvZGV2dG9vbHMtZG9jcy9pc3N1ZXMvNTMjaXNzdWVjb21tZW50LTUxOTQxMzU4XG4gICAgICAgICAgICB2YXIgbGFzdFJlc3VsdCxcbiAgICAgICAgICAgICAgICBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZnVuY3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuY3NbaV0uYXBwbHkobGFzdFJlc3VsdCwgYXJncyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGNoYWluLl9jaGFpbmVkID0gZnVuY3M7XG5cbiAgICAgICAgcmV0dXJuIGNoYWluO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFpbnMgYSBmdW5jdGlvbiB0byBleGN1dGUgYmVmb3JlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiB0aGUgZ2l2ZW4gYHBhdGhgIHJlbGF0aXZlIHRvIGBiYXNlYC5cbiAgICAgKiBTZWUgYWxzbyBkb2NzIGZvciBgQ29tbW9uLmNoYWluYC5cbiAgICAgKiBAbWV0aG9kIGNoYWluUGF0aEJlZm9yZVxuICAgICAqIEBwYXJhbSB7fSBiYXNlIFRoZSBiYXNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIGBiYXNlYFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoYWluIGJlZm9yZSB0aGUgb3JpZ2luYWxcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGNoYWluZWQgZnVuY3Rpb24gdGhhdCByZXBsYWNlZCB0aGUgb3JpZ2luYWxcbiAgICAgKi9cbiAgICBDb21tb24uY2hhaW5QYXRoQmVmb3JlID0gZnVuY3Rpb24oYmFzZSwgcGF0aCwgZnVuYykge1xuICAgICAgICByZXR1cm4gQ29tbW9uLnNldChiYXNlLCBwYXRoLCBDb21tb24uY2hhaW4oXG4gICAgICAgICAgICBmdW5jLFxuICAgICAgICAgICAgQ29tbW9uLmdldChiYXNlLCBwYXRoKVxuICAgICAgICApKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhaW5zIGEgZnVuY3Rpb24gdG8gZXhjdXRlIGFmdGVyIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiB0aGUgZ2l2ZW4gYHBhdGhgIHJlbGF0aXZlIHRvIGBiYXNlYC5cbiAgICAgKiBTZWUgYWxzbyBkb2NzIGZvciBgQ29tbW9uLmNoYWluYC5cbiAgICAgKiBAbWV0aG9kIGNoYWluUGF0aEFmdGVyXG4gICAgICogQHBhcmFtIHt9IGJhc2UgVGhlIGJhc2Ugb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggcmVsYXRpdmUgdG8gYGJhc2VgXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hhaW4gYWZ0ZXIgdGhlIG9yaWdpbmFsXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBjaGFpbmVkIGZ1bmN0aW9uIHRoYXQgcmVwbGFjZWQgdGhlIG9yaWdpbmFsXG4gICAgICovXG4gICAgQ29tbW9uLmNoYWluUGF0aEFmdGVyID0gZnVuY3Rpb24oYmFzZSwgcGF0aCwgZnVuYykge1xuICAgICAgICByZXR1cm4gQ29tbW9uLnNldChiYXNlLCBwYXRoLCBDb21tb24uY2hhaW4oXG4gICAgICAgICAgICBDb21tb24uZ2V0KGJhc2UsIHBhdGgpLFxuICAgICAgICAgICAgZnVuY1xuICAgICAgICApKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXF1aXJlIGV4dGVybmFsIGxpYnJhcmllcyBvdXRzaWRlIG9mIHRoZSBidW5kbGUuXG4gICAgICogSXQgZmlyc3QgbG9va3MgZm9yIHRoZSBgZ2xvYmFsTmFtZWAgb24gdGhlIGVudmlyb25tZW50J3MgZ2xvYmFsIG5hbWVzcGFjZS5cbiAgICAgKiBJZiB0aGUgZ2xvYmFsIGlzIG5vdCBmb3VuZCwgaXQgd2lsbCBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIHN0YW5kYXJkIGByZXF1aXJlYCB1c2luZyB0aGUgYG1vZHVsZU5hbWVgLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBfcmVxdWlyZUdsb2JhbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBnbG9iYWxOYW1lIFRoZSBnbG9iYWwgbW9kdWxlIG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZSBUaGUgZmFsbGJhY2sgQ29tbW9uSlMgbW9kdWxlIG5hbWVcbiAgICAgKiBAcmV0dXJuIHt9IFRoZSBsb2FkZWQgbW9kdWxlXG4gICAgICovXG4gICAgQ29tbW9uLl9yZXF1aXJlR2xvYmFsID0gZnVuY3Rpb24oZ2xvYmFsTmFtZSwgbW9kdWxlTmFtZSkge1xuICAgICAgICB2YXIgb2JqID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93W2dsb2JhbE5hbWVdIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxbZ2xvYmFsTmFtZV0gOiBudWxsKTtcbiAgICAgICAgcmV0dXJuIG9iaiB8fCBfZGVyZXFfKG1vZHVsZU5hbWUpO1xuICAgIH07XG59KSgpO1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se31dLDE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5FbmdpbmVgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGVuZ2luZXMuXG4qIEFuIGVuZ2luZSBpcyBhIGNvbnRyb2xsZXIgdGhhdCBtYW5hZ2VzIHVwZGF0aW5nIHRoZSBzaW11bGF0aW9uIG9mIHRoZSB3b3JsZC5cbiogU2VlIGBNYXR0ZXIuUnVubmVyYCBmb3IgYW4gb3B0aW9uYWwgZ2FtZSBsb29wIHV0aWxpdHkuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBFbmdpbmVcbiovXG5cbnZhciBFbmdpbmUgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbmdpbmU7XG5cbnZhciBXb3JsZCA9IF9kZXJlcV8oJy4uL2JvZHkvV29ybGQnKTtcbnZhciBTbGVlcGluZyA9IF9kZXJlcV8oJy4vU2xlZXBpbmcnKTtcbnZhciBSZXNvbHZlciA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9SZXNvbHZlcicpO1xudmFyIFJlbmRlciA9IF9kZXJlcV8oJy4uL3JlbmRlci9SZW5kZXInKTtcbnZhciBQYWlycyA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9QYWlycycpO1xudmFyIE1ldHJpY3MgPSBfZGVyZXFfKCcuL01ldHJpY3MnKTtcbnZhciBHcmlkID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL0dyaWQnKTtcbnZhciBFdmVudHMgPSBfZGVyZXFfKCcuL0V2ZW50cycpO1xudmFyIENvbXBvc2l0ZSA9IF9kZXJlcV8oJy4uL2JvZHkvQ29tcG9zaXRlJyk7XG52YXIgQ29uc3RyYWludCA9IF9kZXJlcV8oJy4uL2NvbnN0cmFpbnQvQ29uc3RyYWludCcpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4vQ29tbW9uJyk7XG52YXIgQm9keSA9IF9kZXJlcV8oJy4uL2JvZHkvQm9keScpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGVuZ2luZS4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogQWxsIHByb3BlcnRpZXMgaGF2ZSBkZWZhdWx0IHZhbHVlcywgYW5kIG1hbnkgYXJlIHByZS1jYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gb3RoZXIgcHJvcGVydGllcy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEByZXR1cm4ge2VuZ2luZX0gZW5naW5lXG4gICAgICovXG4gICAgRW5naW5lLmNyZWF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gb3B0aW9ucyBtYXkgYmUgcGFzc2VkIGFzIHRoZSBmaXJzdCAoYW5kIG9ubHkpIGFyZ3VtZW50XG4gICAgICAgIG9wdGlvbnMgPSBDb21tb24uaXNFbGVtZW50KGVsZW1lbnQpID8gb3B0aW9ucyA6IGVsZW1lbnQ7XG4gICAgICAgIGVsZW1lbnQgPSBDb21tb24uaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IG51bGw7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmIChlbGVtZW50IHx8IG9wdGlvbnMucmVuZGVyKSB7XG4gICAgICAgICAgICBDb21tb24ud2FybignRW5naW5lLmNyZWF0ZTogZW5naW5lLnJlbmRlciBpcyBkZXByZWNhdGVkIChzZWUgZG9jcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uSXRlcmF0aW9uczogNixcbiAgICAgICAgICAgIHZlbG9jaXR5SXRlcmF0aW9uczogNCxcbiAgICAgICAgICAgIGNvbnN0cmFpbnRJdGVyYXRpb25zOiAyLFxuICAgICAgICAgICAgZW5hYmxlU2xlZXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgZXZlbnRzOiBbXSxcbiAgICAgICAgICAgIHBsdWdpbjoge30sXG4gICAgICAgICAgICB0aW1pbmc6IHtcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IDAsXG4gICAgICAgICAgICAgICAgdGltZVNjYWxlOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvYWRwaGFzZToge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IEdyaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZW5naW5lID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgaWYgKGVsZW1lbnQgfHwgZW5naW5lLnJlbmRlcikge1xuICAgICAgICAgICAgdmFyIHJlbmRlckRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogUmVuZGVyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBlbmdpbmUucmVuZGVyID0gQ29tbW9uLmV4dGVuZChyZW5kZXJEZWZhdWx0cywgZW5naW5lLnJlbmRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBAZGVwcmVjYXRlZFxuICAgICAgICBpZiAoZW5naW5lLnJlbmRlciAmJiBlbmdpbmUucmVuZGVyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGVuZ2luZS5yZW5kZXIgPSBlbmdpbmUucmVuZGVyLmNvbnRyb2xsZXIuY3JlYXRlKGVuZ2luZS5yZW5kZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgaWYgKGVuZ2luZS5yZW5kZXIpIHtcbiAgICAgICAgICAgIGVuZ2luZS5yZW5kZXIuZW5naW5lID0gZW5naW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgZW5naW5lLndvcmxkID0gb3B0aW9ucy53b3JsZCB8fCBXb3JsZC5jcmVhdGUoZW5naW5lLndvcmxkKTtcbiAgICAgICAgZW5naW5lLnBhaXJzID0gUGFpcnMuY3JlYXRlKCk7XG4gICAgICAgIGVuZ2luZS5icm9hZHBoYXNlID0gZW5naW5lLmJyb2FkcGhhc2UuY29udHJvbGxlci5jcmVhdGUoZW5naW5lLmJyb2FkcGhhc2UpO1xuICAgICAgICBlbmdpbmUubWV0cmljcyA9IGVuZ2luZS5tZXRyaWNzIHx8IHsgZXh0ZW5kZWQ6IGZhbHNlIH07XG5cblxuICAgICAgICByZXR1cm4gZW5naW5lO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0aGUgc2ltdWxhdGlvbiBmb3J3YXJkIGluIHRpbWUgYnkgYGRlbHRhYCBtcy5cbiAgICAgKiBUaGUgYGNvcnJlY3Rpb25gIGFyZ3VtZW50IGlzIGFuIG9wdGlvbmFsIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSB0aW1lIGNvcnJlY3Rpb24gZmFjdG9yIHRvIGFwcGx5IHRvIHRoZSB1cGRhdGUuXG4gICAgICogVGhpcyBjYW4gaGVscCBpbXByb3ZlIHRoZSBhY2N1cmFjeSBvZiB0aGUgc2ltdWxhdGlvbiBpbiBjYXNlcyB3aGVyZSBgZGVsdGFgIGlzIGNoYW5naW5nIGJldHdlZW4gdXBkYXRlcy5cbiAgICAgKiBUaGUgdmFsdWUgb2YgYGNvcnJlY3Rpb25gIGlzIGRlZmluZWQgYXMgYGRlbHRhIC8gbGFzdERlbHRhYCwgaS5lLiB0aGUgcGVyY2VudGFnZSBjaGFuZ2Ugb2YgYGRlbHRhYCBvdmVyIHRoZSBsYXN0IHN0ZXAuXG4gICAgICogVGhlcmVmb3JlIHRoZSB2YWx1ZSBpcyBhbHdheXMgYDFgIChubyBjb3JyZWN0aW9uKSB3aGVuIGBkZWx0YWAgY29uc3RhbnQgKG9yIHdoZW4gbm8gY29ycmVjdGlvbiBpcyBkZXNpcmVkLCB3aGljaCBpcyB0aGUgZGVmYXVsdCkuXG4gICAgICogU2VlIHRoZSBwYXBlciBvbiA8YSBocmVmPVwiaHR0cDovL2xvbmVzb2NrLm5ldC9hcnRpY2xlL3ZlcmxldC5odG1sXCI+VGltZSBDb3JyZWN0ZWQgVmVybGV0PC9hPiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIFRyaWdnZXJzIGBiZWZvcmVVcGRhdGVgIGFuZCBgYWZ0ZXJVcGRhdGVgIGV2ZW50cy5cbiAgICAgKiBUcmlnZ2VycyBgY29sbGlzaW9uU3RhcnRgLCBgY29sbGlzaW9uQWN0aXZlYCBhbmQgYGNvbGxpc2lvbkVuZGAgZXZlbnRzLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsdGE9MTYuNjY2XVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbY29ycmVjdGlvbj0xXVxuICAgICAqL1xuICAgIEVuZ2luZS51cGRhdGUgPSBmdW5jdGlvbihlbmdpbmUsIGRlbHRhLCBjb3JyZWN0aW9uKSB7XG4gICAgICAgIGRlbHRhID0gZGVsdGEgfHwgMTAwMCAvIDYwO1xuICAgICAgICBjb3JyZWN0aW9uID0gY29ycmVjdGlvbiB8fCAxO1xuXG4gICAgICAgIHZhciB3b3JsZCA9IGVuZ2luZS53b3JsZCxcbiAgICAgICAgICAgIHRpbWluZyA9IGVuZ2luZS50aW1pbmcsXG4gICAgICAgICAgICBicm9hZHBoYXNlID0gZW5naW5lLmJyb2FkcGhhc2UsXG4gICAgICAgICAgICBicm9hZHBoYXNlUGFpcnMgPSBbXSxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gaW5jcmVtZW50IHRpbWVzdGFtcFxuICAgICAgICB0aW1pbmcudGltZXN0YW1wICs9IGRlbHRhICogdGltaW5nLnRpbWVTY2FsZTtcblxuICAgICAgICAvLyBjcmVhdGUgYW4gZXZlbnQgb2JqZWN0XG4gICAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltaW5nLnRpbWVzdGFtcFxuICAgICAgICB9O1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2JlZm9yZVVwZGF0ZScsIGV2ZW50KTtcblxuICAgICAgICAvLyBnZXQgbGlzdHMgb2YgYWxsIGJvZGllcyBhbmQgY29uc3RyYWludHMsIG5vIG1hdHRlciB3aGF0IGNvbXBvc2l0ZXMgdGhleSBhcmUgaW5cbiAgICAgICAgdmFyIGFsbEJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMod29ybGQpLFxuICAgICAgICAgICAgYWxsQ29uc3RyYWludHMgPSBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMod29ybGQpO1xuXG5cbiAgICAgICAgLy8gaWYgc2xlZXBpbmcgZW5hYmxlZCwgY2FsbCB0aGUgc2xlZXBpbmcgY29udHJvbGxlclxuICAgICAgICBpZiAoZW5naW5lLmVuYWJsZVNsZWVwaW5nKVxuICAgICAgICAgICAgU2xlZXBpbmcudXBkYXRlKGFsbEJvZGllcywgdGltaW5nLnRpbWVTY2FsZSk7XG5cbiAgICAgICAgLy8gYXBwbGllcyBncmF2aXR5IHRvIGFsbCBib2RpZXNcbiAgICAgICAgRW5naW5lLl9ib2RpZXNBcHBseUdyYXZpdHkoYWxsQm9kaWVzLCB3b3JsZC5ncmF2aXR5KTtcblxuICAgICAgICAvLyB1cGRhdGUgYWxsIGJvZHkgcG9zaXRpb24gYW5kIHJvdGF0aW9uIGJ5IGludGVncmF0aW9uXG4gICAgICAgIEVuZ2luZS5fYm9kaWVzVXBkYXRlKGFsbEJvZGllcywgZGVsdGEsIHRpbWluZy50aW1lU2NhbGUsIGNvcnJlY3Rpb24sIHdvcmxkLmJvdW5kcyk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGFsbCBjb25zdHJhaW50cyAoZmlyc3QgcGFzcylcbiAgICAgICAgQ29uc3RyYWludC5wcmVTb2x2ZUFsbChhbGxCb2RpZXMpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5naW5lLmNvbnN0cmFpbnRJdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgIENvbnN0cmFpbnQuc29sdmVBbGwoYWxsQ29uc3RyYWludHMsIHRpbWluZy50aW1lU2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIENvbnN0cmFpbnQucG9zdFNvbHZlQWxsKGFsbEJvZGllcyk7XG5cbiAgICAgICAgLy8gYnJvYWRwaGFzZSBwYXNzOiBmaW5kIHBvdGVudGlhbCBjb2xsaXNpb24gcGFpcnNcbiAgICAgICAgaWYgKGJyb2FkcGhhc2UuY29udHJvbGxlcikge1xuICAgICAgICAgICAgLy8gaWYgd29ybGQgaXMgZGlydHksIHdlIG11c3QgZmx1c2ggdGhlIHdob2xlIGdyaWRcbiAgICAgICAgICAgIGlmICh3b3JsZC5pc01vZGlmaWVkKVxuICAgICAgICAgICAgICAgIGJyb2FkcGhhc2UuY29udHJvbGxlci5jbGVhcihicm9hZHBoYXNlKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBncmlkIGJ1Y2tldHMgYmFzZWQgb24gY3VycmVudCBib2RpZXNcbiAgICAgICAgICAgIGJyb2FkcGhhc2UuY29udHJvbGxlci51cGRhdGUoYnJvYWRwaGFzZSwgYWxsQm9kaWVzLCBlbmdpbmUsIHdvcmxkLmlzTW9kaWZpZWQpO1xuICAgICAgICAgICAgYnJvYWRwaGFzZVBhaXJzID0gYnJvYWRwaGFzZS5wYWlyc0xpc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiBubyBicm9hZHBoYXNlIHNldCwgd2UganVzdCBwYXNzIGFsbCBib2RpZXNcbiAgICAgICAgICAgIGJyb2FkcGhhc2VQYWlycyA9IGFsbEJvZGllcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIGFsbCBjb21wb3NpdGUgbW9kaWZpZWQgZmxhZ3NcbiAgICAgICAgaWYgKHdvcmxkLmlzTW9kaWZpZWQpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZCh3b3JsZCwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5hcnJvd3BoYXNlIHBhc3M6IGZpbmQgYWN0dWFsIGNvbGxpc2lvbnMsIHRoZW4gY3JlYXRlIG9yIHVwZGF0ZSBjb2xsaXNpb24gcGFpcnNcbiAgICAgICAgdmFyIGNvbGxpc2lvbnMgPSBicm9hZHBoYXNlLmRldGVjdG9yKGJyb2FkcGhhc2VQYWlycywgZW5naW5lKTtcblxuICAgICAgICAvLyB1cGRhdGUgY29sbGlzaW9uIHBhaXJzXG4gICAgICAgIHZhciBwYWlycyA9IGVuZ2luZS5wYWlycyxcbiAgICAgICAgICAgIHRpbWVzdGFtcCA9IHRpbWluZy50aW1lc3RhbXA7XG4gICAgICAgIFBhaXJzLnVwZGF0ZShwYWlycywgY29sbGlzaW9ucywgdGltZXN0YW1wKTtcbiAgICAgICAgUGFpcnMucmVtb3ZlT2xkKHBhaXJzLCB0aW1lc3RhbXApO1xuXG4gICAgICAgIC8vIHdha2UgdXAgYm9kaWVzIGludm9sdmVkIGluIGNvbGxpc2lvbnNcbiAgICAgICAgaWYgKGVuZ2luZS5lbmFibGVTbGVlcGluZylcbiAgICAgICAgICAgIFNsZWVwaW5nLmFmdGVyQ29sbGlzaW9ucyhwYWlycy5saXN0LCB0aW1pbmcudGltZVNjYWxlKTtcblxuICAgICAgICAvLyB0cmlnZ2VyIGNvbGxpc2lvbiBldmVudHNcbiAgICAgICAgaWYgKHBhaXJzLmNvbGxpc2lvblN0YXJ0Lmxlbmd0aCA+IDApXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdjb2xsaXNpb25TdGFydCcsIHsgcGFpcnM6IHBhaXJzLmNvbGxpc2lvblN0YXJ0IH0pO1xuXG4gICAgICAgIC8vIGl0ZXJhdGl2ZWx5IHJlc29sdmUgcG9zaXRpb24gYmV0d2VlbiBjb2xsaXNpb25zXG4gICAgICAgIFJlc29sdmVyLnByZVNvbHZlUG9zaXRpb24ocGFpcnMubGlzdCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbmdpbmUucG9zaXRpb25JdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgIFJlc29sdmVyLnNvbHZlUG9zaXRpb24ocGFpcnMubGlzdCwgdGltaW5nLnRpbWVTY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgUmVzb2x2ZXIucG9zdFNvbHZlUG9zaXRpb24oYWxsQm9kaWVzKTtcblxuICAgICAgICAvLyB1cGRhdGUgYWxsIGNvbnN0cmFpbnRzIChzZWNvbmQgcGFzcylcbiAgICAgICAgQ29uc3RyYWludC5wcmVTb2x2ZUFsbChhbGxCb2RpZXMpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5naW5lLmNvbnN0cmFpbnRJdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgIENvbnN0cmFpbnQuc29sdmVBbGwoYWxsQ29uc3RyYWludHMsIHRpbWluZy50aW1lU2NhbGUpO1xuICAgICAgICB9XG4gICAgICAgIENvbnN0cmFpbnQucG9zdFNvbHZlQWxsKGFsbEJvZGllcyk7XG5cbiAgICAgICAgLy8gaXRlcmF0aXZlbHkgcmVzb2x2ZSB2ZWxvY2l0eSBiZXR3ZWVuIGNvbGxpc2lvbnNcbiAgICAgICAgUmVzb2x2ZXIucHJlU29sdmVWZWxvY2l0eShwYWlycy5saXN0KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVuZ2luZS52ZWxvY2l0eUl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgUmVzb2x2ZXIuc29sdmVWZWxvY2l0eShwYWlycy5saXN0LCB0aW1pbmcudGltZVNjYWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyaWdnZXIgY29sbGlzaW9uIGV2ZW50c1xuICAgICAgICBpZiAocGFpcnMuY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdjb2xsaXNpb25BY3RpdmUnLCB7IHBhaXJzOiBwYWlycy5jb2xsaXNpb25BY3RpdmUgfSk7XG5cbiAgICAgICAgaWYgKHBhaXJzLmNvbGxpc2lvbkVuZC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnY29sbGlzaW9uRW5kJywgeyBwYWlyczogcGFpcnMuY29sbGlzaW9uRW5kIH0pO1xuXG5cbiAgICAgICAgLy8gY2xlYXIgZm9yY2UgYnVmZmVyc1xuICAgICAgICBFbmdpbmUuX2JvZGllc0NsZWFyRm9yY2VzKGFsbEJvZGllcyk7XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnYWZ0ZXJVcGRhdGUnLCBldmVudCk7XG5cbiAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0d28gZW5naW5lcyBieSBrZWVwaW5nIHRoZSBjb25maWd1cmF0aW9uIG9mIGBlbmdpbmVBYCBidXQgcmVwbGFjaW5nIHRoZSB3b3JsZCB3aXRoIHRoZSBvbmUgZnJvbSBgZW5naW5lQmAuXG4gICAgICogQG1ldGhvZCBtZXJnZVxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVBXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZUJcbiAgICAgKi9cbiAgICBFbmdpbmUubWVyZ2UgPSBmdW5jdGlvbihlbmdpbmVBLCBlbmdpbmVCKSB7XG4gICAgICAgIENvbW1vbi5leHRlbmQoZW5naW5lQSwgZW5naW5lQik7XG4gICAgICAgIFxuICAgICAgICBpZiAoZW5naW5lQi53b3JsZCkge1xuICAgICAgICAgICAgZW5naW5lQS53b3JsZCA9IGVuZ2luZUIud29ybGQ7XG5cbiAgICAgICAgICAgIEVuZ2luZS5jbGVhcihlbmdpbmVBKTtcblxuICAgICAgICAgICAgdmFyIGJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMoZW5naW5lQS53b3JsZCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG4gICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGJvZHksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBib2R5LmlkID0gQ29tbW9uLm5leHRJZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgZW5naW5lIGluY2x1ZGluZyB0aGUgd29ybGQsIHBhaXJzIGFuZCBicm9hZHBoYXNlLlxuICAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICovXG4gICAgRW5naW5lLmNsZWFyID0gZnVuY3Rpb24oZW5naW5lKSB7XG4gICAgICAgIHZhciB3b3JsZCA9IGVuZ2luZS53b3JsZDtcbiAgICAgICAgXG4gICAgICAgIFBhaXJzLmNsZWFyKGVuZ2luZS5wYWlycyk7XG5cbiAgICAgICAgdmFyIGJyb2FkcGhhc2UgPSBlbmdpbmUuYnJvYWRwaGFzZTtcbiAgICAgICAgaWYgKGJyb2FkcGhhc2UuY29udHJvbGxlcikge1xuICAgICAgICAgICAgdmFyIGJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMod29ybGQpO1xuICAgICAgICAgICAgYnJvYWRwaGFzZS5jb250cm9sbGVyLmNsZWFyKGJyb2FkcGhhc2UpO1xuICAgICAgICAgICAgYnJvYWRwaGFzZS5jb250cm9sbGVyLnVwZGF0ZShicm9hZHBoYXNlLCBib2RpZXMsIGVuZ2luZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogWmVyb2VzIHRoZSBgYm9keS5mb3JjZWAgYW5kIGBib2R5LnRvcnF1ZWAgZm9yY2UgYnVmZmVycy5cbiAgICAgKiBAbWV0aG9kIF9ib2RpZXNDbGVhckZvcmNlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIEVuZ2luZS5fYm9kaWVzQ2xlYXJGb3JjZXMgPSBmdW5jdGlvbihib2RpZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICAvLyByZXNldCBmb3JjZSBidWZmZXJzXG4gICAgICAgICAgICBib2R5LmZvcmNlLnggPSAwO1xuICAgICAgICAgICAgYm9keS5mb3JjZS55ID0gMDtcbiAgICAgICAgICAgIGJvZHkudG9ycXVlID0gMDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBseXMgYSBtYXNzIGRlcGVuZGFudCBmb3JjZSB0byBhbGwgZ2l2ZW4gYm9kaWVzLlxuICAgICAqIEBtZXRob2QgX2JvZGllc0FwcGx5R3Jhdml0eVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBncmF2aXR5XG4gICAgICovXG4gICAgRW5naW5lLl9ib2RpZXNBcHBseUdyYXZpdHkgPSBmdW5jdGlvbihib2RpZXMsIGdyYXZpdHkpIHtcbiAgICAgICAgdmFyIGdyYXZpdHlTY2FsZSA9IHR5cGVvZiBncmF2aXR5LnNjYWxlICE9PSAndW5kZWZpbmVkJyA/IGdyYXZpdHkuc2NhbGUgOiAwLjAwMTtcblxuICAgICAgICBpZiAoKGdyYXZpdHkueCA9PT0gMCAmJiBncmF2aXR5LnkgPT09IDApIHx8IGdyYXZpdHlTY2FsZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChib2R5LmlzU3RhdGljIHx8IGJvZHkuaXNTbGVlcGluZylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gYXBwbHkgZ3Jhdml0eVxuICAgICAgICAgICAgYm9keS5mb3JjZS55ICs9IGJvZHkubWFzcyAqIGdyYXZpdHkueSAqIGdyYXZpdHlTY2FsZTtcbiAgICAgICAgICAgIGJvZHkuZm9yY2UueCArPSBib2R5Lm1hc3MgKiBncmF2aXR5LnggKiBncmF2aXR5U2NhbGU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbHlzIGBCb2R5LnVwZGF0ZWAgdG8gYWxsIGdpdmVuIGBib2RpZXNgLlxuICAgICAqIEBtZXRob2QgX2JvZGllc1VwZGF0ZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWx0YVRpbWUgXG4gICAgICogVGhlIGFtb3VudCBvZiB0aW1lIGVsYXBzZWQgYmV0d2VlbiB1cGRhdGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3JyZWN0aW9uIFxuICAgICAqIFRoZSBWZXJsZXQgY29ycmVjdGlvbiBmYWN0b3IgKGRlbHRhVGltZSAvIGxhc3REZWx0YVRpbWUpXG4gICAgICogQHBhcmFtIHtib3VuZHN9IHdvcmxkQm91bmRzXG4gICAgICovXG4gICAgRW5naW5lLl9ib2RpZXNVcGRhdGUgPSBmdW5jdGlvbihib2RpZXMsIGRlbHRhVGltZSwgdGltZVNjYWxlLCBjb3JyZWN0aW9uLCB3b3JsZEJvdW5kcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChib2R5LmlzU3RhdGljIHx8IGJvZHkuaXNTbGVlcGluZylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgQm9keS51cGRhdGUoYm9keSwgZGVsdGFUaW1lLCB0aW1lU2NhbGUsIGNvcnJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsaWFzIGZvciBgUnVubmVyLnJ1bmAsIHNlZSBgTWF0dGVyLlJ1bm5lcmAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogQG1ldGhvZCBydW5cbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGp1c3QgYmVmb3JlIGFuIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVVcGRhdGVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB1cGRhdGUgYW5kIGFsbCBjb2xsaXNpb24gZXZlbnRzXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyVXBkYXRlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhZnRlciBlbmdpbmUgdXBkYXRlLCBwcm92aWRlcyBhIGxpc3Qgb2YgYWxsIHBhaXJzIHRoYXQgaGF2ZSBzdGFydGVkIHRvIGNvbGxpZGUgaW4gdGhlIGN1cnJlbnQgdGljayAoaWYgYW55KVxuICAgICpcbiAgICAqIEBldmVudCBjb2xsaXNpb25TdGFydFxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnBhaXJzIExpc3Qgb2YgYWZmZWN0ZWQgcGFpcnNcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB1cGRhdGUsIHByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgcGFpcnMgdGhhdCBhcmUgY29sbGlkaW5nIGluIHRoZSBjdXJyZW50IHRpY2sgKGlmIGFueSlcbiAgICAqXG4gICAgKiBAZXZlbnQgY29sbGlzaW9uQWN0aXZlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQucGFpcnMgTGlzdCBvZiBhZmZlY3RlZCBwYWlyc1xuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHVwZGF0ZSwgcHJvdmlkZXMgYSBsaXN0IG9mIGFsbCBwYWlycyB0aGF0IGhhdmUgZW5kZWQgY29sbGlzaW9uIGluIHRoZSBjdXJyZW50IHRpY2sgKGlmIGFueSlcbiAgICAqXG4gICAgKiBAZXZlbnQgY29sbGlzaW9uRW5kXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQucGFpcnMgTGlzdCBvZiBhZmZlY3RlZCBwYWlyc1xuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZWdlciBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIHBvc2l0aW9uIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybSBlYWNoIHVwZGF0ZS5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIGhpZ2hlciBxdWFsaXR5IHRoZSBzaW11bGF0aW9uIHdpbGwgYmUgYXQgdGhlIGV4cGVuc2Ugb2YgcGVyZm9ybWFuY2UuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcG9zaXRpb25JdGVyYXRpb25zXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgNlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZWdlciBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIHZlbG9jaXR5IGl0ZXJhdGlvbnMgdG8gcGVyZm9ybSBlYWNoIHVwZGF0ZS5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIGhpZ2hlciBxdWFsaXR5IHRoZSBzaW11bGF0aW9uIHdpbGwgYmUgYXQgdGhlIGV4cGVuc2Ugb2YgcGVyZm9ybWFuY2UuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdmVsb2NpdHlJdGVyYXRpb25zXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgNFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZWdlciBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIGNvbnN0cmFpbnQgaXRlcmF0aW9ucyB0byBwZXJmb3JtIGVhY2ggdXBkYXRlLlxuICAgICAqIFRoZSBoaWdoZXIgdGhlIHZhbHVlLCB0aGUgaGlnaGVyIHF1YWxpdHkgdGhlIHNpbXVsYXRpb24gd2lsbCBiZSBhdCB0aGUgZXhwZW5zZSBvZiBwZXJmb3JtYW5jZS5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiBgMmAgaXMgdXN1YWxseSB2ZXJ5IGFkZXF1YXRlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbnN0cmFpbnRJdGVyYXRpb25zXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIGVuZ2luZSBzaG91bGQgYWxsb3cgc2xlZXBpbmcgdmlhIHRoZSBgTWF0dGVyLlNsZWVwaW5nYCBtb2R1bGUuXG4gICAgICogU2xlZXBpbmcgY2FuIGltcHJvdmUgc3RhYmlsaXR5IGFuZCBwZXJmb3JtYW5jZSwgYnV0IG9mdGVuIGF0IHRoZSBleHBlbnNlIG9mIGFjY3VyYWN5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGVuYWJsZVNsZWVwaW5nXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBgT2JqZWN0YCBjb250YWluaW5nIHByb3BlcnRpZXMgcmVnYXJkaW5nIHRoZSB0aW1pbmcgc3lzdGVtcyBvZiB0aGUgZW5naW5lLiBcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0aW1pbmdcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIGdsb2JhbCBzY2FsaW5nIGZhY3RvciBvZiB0aW1lIGZvciBhbGwgYm9kaWVzLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIGZyZWV6ZXMgdGhlIHNpbXVsYXRpb24uXG4gICAgICogQSB2YWx1ZSBvZiBgMC4xYCBnaXZlcyBhIHNsb3ctbW90aW9uIGVmZmVjdC5cbiAgICAgKiBBIHZhbHVlIG9mIGAxLjJgIGdpdmVzIGEgc3BlZWQtdXAgZWZmZWN0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHRpbWluZy50aW1lU2NhbGVcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBjdXJyZW50IHNpbXVsYXRpb24tdGltZSBpbiBtaWxsaXNlY29uZHMgc3RhcnRpbmcgZnJvbSBgMGAuIFxuICAgICAqIEl0IGlzIGluY3JlbWVudGVkIG9uIGV2ZXJ5IGBFbmdpbmUudXBkYXRlYCBieSB0aGUgZ2l2ZW4gYGRlbHRhYCBhcmd1bWVudC4gXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdGltaW5nLnRpbWVzdGFtcFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIGEgYFJlbmRlcmAgY29udHJvbGxlci4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBgTWF0dGVyLlJlbmRlcmAgaW5zdGFuY2UgY3JlYXRlZCBieSBgRW5naW5lLmNyZWF0ZWAuXG4gICAgICogT25lIG1heSBhbHNvIGRldmVsb3AgYSBjdXN0b20gcmVuZGVyZXIgbW9kdWxlIGJhc2VkIG9uIGBNYXR0ZXIuUmVuZGVyYCBhbmQgcGFzcyBhbiBpbnN0YW5jZSBvZiBpdCB0byBgRW5naW5lLmNyZWF0ZWAgdmlhIGBvcHRpb25zLnJlbmRlcmAuXG4gICAgICpcbiAgICAgKiBBIG1pbmltYWwgY3VzdG9tIHJlbmRlcmVyIG9iamVjdCBtdXN0IGRlZmluZSBhdCBsZWFzdCB0aHJlZSBmdW5jdGlvbnM6IGBjcmVhdGVgLCBgY2xlYXJgIGFuZCBgd29ybGRgIChzZWUgYE1hdHRlci5SZW5kZXJgKS5cbiAgICAgKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIGluc3RlYWQgcGFzcyB0aGUgX21vZHVsZV8gcmVmZXJlbmNlIHZpYSBgb3B0aW9ucy5yZW5kZXIuY29udHJvbGxlcmAgYW5kIGBFbmdpbmUuY3JlYXRlYCB3aWxsIGluc3RhbnRpYXRlIG9uZSBmb3IgeW91LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlclxuICAgICAqIEB0eXBlIHJlbmRlclxuICAgICAqIEBkZXByZWNhdGVkIHNlZSBEZW1vLmpzIGZvciBhbiBleGFtcGxlIG9mIGNyZWF0aW5nIGEgcmVuZGVyZXJcbiAgICAgKiBAZGVmYXVsdCBhIE1hdHRlci5SZW5kZXIgaW5zdGFuY2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIGEgYnJvYWRwaGFzZSBjb250cm9sbGVyLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGBNYXR0ZXIuR3JpZGAgaW5zdGFuY2UgY3JlYXRlZCBieSBgRW5naW5lLmNyZWF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYnJvYWRwaGFzZVxuICAgICAqIEB0eXBlIGdyaWRcbiAgICAgKiBAZGVmYXVsdCBhIE1hdHRlci5HcmlkIGluc3RhbmNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBXb3JsZGAgY29tcG9zaXRlIG9iamVjdCB0aGF0IHdpbGwgY29udGFpbiBhbGwgc2ltdWxhdGVkIGJvZGllcyBhbmQgY29uc3RyYWludHMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgd29ybGRcbiAgICAgKiBAdHlwZSB3b3JsZFxuICAgICAqIEBkZWZhdWx0IGEgTWF0dGVyLldvcmxkIGluc3RhbmNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgcmVzZXJ2ZWQgZm9yIHN0b3JpbmcgcGx1Z2luLXNwZWNpZmljIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGx1Z2luXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxufSkoKTtcblxufSx7XCIuLi9ib2R5L0JvZHlcIjoxLFwiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vYm9keS9Xb3JsZFwiOjMsXCIuLi9jb2xsaXNpb24vR3JpZFwiOjYsXCIuLi9jb2xsaXNpb24vUGFpcnNcIjo4LFwiLi4vY29sbGlzaW9uL1Jlc29sdmVyXCI6MTAsXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIjoxMixcIi4uL3JlbmRlci9SZW5kZXJcIjozMSxcIi4vQ29tbW9uXCI6MTQsXCIuL0V2ZW50c1wiOjE2LFwiLi9NZXRyaWNzXCI6MTgsXCIuL1NsZWVwaW5nXCI6MjJ9XSwxNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuRXZlbnRzYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyB0byBmaXJlIGFuZCBsaXN0ZW4gdG8gZXZlbnRzIG9uIG90aGVyIG9iamVjdHMuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBFdmVudHNcbiovXG5cbnZhciBFdmVudHMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudHM7XG5cbnZhciBDb21tb24gPSBfZGVyZXFfKCcuL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gdGhlIGdpdmVuIG9iamVjdCdzIGBldmVudE5hbWVgLlxuICAgICAqIEBtZXRob2Qgb25cbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZXNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIEV2ZW50cy5vbiA9IGZ1bmN0aW9uKG9iamVjdCwgZXZlbnROYW1lcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5hbWVzID0gZXZlbnROYW1lcy5zcGxpdCgnICcpLFxuICAgICAgICAgICAgbmFtZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZXNbaV07XG4gICAgICAgICAgICBvYmplY3QuZXZlbnRzID0gb2JqZWN0LmV2ZW50cyB8fCB7fTtcbiAgICAgICAgICAgIG9iamVjdC5ldmVudHNbbmFtZV0gPSBvYmplY3QuZXZlbnRzW25hbWVdIHx8IFtdO1xuICAgICAgICAgICAgb2JqZWN0LmV2ZW50c1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gZXZlbnQgY2FsbGJhY2suIElmIG5vIGNhbGxiYWNrLCBjbGVhcnMgYWxsIGNhbGxiYWNrcyBpbiBgZXZlbnROYW1lc2AuIElmIG5vIGBldmVudE5hbWVzYCwgY2xlYXJzIGFsbCBldmVudHMuXG4gICAgICogQG1ldGhvZCBvZmZcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZXNcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIEV2ZW50cy5vZmYgPSBmdW5jdGlvbihvYmplY3QsIGV2ZW50TmFtZXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghZXZlbnROYW1lcykge1xuICAgICAgICAgICAgb2JqZWN0LmV2ZW50cyA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIEV2ZW50cy5vZmYob2JqZWN0LCBjYWxsYmFjaylcbiAgICAgICAgaWYgKHR5cGVvZiBldmVudE5hbWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGV2ZW50TmFtZXM7XG4gICAgICAgICAgICBldmVudE5hbWVzID0gQ29tbW9uLmtleXMob2JqZWN0LmV2ZW50cykuam9pbignICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5hbWVzID0gZXZlbnROYW1lcy5zcGxpdCgnICcpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSBvYmplY3QuZXZlbnRzW25hbWVzW2ldXSxcbiAgICAgICAgICAgICAgICBuZXdDYWxsYmFja3MgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIGNhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2FsbGJhY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja3Nbal0gIT09IGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2tzW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9iamVjdC5ldmVudHNbbmFtZXNbaV1dID0gbmV3Q2FsbGJhY2tzO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIGFsbCB0aGUgY2FsbGJhY2tzIHN1YnNjcmliZWQgdG8gdGhlIGdpdmVuIG9iamVjdCdzIGBldmVudE5hbWVgLCBpbiB0aGUgb3JkZXIgdGhleSBzdWJzY3JpYmVkLCBpZiBhbnkuXG4gICAgICogQG1ldGhvZCB0cmlnZ2VyXG4gICAgICogQHBhcmFtIHt9IG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVzXG4gICAgICogQHBhcmFtIHt9IGV2ZW50XG4gICAgICovXG4gICAgRXZlbnRzLnRyaWdnZXIgPSBmdW5jdGlvbihvYmplY3QsIGV2ZW50TmFtZXMsIGV2ZW50KSB7XG4gICAgICAgIHZhciBuYW1lcyxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBjYWxsYmFja3MsXG4gICAgICAgICAgICBldmVudENsb25lO1xuXG4gICAgICAgIGlmIChvYmplY3QuZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50KVxuICAgICAgICAgICAgICAgIGV2ZW50ID0ge307XG5cbiAgICAgICAgICAgIG5hbWVzID0gZXZlbnROYW1lcy5zcGxpdCgnICcpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWVzW2ldO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrcyA9IG9iamVjdC5ldmVudHNbbmFtZV07XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Q2xvbmUgPSBDb21tb24uY2xvbmUoZXZlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbG9uZS5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbG9uZS5zb3VyY2UgPSBvYmplY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tqXS5hcHBseShvYmplY3QsIFtldmVudENsb25lXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4vQ29tbW9uXCI6MTR9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXJgIG1vZHVsZSBpcyB0aGUgdG9wIGxldmVsIG5hbWVzcGFjZS4gSXQgYWxzbyBpbmNsdWRlcyBhIGZ1bmN0aW9uIGZvciBpbnN0YWxsaW5nIHBsdWdpbnMgb24gdG9wIG9mIHRoZSBsaWJyYXJ5LlxuKlxuKiBAY2xhc3MgTWF0dGVyXG4qL1xuXG52YXIgTWF0dGVyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0dGVyO1xuXG52YXIgUGx1Z2luID0gX2RlcmVxXygnLi9QbHVnaW4nKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuL0NvbW1vbicpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGlicmFyeSBuYW1lLlxuICAgICAqIEBwcm9wZXJ0eSBuYW1lXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBNYXR0ZXIubmFtZSA9ICdtYXR0ZXItanMnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxpYnJhcnkgdmVyc2lvbi5cbiAgICAgKiBAcHJvcGVydHkgdmVyc2lvblxuICAgICAqIEByZWFkT25seVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgTWF0dGVyLnZlcnNpb24gPSAnMC4xNC4yJztcblxuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiBwbHVnaW4gZGVwZW5kZW5jaWVzIHRvIGJlIGluc3RhbGxlZC4gVGhlc2UgYXJlIG5vcm1hbGx5IHNldCBhbmQgaW5zdGFsbGVkIHRocm91Z2ggYE1hdHRlci51c2VgLlxuICAgICAqIEFsdGVybmF0aXZlbHkgeW91IG1heSBzZXQgYE1hdHRlci51c2VzYCBtYW51YWxseSBhbmQgaW5zdGFsbCB0aGVtIGJ5IGNhbGxpbmcgYFBsdWdpbi51c2UoTWF0dGVyKWAuXG4gICAgICogQHByb3BlcnR5IHVzZXNcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgTWF0dGVyLnVzZXMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwbHVnaW5zIHRoYXQgaGF2ZSBiZWVuIGluc3RhbGxlZCB0aHJvdWdoIGBNYXR0ZXIuUGx1Z2luLmluc3RhbGxgLiBSZWFkIG9ubHkuXG4gICAgICogQHByb3BlcnR5IHVzZWRcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgTWF0dGVyLnVzZWQgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEluc3RhbGxzIHRoZSBnaXZlbiBwbHVnaW5zIG9uIHRoZSBgTWF0dGVyYCBuYW1lc3BhY2UuXG4gICAgICogVGhpcyBpcyBhIHNob3J0LWhhbmQgZm9yIGBQbHVnaW4udXNlYCwgc2VlIGl0IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqIENhbGwgdGhpcyBmdW5jdGlvbiBvbmNlIGF0IHRoZSBzdGFydCBvZiB5b3VyIGNvZGUsIHdpdGggYWxsIG9mIHRoZSBwbHVnaW5zIHlvdSB3aXNoIHRvIGluc3RhbGwgYXMgYXJndW1lbnRzLlxuICAgICAqIEF2b2lkIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcyB1bmxlc3MgeW91IGludGVuZCB0byBtYW51YWxseSBjb250cm9sIGluc3RhbGxhdGlvbiBvcmRlci5cbiAgICAgKiBAbWV0aG9kIHVzZVxuICAgICAqIEBwYXJhbSAuLi5wbHVnaW4ge0Z1bmN0aW9ufSBUaGUgcGx1Z2luKHMpIHRvIGluc3RhbGwgb24gYGJhc2VgIChtdWx0aS1hcmd1bWVudCkuXG4gICAgICovXG4gICAgTWF0dGVyLnVzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBQbHVnaW4udXNlKE1hdHRlciwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYWlucyBhIGZ1bmN0aW9uIHRvIGV4Y3V0ZSBiZWZvcmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9uIHRoZSBnaXZlbiBgcGF0aGAgcmVsYXRpdmUgdG8gYE1hdHRlcmAuXG4gICAgICogU2VlIGFsc28gZG9jcyBmb3IgYENvbW1vbi5jaGFpbmAuXG4gICAgICogQG1ldGhvZCBiZWZvcmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgTWF0dGVyYFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoYWluIGJlZm9yZSB0aGUgb3JpZ2luYWxcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGNoYWluZWQgZnVuY3Rpb24gdGhhdCByZXBsYWNlZCB0aGUgb3JpZ2luYWxcbiAgICAgKi9cbiAgICBNYXR0ZXIuYmVmb3JlID0gZnVuY3Rpb24ocGF0aCwgZnVuYykge1xuICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eTWF0dGVyLi8sICcnKTtcbiAgICAgICAgcmV0dXJuIENvbW1vbi5jaGFpblBhdGhCZWZvcmUoTWF0dGVyLCBwYXRoLCBmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhaW5zIGEgZnVuY3Rpb24gdG8gZXhjdXRlIGFmdGVyIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiB0aGUgZ2l2ZW4gYHBhdGhgIHJlbGF0aXZlIHRvIGBNYXR0ZXJgLlxuICAgICAqIFNlZSBhbHNvIGRvY3MgZm9yIGBDb21tb24uY2hhaW5gLlxuICAgICAqIEBtZXRob2QgYWZ0ZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgTWF0dGVyYFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoYWluIGFmdGVyIHRoZSBvcmlnaW5hbFxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgY2hhaW5lZCBmdW5jdGlvbiB0aGF0IHJlcGxhY2VkIHRoZSBvcmlnaW5hbFxuICAgICAqL1xuICAgIE1hdHRlci5hZnRlciA9IGZ1bmN0aW9uKHBhdGgsIGZ1bmMpIHtcbiAgICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXk1hdHRlci4vLCAnJyk7XG4gICAgICAgIHJldHVybiBDb21tb24uY2hhaW5QYXRoQWZ0ZXIoTWF0dGVyLCBwYXRoLCBmdW5jKTtcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4vQ29tbW9uXCI6MTQsXCIuL1BsdWdpblwiOjIwfV0sMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXG59LHtcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4vQ29tbW9uXCI6MTR9XSwxOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiogVGhlIGBNYXR0ZXIuTW91c2VgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIG1vdXNlIGlucHV0cy5cbipcbiogQGNsYXNzIE1vdXNlXG4qL1xuXG52YXIgTW91c2UgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb3VzZTtcblxudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtb3VzZSBpbnB1dC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHttb3VzZX0gQSBuZXcgbW91c2VcbiAgICAgKi9cbiAgICBNb3VzZS5jcmVhdGUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHZhciBtb3VzZSA9IHt9O1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgQ29tbW9uLmxvZygnTW91c2UuY3JlYXRlOiBlbGVtZW50IHdhcyB1bmRlZmluZWQsIGRlZmF1bHRpbmcgdG8gZG9jdW1lbnQuYm9keScsICd3YXJuJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIG1vdXNlLmVsZW1lbnQgPSBlbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIG1vdXNlLmFic29sdXRlID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIG1vdXNlLnBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIG1vdXNlLm1vdXNlZG93blBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIG1vdXNlLm1vdXNldXBQb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBtb3VzZS5vZmZzZXQgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2Uuc2NhbGUgPSB7IHg6IDEsIHk6IDEgfTtcbiAgICAgICAgbW91c2Uud2hlZWxEZWx0YSA9IDA7XG4gICAgICAgIG1vdXNlLmJ1dHRvbiA9IC0xO1xuICAgICAgICBtb3VzZS5waXhlbFJhdGlvID0gbW91c2UuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGl4ZWwtcmF0aW8nKSB8fCAxO1xuXG4gICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cyA9IHtcbiAgICAgICAgICAgIG1vdXNlbW92ZTogbnVsbCxcbiAgICAgICAgICAgIG1vdXNlZG93bjogbnVsbCxcbiAgICAgICAgICAgIG1vdXNldXA6IG51bGwsXG4gICAgICAgICAgICBtb3VzZXdoZWVsOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBtb3VzZS5tb3VzZW1vdmUgPSBmdW5jdGlvbihldmVudCkgeyBcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IE1vdXNlLl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZXZlbnQsIG1vdXNlLmVsZW1lbnQsIG1vdXNlLnBpeGVsUmF0aW8pLFxuICAgICAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcztcblxuICAgICAgICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgICAgICAgICBtb3VzZS5idXR0b24gPSAwO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi54ID0gbW91c2UuYWJzb2x1dGUueCAqIG1vdXNlLnNjYWxlLnggKyBtb3VzZS5vZmZzZXQueDtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnkgPSBtb3VzZS5hYnNvbHV0ZS55ICogbW91c2Uuc2NhbGUueSArIG1vdXNlLm9mZnNldC55O1xuICAgICAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNlbW92ZSA9IGV2ZW50O1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgbW91c2UubW91c2Vkb3duID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IE1vdXNlLl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24oZXZlbnQsIG1vdXNlLmVsZW1lbnQsIG1vdXNlLnBpeGVsUmF0aW8pLFxuICAgICAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcztcblxuICAgICAgICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgICAgICAgICBtb3VzZS5idXR0b24gPSAwO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vdXNlLmJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS55ID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnggPSBtb3VzZS5hYnNvbHV0ZS54ICogbW91c2Uuc2NhbGUueCArIG1vdXNlLm9mZnNldC54O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueSA9IG1vdXNlLmFic29sdXRlLnkgKiBtb3VzZS5zY2FsZS55ICsgbW91c2Uub2Zmc2V0Lnk7XG4gICAgICAgICAgICBtb3VzZS5tb3VzZWRvd25Qb3NpdGlvbi54ID0gbW91c2UucG9zaXRpb24ueDtcbiAgICAgICAgICAgIG1vdXNlLm1vdXNlZG93blBvc2l0aW9uLnkgPSBtb3VzZS5wb3NpdGlvbi55O1xuICAgICAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNlZG93biA9IGV2ZW50O1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgbW91c2UubW91c2V1cCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBNb3VzZS5fZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uKGV2ZW50LCBtb3VzZS5lbGVtZW50LCBtb3VzZS5waXhlbFJhdGlvKSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXM7XG5cbiAgICAgICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbW91c2UuYnV0dG9uID0gLTE7XG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueCA9IG1vdXNlLmFic29sdXRlLnggKiBtb3VzZS5zY2FsZS54ICsgbW91c2Uub2Zmc2V0Lng7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi55ID0gbW91c2UuYWJzb2x1dGUueSAqIG1vdXNlLnNjYWxlLnkgKyBtb3VzZS5vZmZzZXQueTtcbiAgICAgICAgICAgIG1vdXNlLm1vdXNldXBQb3NpdGlvbi54ID0gbW91c2UucG9zaXRpb24ueDtcbiAgICAgICAgICAgIG1vdXNlLm1vdXNldXBQb3NpdGlvbi55ID0gbW91c2UucG9zaXRpb24ueTtcbiAgICAgICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZXVwID0gZXZlbnQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgbW91c2UubW91c2V3aGVlbCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBtb3VzZS53aGVlbERlbHRhID0gTWF0aC5tYXgoLTEsIE1hdGgubWluKDEsIGV2ZW50LndoZWVsRGVsdGEgfHwgLWV2ZW50LmRldGFpbCkpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBNb3VzZS5zZXRFbGVtZW50KG1vdXNlLCBtb3VzZS5lbGVtZW50KTtcblxuICAgICAgICByZXR1cm4gbW91c2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGVsZW1lbnQgdGhlIG1vdXNlIGlzIGJvdW5kIHRvIChhbmQgcmVsYXRpdmUgdG8pLlxuICAgICAqIEBtZXRob2Qgc2V0RWxlbWVudFxuICAgICAqIEBwYXJhbSB7bW91c2V9IG1vdXNlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqL1xuICAgIE1vdXNlLnNldEVsZW1lbnQgPSBmdW5jdGlvbihtb3VzZSwgZWxlbWVudCkge1xuICAgICAgICBtb3VzZS5lbGVtZW50ID0gZWxlbWVudDtcblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlLm1vdXNlbW92ZSk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2UubW91c2Vkb3duKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2UubW91c2V1cCk7XG4gICAgICAgIFxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBtb3VzZS5tb3VzZXdoZWVsKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIG1vdXNlLm1vdXNld2hlZWwpO1xuXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgbW91c2UubW91c2Vtb3ZlKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgbW91c2UubW91c2Vkb3duKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG1vdXNlLm1vdXNldXApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIGNhcHR1cmVkIHNvdXJjZSBldmVudHMuXG4gICAgICogQG1ldGhvZCBjbGVhclNvdXJjZUV2ZW50c1xuICAgICAqIEBwYXJhbSB7bW91c2V9IG1vdXNlXG4gICAgICovXG4gICAgTW91c2UuY2xlYXJTb3VyY2VFdmVudHMgPSBmdW5jdGlvbihtb3VzZSkge1xuICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2Vtb3ZlID0gbnVsbDtcbiAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNlZG93biA9IG51bGw7XG4gICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZXVwID0gbnVsbDtcbiAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNld2hlZWwgPSBudWxsO1xuICAgICAgICBtb3VzZS53aGVlbERlbHRhID0gMDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbW91c2UgcG9zaXRpb24gb2Zmc2V0LlxuICAgICAqIEBtZXRob2Qgc2V0T2Zmc2V0XG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gb2Zmc2V0XG4gICAgICovXG4gICAgTW91c2Uuc2V0T2Zmc2V0ID0gZnVuY3Rpb24obW91c2UsIG9mZnNldCkge1xuICAgICAgICBtb3VzZS5vZmZzZXQueCA9IG9mZnNldC54O1xuICAgICAgICBtb3VzZS5vZmZzZXQueSA9IG9mZnNldC55O1xuICAgICAgICBtb3VzZS5wb3NpdGlvbi54ID0gbW91c2UuYWJzb2x1dGUueCAqIG1vdXNlLnNjYWxlLnggKyBtb3VzZS5vZmZzZXQueDtcbiAgICAgICAgbW91c2UucG9zaXRpb24ueSA9IG1vdXNlLmFic29sdXRlLnkgKiBtb3VzZS5zY2FsZS55ICsgbW91c2Uub2Zmc2V0Lnk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1vdXNlIHBvc2l0aW9uIHNjYWxlLlxuICAgICAqIEBtZXRob2Qgc2V0U2NhbGVcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBzY2FsZVxuICAgICAqL1xuICAgIE1vdXNlLnNldFNjYWxlID0gZnVuY3Rpb24obW91c2UsIHNjYWxlKSB7XG4gICAgICAgIG1vdXNlLnNjYWxlLnggPSBzY2FsZS54O1xuICAgICAgICBtb3VzZS5zY2FsZS55ID0gc2NhbGUueTtcbiAgICAgICAgbW91c2UucG9zaXRpb24ueCA9IG1vdXNlLmFic29sdXRlLnggKiBtb3VzZS5zY2FsZS54ICsgbW91c2Uub2Zmc2V0Lng7XG4gICAgICAgIG1vdXNlLnBvc2l0aW9uLnkgPSBtb3VzZS5hYnNvbHV0ZS55ICogbW91c2Uuc2NhbGUueSArIG1vdXNlLm9mZnNldC55O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbW91c2UgcG9zaXRpb24gcmVsYXRpdmUgdG8gYW4gZWxlbWVudCBnaXZlbiBhIHNjcmVlbiBwaXhlbCByYXRpby5cbiAgICAgKiBAbWV0aG9kIF9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBldmVudFxuICAgICAqIEBwYXJhbSB7fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsUmF0aW9cbiAgICAgKiBAcmV0dXJuIHt9XG4gICAgICovXG4gICAgTW91c2UuX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbiA9IGZ1bmN0aW9uKGV2ZW50LCBlbGVtZW50LCBwaXhlbFJhdGlvKSB7XG4gICAgICAgIHZhciBlbGVtZW50Qm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIHJvb3ROb2RlID0gKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUgfHwgZG9jdW1lbnQuYm9keSksXG4gICAgICAgICAgICBzY3JvbGxYID0gKHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkKSA/IHdpbmRvdy5wYWdlWE9mZnNldCA6IHJvb3ROb2RlLnNjcm9sbExlZnQsXG4gICAgICAgICAgICBzY3JvbGxZID0gKHdpbmRvdy5wYWdlWU9mZnNldCAhPT0gdW5kZWZpbmVkKSA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IHJvb3ROb2RlLnNjcm9sbFRvcCxcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICAgIHgsIHk7XG4gICAgICAgIFxuICAgICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAgICAgeCA9IHRvdWNoZXNbMF0ucGFnZVggLSBlbGVtZW50Qm91bmRzLmxlZnQgLSBzY3JvbGxYO1xuICAgICAgICAgICAgeSA9IHRvdWNoZXNbMF0ucGFnZVkgLSBlbGVtZW50Qm91bmRzLnRvcCAtIHNjcm9sbFk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4ID0gZXZlbnQucGFnZVggLSBlbGVtZW50Qm91bmRzLmxlZnQgLSBzY3JvbGxYO1xuICAgICAgICAgICAgeSA9IGV2ZW50LnBhZ2VZIC0gZWxlbWVudEJvdW5kcy50b3AgLSBzY3JvbGxZO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICB4OiB4IC8gKGVsZW1lbnQuY2xpZW50V2lkdGggLyAoZWxlbWVudC53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoKSAqIHBpeGVsUmF0aW8pLFxuICAgICAgICAgICAgeTogeSAvIChlbGVtZW50LmNsaWVudEhlaWdodCAvIChlbGVtZW50LmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCkgKiBwaXhlbFJhdGlvKVxuICAgICAgICB9O1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNH1dLDIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5QbHVnaW5gIG1vZHVsZSBjb250YWlucyBmdW5jdGlvbnMgZm9yIHJlZ2lzdGVyaW5nIGFuZCBpbnN0YWxsaW5nIHBsdWdpbnMgb24gbW9kdWxlcy5cbipcbiogQGNsYXNzIFBsdWdpblxuKi9cblxudmFyIFBsdWdpbiA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBsdWdpbjtcblxudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4vQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIFBsdWdpbi5fcmVnaXN0cnkgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIHBsdWdpbiBvYmplY3Qgc28gaXQgY2FuIGJlIHJlc29sdmVkIGxhdGVyIGJ5IG5hbWUuXG4gICAgICogQG1ldGhvZCByZWdpc3RlclxuICAgICAqIEBwYXJhbSBwbHVnaW4ge30gVGhlIHBsdWdpbiB0byByZWdpc3Rlci5cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBwbHVnaW4uXG4gICAgICovXG4gICAgUGx1Z2luLnJlZ2lzdGVyID0gZnVuY3Rpb24ocGx1Z2luKSB7XG4gICAgICAgIGlmICghUGx1Z2luLmlzUGx1Z2luKHBsdWdpbikpIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4ucmVnaXN0ZXI6JywgUGx1Z2luLnRvU3RyaW5nKHBsdWdpbiksICdkb2VzIG5vdCBpbXBsZW1lbnQgYWxsIHJlcXVpcmVkIGZpZWxkcy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwbHVnaW4ubmFtZSBpbiBQbHVnaW4uX3JlZ2lzdHJ5KSB7XG4gICAgICAgICAgICB2YXIgcmVnaXN0ZXJlZCA9IFBsdWdpbi5fcmVnaXN0cnlbcGx1Z2luLm5hbWVdLFxuICAgICAgICAgICAgICAgIHBsdWdpblZlcnNpb24gPSBQbHVnaW4udmVyc2lvblBhcnNlKHBsdWdpbi52ZXJzaW9uKS5udW1iZXIsXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJlZFZlcnNpb24gPSBQbHVnaW4udmVyc2lvblBhcnNlKHJlZ2lzdGVyZWQudmVyc2lvbikubnVtYmVyO1xuXG4gICAgICAgICAgICBpZiAocGx1Z2luVmVyc2lvbiA+IHJlZ2lzdGVyZWRWZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi5yZWdpc3RlcjonLCBQbHVnaW4udG9TdHJpbmcocmVnaXN0ZXJlZCksICd3YXMgdXBncmFkZWQgdG8nLCBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSk7XG4gICAgICAgICAgICAgICAgUGx1Z2luLl9yZWdpc3RyeVtwbHVnaW4ubmFtZV0gPSBwbHVnaW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBsdWdpblZlcnNpb24gPCByZWdpc3RlcmVkVmVyc2lvbikge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4ucmVnaXN0ZXI6JywgUGx1Z2luLnRvU3RyaW5nKHJlZ2lzdGVyZWQpLCAnY2FuIG5vdCBiZSBkb3duZ3JhZGVkIHRvJywgUGx1Z2luLnRvU3RyaW5nKHBsdWdpbikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwbHVnaW4gIT09IHJlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybignUGx1Z2luLnJlZ2lzdGVyOicsIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pLCAnaXMgYWxyZWFkeSByZWdpc3RlcmVkIHRvIGRpZmZlcmVudCBwbHVnaW4gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBQbHVnaW4uX3JlZ2lzdHJ5W3BsdWdpbi5uYW1lXSA9IHBsdWdpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbHVnaW47XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc29sdmVzIGEgZGVwZW5kZW5jeSB0byBhIHBsdWdpbiBvYmplY3QgZnJvbSB0aGUgcmVnaXN0cnkgaWYgaXQgZXhpc3RzLiBcbiAgICAgKiBUaGUgYGRlcGVuZGVuY3lgIG1heSBjb250YWluIGEgdmVyc2lvbiwgYnV0IG9ubHkgdGhlIG5hbWUgbWF0dGVycyB3aGVuIHJlc29sdmluZy5cbiAgICAgKiBAbWV0aG9kIHJlc29sdmVcbiAgICAgKiBAcGFyYW0gZGVwZW5kZW5jeSB7c3RyaW5nfSBUaGUgZGVwZW5kZW5jeS5cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBwbHVnaW4gaWYgcmVzb2x2ZWQsIG90aGVyd2lzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBQbHVnaW4ucmVzb2x2ZSA9IGZ1bmN0aW9uKGRlcGVuZGVuY3kpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5fcmVnaXN0cnlbUGx1Z2luLmRlcGVuZGVuY3lQYXJzZShkZXBlbmRlbmN5KS5uYW1lXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByZXR0eSBwcmludGVkIHBsdWdpbiBuYW1lIGFuZCB2ZXJzaW9uLlxuICAgICAqIEBtZXRob2QgdG9TdHJpbmdcbiAgICAgKiBAcGFyYW0gcGx1Z2luIHt9IFRoZSBwbHVnaW4uXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBQcmV0dHkgcHJpbnRlZCBwbHVnaW4gbmFtZSBhbmQgdmVyc2lvbi5cbiAgICAgKi9cbiAgICBQbHVnaW4udG9TdHJpbmcgPSBmdW5jdGlvbihwbHVnaW4pIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwbHVnaW4gPT09ICdzdHJpbmcnID8gcGx1Z2luIDogKHBsdWdpbi5uYW1lIHx8ICdhbm9ueW1vdXMnKSArICdAJyArIChwbHVnaW4udmVyc2lvbiB8fCBwbHVnaW4ucmFuZ2UgfHwgJzAuMC4wJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3QgbWVldHMgdGhlIG1pbmltdW0gc3RhbmRhcmQgdG8gYmUgY29uc2lkZXJlZCBhIHBsdWdpbi5cbiAgICAgKiBUaGlzIG1lYW5zIGl0IG11c3QgZGVmaW5lIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgKiAtIGBuYW1lYFxuICAgICAqIC0gYHZlcnNpb25gXG4gICAgICogLSBgaW5zdGFsbGBcbiAgICAgKiBAbWV0aG9kIGlzUGx1Z2luXG4gICAgICogQHBhcmFtIG9iaiB7fSBUaGUgb2JqIHRvIHRlc3QuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBvYmplY3QgY2FuIGJlIGNvbnNpZGVyZWQgYSBwbHVnaW4gb3RoZXJ3aXNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgUGx1Z2luLmlzUGx1Z2luID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqLm5hbWUgJiYgb2JqLnZlcnNpb24gJiYgb2JqLmluc3RhbGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIGEgcGx1Z2luIHdpdGggdGhlIGdpdmVuIGBuYW1lYCBiZWVuIGluc3RhbGxlZCBvbiBgbW9kdWxlYC5cbiAgICAgKiBAbWV0aG9kIGlzVXNlZFxuICAgICAqIEBwYXJhbSBtb2R1bGUge30gVGhlIG1vZHVsZS5cbiAgICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBUaGUgcGx1Z2luIG5hbWUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIGEgcGx1Z2luIHdpdGggdGhlIGdpdmVuIGBuYW1lYCBiZWVuIGluc3RhbGxlZCBvbiBgbW9kdWxlYCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgUGx1Z2luLmlzVXNlZCA9IGZ1bmN0aW9uKG1vZHVsZSwgbmFtZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlLnVzZWQuaW5kZXhPZihuYW1lKSA+IC0xO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBgcGx1Z2luLmZvcmAgaXMgYXBwbGljYWJsZSB0byBgbW9kdWxlYCBieSBjb21wYXJpbmcgYWdhaW5zdCBgbW9kdWxlLm5hbWVgIGFuZCBgbW9kdWxlLnZlcnNpb25gLlxuICAgICAqIElmIGBwbHVnaW4uZm9yYCBpcyBub3Qgc3BlY2lmaWVkIHRoZW4gaXQgaXMgYXNzdW1lZCB0byBiZSBhcHBsaWNhYmxlLlxuICAgICAqIFRoZSB2YWx1ZSBvZiBgcGx1Z2luLmZvcmAgaXMgYSBzdHJpbmcgb2YgdGhlIGZvcm1hdCBgJ21vZHVsZS1uYW1lJ2Agb3IgYCdtb2R1bGUtbmFtZUB2ZXJzaW9uJ2AuXG4gICAgICogQG1ldGhvZCBpc0ZvclxuICAgICAqIEBwYXJhbSBwbHVnaW4ge30gVGhlIHBsdWdpbi5cbiAgICAgKiBAcGFyYW0gbW9kdWxlIHt9IFRoZSBtb2R1bGUuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIGBwbHVnaW4uZm9yYCBpcyBhcHBsaWNhYmxlIHRvIGBtb2R1bGVgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBQbHVnaW4uaXNGb3IgPSBmdW5jdGlvbihwbHVnaW4sIG1vZHVsZSkge1xuICAgICAgICB2YXIgcGFyc2VkID0gcGx1Z2luLmZvciAmJiBQbHVnaW4uZGVwZW5kZW5jeVBhcnNlKHBsdWdpbi5mb3IpO1xuICAgICAgICByZXR1cm4gIXBsdWdpbi5mb3IgfHwgKG1vZHVsZS5uYW1lID09PSBwYXJzZWQubmFtZSAmJiBQbHVnaW4udmVyc2lvblNhdGlzZmllcyhtb2R1bGUudmVyc2lvbiwgcGFyc2VkLnJhbmdlKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluc3RhbGxzIHRoZSBwbHVnaW5zIGJ5IGNhbGxpbmcgYHBsdWdpbi5pbnN0YWxsYCBvbiBlYWNoIHBsdWdpbiBzcGVjaWZpZWQgaW4gYHBsdWdpbnNgIGlmIHBhc3NlZCwgb3RoZXJ3aXNlIGBtb2R1bGUudXNlc2AuXG4gICAgICogRm9yIGluc3RhbGxpbmcgcGx1Z2lucyBvbiBgTWF0dGVyYCBzZWUgdGhlIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGBNYXR0ZXIudXNlYC5cbiAgICAgKiBQbHVnaW5zIG1heSBiZSBzcGVjaWZpZWQgZWl0aGVyIGJ5IHRoZWlyIG5hbWUgb3IgYSByZWZlcmVuY2UgdG8gdGhlIHBsdWdpbiBvYmplY3QuXG4gICAgICogUGx1Z2lucyB0aGVtc2VsdmVzIG1heSBzcGVjaWZ5IGZ1cnRoZXIgZGVwZW5kZW5jaWVzLCBidXQgZWFjaCBwbHVnaW4gaXMgaW5zdGFsbGVkIG9ubHkgb25jZS5cbiAgICAgKiBPcmRlciBpcyBpbXBvcnRhbnQsIGEgdG9wb2xvZ2ljYWwgc29ydCBpcyBwZXJmb3JtZWQgdG8gZmluZCB0aGUgYmVzdCByZXN1bHRpbmcgb3JkZXIgb2YgaW5zdGFsbGF0aW9uLlxuICAgICAqIFRoaXMgc29ydGluZyBhdHRlbXB0cyB0byBzYXRpc2Z5IGV2ZXJ5IGRlcGVuZGVuY3kncyByZXF1ZXN0ZWQgb3JkZXJpbmcsIGJ1dCBtYXkgbm90IGJlIGV4YWN0IGluIGFsbCBjYXNlcy5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGxvZ3MgdGhlIHJlc3VsdGluZyBzdGF0dXMgb2YgZWFjaCBkZXBlbmRlbmN5IGluIHRoZSBjb25zb2xlLCBhbG9uZyB3aXRoIGFueSB3YXJuaW5ncy5cbiAgICAgKiAtIEEgZ3JlZW4gdGljayDinIUgaW5kaWNhdGVzIGEgZGVwZW5kZW5jeSB3YXMgcmVzb2x2ZWQgYW5kIGluc3RhbGxlZC5cbiAgICAgKiAtIEFuIG9yYW5nZSBkaWFtb25kIPCflLYgaW5kaWNhdGVzIGEgZGVwZW5kZW5jeSB3YXMgcmVzb2x2ZWQgYnV0IGEgd2FybmluZyB3YXMgdGhyb3duIGZvciBpdCBvciBvbmUgaWYgaXRzIGRlcGVuZGVuY2llcy5cbiAgICAgKiAtIEEgcmVkIGNyb3NzIOKdjCBpbmRpY2F0ZXMgYSBkZXBlbmRlbmN5IGNvdWxkIG5vdCBiZSByZXNvbHZlZC5cbiAgICAgKiBBdm9pZCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgbW9kdWxlIHVubGVzcyB5b3UgaW50ZW5kIHRvIG1hbnVhbGx5IGNvbnRyb2wgaW5zdGFsbGF0aW9uIG9yZGVyLlxuICAgICAqIEBtZXRob2QgdXNlXG4gICAgICogQHBhcmFtIG1vZHVsZSB7fSBUaGUgbW9kdWxlIGluc3RhbGwgcGx1Z2lucyBvbi5cbiAgICAgKiBAcGFyYW0gW3BsdWdpbnM9bW9kdWxlLnVzZXNdIHt9IFRoZSBwbHVnaW5zIHRvIGluc3RhbGwgb24gbW9kdWxlIChvcHRpb25hbCwgZGVmYXVsdHMgdG8gYG1vZHVsZS51c2VzYCkuXG4gICAgICovXG4gICAgUGx1Z2luLnVzZSA9IGZ1bmN0aW9uKG1vZHVsZSwgcGx1Z2lucykge1xuICAgICAgICBtb2R1bGUudXNlcyA9IChtb2R1bGUudXNlcyB8fCBbXSkuY29uY2F0KHBsdWdpbnMgfHwgW10pO1xuXG4gICAgICAgIGlmIChtb2R1bGUudXNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4udXNlOicsIFBsdWdpbi50b1N0cmluZyhtb2R1bGUpLCAnZG9lcyBub3Qgc3BlY2lmeSBhbnkgZGVwZW5kZW5jaWVzIHRvIGluc3RhbGwuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVwZW5kZW5jaWVzID0gUGx1Z2luLmRlcGVuZGVuY2llcyhtb2R1bGUpLFxuICAgICAgICAgICAgc29ydGVkRGVwZW5kZW5jaWVzID0gQ29tbW9uLnRvcG9sb2dpY2FsU29ydChkZXBlbmRlbmNpZXMpLFxuICAgICAgICAgICAgc3RhdHVzID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzb3J0ZWREZXBlbmRlbmNpZXNbaV0gPT09IG1vZHVsZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwbHVnaW4gPSBQbHVnaW4ucmVzb2x2ZShzb3J0ZWREZXBlbmRlbmNpZXNbaV0pO1xuXG4gICAgICAgICAgICBpZiAoIXBsdWdpbikge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5wdXNoKCfinYwgJyArIHNvcnRlZERlcGVuZGVuY2llc1tpXSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChQbHVnaW4uaXNVc2VkKG1vZHVsZSwgcGx1Z2luLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghUGx1Z2luLmlzRm9yKHBsdWdpbiwgbW9kdWxlKSkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4udXNlOicsIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pLCAnaXMgZm9yJywgcGx1Z2luLmZvciwgJ2J1dCBpbnN0YWxsZWQgb24nLCBQbHVnaW4udG9TdHJpbmcobW9kdWxlKSArICcuJyk7XG4gICAgICAgICAgICAgICAgcGx1Z2luLl93YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGx1Z2luLmluc3RhbGwpIHtcbiAgICAgICAgICAgICAgICBwbHVnaW4uaW5zdGFsbChtb2R1bGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybignUGx1Z2luLnVzZTonLCBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSwgJ2RvZXMgbm90IHNwZWNpZnkgYW4gaW5zdGFsbCBmdW5jdGlvbi4nKTtcbiAgICAgICAgICAgICAgICBwbHVnaW4uX3dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW4uX3dhcm5lZCkge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5wdXNoKCfwn5S2ICcgKyBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBsdWdpbi5fd2FybmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMucHVzaCgn4pyFICcgKyBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1vZHVsZS51c2VkLnB1c2gocGx1Z2luLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXR1cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBDb21tb24uaW5mbyhzdGF0dXMuam9pbignICAnKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmluZHMgYWxsIG9mIGEgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzIGFuZCByZXR1cm5zIGEgZmxhdCBkZXBlbmRlbmN5IGdyYXBoLlxuICAgICAqIEBtZXRob2QgZGVwZW5kZW5jaWVzXG4gICAgICogQHBhcmFtIG1vZHVsZSB7fSBUaGUgbW9kdWxlLlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gQSBkZXBlbmRlbmN5IGdyYXBoLlxuICAgICAqL1xuICAgIFBsdWdpbi5kZXBlbmRlbmNpZXMgPSBmdW5jdGlvbihtb2R1bGUsIHRyYWNrZWQpIHtcbiAgICAgICAgdmFyIHBhcnNlZEJhc2UgPSBQbHVnaW4uZGVwZW5kZW5jeVBhcnNlKG1vZHVsZSksXG4gICAgICAgICAgICBuYW1lID0gcGFyc2VkQmFzZS5uYW1lO1xuXG4gICAgICAgIHRyYWNrZWQgPSB0cmFja2VkIHx8IHt9O1xuXG4gICAgICAgIGlmIChuYW1lIGluIHRyYWNrZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vZHVsZSA9IFBsdWdpbi5yZXNvbHZlKG1vZHVsZSkgfHwgbW9kdWxlO1xuXG4gICAgICAgIHRyYWNrZWRbbmFtZV0gPSBDb21tb24ubWFwKG1vZHVsZS51c2VzIHx8IFtdLCBmdW5jdGlvbihkZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICBpZiAoUGx1Z2luLmlzUGx1Z2luKGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgICAgICAgUGx1Z2luLnJlZ2lzdGVyKGRlcGVuZGVuY3kpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyc2VkID0gUGx1Z2luLmRlcGVuZGVuY3lQYXJzZShkZXBlbmRlbmN5KSxcbiAgICAgICAgICAgICAgICByZXNvbHZlZCA9IFBsdWdpbi5yZXNvbHZlKGRlcGVuZGVuY3kpO1xuXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWQgJiYgIVBsdWdpbi52ZXJzaW9uU2F0aXNmaWVzKHJlc29sdmVkLnZlcnNpb24sIHBhcnNlZC5yYW5nZSkpIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybihcbiAgICAgICAgICAgICAgICAgICAgJ1BsdWdpbi5kZXBlbmRlbmNpZXM6JywgUGx1Z2luLnRvU3RyaW5nKHJlc29sdmVkKSwgJ2RvZXMgbm90IHNhdGlzZnknLFxuICAgICAgICAgICAgICAgICAgICBQbHVnaW4udG9TdHJpbmcocGFyc2VkKSwgJ3VzZWQgYnknLCBQbHVnaW4udG9TdHJpbmcocGFyc2VkQmFzZSkgKyAnLidcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQuX3dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbW9kdWxlLl93YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybihcbiAgICAgICAgICAgICAgICAgICAgJ1BsdWdpbi5kZXBlbmRlbmNpZXM6JywgUGx1Z2luLnRvU3RyaW5nKGRlcGVuZGVuY3kpLCAndXNlZCBieScsXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b1N0cmluZyhwYXJzZWRCYXNlKSwgJ2NvdWxkIG5vdCBiZSByZXNvbHZlZC4nXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIG1vZHVsZS5fd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZC5uYW1lO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYWNrZWRbbmFtZV0ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIFBsdWdpbi5kZXBlbmRlbmNpZXModHJhY2tlZFtuYW1lXVtpXSwgdHJhY2tlZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhY2tlZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgZGVwZW5kZW5jeSBzdHJpbmcgaW50byBpdHMgY29tcG9uZW50cy5cbiAgICAgKiBUaGUgYGRlcGVuZGVuY3lgIGlzIGEgc3RyaW5nIG9mIHRoZSBmb3JtYXQgYCdtb2R1bGUtbmFtZSdgIG9yIGAnbW9kdWxlLW5hbWVAdmVyc2lvbidgLlxuICAgICAqIFNlZSBkb2N1bWVudGF0aW9uIGZvciBgUGx1Z2luLnZlcnNpb25QYXJzZWAgZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGZvcm1hdC5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBhbHNvIGhhbmRsZSBkZXBlbmRlbmNpZXMgdGhhdCBhcmUgYWxyZWFkeSByZXNvbHZlZCAoZS5nLiBhIG1vZHVsZSBvYmplY3QpLlxuICAgICAqIEBtZXRob2QgZGVwZW5kZW5jeVBhcnNlXG4gICAgICogQHBhcmFtIGRlcGVuZGVuY3kge3N0cmluZ30gVGhlIGRlcGVuZGVuY3kgb2YgdGhlIGZvcm1hdCBgJ21vZHVsZS1uYW1lJ2Agb3IgYCdtb2R1bGUtbmFtZUB2ZXJzaW9uJ2AuXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgZGVwZW5kZW5jeSBwYXJzZWQgaW50byBpdHMgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICBQbHVnaW4uZGVwZW5kZW5jeVBhcnNlID0gZnVuY3Rpb24oZGVwZW5kZW5jeSkge1xuICAgICAgICBpZiAoQ29tbW9uLmlzU3RyaW5nKGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgICB2YXIgcGF0dGVybiA9IC9eW1xcdy1dKyhAKFxcKnxbXFxefl0/XFxkK1xcLlxcZCtcXC5cXGQrKC1bMC05QS1aYS16LV0rKT8pKT8kLztcblxuICAgICAgICAgICAgaWYgKCFwYXR0ZXJuLnRlc3QoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybignUGx1Z2luLmRlcGVuZGVuY3lQYXJzZTonLCBkZXBlbmRlbmN5LCAnaXMgbm90IGEgdmFsaWQgZGVwZW5kZW5jeSBzdHJpbmcuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogZGVwZW5kZW5jeS5zcGxpdCgnQCcpWzBdLFxuICAgICAgICAgICAgICAgIHJhbmdlOiBkZXBlbmRlbmN5LnNwbGl0KCdAJylbMV0gfHwgJyonXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGRlcGVuZGVuY3kubmFtZSxcbiAgICAgICAgICAgIHJhbmdlOiBkZXBlbmRlbmN5LnJhbmdlIHx8IGRlcGVuZGVuY3kudmVyc2lvblxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSB2ZXJzaW9uIHN0cmluZyBpbnRvIGl0cyBjb21wb25lbnRzLiAgXG4gICAgICogVmVyc2lvbnMgYXJlIHN0cmljdGx5IG9mIHRoZSBmb3JtYXQgYHgueS56YCAoYXMgaW4gW3NlbXZlcl0oaHR0cDovL3NlbXZlci5vcmcvKSkuXG4gICAgICogVmVyc2lvbnMgbWF5IG9wdGlvbmFsbHkgaGF2ZSBhIHByZXJlbGVhc2UgdGFnIGluIHRoZSBmb3JtYXQgYHgueS56LWFscGhhYC5cbiAgICAgKiBSYW5nZXMgYXJlIGEgc3RyaWN0IHN1YnNldCBvZiBbbnBtIHJhbmdlc10oaHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9taXNjL3NlbXZlciNhZHZhbmNlZC1yYW5nZS1zeW50YXgpLlxuICAgICAqIE9ubHkgdGhlIGZvbGxvd2luZyByYW5nZSB0eXBlcyBhcmUgc3VwcG9ydGVkOlxuICAgICAqIC0gVGlsZGUgcmFuZ2VzIGUuZy4gYH4xLjIuM2BcbiAgICAgKiAtIENhcmV0IHJhbmdlcyBlLmcuIGBeMS4yLjNgXG4gICAgICogLSBFeGFjdCB2ZXJzaW9uIGUuZy4gYDEuMi4zYFxuICAgICAqIC0gQW55IHZlcnNpb24gYCpgXG4gICAgICogQG1ldGhvZCB2ZXJzaW9uUGFyc2VcbiAgICAgKiBAcGFyYW0gcmFuZ2Uge3N0cmluZ30gVGhlIHZlcnNpb24gc3RyaW5nLlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHZlcnNpb24gcmFuZ2UgcGFyc2VkIGludG8gaXRzIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgUGx1Z2luLnZlcnNpb25QYXJzZSA9IGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuID0gL15cXCp8W1xcXn5dP1xcZCtcXC5cXGQrXFwuXFxkKygtWzAtOUEtWmEtei1dKyk/JC87XG5cbiAgICAgICAgaWYgKCFwYXR0ZXJuLnRlc3QocmFuZ2UpKSB7XG4gICAgICAgICAgICBDb21tb24ud2FybignUGx1Z2luLnZlcnNpb25QYXJzZTonLCByYW5nZSwgJ2lzIG5vdCBhIHZhbGlkIHZlcnNpb24gb3IgcmFuZ2UuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWRlbnRpZmllcnMgPSByYW5nZS5zcGxpdCgnLScpO1xuICAgICAgICByYW5nZSA9IGlkZW50aWZpZXJzWzBdO1xuXG4gICAgICAgIHZhciBpc1JhbmdlID0gaXNOYU4oTnVtYmVyKHJhbmdlWzBdKSksXG4gICAgICAgICAgICB2ZXJzaW9uID0gaXNSYW5nZSA/IHJhbmdlLnN1YnN0cigxKSA6IHJhbmdlLFxuICAgICAgICAgICAgcGFydHMgPSBDb21tb24ubWFwKHZlcnNpb24uc3BsaXQoJy4nKSwgZnVuY3Rpb24ocGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIocGFydCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNSYW5nZTogaXNSYW5nZSxcbiAgICAgICAgICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgICAgICBvcGVyYXRvcjogaXNSYW5nZSA/IHJhbmdlWzBdIDogJycsXG4gICAgICAgICAgICBwYXJ0czogcGFydHMsXG4gICAgICAgICAgICBwcmVyZWxlYXNlOiBpZGVudGlmaWVyc1sxXSxcbiAgICAgICAgICAgIG51bWJlcjogcGFydHNbMF0gKiAxZTggKyBwYXJ0c1sxXSAqIDFlNCArIHBhcnRzWzJdXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIGB2ZXJzaW9uYCBzYXRpc2ZpZXMgdGhlIGdpdmVuIGByYW5nZWAuXG4gICAgICogU2VlIGRvY3VtZW50YXRpb24gZm9yIGBQbHVnaW4udmVyc2lvblBhcnNlYCBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgZm9ybWF0LlxuICAgICAqIElmIGEgdmVyc2lvbiBvciByYW5nZSBpcyBub3Qgc3BlY2lmaWVkLCB0aGVuIGFueSB2ZXJzaW9uIChgKmApIGlzIGFzc3VtZWQgdG8gc2F0aXNmeS5cbiAgICAgKiBAbWV0aG9kIHZlcnNpb25TYXRpc2ZpZXNcbiAgICAgKiBAcGFyYW0gdmVyc2lvbiB7c3RyaW5nfSBUaGUgdmVyc2lvbiBzdHJpbmcuXG4gICAgICogQHBhcmFtIHJhbmdlIHtzdHJpbmd9IFRoZSByYW5nZSBzdHJpbmcuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIGlmIGB2ZXJzaW9uYCBzYXRpc2ZpZXMgYHJhbmdlYCwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgUGx1Z2luLnZlcnNpb25TYXRpc2ZpZXMgPSBmdW5jdGlvbih2ZXJzaW9uLCByYW5nZSkge1xuICAgICAgICByYW5nZSA9IHJhbmdlIHx8ICcqJztcblxuICAgICAgICB2YXIgcmFuZ2VQYXJzZWQgPSBQbHVnaW4udmVyc2lvblBhcnNlKHJhbmdlKSxcbiAgICAgICAgICAgIHJhbmdlUGFydHMgPSByYW5nZVBhcnNlZC5wYXJ0cyxcbiAgICAgICAgICAgIHZlcnNpb25QYXJzZWQgPSBQbHVnaW4udmVyc2lvblBhcnNlKHZlcnNpb24pLFxuICAgICAgICAgICAgdmVyc2lvblBhcnRzID0gdmVyc2lvblBhcnNlZC5wYXJ0cztcblxuICAgICAgICBpZiAocmFuZ2VQYXJzZWQuaXNSYW5nZSkge1xuICAgICAgICAgICAgaWYgKHJhbmdlUGFyc2VkLm9wZXJhdG9yID09PSAnKicgfHwgdmVyc2lvbiA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyYW5nZVBhcnNlZC5vcGVyYXRvciA9PT0gJ34nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNpb25QYXJ0c1swXSA9PT0gcmFuZ2VQYXJ0c1swXSAmJiB2ZXJzaW9uUGFydHNbMV0gPT09IHJhbmdlUGFydHNbMV0gJiYgdmVyc2lvblBhcnRzWzJdID49IHJhbmdlUGFydHNbMl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyYW5nZVBhcnNlZC5vcGVyYXRvciA9PT0gJ14nKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlUGFydHNbMF0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uUGFydHNbMF0gPT09IHJhbmdlUGFydHNbMF0gJiYgdmVyc2lvblBhcnNlZC5udW1iZXIgPj0gcmFuZ2VQYXJzZWQubnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyYW5nZVBhcnRzWzFdID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmVyc2lvblBhcnRzWzFdID09PSByYW5nZVBhcnRzWzFdICYmIHZlcnNpb25QYXJ0c1syXSA+PSByYW5nZVBhcnRzWzJdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uUGFydHNbMl0gPT09IHJhbmdlUGFydHNbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVyc2lvbiA9PT0gcmFuZ2UgfHwgdmVyc2lvbiA9PT0gJyonO1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi9Db21tb25cIjoxNH1dLDIxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5SdW5uZXJgIG1vZHVsZSBpcyBhbiBvcHRpb25hbCB1dGlsaXR5IHdoaWNoIHByb3ZpZGVzIGEgZ2FtZSBsb29wLCBcbiogdGhhdCBoYW5kbGVzIGNvbnRpbnVvdXNseSB1cGRhdGluZyBhIGBNYXR0ZXIuRW5naW5lYCBmb3IgeW91IHdpdGhpbiBhIGJyb3dzZXIuXG4qIEl0IGlzIGludGVuZGVkIGZvciBkZXZlbG9wbWVudCBhbmQgZGVidWdnaW5nIHB1cnBvc2VzLCBidXQgbWF5IGFsc28gYmUgc3VpdGFibGUgZm9yIHNpbXBsZSBnYW1lcy5cbiogSWYgeW91IGFyZSB1c2luZyB5b3VyIG93biBnYW1lIGxvb3AgaW5zdGVhZCwgdGhlbiB5b3UgZG8gbm90IG5lZWQgdGhlIGBNYXR0ZXIuUnVubmVyYCBtb2R1bGUuXG4qIEluc3RlYWQganVzdCBjYWxsIGBFbmdpbmUudXBkYXRlKGVuZ2luZSwgZGVsdGEpYCBpbiB5b3VyIG93biBsb29wLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgUnVubmVyXG4qL1xuXG52YXIgUnVubmVyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUnVubmVyO1xuXG52YXIgRXZlbnRzID0gX2RlcmVxXygnLi9FdmVudHMnKTtcbnZhciBFbmdpbmUgPSBfZGVyZXFfKCcuL0VuZ2luZScpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4vQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIHZhciBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lLFxuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgIFxuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4gICAgfVxuXG4gICAgaWYgKCFfcmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHZhciBfZnJhbWVUaW1lb3V0O1xuXG4gICAgICAgIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjayl7IFxuICAgICAgICAgICAgX2ZyYW1lVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKENvbW1vbi5ub3coKSk7IFxuICAgICAgICAgICAgfSwgMTAwMCAvIDYwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfZnJhbWVUaW1lb3V0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFJ1bm5lci4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge30gb3B0aW9uc1xuICAgICAqL1xuICAgIFJ1bm5lci5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGZwczogNjAsXG4gICAgICAgICAgICBjb3JyZWN0aW9uOiAxLFxuICAgICAgICAgICAgZGVsdGFTYW1wbGVTaXplOiA2MCxcbiAgICAgICAgICAgIGNvdW50ZXJUaW1lc3RhbXA6IDAsXG4gICAgICAgICAgICBmcmFtZUNvdW50ZXI6IDAsXG4gICAgICAgICAgICBkZWx0YUhpc3Rvcnk6IFtdLFxuICAgICAgICAgICAgdGltZVByZXY6IG51bGwsXG4gICAgICAgICAgICB0aW1lU2NhbGVQcmV2OiAxLFxuICAgICAgICAgICAgZnJhbWVSZXF1ZXN0SWQ6IG51bGwsXG4gICAgICAgICAgICBpc0ZpeGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcnVubmVyID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgcnVubmVyLmRlbHRhID0gcnVubmVyLmRlbHRhIHx8IDEwMDAgLyBydW5uZXIuZnBzO1xuICAgICAgICBydW5uZXIuZGVsdGFNaW4gPSBydW5uZXIuZGVsdGFNaW4gfHwgMTAwMCAvIHJ1bm5lci5mcHM7XG4gICAgICAgIHJ1bm5lci5kZWx0YU1heCA9IHJ1bm5lci5kZWx0YU1heCB8fCAxMDAwIC8gKHJ1bm5lci5mcHMgKiAwLjUpO1xuICAgICAgICBydW5uZXIuZnBzID0gMTAwMCAvIHJ1bm5lci5kZWx0YTtcblxuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb250aW51b3VzbHkgdGlja3MgYSBgTWF0dGVyLkVuZ2luZWAgYnkgY2FsbGluZyBgUnVubmVyLnRpY2tgIG9uIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBldmVudC5cbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBSdW5uZXIucnVuID0gZnVuY3Rpb24ocnVubmVyLCBlbmdpbmUpIHtcbiAgICAgICAgLy8gY3JlYXRlIHJ1bm5lciBpZiBlbmdpbmUgaXMgZmlyc3QgYXJndW1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiBydW5uZXIucG9zaXRpb25JdGVyYXRpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZW5naW5lID0gcnVubmVyO1xuICAgICAgICAgICAgcnVubmVyID0gUnVubmVyLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgKGZ1bmN0aW9uIHJlbmRlcih0aW1lKXtcbiAgICAgICAgICAgIHJ1bm5lci5mcmFtZVJlcXVlc3RJZCA9IF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgJiYgcnVubmVyLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBSdW5uZXIudGljayhydW5uZXIsIGVuZ2luZSwgdGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBnYW1lIGxvb3AgdXRpbGl0eSB0aGF0IHVwZGF0ZXMgdGhlIGVuZ2luZSBhbmQgcmVuZGVyZXIgYnkgb25lIHN0ZXAgKGEgJ3RpY2snKS5cbiAgICAgKiBGZWF0dXJlcyBkZWx0YSBzbW9vdGhpbmcsIHRpbWUgY29ycmVjdGlvbiBhbmQgZml4ZWQgb3IgZHluYW1pYyB0aW1pbmcuXG4gICAgICogVHJpZ2dlcnMgYGJlZm9yZVRpY2tgLCBgdGlja2AgYW5kIGBhZnRlclRpY2tgIGV2ZW50cyBvbiB0aGUgZW5naW5lLlxuICAgICAqIENvbnNpZGVyIGp1c3QgYEVuZ2luZS51cGRhdGUoZW5naW5lLCBkZWx0YSlgIGlmIHlvdSdyZSB1c2luZyB5b3VyIG93biBsb29wLlxuICAgICAqIEBtZXRob2QgdGlja1xuICAgICAqIEBwYXJhbSB7cnVubmVyfSBydW5uZXJcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAgICAgKi9cbiAgICBSdW5uZXIudGljayA9IGZ1bmN0aW9uKHJ1bm5lciwgZW5naW5lLCB0aW1lKSB7XG4gICAgICAgIHZhciB0aW1pbmcgPSBlbmdpbmUudGltaW5nLFxuICAgICAgICAgICAgY29ycmVjdGlvbiA9IDEsXG4gICAgICAgICAgICBkZWx0YTtcblxuICAgICAgICAvLyBjcmVhdGUgYW4gZXZlbnQgb2JqZWN0XG4gICAgICAgIHZhciBldmVudCA9IHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltaW5nLnRpbWVzdGFtcFxuICAgICAgICB9O1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJ1bm5lciwgJ2JlZm9yZVRpY2snLCBldmVudCk7XG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2JlZm9yZVRpY2snLCBldmVudCk7IC8vIEBkZXByZWNhdGVkXG5cbiAgICAgICAgaWYgKHJ1bm5lci5pc0ZpeGVkKSB7XG4gICAgICAgICAgICAvLyBmaXhlZCB0aW1lc3RlcFxuICAgICAgICAgICAgZGVsdGEgPSBydW5uZXIuZGVsdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkeW5hbWljIHRpbWVzdGVwIGJhc2VkIG9uIHdhbGwgY2xvY2sgYmV0d2VlbiBjYWxsc1xuICAgICAgICAgICAgZGVsdGEgPSAodGltZSAtIHJ1bm5lci50aW1lUHJldikgfHwgcnVubmVyLmRlbHRhO1xuICAgICAgICAgICAgcnVubmVyLnRpbWVQcmV2ID0gdGltZTtcblxuICAgICAgICAgICAgLy8gb3B0aW1pc3RpY2FsbHkgZmlsdGVyIGRlbHRhIG92ZXIgYSBmZXcgZnJhbWVzLCB0byBpbXByb3ZlIHN0YWJpbGl0eVxuICAgICAgICAgICAgcnVubmVyLmRlbHRhSGlzdG9yeS5wdXNoKGRlbHRhKTtcbiAgICAgICAgICAgIHJ1bm5lci5kZWx0YUhpc3RvcnkgPSBydW5uZXIuZGVsdGFIaXN0b3J5LnNsaWNlKC1ydW5uZXIuZGVsdGFTYW1wbGVTaXplKTtcbiAgICAgICAgICAgIGRlbHRhID0gTWF0aC5taW4uYXBwbHkobnVsbCwgcnVubmVyLmRlbHRhSGlzdG9yeSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxpbWl0IGRlbHRhXG4gICAgICAgICAgICBkZWx0YSA9IGRlbHRhIDwgcnVubmVyLmRlbHRhTWluID8gcnVubmVyLmRlbHRhTWluIDogZGVsdGE7XG4gICAgICAgICAgICBkZWx0YSA9IGRlbHRhID4gcnVubmVyLmRlbHRhTWF4ID8gcnVubmVyLmRlbHRhTWF4IDogZGVsdGE7XG5cbiAgICAgICAgICAgIC8vIGNvcnJlY3Rpb24gZm9yIGRlbHRhXG4gICAgICAgICAgICBjb3JyZWN0aW9uID0gZGVsdGEgLyBydW5uZXIuZGVsdGE7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBlbmdpbmUgdGltaW5nIG9iamVjdFxuICAgICAgICAgICAgcnVubmVyLmRlbHRhID0gZGVsdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aW1lIGNvcnJlY3Rpb24gZm9yIHRpbWUgc2NhbGluZ1xuICAgICAgICBpZiAocnVubmVyLnRpbWVTY2FsZVByZXYgIT09IDApXG4gICAgICAgICAgICBjb3JyZWN0aW9uICo9IHRpbWluZy50aW1lU2NhbGUgLyBydW5uZXIudGltZVNjYWxlUHJldjtcblxuICAgICAgICBpZiAodGltaW5nLnRpbWVTY2FsZSA9PT0gMClcbiAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAwO1xuXG4gICAgICAgIHJ1bm5lci50aW1lU2NhbGVQcmV2ID0gdGltaW5nLnRpbWVTY2FsZTtcbiAgICAgICAgcnVubmVyLmNvcnJlY3Rpb24gPSBjb3JyZWN0aW9uO1xuXG4gICAgICAgIC8vIGZwcyBjb3VudGVyXG4gICAgICAgIHJ1bm5lci5mcmFtZUNvdW50ZXIgKz0gMTtcbiAgICAgICAgaWYgKHRpbWUgLSBydW5uZXIuY291bnRlclRpbWVzdGFtcCA+PSAxMDAwKSB7XG4gICAgICAgICAgICBydW5uZXIuZnBzID0gcnVubmVyLmZyYW1lQ291bnRlciAqICgodGltZSAtIHJ1bm5lci5jb3VudGVyVGltZXN0YW1wKSAvIDEwMDApO1xuICAgICAgICAgICAgcnVubmVyLmNvdW50ZXJUaW1lc3RhbXAgPSB0aW1lO1xuICAgICAgICAgICAgcnVubmVyLmZyYW1lQ291bnRlciA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICd0aWNrJywgZXZlbnQpO1xuICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICd0aWNrJywgZXZlbnQpOyAvLyBAZGVwcmVjYXRlZFxuXG4gICAgICAgIC8vIGlmIHdvcmxkIGhhcyBiZWVuIG1vZGlmaWVkLCBjbGVhciB0aGUgcmVuZGVyIHNjZW5lIGdyYXBoXG4gICAgICAgIGlmIChlbmdpbmUud29ybGQuaXNNb2RpZmllZCBcbiAgICAgICAgICAgICYmIGVuZ2luZS5yZW5kZXJcbiAgICAgICAgICAgICYmIGVuZ2luZS5yZW5kZXIuY29udHJvbGxlclxuICAgICAgICAgICAgJiYgZW5naW5lLnJlbmRlci5jb250cm9sbGVyLmNsZWFyKSB7XG4gICAgICAgICAgICBlbmdpbmUucmVuZGVyLmNvbnRyb2xsZXIuY2xlYXIoZW5naW5lLnJlbmRlcik7IC8vIEBkZXByZWNhdGVkXG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGVcbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYmVmb3JlVXBkYXRlJywgZXZlbnQpO1xuICAgICAgICBFbmdpbmUudXBkYXRlKGVuZ2luZSwgZGVsdGEsIGNvcnJlY3Rpb24pO1xuICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICdhZnRlclVwZGF0ZScsIGV2ZW50KTtcblxuICAgICAgICAvLyByZW5kZXJcbiAgICAgICAgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgaWYgKGVuZ2luZS5yZW5kZXIgJiYgZW5naW5lLnJlbmRlci5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihydW5uZXIsICdiZWZvcmVSZW5kZXInLCBldmVudCk7XG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdiZWZvcmVSZW5kZXInLCBldmVudCk7IC8vIEBkZXByZWNhdGVkXG5cbiAgICAgICAgICAgIGVuZ2luZS5yZW5kZXIuY29udHJvbGxlci53b3JsZChlbmdpbmUucmVuZGVyKTtcblxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYWZ0ZXJSZW5kZXInLCBldmVudCk7XG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdhZnRlclJlbmRlcicsIGV2ZW50KTsgLy8gQGRlcHJlY2F0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJ1bm5lciwgJ2FmdGVyVGljaycsIGV2ZW50KTtcbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnYWZ0ZXJUaWNrJywgZXZlbnQpOyAvLyBAZGVwcmVjYXRlZFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmRzIGV4ZWN1dGlvbiBvZiBgUnVubmVyLnJ1bmAgb24gdGhlIGdpdmVuIGBydW5uZXJgLCBieSBjYW5jZWxpbmcgdGhlIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0IGV2ZW50IGxvb3AuXG4gICAgICogSWYgeW91IHdpc2ggdG8gb25seSB0ZW1wb3JhcmlseSBwYXVzZSB0aGUgZW5naW5lLCBzZWUgYGVuZ2luZS5lbmFibGVkYCBpbnN0ZWFkLlxuICAgICAqIEBtZXRob2Qgc3RvcFxuICAgICAqIEBwYXJhbSB7cnVubmVyfSBydW5uZXJcbiAgICAgKi9cbiAgICBSdW5uZXIuc3RvcCA9IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWUocnVubmVyLmZyYW1lUmVxdWVzdElkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGBSdW5uZXIucnVuYC5cbiAgICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgICogQHBhcmFtIHtydW5uZXJ9IHJ1bm5lclxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBSdW5uZXIuc3RhcnQgPSBmdW5jdGlvbihydW5uZXIsIGVuZ2luZSkge1xuICAgICAgICBSdW5uZXIucnVuKHJ1bm5lciwgZW5naW5lKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgRXZlbnRzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYXQgdGhlIHN0YXJ0IG9mIGEgdGljaywgYmVmb3JlIGFueSB1cGRhdGVzIHRvIHRoZSBlbmdpbmUgb3IgdGltaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVRpY2tcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB0aW1pbmcgdXBkYXRlZCwgYnV0IGp1c3QgYmVmb3JlIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCB0aWNrXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhdCB0aGUgZW5kIG9mIGEgdGljaywgYWZ0ZXIgZW5naW5lIHVwZGF0ZSBhbmQgYWZ0ZXIgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyVGlja1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYmVmb3JlIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVVcGRhdGVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCBhZnRlclVwZGF0ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYmVmb3JlIHJlbmRlcmluZ1xuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVSZW5kZXJcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICogQGRlcHJlY2F0ZWRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhZnRlciByZW5kZXJpbmdcbiAgICAqXG4gICAgKiBAZXZlbnQgYWZ0ZXJSZW5kZXJcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICogQGRlcHJlY2F0ZWRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBzcGVjaWZpZXMgd2hldGhlciB0aGUgcnVubmVyIGlzIHJ1bm5pbmcgb3Igbm90LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGVuYWJsZWRcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgQm9vbGVhbmAgdGhhdCBzcGVjaWZpZXMgaWYgdGhlIHJ1bm5lciBzaG91bGQgdXNlIGEgZml4ZWQgdGltZXN0ZXAgKG90aGVyd2lzZSBpdCBpcyB2YXJpYWJsZSkuXG4gICAgICogSWYgdGltaW5nIGlzIGZpeGVkLCB0aGVuIHRoZSBhcHBhcmVudCBzaW11bGF0aW9uIHNwZWVkIHdpbGwgY2hhbmdlIGRlcGVuZGluZyBvbiB0aGUgZnJhbWUgcmF0ZSAoYnV0IGJlaGF2aW91ciB3aWxsIGJlIGRldGVybWluaXN0aWMpLlxuICAgICAqIElmIHRoZSB0aW1pbmcgaXMgdmFyaWFibGUsIHRoZW4gdGhlIGFwcGFyZW50IHNpbXVsYXRpb24gc3BlZWQgd2lsbCBiZSBjb25zdGFudCAoYXBwcm94aW1hdGVseSwgYnV0IGF0IHRoZSBjb3N0IG9mIGRldGVybWluaW5pc20pLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlzRml4ZWRcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIHRpbWUgc3RlcCBiZXR3ZWVuIHVwZGF0ZXMgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqIElmIGBlbmdpbmUudGltaW5nLmlzRml4ZWRgIGlzIHNldCB0byBgdHJ1ZWAsIHRoZW4gYGRlbHRhYCBpcyBmaXhlZC5cbiAgICAgKiBJZiBpdCBpcyBgZmFsc2VgLCB0aGVuIGBkZWx0YWAgY2FuIGR5bmFtaWNhbGx5IGNoYW5nZSB0byBtYWludGFpbiB0aGUgY29ycmVjdCBhcHBhcmVudCBzaW11bGF0aW9uIHNwZWVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGRlbHRhXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMTAwMCAvIDYwXG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi9Db21tb25cIjoxNCxcIi4vRW5naW5lXCI6MTUsXCIuL0V2ZW50c1wiOjE2fV0sMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlNsZWVwaW5nYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyB0byBtYW5hZ2UgdGhlIHNsZWVwaW5nIHN0YXRlIG9mIGJvZGllcy5cbipcbiogQGNsYXNzIFNsZWVwaW5nXG4qL1xuXG52YXIgU2xlZXBpbmcgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBTbGVlcGluZztcblxudmFyIEV2ZW50cyA9IF9kZXJlcV8oJy4vRXZlbnRzJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIFNsZWVwaW5nLl9tb3Rpb25XYWtlVGhyZXNob2xkID0gMC4xODtcbiAgICBTbGVlcGluZy5fbW90aW9uU2xlZXBUaHJlc2hvbGQgPSAwLjA4O1xuICAgIFNsZWVwaW5nLl9taW5CaWFzID0gMC45O1xuXG4gICAgLyoqXG4gICAgICogUHV0cyBib2RpZXMgdG8gc2xlZXAgb3Igd2FrZXMgdGhlbSB1cCBkZXBlbmRpbmcgb24gdGhlaXIgbW90aW9uLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBTbGVlcGluZy51cGRhdGUgPSBmdW5jdGlvbihib2RpZXMsIHRpbWVTY2FsZSkge1xuICAgICAgICB2YXIgdGltZUZhY3RvciA9IHRpbWVTY2FsZSAqIHRpbWVTY2FsZSAqIHRpbWVTY2FsZTtcblxuICAgICAgICAvLyB1cGRhdGUgYm9kaWVzIHNsZWVwaW5nIHN0YXR1c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgbW90aW9uID0gYm9keS5zcGVlZCAqIGJvZHkuc3BlZWQgKyBib2R5LmFuZ3VsYXJTcGVlZCAqIGJvZHkuYW5ndWxhclNwZWVkO1xuXG4gICAgICAgICAgICAvLyB3YWtlIHVwIGJvZGllcyBpZiB0aGV5IGhhdmUgYSBmb3JjZSBhcHBsaWVkXG4gICAgICAgICAgICBpZiAoYm9keS5mb3JjZS54ICE9PSAwIHx8IGJvZHkuZm9yY2UueSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtaW5Nb3Rpb24gPSBNYXRoLm1pbihib2R5Lm1vdGlvbiwgbW90aW9uKSxcbiAgICAgICAgICAgICAgICBtYXhNb3Rpb24gPSBNYXRoLm1heChib2R5Lm1vdGlvbiwgbW90aW9uKTtcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBiaWFzZWQgYXZlcmFnZSBtb3Rpb24gZXN0aW1hdGlvbiBiZXR3ZWVuIGZyYW1lc1xuICAgICAgICAgICAgYm9keS5tb3Rpb24gPSBTbGVlcGluZy5fbWluQmlhcyAqIG1pbk1vdGlvbiArICgxIC0gU2xlZXBpbmcuX21pbkJpYXMpICogbWF4TW90aW9uO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYm9keS5zbGVlcFRocmVzaG9sZCA+IDAgJiYgYm9keS5tb3Rpb24gPCBTbGVlcGluZy5fbW90aW9uU2xlZXBUaHJlc2hvbGQgKiB0aW1lRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgYm9keS5zbGVlcENvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYm9keS5zbGVlcENvdW50ZXIgPj0gYm9keS5zbGVlcFRocmVzaG9sZClcbiAgICAgICAgICAgICAgICAgICAgU2xlZXBpbmcuc2V0KGJvZHksIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChib2R5LnNsZWVwQ291bnRlciA+IDApIHtcbiAgICAgICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgc2V0IG9mIGNvbGxpZGluZyBwYWlycywgd2FrZXMgdGhlIHNsZWVwaW5nIGJvZGllcyBpbnZvbHZlZC5cbiAgICAgKiBAbWV0aG9kIGFmdGVyQ29sbGlzaW9uc1xuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGVcbiAgICAgKi9cbiAgICBTbGVlcGluZy5hZnRlckNvbGxpc2lvbnMgPSBmdW5jdGlvbihwYWlycywgdGltZVNjYWxlKSB7XG4gICAgICAgIHZhciB0aW1lRmFjdG9yID0gdGltZVNjYWxlICogdGltZVNjYWxlICogdGltZVNjYWxlO1xuXG4gICAgICAgIC8vIHdha2UgdXAgYm9kaWVzIGludm9sdmVkIGluIGNvbGxpc2lvbnNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZG9uJ3Qgd2FrZSBpbmFjdGl2ZSBwYWlyc1xuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb24sXG4gICAgICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24uYm9keUEucGFyZW50LCBcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5ib2R5Qi5wYXJlbnQ7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gZG9uJ3Qgd2FrZSBpZiBhdCBsZWFzdCBvbmUgYm9keSBpcyBzdGF0aWNcbiAgICAgICAgICAgIGlmICgoYm9keUEuaXNTbGVlcGluZyAmJiBib2R5Qi5pc1NsZWVwaW5nKSB8fCBib2R5QS5pc1N0YXRpYyB8fCBib2R5Qi5pc1N0YXRpYylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoYm9keUEuaXNTbGVlcGluZyB8fCBib2R5Qi5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsZWVwaW5nQm9keSA9IChib2R5QS5pc1NsZWVwaW5nICYmICFib2R5QS5pc1N0YXRpYykgPyBib2R5QSA6IGJvZHlCLFxuICAgICAgICAgICAgICAgICAgICBtb3ZpbmdCb2R5ID0gc2xlZXBpbmdCb2R5ID09PSBib2R5QSA/IGJvZHlCIDogYm9keUE7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXNsZWVwaW5nQm9keS5pc1N0YXRpYyAmJiBtb3ZpbmdCb2R5Lm1vdGlvbiA+IFNsZWVwaW5nLl9tb3Rpb25XYWtlVGhyZXNob2xkICogdGltZUZhY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoc2xlZXBpbmdCb2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgXG4gICAgLyoqXG4gICAgICogU2V0IGEgYm9keSBhcyBzbGVlcGluZyBvciBhd2FrZS5cbiAgICAgKiBAbWV0aG9kIHNldFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTbGVlcGluZ1xuICAgICAqL1xuICAgIFNsZWVwaW5nLnNldCA9IGZ1bmN0aW9uKGJvZHksIGlzU2xlZXBpbmcpIHtcbiAgICAgICAgdmFyIHdhc1NsZWVwaW5nID0gYm9keS5pc1NsZWVwaW5nO1xuXG4gICAgICAgIGlmIChpc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICBib2R5LmlzU2xlZXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgYm9keS5zbGVlcENvdW50ZXIgPSBib2R5LnNsZWVwVGhyZXNob2xkO1xuXG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uSW1wdWxzZS54ID0gMDtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnkgPSAwO1xuXG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gYm9keS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSA9IGJvZHkucG9zaXRpb24ueTtcblxuICAgICAgICAgICAgYm9keS5hbmdsZVByZXYgPSBib2R5LmFuZ2xlO1xuICAgICAgICAgICAgYm9keS5zcGVlZCA9IDA7XG4gICAgICAgICAgICBib2R5LmFuZ3VsYXJTcGVlZCA9IDA7XG4gICAgICAgICAgICBib2R5Lm1vdGlvbiA9IDA7XG5cbiAgICAgICAgICAgIGlmICghd2FzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgICAgICBFdmVudHMudHJpZ2dlcihib2R5LCAnc2xlZXBTdGFydCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keS5pc1NsZWVwaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciA9IDA7XG5cbiAgICAgICAgICAgIGlmICh3YXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGJvZHksICdzbGVlcEVuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuL0V2ZW50c1wiOjE2fV0sMjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkJvZGllc2AgbW9kdWxlIGNvbnRhaW5zIGZhY3RvcnkgbWV0aG9kcyBmb3IgY3JlYXRpbmcgcmlnaWQgYm9keSBtb2RlbHMgXG4qIHdpdGggY29tbW9ubHkgdXNlZCBib2R5IGNvbmZpZ3VyYXRpb25zIChzdWNoIGFzIHJlY3RhbmdsZXMsIGNpcmNsZXMgYW5kIG90aGVyIHBvbHlnb25zKS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIEJvZGllc1xuKi9cblxuLy8gVE9ETzogdHJ1ZSBjaXJjbGUgYm9kaWVzXG5cbnZhciBCb2RpZXMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb2RpZXM7XG5cbnZhciBWZXJ0aWNlcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlcnRpY2VzJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcbnZhciBCb2R5ID0gX2RlcmVxXygnLi4vYm9keS9Cb2R5Jyk7XG52YXIgQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG52YXIgVmVjdG9yID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG52YXIgZGVjb21wO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJpZ2lkIGJvZHkgbW9kZWwgd2l0aCBhIHJlY3RhbmdsZSBodWxsLiBcbiAgICAgKiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBvZiB0aGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIHJlY3RhbmdsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEByZXR1cm4ge2JvZHl9IEEgbmV3IHJlY3RhbmdsZSBib2R5XG4gICAgICovXG4gICAgQm9kaWVzLnJlY3RhbmdsZSA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdmFyIHJlY3RhbmdsZSA9IHsgXG4gICAgICAgICAgICBsYWJlbDogJ1JlY3RhbmdsZSBCb2R5JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IHgsIHk6IHkgfSxcbiAgICAgICAgICAgIHZlcnRpY2VzOiBWZXJ0aWNlcy5mcm9tUGF0aCgnTCAwIDAgTCAnICsgd2lkdGggKyAnIDAgTCAnICsgd2lkdGggKyAnICcgKyBoZWlnaHQgKyAnIEwgMCAnICsgaGVpZ2h0KVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNoYW1mZXIpIHtcbiAgICAgICAgICAgIHZhciBjaGFtZmVyID0gb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICAgICAgcmVjdGFuZ2xlLnZlcnRpY2VzID0gVmVydGljZXMuY2hhbWZlcihyZWN0YW5nbGUudmVydGljZXMsIGNoYW1mZXIucmFkaXVzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW1mZXIucXVhbGl0eSwgY2hhbWZlci5xdWFsaXR5TWluLCBjaGFtZmVyLnF1YWxpdHlNYXgpO1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHt9LCByZWN0YW5nbGUsIG9wdGlvbnMpKTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmlnaWQgYm9keSBtb2RlbCB3aXRoIGEgdHJhcGV6b2lkIGh1bGwuIFxuICAgICAqIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIG9mIHRoZSBgTWF0dGVyLkJvZHlgIG1vZHVsZSBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgdHJhcGV6b2lkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2xvcGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7Ym9keX0gQSBuZXcgdHJhcGV6b2lkIGJvZHlcbiAgICAgKi9cbiAgICBCb2RpZXMudHJhcGV6b2lkID0gZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCwgc2xvcGUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgc2xvcGUgKj0gMC41O1xuICAgICAgICB2YXIgcm9vZiA9ICgxIC0gKHNsb3BlICogMikpICogd2lkdGg7XG4gICAgICAgIFxuICAgICAgICB2YXIgeDEgPSB3aWR0aCAqIHNsb3BlLFxuICAgICAgICAgICAgeDIgPSB4MSArIHJvb2YsXG4gICAgICAgICAgICB4MyA9IHgyICsgeDEsXG4gICAgICAgICAgICB2ZXJ0aWNlc1BhdGg7XG5cbiAgICAgICAgaWYgKHNsb3BlIDwgMC41KSB7XG4gICAgICAgICAgICB2ZXJ0aWNlc1BhdGggPSAnTCAwIDAgTCAnICsgeDEgKyAnICcgKyAoLWhlaWdodCkgKyAnIEwgJyArIHgyICsgJyAnICsgKC1oZWlnaHQpICsgJyBMICcgKyB4MyArICcgMCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2ZXJ0aWNlc1BhdGggPSAnTCAwIDAgTCAnICsgeDIgKyAnICcgKyAoLWhlaWdodCkgKyAnIEwgJyArIHgzICsgJyAwJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFwZXpvaWQgPSB7IFxuICAgICAgICAgICAgbGFiZWw6ICdUcmFwZXpvaWQgQm9keScsXG4gICAgICAgICAgICBwb3NpdGlvbjogeyB4OiB4LCB5OiB5IH0sXG4gICAgICAgICAgICB2ZXJ0aWNlczogVmVydGljZXMuZnJvbVBhdGgodmVydGljZXNQYXRoKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNoYW1mZXIpIHtcbiAgICAgICAgICAgIHZhciBjaGFtZmVyID0gb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICAgICAgdHJhcGV6b2lkLnZlcnRpY2VzID0gVmVydGljZXMuY2hhbWZlcih0cmFwZXpvaWQudmVydGljZXMsIGNoYW1mZXIucmFkaXVzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW1mZXIucXVhbGl0eSwgY2hhbWZlci5xdWFsaXR5TWluLCBjaGFtZmVyLnF1YWxpdHlNYXgpO1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHt9LCB0cmFwZXpvaWQsIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSBjaXJjbGUgaHVsbC4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjaXJjbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heFNpZGVzXVxuICAgICAqIEByZXR1cm4ge2JvZHl9IEEgbmV3IGNpcmNsZSBib2R5XG4gICAgICovXG4gICAgQm9kaWVzLmNpcmNsZSA9IGZ1bmN0aW9uKHgsIHksIHJhZGl1cywgb3B0aW9ucywgbWF4U2lkZXMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdmFyIGNpcmNsZSA9IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ2lyY2xlIEJvZHknLFxuICAgICAgICAgICAgY2lyY2xlUmFkaXVzOiByYWRpdXNcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIGFwcHJveGltYXRlIGNpcmNsZXMgd2l0aCBwb2x5Z29ucyB1bnRpbCB0cnVlIGNpcmNsZXMgaW1wbGVtZW50ZWQgaW4gU0FUXG4gICAgICAgIG1heFNpZGVzID0gbWF4U2lkZXMgfHwgMjU7XG4gICAgICAgIHZhciBzaWRlcyA9IE1hdGguY2VpbChNYXRoLm1heCgxMCwgTWF0aC5taW4obWF4U2lkZXMsIHJhZGl1cykpKTtcblxuICAgICAgICAvLyBvcHRpbWlzYXRpb246IGFsd2F5cyB1c2UgZXZlbiBudW1iZXIgb2Ygc2lkZXMgKGhhbGYgdGhlIG51bWJlciBvZiB1bmlxdWUgYXhlcylcbiAgICAgICAgaWYgKHNpZGVzICUgMiA9PT0gMSlcbiAgICAgICAgICAgIHNpZGVzICs9IDE7XG5cbiAgICAgICAgcmV0dXJuIEJvZGllcy5wb2x5Z29uKHgsIHksIHNpZGVzLCByYWRpdXMsIENvbW1vbi5leHRlbmQoe30sIGNpcmNsZSwgb3B0aW9ucykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJpZ2lkIGJvZHkgbW9kZWwgd2l0aCBhIHJlZ3VsYXIgcG9seWdvbiBodWxsIHdpdGggdGhlIGdpdmVuIG51bWJlciBvZiBzaWRlcy4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBwb2x5Z29uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWRlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7Ym9keX0gQSBuZXcgcmVndWxhciBwb2x5Z29uIGJvZHlcbiAgICAgKi9cbiAgICBCb2RpZXMucG9seWdvbiA9IGZ1bmN0aW9uKHgsIHksIHNpZGVzLCByYWRpdXMsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgaWYgKHNpZGVzIDwgMylcbiAgICAgICAgICAgIHJldHVybiBCb2RpZXMuY2lyY2xlKHgsIHksIHJhZGl1cywgb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgLyBzaWRlcyxcbiAgICAgICAgICAgIHBhdGggPSAnJyxcbiAgICAgICAgICAgIG9mZnNldCA9IHRoZXRhICogMC41O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lkZXM7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlID0gb2Zmc2V0ICsgKGkgKiB0aGV0YSksXG4gICAgICAgICAgICAgICAgeHggPSBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICAgICAgeXkgPSBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXM7XG5cbiAgICAgICAgICAgIHBhdGggKz0gJ0wgJyArIHh4LnRvRml4ZWQoMykgKyAnICcgKyB5eS50b0ZpeGVkKDMpICsgJyAnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvbHlnb24gPSB7IFxuICAgICAgICAgICAgbGFiZWw6ICdQb2x5Z29uIEJvZHknLFxuICAgICAgICAgICAgcG9zaXRpb246IHsgeDogeCwgeTogeSB9LFxuICAgICAgICAgICAgdmVydGljZXM6IFZlcnRpY2VzLmZyb21QYXRoKHBhdGgpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhbWZlcikge1xuICAgICAgICAgICAgdmFyIGNoYW1mZXIgPSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgICAgICBwb2x5Z29uLnZlcnRpY2VzID0gVmVydGljZXMuY2hhbWZlcihwb2x5Z29uLnZlcnRpY2VzLCBjaGFtZmVyLnJhZGl1cywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFtZmVyLnF1YWxpdHksIGNoYW1mZXIucXVhbGl0eU1pbiwgY2hhbWZlci5xdWFsaXR5TWF4KTtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQm9keS5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7fSwgcG9seWdvbiwgb3B0aW9ucykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYm9keSB1c2luZyB0aGUgc3VwcGxpZWQgdmVydGljZXMgKG9yIGFuIGFycmF5IGNvbnRhaW5pbmcgbXVsdGlwbGUgc2V0cyBvZiB2ZXJ0aWNlcykuXG4gICAgICogSWYgdGhlIHZlcnRpY2VzIGFyZSBjb252ZXgsIHRoZXkgd2lsbCBwYXNzIHRocm91Z2ggYXMgc3VwcGxpZWQuXG4gICAgICogT3RoZXJ3aXNlIGlmIHRoZSB2ZXJ0aWNlcyBhcmUgY29uY2F2ZSwgdGhleSB3aWxsIGJlIGRlY29tcG9zZWQgaWYgW3BvbHktZGVjb21wLmpzXShodHRwczovL2dpdGh1Yi5jb20vc2NodGVwcGUvcG9seS1kZWNvbXAuanMpIGlzIGF2YWlsYWJsZS5cbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBwcm9jZXNzIGlzIG5vdCBndWFyYW50ZWVkIHRvIHN1cHBvcnQgY29tcGxleCBzZXRzIG9mIHZlcnRpY2VzIChlLmcuIHRob3NlIHdpdGggaG9sZXMgbWF5IGZhaWwpLlxuICAgICAqIEJ5IGRlZmF1bHQgdGhlIGRlY29tcG9zaXRpb24gd2lsbCBkaXNjYXJkIGNvbGxpbmVhciBlZGdlcyAodG8gaW1wcm92ZSBwZXJmb3JtYW5jZSkuXG4gICAgICogSXQgY2FuIGFsc28gb3B0aW9uYWxseSBkaXNjYXJkIGFueSBwYXJ0cyB0aGF0IGhhdmUgYW4gYXJlYSBsZXNzIHRoYW4gYG1pbmltdW1BcmVhYC5cbiAgICAgKiBJZiB0aGUgdmVydGljZXMgY2FuIG5vdCBiZSBkZWNvbXBvc2VkLCB0aGUgcmVzdWx0IHdpbGwgZmFsbCBiYWNrIHRvIHVzaW5nIHRoZSBjb252ZXggaHVsbC5cbiAgICAgKiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBgTWF0dGVyLkJvZHlgIHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIG9mIHRoZSBgTWF0dGVyLkJvZHlgIG1vZHVsZSBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgZnJvbVZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEBwYXJhbSBbW3ZlY3Rvcl1dIHZlcnRleFNldHNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHBhcmFtIHtib29sfSBbZmxhZ0ludGVybmFsPWZhbHNlXVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVtb3ZlQ29sbGluZWFyPTAuMDFdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttaW5pbXVtQXJlYT0xMF1cbiAgICAgKiBAcmV0dXJuIHtib2R5fVxuICAgICAqL1xuICAgIEJvZGllcy5mcm9tVmVydGljZXMgPSBmdW5jdGlvbih4LCB5LCB2ZXJ0ZXhTZXRzLCBvcHRpb25zLCBmbGFnSW50ZXJuYWwsIHJlbW92ZUNvbGxpbmVhciwgbWluaW11bUFyZWEpIHtcbiAgICAgICAgaWYgKCFkZWNvbXApIHtcbiAgICAgICAgICAgIGRlY29tcCA9IENvbW1vbi5fcmVxdWlyZUdsb2JhbCgnZGVjb21wJywgJ3BvbHktZGVjb21wJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYm9keSxcbiAgICAgICAgICAgIHBhcnRzLFxuICAgICAgICAgICAgaXNDb252ZXgsXG4gICAgICAgICAgICB2ZXJ0aWNlcyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgayxcbiAgICAgICAgICAgIHYsXG4gICAgICAgICAgICB6O1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBwYXJ0cyA9IFtdO1xuXG4gICAgICAgIGZsYWdJbnRlcm5hbCA9IHR5cGVvZiBmbGFnSW50ZXJuYWwgIT09ICd1bmRlZmluZWQnID8gZmxhZ0ludGVybmFsIDogZmFsc2U7XG4gICAgICAgIHJlbW92ZUNvbGxpbmVhciA9IHR5cGVvZiByZW1vdmVDb2xsaW5lYXIgIT09ICd1bmRlZmluZWQnID8gcmVtb3ZlQ29sbGluZWFyIDogMC4wMTtcbiAgICAgICAgbWluaW11bUFyZWEgPSB0eXBlb2YgbWluaW11bUFyZWEgIT09ICd1bmRlZmluZWQnID8gbWluaW11bUFyZWEgOiAxMDtcblxuICAgICAgICBpZiAoIWRlY29tcCkge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4oJ0JvZGllcy5mcm9tVmVydGljZXM6IHBvbHktZGVjb21wLmpzIHJlcXVpcmVkLiBDb3VsZCBub3QgZGVjb21wb3NlIHZlcnRpY2VzLiBGYWxsYmFjayB0byBjb252ZXggaHVsbC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuc3VyZSB2ZXJ0ZXhTZXRzIGlzIGFuIGFycmF5IG9mIGFycmF5c1xuICAgICAgICBpZiAoIUNvbW1vbi5pc0FycmF5KHZlcnRleFNldHNbMF0pKSB7XG4gICAgICAgICAgICB2ZXJ0ZXhTZXRzID0gW3ZlcnRleFNldHNdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2ID0gMDsgdiA8IHZlcnRleFNldHMubGVuZ3RoOyB2ICs9IDEpIHtcbiAgICAgICAgICAgIHZlcnRpY2VzID0gdmVydGV4U2V0c1t2XTtcbiAgICAgICAgICAgIGlzQ29udmV4ID0gVmVydGljZXMuaXNDb252ZXgodmVydGljZXMpO1xuXG4gICAgICAgICAgICBpZiAoaXNDb252ZXggfHwgIWRlY29tcCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbnZleCkge1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA9IFZlcnRpY2VzLmNsb2Nrd2lzZVNvcnQodmVydGljZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIGNvbnZleCBodWxsIHdoZW4gZGVjb21wb3NpdGlvbiBpcyBub3QgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXMgPSBWZXJ0aWNlcy5odWxsKHZlcnRpY2VzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHsgeDogeCwgeTogeSB9LFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczogdmVydGljZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGlzZSBhIGRlY29tcG9zaXRpb25cbiAgICAgICAgICAgICAgICB2YXIgY29uY2F2ZSA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2ZXJ0ZXgueCwgdmVydGV4LnldO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gdmVydGljZXMgYXJlIGNvbmNhdmUgYW5kIHNpbXBsZSwgd2UgY2FuIGRlY29tcG9zZSBpbnRvIHBhcnRzXG4gICAgICAgICAgICAgICAgZGVjb21wLm1ha2VDQ1coY29uY2F2ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlbW92ZUNvbGxpbmVhciAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIGRlY29tcC5yZW1vdmVDb2xsaW5lYXJQb2ludHMoY29uY2F2ZSwgcmVtb3ZlQ29sbGluZWFyKTtcblxuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgcXVpY2sgZGVjb21wb3NpdGlvbiBhbGdvcml0aG0gKEJheWF6aXQpXG4gICAgICAgICAgICAgICAgdmFyIGRlY29tcG9zZWQgPSBkZWNvbXAucXVpY2tEZWNvbXAoY29uY2F2ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBkZWNvbXBvc2VkIGNodW5rXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGRlY29tcG9zZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNodW5rID0gZGVjb21wb3NlZFtpXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHZlcnRpY2VzIGludG8gdGhlIGNvcnJlY3Qgc3RydWN0dXJlXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHVua1ZlcnRpY2VzID0gY2h1bmsubWFwKGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHZlcnRpY2VzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHZlcnRpY2VzWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIHNtYWxsIGNodW5rc1xuICAgICAgICAgICAgICAgICAgICBpZiAobWluaW11bUFyZWEgPiAwICYmIFZlcnRpY2VzLmFyZWEoY2h1bmtWZXJ0aWNlcykgPCBtaW5pbXVtQXJlYSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGNvbXBvdW5kIHBhcnRcbiAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogVmVydGljZXMuY2VudHJlKGNodW5rVmVydGljZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljZXM6IGNodW5rVmVydGljZXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3JlYXRlIGJvZHkgcGFydHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYXJ0c1tpXSA9IEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQocGFydHNbaV0sIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZsYWcgaW50ZXJuYWwgZWRnZXMgKGNvaW5jaWRlbnQgcGFydCBlZGdlcylcbiAgICAgICAgaWYgKGZsYWdJbnRlcm5hbCkge1xuICAgICAgICAgICAgdmFyIGNvaW5jaWRlbnRfbWF4X2Rpc3QgPSA1O1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydEEgPSBwYXJ0c1tpXTtcblxuICAgICAgICAgICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRCID0gcGFydHNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5vdmVybGFwcyhwYXJ0QS5ib3VuZHMsIHBhcnRCLmJvdW5kcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXYgPSBwYXJ0QS52ZXJ0aWNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYnYgPSBwYXJ0Qi52ZXJ0aWNlcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0ZSB2ZXJ0aWNlcyBvZiBib3RoIHBhcnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcGFydEEudmVydGljZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHogPSAwOyB6IDwgcGFydEIudmVydGljZXMubGVuZ3RoOyB6KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmluZCBkaXN0YW5jZXMgYmV0d2VlbiB0aGUgdmVydGljZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhID0gVmVjdG9yLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yLnN1YihwYXZbKGsgKyAxKSAlIHBhdi5sZW5ndGhdLCBwYnZbel0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiID0gVmVjdG9yLm1hZ25pdHVkZVNxdWFyZWQoVmVjdG9yLnN1YihwYXZba10sIHBidlsoeiArIDEpICUgcGJ2Lmxlbmd0aF0pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBib3RoIHZlcnRpY2VzIGFyZSB2ZXJ5IGNsb3NlLCBjb25zaWRlciB0aGUgZWRnZSBjb25jaWRlbnQgKGludGVybmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGEgPCBjb2luY2lkZW50X21heF9kaXN0ICYmIGRiIDwgY29pbmNpZGVudF9tYXhfZGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF2W2tdLmlzSW50ZXJuYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGJ2W3pdLmlzSW50ZXJuYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBwYXJlbnQgYm9keSB0byBiZSByZXR1cm5lZCwgdGhhdCBjb250YWlucyBnZW5lcmF0ZWQgY29tcG91bmQgcGFydHNcbiAgICAgICAgICAgIGJvZHkgPSBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHsgcGFydHM6IHBhcnRzLnNsaWNlKDApIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwgeyB4OiB4LCB5OiB5IH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYm9keTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0c1swXTtcbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4LFwiLi4vZ2VvbWV0cnkvVmVydGljZXNcIjoyOX1dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Db21wb3NpdGVzYCBtb2R1bGUgY29udGFpbnMgZmFjdG9yeSBtZXRob2RzIGZvciBjcmVhdGluZyBjb21wb3NpdGUgYm9kaWVzXG4qIHdpdGggY29tbW9ubHkgdXNlZCBjb25maWd1cmF0aW9ucyAoc3VjaCBhcyBzdGFja3MgYW5kIGNoYWlucykuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBDb21wb3NpdGVzXG4qL1xuXG52YXIgQ29tcG9zaXRlcyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvc2l0ZXM7XG5cbnZhciBDb21wb3NpdGUgPSBfZGVyZXFfKCcuLi9ib2R5L0NvbXBvc2l0ZScpO1xudmFyIENvbnN0cmFpbnQgPSBfZGVyZXFfKCcuLi9jb25zdHJhaW50L0NvbnN0cmFpbnQnKTtcbnZhciBDb21tb24gPSBfZGVyZXFfKCcuLi9jb3JlL0NvbW1vbicpO1xudmFyIEJvZHkgPSBfZGVyZXFfKCcuLi9ib2R5L0JvZHknKTtcbnZhciBCb2RpZXMgPSBfZGVyZXFfKCcuL0JvZGllcycpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY29tcG9zaXRlIGNvbnRhaW5pbmcgYm9kaWVzIGNyZWF0ZWQgaW4gdGhlIGNhbGxiYWNrIGluIGEgZ3JpZCBhcnJhbmdlbWVudC5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHVzZXMgdGhlIGJvZHkncyBib3VuZHMgdG8gcHJldmVudCBvdmVybGFwcy5cbiAgICAgKiBAbWV0aG9kIHN0YWNrXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHh4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHl5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93c1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5HYXBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93R2FwXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBjb250YWluaW5nIG9iamVjdHMgY3JlYXRlZCBpbiB0aGUgY2FsbGJhY2tcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLnN0YWNrID0gZnVuY3Rpb24oeHgsIHl5LCBjb2x1bW5zLCByb3dzLCBjb2x1bW5HYXAsIHJvd0dhcCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHN0YWNrID0gQ29tcG9zaXRlLmNyZWF0ZSh7IGxhYmVsOiAnU3RhY2snIH0pLFxuICAgICAgICAgICAgeCA9IHh4LFxuICAgICAgICAgICAgeSA9IHl5LFxuICAgICAgICAgICAgbGFzdEJvZHksXG4gICAgICAgICAgICBpID0gMDtcblxuICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCByb3dzOyByb3crKykge1xuICAgICAgICAgICAgdmFyIG1heEhlaWdodCA9IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGNvbHVtbiA9IDA7IGNvbHVtbiA8IGNvbHVtbnM7IGNvbHVtbisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBjYWxsYmFjayh4LCB5LCBjb2x1bW4sIHJvdywgbGFzdEJvZHksIGkpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm9keUhlaWdodCA9IGJvZHkuYm91bmRzLm1heC55IC0gYm9keS5ib3VuZHMubWluLnksXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5V2lkdGggPSBib2R5LmJvdW5kcy5tYXgueCAtIGJvZHkuYm91bmRzLm1pbi54OyBcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keUhlaWdodCA+IG1heEhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IGJvZHlIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBCb2R5LnRyYW5zbGF0ZShib2R5LCB7IHg6IGJvZHlXaWR0aCAqIDAuNSwgeTogYm9keUhlaWdodCAqIDAuNSB9KTtcblxuICAgICAgICAgICAgICAgICAgICB4ID0gYm9keS5ib3VuZHMubWF4LnggKyBjb2x1bW5HYXA7XG5cbiAgICAgICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZEJvZHkoc3RhY2ssIGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbGFzdEJvZHkgPSBib2R5O1xuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCArPSBjb2x1bW5HYXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB5ICs9IG1heEhlaWdodCArIHJvd0dhcDtcbiAgICAgICAgICAgIHggPSB4eDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGFjaztcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIENoYWlucyBhbGwgYm9kaWVzIGluIHRoZSBnaXZlbiBjb21wb3NpdGUgdG9nZXRoZXIgdXNpbmcgY29uc3RyYWludHMuXG4gICAgICogQG1ldGhvZCBjaGFpblxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geE9mZnNldEFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geU9mZnNldEFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geE9mZnNldEJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geU9mZnNldEJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIGNvbnRhaW5pbmcgb2JqZWN0cyBjaGFpbmVkIHRvZ2V0aGVyIHdpdGggY29uc3RyYWludHNcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLmNoYWluID0gZnVuY3Rpb24oY29tcG9zaXRlLCB4T2Zmc2V0QSwgeU9mZnNldEEsIHhPZmZzZXRCLCB5T2Zmc2V0Qiwgb3B0aW9ucykge1xuICAgICAgICB2YXIgYm9kaWVzID0gY29tcG9zaXRlLmJvZGllcztcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keUEgPSBib2RpZXNbaSAtIDFdLFxuICAgICAgICAgICAgICAgIGJvZHlCID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIGJvZHlBSGVpZ2h0ID0gYm9keUEuYm91bmRzLm1heC55IC0gYm9keUEuYm91bmRzLm1pbi55LFxuICAgICAgICAgICAgICAgIGJvZHlBV2lkdGggPSBib2R5QS5ib3VuZHMubWF4LnggLSBib2R5QS5ib3VuZHMubWluLngsIFxuICAgICAgICAgICAgICAgIGJvZHlCSGVpZ2h0ID0gYm9keUIuYm91bmRzLm1heC55IC0gYm9keUIuYm91bmRzLm1pbi55LFxuICAgICAgICAgICAgICAgIGJvZHlCV2lkdGggPSBib2R5Qi5ib3VuZHMubWF4LnggLSBib2R5Qi5ib3VuZHMubWluLng7XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGJvZHlBOiBib2R5QSxcbiAgICAgICAgICAgICAgICBwb2ludEE6IHsgeDogYm9keUFXaWR0aCAqIHhPZmZzZXRBLCB5OiBib2R5QUhlaWdodCAqIHlPZmZzZXRBIH0sXG4gICAgICAgICAgICAgICAgYm9keUI6IGJvZHlCLFxuICAgICAgICAgICAgICAgIHBvaW50QjogeyB4OiBib2R5QldpZHRoICogeE9mZnNldEIsIHk6IGJvZHlCSGVpZ2h0ICogeU9mZnNldEIgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgICAgXG4gICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKGNvbnN0cmFpbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBvc2l0ZS5sYWJlbCArPSAnIENoYWluJztcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbm5lY3RzIGJvZGllcyBpbiB0aGUgY29tcG9zaXRlIHdpdGggY29uc3RyYWludHMgaW4gYSBncmlkIHBhdHRlcm4sIHdpdGggb3B0aW9uYWwgY3Jvc3MgYnJhY2VzLlxuICAgICAqIEBtZXRob2QgbWVzaFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtib29sZWFufSBjcm9zc0JyYWNlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBjb21wb3NpdGUgY29udGFpbmluZyBvYmplY3RzIG1lc2hlZCB0b2dldGhlciB3aXRoIGNvbnN0cmFpbnRzXG4gICAgICovXG4gICAgQ29tcG9zaXRlcy5tZXNoID0gZnVuY3Rpb24oY29tcG9zaXRlLCBjb2x1bW5zLCByb3dzLCBjcm9zc0JyYWNlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSBjb21wb3NpdGUuYm9kaWVzLFxuICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgY29sLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIGJvZHlDO1xuICAgICAgICBcbiAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCByb3dzOyByb3crKykge1xuICAgICAgICAgICAgZm9yIChjb2wgPSAxOyBjb2wgPCBjb2x1bW5zOyBjb2wrKykge1xuICAgICAgICAgICAgICAgIGJvZHlBID0gYm9kaWVzWyhjb2wgLSAxKSArIChyb3cgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgYm9keUIgPSBib2RpZXNbY29sICsgKHJvdyAqIGNvbHVtbnMpXTtcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjb21wb3NpdGUsIENvbnN0cmFpbnQuY3JlYXRlKENvbW1vbi5leHRlbmQoeyBib2R5QTogYm9keUEsIGJvZHlCOiBib2R5QiB9LCBvcHRpb25zKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm93ID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29sID0gMDsgY29sIDwgY29sdW1uczsgY29sKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keUEgPSBib2RpZXNbY29sICsgKChyb3cgLSAxKSAqIGNvbHVtbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgYm9keUIgPSBib2RpZXNbY29sICsgKHJvdyAqIGNvbHVtbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY29tcG9zaXRlLCBDb25zdHJhaW50LmNyZWF0ZShDb21tb24uZXh0ZW5kKHsgYm9keUE6IGJvZHlBLCBib2R5QjogYm9keUIgfSwgb3B0aW9ucykpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3Jvc3NCcmFjZSAmJiBjb2wgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5QyA9IGJvZGllc1soY29sIC0gMSkgKyAoKHJvdyAtIDEpICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY29tcG9zaXRlLCBDb25zdHJhaW50LmNyZWF0ZShDb21tb24uZXh0ZW5kKHsgYm9keUE6IGJvZHlDLCBib2R5QjogYm9keUIgfSwgb3B0aW9ucykpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0JyYWNlICYmIGNvbCA8IGNvbHVtbnMgLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5QyA9IGJvZGllc1soY29sICsgMSkgKyAoKHJvdyAtIDEpICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY29tcG9zaXRlLCBDb25zdHJhaW50LmNyZWF0ZShDb21tb24uZXh0ZW5kKHsgYm9keUE6IGJvZHlDLCBib2R5QjogYm9keUIgfSwgb3B0aW9ucykpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBvc2l0ZS5sYWJlbCArPSAnIE1lc2gnO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjb21wb3NpdGUgY29udGFpbmluZyBib2RpZXMgY3JlYXRlZCBpbiB0aGUgY2FsbGJhY2sgaW4gYSBweXJhbWlkIGFycmFuZ2VtZW50LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgYm9keSdzIGJvdW5kcyB0byBwcmV2ZW50IG92ZXJsYXBzLlxuICAgICAqIEBtZXRob2QgcHlyYW1pZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4eFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd3NcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uR2FwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd0dhcFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgY29udGFpbmluZyBvYmplY3RzIGNyZWF0ZWQgaW4gdGhlIGNhbGxiYWNrXG4gICAgICovXG4gICAgQ29tcG9zaXRlcy5weXJhbWlkID0gZnVuY3Rpb24oeHgsIHl5LCBjb2x1bW5zLCByb3dzLCBjb2x1bW5HYXAsIHJvd0dhcCwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIENvbXBvc2l0ZXMuc3RhY2soeHgsIHl5LCBjb2x1bW5zLCByb3dzLCBjb2x1bW5HYXAsIHJvd0dhcCwgZnVuY3Rpb24oeCwgeSwgY29sdW1uLCByb3csIGxhc3RCb2R5LCBpKSB7XG4gICAgICAgICAgICB2YXIgYWN0dWFsUm93cyA9IE1hdGgubWluKHJvd3MsIE1hdGguY2VpbChjb2x1bW5zIC8gMikpLFxuICAgICAgICAgICAgICAgIGxhc3RCb2R5V2lkdGggPSBsYXN0Qm9keSA/IGxhc3RCb2R5LmJvdW5kcy5tYXgueCAtIGxhc3RCb2R5LmJvdW5kcy5taW4ueCA6IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChyb3cgPiBhY3R1YWxSb3dzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gcmV2ZXJzZSByb3cgb3JkZXJcbiAgICAgICAgICAgIHJvdyA9IGFjdHVhbFJvd3MgLSByb3c7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHJvdyxcbiAgICAgICAgICAgICAgICBlbmQgPSBjb2x1bW5zIC0gMSAtIHJvdztcblxuICAgICAgICAgICAgaWYgKGNvbHVtbiA8IHN0YXJ0IHx8IGNvbHVtbiA+IGVuZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHJldHJvYWN0aXZlbHkgZml4IHRoZSBmaXJzdCBib2R5J3MgcG9zaXRpb24sIHNpbmNlIHdpZHRoIHdhcyB1bmtub3duXG4gICAgICAgICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIEJvZHkudHJhbnNsYXRlKGxhc3RCb2R5LCB7IHg6IChjb2x1bW4gKyAoY29sdW1ucyAlIDIgPT09IDEgPyAxIDogLTEpKSAqIGxhc3RCb2R5V2lkdGgsIHk6IDAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB4T2Zmc2V0ID0gbGFzdEJvZHkgPyBjb2x1bW4gKiBsYXN0Qm9keVdpZHRoIDogMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHh4ICsgeE9mZnNldCArIGNvbHVtbiAqIGNvbHVtbkdhcCwgeSwgY29sdW1uLCByb3csIGxhc3RCb2R5LCBpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgd2l0aCBhIE5ld3RvbidzIENyYWRsZSBzZXR1cCBvZiBib2RpZXMgYW5kIGNvbnN0cmFpbnRzLlxuICAgICAqIEBtZXRob2QgbmV3dG9uc0NyYWRsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4eFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBuZXd0b25zQ3JhZGxlIGJvZHlcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLm5ld3RvbnNDcmFkbGUgPSBmdW5jdGlvbih4eCwgeXksIG51bWJlciwgc2l6ZSwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXd0b25zQ3JhZGxlID0gQ29tcG9zaXRlLmNyZWF0ZSh7IGxhYmVsOiAnTmV3dG9ucyBDcmFkbGUnIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzZXBhcmF0aW9uID0gMS45LFxuICAgICAgICAgICAgICAgIGNpcmNsZSA9IEJvZGllcy5jaXJjbGUoeHggKyBpICogKHNpemUgKiBzZXBhcmF0aW9uKSwgeXkgKyBsZW5ndGgsIHNpemUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaW5lcnRpYTogSW5maW5pdHksIHJlc3RpdHV0aW9uOiAxLCBmcmljdGlvbjogMCwgZnJpY3Rpb25BaXI6IDAuMDAwMSwgc2xvcDogMSB9KSxcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50ID0gQ29uc3RyYWludC5jcmVhdGUoeyBwb2ludEE6IHsgeDogeHggKyBpICogKHNpemUgKiBzZXBhcmF0aW9uKSwgeTogeXkgfSwgYm9keUI6IGNpcmNsZSB9KTtcblxuICAgICAgICAgICAgQ29tcG9zaXRlLmFkZEJvZHkobmV3dG9uc0NyYWRsZSwgY2lyY2xlKTtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KG5ld3RvbnNDcmFkbGUsIGNvbnN0cmFpbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld3RvbnNDcmFkbGU7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcG9zaXRlIHdpdGggc2ltcGxlIGNhciBzZXR1cCBvZiBib2RpZXMgYW5kIGNvbnN0cmFpbnRzLlxuICAgICAqIEBtZXRob2QgY2FyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHh4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHl5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aGVlbFNpemVcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBjYXIgYm9keVxuICAgICAqL1xuICAgIENvbXBvc2l0ZXMuY2FyID0gZnVuY3Rpb24oeHgsIHl5LCB3aWR0aCwgaGVpZ2h0LCB3aGVlbFNpemUpIHtcbiAgICAgICAgdmFyIGdyb3VwID0gQm9keS5uZXh0R3JvdXAodHJ1ZSksXG4gICAgICAgICAgICB3aGVlbEJhc2UgPSAyMCxcbiAgICAgICAgICAgIHdoZWVsQU9mZnNldCA9IC13aWR0aCAqIDAuNSArIHdoZWVsQmFzZSxcbiAgICAgICAgICAgIHdoZWVsQk9mZnNldCA9IHdpZHRoICogMC41IC0gd2hlZWxCYXNlLFxuICAgICAgICAgICAgd2hlZWxZT2Zmc2V0ID0gMDtcbiAgICBcbiAgICAgICAgdmFyIGNhciA9IENvbXBvc2l0ZS5jcmVhdGUoeyBsYWJlbDogJ0NhcicgfSksXG4gICAgICAgICAgICBib2R5ID0gQm9kaWVzLnJlY3RhbmdsZSh4eCwgeXksIHdpZHRoLCBoZWlnaHQsIHsgXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2hhbWZlcjoge1xuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGhlaWdodCAqIDAuNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVuc2l0eTogMC4wMDAyXG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgdmFyIHdoZWVsQSA9IEJvZGllcy5jaXJjbGUoeHggKyB3aGVlbEFPZmZzZXQsIHl5ICsgd2hlZWxZT2Zmc2V0LCB3aGVlbFNpemUsIHsgXG4gICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBncm91cDogZ3JvdXBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcmljdGlvbjogMC44XG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgdmFyIHdoZWVsQiA9IEJvZGllcy5jaXJjbGUoeHggKyB3aGVlbEJPZmZzZXQsIHl5ICsgd2hlZWxZT2Zmc2V0LCB3aGVlbFNpemUsIHsgXG4gICAgICAgICAgICBjb2xsaXNpb25GaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICBncm91cDogZ3JvdXBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcmljdGlvbjogMC44XG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgdmFyIGF4ZWxBID0gQ29uc3RyYWludC5jcmVhdGUoe1xuICAgICAgICAgICAgYm9keUI6IGJvZHksXG4gICAgICAgICAgICBwb2ludEI6IHsgeDogd2hlZWxBT2Zmc2V0LCB5OiB3aGVlbFlPZmZzZXQgfSxcbiAgICAgICAgICAgIGJvZHlBOiB3aGVlbEEsXG4gICAgICAgICAgICBzdGlmZm5lc3M6IDEsXG4gICAgICAgICAgICBsZW5ndGg6IDBcbiAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgdmFyIGF4ZWxCID0gQ29uc3RyYWludC5jcmVhdGUoe1xuICAgICAgICAgICAgYm9keUI6IGJvZHksXG4gICAgICAgICAgICBwb2ludEI6IHsgeDogd2hlZWxCT2Zmc2V0LCB5OiB3aGVlbFlPZmZzZXQgfSxcbiAgICAgICAgICAgIGJvZHlBOiB3aGVlbEIsXG4gICAgICAgICAgICBzdGlmZm5lc3M6IDEsXG4gICAgICAgICAgICBsZW5ndGg6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBDb21wb3NpdGUuYWRkQm9keShjYXIsIGJvZHkpO1xuICAgICAgICBDb21wb3NpdGUuYWRkQm9keShjYXIsIHdoZWVsQSk7XG4gICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KGNhciwgd2hlZWxCKTtcbiAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY2FyLCBheGVsQSk7XG4gICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNhciwgYXhlbEIpO1xuXG4gICAgICAgIHJldHVybiBjYXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaW1wbGUgc29mdCBib2R5IGxpa2Ugb2JqZWN0LlxuICAgICAqIEBtZXRob2Qgc29mdEJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkdhcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dHYXBcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNyb3NzQnJhY2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFydGljbGVSYWRpdXNcbiAgICAgKiBAcGFyYW0ge30gcGFydGljbGVPcHRpb25zXG4gICAgICogQHBhcmFtIHt9IGNvbnN0cmFpbnRPcHRpb25zXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgc29mdEJvZHlcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLnNvZnRCb2R5ID0gZnVuY3Rpb24oeHgsIHl5LCBjb2x1bW5zLCByb3dzLCBjb2x1bW5HYXAsIHJvd0dhcCwgY3Jvc3NCcmFjZSwgcGFydGljbGVSYWRpdXMsIHBhcnRpY2xlT3B0aW9ucywgY29uc3RyYWludE9wdGlvbnMpIHtcbiAgICAgICAgcGFydGljbGVPcHRpb25zID0gQ29tbW9uLmV4dGVuZCh7IGluZXJ0aWE6IEluZmluaXR5IH0sIHBhcnRpY2xlT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0cmFpbnRPcHRpb25zID0gQ29tbW9uLmV4dGVuZCh7IHN0aWZmbmVzczogMC4yLCByZW5kZXI6IHsgdHlwZTogJ2xpbmUnLCBhbmNob3JzOiBmYWxzZSB9IH0sIGNvbnN0cmFpbnRPcHRpb25zKTtcblxuICAgICAgICB2YXIgc29mdEJvZHkgPSBDb21wb3NpdGVzLnN0YWNrKHh4LCB5eSwgY29sdW1ucywgcm93cywgY29sdW1uR2FwLCByb3dHYXAsIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgIHJldHVybiBCb2RpZXMuY2lyY2xlKHgsIHksIHBhcnRpY2xlUmFkaXVzLCBwYXJ0aWNsZU9wdGlvbnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBDb21wb3NpdGVzLm1lc2goc29mdEJvZHksIGNvbHVtbnMsIHJvd3MsIGNyb3NzQnJhY2UsIGNvbnN0cmFpbnRPcHRpb25zKTtcblxuICAgICAgICBzb2Z0Qm9keS5sYWJlbCA9ICdTb2Z0IEJvZHknO1xuXG4gICAgICAgIHJldHVybiBzb2Z0Qm9keTtcbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2JvZHkvQm9keVwiOjEsXCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIjoxMixcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuL0JvZGllc1wiOjIzfV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLkF4ZXNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHNldHMgb2YgYXhlcy5cbipcbiogQGNsYXNzIEF4ZXNcbiovXG5cbnZhciBBeGVzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQXhlcztcblxudmFyIFZlY3RvciA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc2V0IG9mIGF4ZXMgZnJvbSB0aGUgZ2l2ZW4gdmVydGljZXMuXG4gICAgICogQG1ldGhvZCBmcm9tVmVydGljZXNcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge2F4ZXN9IEEgbmV3IGF4ZXMgZnJvbSB0aGUgZ2l2ZW4gdmVydGljZXNcbiAgICAgKi9cbiAgICBBeGVzLmZyb21WZXJ0aWNlcyA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIHZhciBheGVzID0ge307XG5cbiAgICAgICAgLy8gZmluZCB0aGUgdW5pcXVlIGF4ZXMsIHVzaW5nIGVkZ2Ugbm9ybWFsIGdyYWRpZW50c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaiA9IChpICsgMSkgJSB2ZXJ0aWNlcy5sZW5ndGgsIFxuICAgICAgICAgICAgICAgIG5vcm1hbCA9IFZlY3Rvci5ub3JtYWxpc2UoeyBcbiAgICAgICAgICAgICAgICAgICAgeDogdmVydGljZXNbal0ueSAtIHZlcnRpY2VzW2ldLnksIFxuICAgICAgICAgICAgICAgICAgICB5OiB2ZXJ0aWNlc1tpXS54IC0gdmVydGljZXNbal0ueFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGdyYWRpZW50ID0gKG5vcm1hbC55ID09PSAwKSA/IEluZmluaXR5IDogKG5vcm1hbC54IC8gbm9ybWFsLnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBsaW1pdCBwcmVjaXNpb25cbiAgICAgICAgICAgIGdyYWRpZW50ID0gZ3JhZGllbnQudG9GaXhlZCgzKS50b1N0cmluZygpO1xuICAgICAgICAgICAgYXhlc1tncmFkaWVudF0gPSBub3JtYWw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQ29tbW9uLnZhbHVlcyhheGVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIHNldCBvZiBheGVzIGJ5IHRoZSBnaXZlbiBhbmdsZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7YXhlc30gYXhlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqL1xuICAgIEF4ZXMucm90YXRlID0gZnVuY3Rpb24oYXhlcywgYW5nbGUpIHtcbiAgICAgICAgaWYgKGFuZ2xlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBheGlzID0gYXhlc1tpXSxcbiAgICAgICAgICAgICAgICB4eDtcbiAgICAgICAgICAgIHh4ID0gYXhpcy54ICogY29zIC0gYXhpcy55ICogc2luO1xuICAgICAgICAgICAgYXhpcy55ID0gYXhpcy54ICogc2luICsgYXhpcy55ICogY29zO1xuICAgICAgICAgICAgYXhpcy54ID0geHg7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG59LHtcIi4uL2NvcmUvQ29tbW9uXCI6MTQsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOH1dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5Cb3VuZHNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGF4aXMtYWxpZ25lZCBib3VuZGluZyBib3hlcyAoQUFCQikuXG4qXG4qIEBjbGFzcyBCb3VuZHNcbiovXG5cbnZhciBCb3VuZHMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb3VuZHM7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCAoQUFCQikgZm9yIHRoZSBnaXZlbiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7Ym91bmRzfSBBIG5ldyBib3VuZHMgb2JqZWN0XG4gICAgICovXG4gICAgQm91bmRzLmNyZWF0ZSA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIHZhciBib3VuZHMgPSB7IFxuICAgICAgICAgICAgbWluOiB7IHg6IDAsIHk6IDAgfSwgXG4gICAgICAgICAgICBtYXg6IHsgeDogMCwgeTogMCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHZlcnRpY2VzKVxuICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShib3VuZHMsIHZlcnRpY2VzKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBib3VuZHM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgYm91bmRzIHVzaW5nIHRoZSBnaXZlbiB2ZXJ0aWNlcyBhbmQgZXh0ZW5kcyB0aGUgYm91bmRzIGdpdmVuIGEgdmVsb2NpdHkuXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVsb2NpdHlcbiAgICAgKi9cbiAgICBCb3VuZHMudXBkYXRlID0gZnVuY3Rpb24oYm91bmRzLCB2ZXJ0aWNlcywgdmVsb2NpdHkpIHtcbiAgICAgICAgYm91bmRzLm1pbi54ID0gSW5maW5pdHk7XG4gICAgICAgIGJvdW5kcy5tYXgueCA9IC1JbmZpbml0eTtcbiAgICAgICAgYm91bmRzLm1pbi55ID0gSW5maW5pdHk7XG4gICAgICAgIGJvdW5kcy5tYXgueSA9IC1JbmZpbml0eTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICAgICAgICBpZiAodmVydGV4LnggPiBib3VuZHMubWF4LngpIGJvdW5kcy5tYXgueCA9IHZlcnRleC54O1xuICAgICAgICAgICAgaWYgKHZlcnRleC54IDwgYm91bmRzLm1pbi54KSBib3VuZHMubWluLnggPSB2ZXJ0ZXgueDtcbiAgICAgICAgICAgIGlmICh2ZXJ0ZXgueSA+IGJvdW5kcy5tYXgueSkgYm91bmRzLm1heC55ID0gdmVydGV4Lnk7XG4gICAgICAgICAgICBpZiAodmVydGV4LnkgPCBib3VuZHMubWluLnkpIGJvdW5kcy5taW4ueSA9IHZlcnRleC55O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodmVsb2NpdHkpIHtcbiAgICAgICAgICAgIGlmICh2ZWxvY2l0eS54ID4gMCkge1xuICAgICAgICAgICAgICAgIGJvdW5kcy5tYXgueCArPSB2ZWxvY2l0eS54O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3VuZHMubWluLnggKz0gdmVsb2NpdHkueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHZlbG9jaXR5LnkgPiAwKSB7XG4gICAgICAgICAgICAgICAgYm91bmRzLm1heC55ICs9IHZlbG9jaXR5Lnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvdW5kcy5taW4ueSArPSB2ZWxvY2l0eS55O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYm91bmRzIGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludC5cbiAgICAgKiBAbWV0aG9kIGNvbnRhaW5zXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGJvdW5kcyBjb250YWluIHRoZSBwb2ludCwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQm91bmRzLmNvbnRhaW5zID0gZnVuY3Rpb24oYm91bmRzLCBwb2ludCkge1xuICAgICAgICByZXR1cm4gcG9pbnQueCA+PSBib3VuZHMubWluLnggJiYgcG9pbnQueCA8PSBib3VuZHMubWF4LnggXG4gICAgICAgICAgICAgICAmJiBwb2ludC55ID49IGJvdW5kcy5taW4ueSAmJiBwb2ludC55IDw9IGJvdW5kcy5tYXgueTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0d28gYm91bmRzIGludGVyc2VjdC5cbiAgICAgKiBAbWV0aG9kIG92ZXJsYXBzXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc0FcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzQlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGJvdW5kcyBvdmVybGFwLCBvdGhlcndpc2UgZmFsc2VcbiAgICAgKi9cbiAgICBCb3VuZHMub3ZlcmxhcHMgPSBmdW5jdGlvbihib3VuZHNBLCBib3VuZHNCKSB7XG4gICAgICAgIHJldHVybiAoYm91bmRzQS5taW4ueCA8PSBib3VuZHNCLm1heC54ICYmIGJvdW5kc0EubWF4LnggPj0gYm91bmRzQi5taW4ueFxuICAgICAgICAgICAgICAgICYmIGJvdW5kc0EubWF4LnkgPj0gYm91bmRzQi5taW4ueSAmJiBib3VuZHNBLm1pbi55IDw9IGJvdW5kc0IubWF4LnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGVzIHRoZSBib3VuZHMgYnkgdGhlIGdpdmVuIHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICovXG4gICAgQm91bmRzLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKGJvdW5kcywgdmVjdG9yKSB7XG4gICAgICAgIGJvdW5kcy5taW4ueCArPSB2ZWN0b3IueDtcbiAgICAgICAgYm91bmRzLm1heC54ICs9IHZlY3Rvci54O1xuICAgICAgICBib3VuZHMubWluLnkgKz0gdmVjdG9yLnk7XG4gICAgICAgIGJvdW5kcy5tYXgueSArPSB2ZWN0b3IueTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2hpZnRzIHRoZSBib3VuZHMgdG8gdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICAqIEBtZXRob2Qgc2hpZnRcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvc2l0aW9uXG4gICAgICovXG4gICAgQm91bmRzLnNoaWZ0ID0gZnVuY3Rpb24oYm91bmRzLCBwb3NpdGlvbikge1xuICAgICAgICB2YXIgZGVsdGFYID0gYm91bmRzLm1heC54IC0gYm91bmRzLm1pbi54LFxuICAgICAgICAgICAgZGVsdGFZID0gYm91bmRzLm1heC55IC0gYm91bmRzLm1pbi55O1xuICAgICAgICAgICAgXG4gICAgICAgIGJvdW5kcy5taW4ueCA9IHBvc2l0aW9uLng7XG4gICAgICAgIGJvdW5kcy5tYXgueCA9IHBvc2l0aW9uLnggKyBkZWx0YVg7XG4gICAgICAgIGJvdW5kcy5taW4ueSA9IHBvc2l0aW9uLnk7XG4gICAgICAgIGJvdW5kcy5tYXgueSA9IHBvc2l0aW9uLnkgKyBkZWx0YVk7XG4gICAgfTtcbiAgICBcbn0pKCk7XG5cbn0se31dLDI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuKiBUaGUgYE1hdHRlci5TdmdgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjb252ZXJ0aW5nIFNWRyBpbWFnZXMgaW50byBhbiBhcnJheSBvZiB2ZWN0b3IgcG9pbnRzLlxuKlxuKiBUbyB1c2UgdGhpcyBtb2R1bGUgeW91IGFsc28gbmVlZCB0aGUgU1ZHUGF0aFNlZyBwb2x5ZmlsbDogaHR0cHM6Ly9naXRodWIuY29tL3Byb2dlcnMvcGF0aHNlZ1xuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgU3ZnXG4qL1xuXG52YXIgU3ZnID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gU3ZnO1xuXG52YXIgQm91bmRzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQm91bmRzJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gU1ZHIHBhdGggaW50byBhbiBhcnJheSBvZiB2ZWN0b3IgcG9pbnRzLlxuICAgICAqIElmIHRoZSBpbnB1dCBwYXRoIGZvcm1zIGEgY29uY2F2ZSBzaGFwZSwgeW91IG11c3QgZGVjb21wb3NlIHRoZSByZXN1bHQgaW50byBjb252ZXggcGFydHMgYmVmb3JlIHVzZS5cbiAgICAgKiBTZWUgYEJvZGllcy5mcm9tVmVydGljZXNgIHdoaWNoIHByb3ZpZGVzIHN1cHBvcnQgZm9yIHRoaXMuXG4gICAgICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IGd1YXJhbnRlZWQgdG8gc3VwcG9ydCBjb21wbGV4IHBhdGhzIChzdWNoIGFzIHRob3NlIHdpdGggaG9sZXMpLlxuICAgICAqIFlvdSBtdXN0IGxvYWQgdGhlIGBwYXRoc2VnLmpzYCBwb2x5ZmlsbCBvbiBuZXdlciBicm93c2Vycy5cbiAgICAgKiBAbWV0aG9kIHBhdGhUb1ZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtTVkdQYXRoRWxlbWVudH0gcGF0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlTGVuZ3RoPTE1XVxuICAgICAqIEByZXR1cm4ge1ZlY3RvcltdfSBwb2ludHNcbiAgICAgKi9cbiAgICBTdmcucGF0aFRvVmVydGljZXMgPSBmdW5jdGlvbihwYXRoLCBzYW1wbGVMZW5ndGgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICEoJ1NWR1BhdGhTZWcnIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuKCdTdmcucGF0aFRvVmVydGljZXM6IFNWR1BhdGhTZWcgbm90IGRlZmluZWQsIGEgcG9seWZpbGwgaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd291dC9zdmcudG9wb2x5LmpzL2Jsb2IvbWFzdGVyL3N2Zy50b3BvbHkuanNcbiAgICAgICAgdmFyIGksIGlsLCB0b3RhbCwgcG9pbnQsIHNlZ21lbnQsIHNlZ21lbnRzLCBcbiAgICAgICAgICAgIHNlZ21lbnRzUXVldWUsIGxhc3RTZWdtZW50LCBcbiAgICAgICAgICAgIGxhc3RQb2ludCwgc2VnbWVudEluZGV4LCBwb2ludHMgPSBbXSxcbiAgICAgICAgICAgIGx4LCBseSwgbGVuZ3RoID0gMCwgeCA9IDAsIHkgPSAwO1xuXG4gICAgICAgIHNhbXBsZUxlbmd0aCA9IHNhbXBsZUxlbmd0aCB8fCAxNTtcblxuICAgICAgICB2YXIgYWRkUG9pbnQgPSBmdW5jdGlvbihweCwgcHksIHBhdGhTZWdUeXBlKSB7XG4gICAgICAgICAgICAvLyBhbGwgb2RkLW51bWJlcmVkIHBhdGggdHlwZXMgYXJlIHJlbGF0aXZlIGV4Y2VwdCBQQVRIU0VHX0NMT1NFUEFUSCAoMSlcbiAgICAgICAgICAgIHZhciBpc1JlbGF0aXZlID0gcGF0aFNlZ1R5cGUgJSAyID09PSAxICYmIHBhdGhTZWdUeXBlID4gMTtcblxuICAgICAgICAgICAgLy8gd2hlbiB0aGUgbGFzdCBwb2ludCBkb2Vzbid0IGVxdWFsIHRoZSBjdXJyZW50IHBvaW50IGFkZCB0aGUgY3VycmVudCBwb2ludFxuICAgICAgICAgICAgaWYgKCFsYXN0UG9pbnQgfHwgcHggIT0gbGFzdFBvaW50LnggfHwgcHkgIT0gbGFzdFBvaW50LnkpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFBvaW50ICYmIGlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbHggPSBsYXN0UG9pbnQueDtcbiAgICAgICAgICAgICAgICAgICAgbHkgPSBsYXN0UG9pbnQueTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBseCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGx5ID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGx4ICsgcHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGx5ICsgcHlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0IGxhc3QgcG9pbnRcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSB8fCAhbGFzdFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcblxuICAgICAgICAgICAgICAgIHggPSBseCArIHB4O1xuICAgICAgICAgICAgICAgIHkgPSBseSArIHB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhZGRTZWdtZW50UG9pbnQgPSBmdW5jdGlvbihzZWdtZW50KSB7XG4gICAgICAgICAgICB2YXIgc2VnVHlwZSA9IHNlZ21lbnQucGF0aFNlZ1R5cGVBc0xldHRlci50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgICAvLyBza2lwIHBhdGggZW5kc1xuICAgICAgICAgICAgaWYgKHNlZ1R5cGUgPT09ICdaJykgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBtYXAgc2VnbWVudCB0byB4IGFuZCB5XG4gICAgICAgICAgICBzd2l0Y2ggKHNlZ1R5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIHggPSBzZWdtZW50Lng7XG4gICAgICAgICAgICAgICAgeSA9IHNlZ21lbnQueTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgICAgICAgIHggPSBzZWdtZW50Lng7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdWJzpcbiAgICAgICAgICAgICAgICB5ID0gc2VnbWVudC55O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGRQb2ludCh4LCB5LCBzZWdtZW50LnBhdGhTZWdUeXBlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBlbnN1cmUgcGF0aCBpcyBhYnNvbHV0ZVxuICAgICAgICBTdmcuX3N2Z1BhdGhUb0Fic29sdXRlKHBhdGgpO1xuXG4gICAgICAgIC8vIGdldCB0b3RhbCBsZW5ndGhcbiAgICAgICAgdG90YWwgPSBwYXRoLmdldFRvdGFsTGVuZ3RoKCk7XG5cbiAgICAgICAgLy8gcXVldWUgc2VnbWVudHNcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdGgucGF0aFNlZ0xpc3QubnVtYmVyT2ZJdGVtczsgaSArPSAxKVxuICAgICAgICAgICAgc2VnbWVudHMucHVzaChwYXRoLnBhdGhTZWdMaXN0LmdldEl0ZW0oaSkpO1xuXG4gICAgICAgIHNlZ21lbnRzUXVldWUgPSBzZWdtZW50cy5jb25jYXQoKTtcblxuICAgICAgICAvLyBzYW1wbGUgdGhyb3VnaCBwYXRoXG4gICAgICAgIHdoaWxlIChsZW5ndGggPCB0b3RhbCkge1xuICAgICAgICAgICAgLy8gZ2V0IHNlZ21lbnQgYXQgcG9zaXRpb25cbiAgICAgICAgICAgIHNlZ21lbnRJbmRleCA9IHBhdGguZ2V0UGF0aFNlZ0F0TGVuZ3RoKGxlbmd0aCk7XG4gICAgICAgICAgICBzZWdtZW50ID0gc2VnbWVudHNbc2VnbWVudEluZGV4XTtcblxuICAgICAgICAgICAgLy8gbmV3IHNlZ21lbnRcbiAgICAgICAgICAgIGlmIChzZWdtZW50ICE9IGxhc3RTZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHNlZ21lbnRzUXVldWUubGVuZ3RoICYmIHNlZ21lbnRzUXVldWVbMF0gIT0gc2VnbWVudClcbiAgICAgICAgICAgICAgICAgICAgYWRkU2VnbWVudFBvaW50KHNlZ21lbnRzUXVldWUuc2hpZnQoKSk7XG5cbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudCA9IHNlZ21lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCBwb2ludHMgaW4gYmV0d2VlbiB3aGVuIGN1cnZpbmdcbiAgICAgICAgICAgIC8vIFRPRE86IGFkYXB0aXZlIHNhbXBsaW5nXG4gICAgICAgICAgICBzd2l0Y2ggKHNlZ21lbnQucGF0aFNlZ1R5cGVBc0xldHRlci50b1VwcGVyQ2FzZSgpKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgcG9pbnQgPSBwYXRoLmdldFBvaW50QXRMZW5ndGgobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBhZGRQb2ludChwb2ludC54LCBwb2ludC55LCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgYnkgc2FtcGxlIHZhbHVlXG4gICAgICAgICAgICBsZW5ndGggKz0gc2FtcGxlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyBzZWdtZW50cyBub3QgcGFzc2VkIGJ5IHNhbXBsaW5nXG4gICAgICAgIGZvciAoaSA9IDAsIGlsID0gc2VnbWVudHNRdWV1ZS5sZW5ndGg7IGkgPCBpbDsgKytpKVxuICAgICAgICAgICAgYWRkU2VnbWVudFBvaW50KHNlZ21lbnRzUXVldWVbaV0pO1xuXG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfTtcblxuICAgIFN2Zy5fc3ZnUGF0aFRvQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9waHJvZ3oubmV0L2NvbnZlcnQtc3ZnLXBhdGgtdG8tYWxsLWFic29sdXRlLWNvbW1hbmRzXG4gICAgICAgIC8vIENvcHlyaWdodCAoYykgR2F2aW4gS2lzdG5lclxuICAgICAgICAvLyBodHRwOi8vcGhyb2d6Lm5ldC9qcy9fUmV1c2VMaWNlbnNlLnR4dFxuICAgICAgICAvLyBNb2RpZmljYXRpb25zOiB0aWR5IGZvcm1hdHRpbmcgYW5kIG5hbWluZ1xuICAgICAgICB2YXIgeDAsIHkwLCB4MSwgeTEsIHgyLCB5Miwgc2VncyA9IHBhdGgucGF0aFNlZ0xpc3QsXG4gICAgICAgICAgICB4ID0gMCwgeSA9IDAsIGxlbiA9IHNlZ3MubnVtYmVyT2ZJdGVtcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vncy5nZXRJdGVtKGkpLFxuICAgICAgICAgICAgICAgIHNlZ1R5cGUgPSBzZWcucGF0aFNlZ1R5cGVBc0xldHRlcjtcblxuICAgICAgICAgICAgaWYgKC9bTUxIVkNTUVRBXS8udGVzdChzZWdUeXBlKSkge1xuICAgICAgICAgICAgICAgIGlmICgneCcgaW4gc2VnKSB4ID0gc2VnLng7XG4gICAgICAgICAgICAgICAgaWYgKCd5JyBpbiBzZWcpIHkgPSBzZWcueTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCd4MScgaW4gc2VnKSB4MSA9IHggKyBzZWcueDE7XG4gICAgICAgICAgICAgICAgaWYgKCd4MicgaW4gc2VnKSB4MiA9IHggKyBzZWcueDI7XG4gICAgICAgICAgICAgICAgaWYgKCd5MScgaW4gc2VnKSB5MSA9IHkgKyBzZWcueTE7XG4gICAgICAgICAgICAgICAgaWYgKCd5MicgaW4gc2VnKSB5MiA9IHkgKyBzZWcueTI7XG4gICAgICAgICAgICAgICAgaWYgKCd4JyBpbiBzZWcpIHggKz0gc2VnLng7XG4gICAgICAgICAgICAgICAgaWYgKCd5JyBpbiBzZWcpIHkgKz0gc2VnLnk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlZ1R5cGUpIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ01vdmV0b0Ficyh4LCB5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0Ficyh4LCB5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMoeCksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5yZXBsYWNlSXRlbShwYXRoLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyh5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficyh4LCB5LCB4MSwgeTEsIHgyLCB5MiksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5yZXBsYWNlSXRlbShwYXRoLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMoeCwgeSwgeDIsIHkyKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMoeCwgeSwgeDEsIHkxKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMoeCwgeSksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5yZXBsYWNlSXRlbShwYXRoLmNyZWF0ZVNWR1BhdGhTZWdBcmNBYnMoeCwgeSwgc2VnLnIxLCBzZWcucjIsIHNlZy5hbmdsZSwgc2VnLmxhcmdlQXJjRmxhZywgc2VnLnN3ZWVwRmxhZyksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgICAgICAgICBjYXNlICdaJzpcbiAgICAgICAgICAgICAgICAgICAgeCA9IHgwO1xuICAgICAgICAgICAgICAgICAgICB5ID0geTA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VnVHlwZSA9PSAnTScgfHwgc2VnVHlwZSA9PSAnbScpIHtcbiAgICAgICAgICAgICAgICB4MCA9IHg7XG4gICAgICAgICAgICAgICAgeTAgPSB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxufSkoKTtcbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2fV0sMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlZlY3RvcmAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgdmVjdG9ycy5cbiogVmVjdG9ycyBhcmUgdGhlIGJhc2lzIG9mIGFsbCB0aGUgZ2VvbWV0cnkgcmVsYXRlZCBvcGVyYXRpb25zIGluIHRoZSBlbmdpbmUuXG4qIEEgYE1hdHRlci5WZWN0b3JgIG9iamVjdCBpcyBvZiB0aGUgZm9ybSBgeyB4OiAwLCB5OiAwIH1gLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgVmVjdG9yXG4qL1xuXG4vLyBUT0RPOiBjb25zaWRlciBwYXJhbXMgZm9yIHJldXNpbmcgdmVjdG9yIG9iamVjdHNcblxudmFyIFZlY3RvciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZlY3RvcjtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IuY3JlYXRlID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICByZXR1cm4geyB4OiB4IHx8IDAsIHk6IHkgfHwgMCB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHZlY3RvciB3aXRoIGB4YCBhbmQgYHlgIGNvcGllZCBmcm9tIHRoZSBnaXZlbiBgdmVjdG9yYC5cbiAgICAgKiBAbWV0aG9kIGNsb25lXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgY2xvbmVkIHZlY3RvclxuICAgICAqL1xuICAgIFZlY3Rvci5jbG9uZSA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4geyB4OiB2ZWN0b3IueCwgeTogdmVjdG9yLnkgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFnbml0dWRlIChsZW5ndGgpIG9mIGEgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgbWFnbml0dWRlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1hZ25pdHVkZSBvZiB0aGUgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLm1hZ25pdHVkZSA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KCh2ZWN0b3IueCAqIHZlY3Rvci54KSArICh2ZWN0b3IueSAqIHZlY3Rvci55KSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hZ25pdHVkZSAobGVuZ3RoKSBvZiBhIHZlY3RvciAodGhlcmVmb3JlIHNhdmluZyBhIGBzcXJ0YCBvcGVyYXRpb24pLlxuICAgICAqIEBtZXRob2QgbWFnbml0dWRlU3F1YXJlZFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmVkIG1hZ25pdHVkZSBvZiB0aGUgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLm1hZ25pdHVkZVNxdWFyZWQgPSBmdW5jdGlvbih2ZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuICh2ZWN0b3IueCAqIHZlY3Rvci54KSArICh2ZWN0b3IueSAqIHZlY3Rvci55KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyB0aGUgdmVjdG9yIGFib3V0ICgwLCAwKSBieSBzcGVjaWZpZWQgYW5nbGUuXG4gICAgICogQG1ldGhvZCByb3RhdGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgdmVjdG9yIHJvdGF0ZWQgYWJvdXQgKDAsIDApXG4gICAgICovXG4gICAgVmVjdG9yLnJvdGF0ZSA9IGZ1bmN0aW9uKHZlY3RvciwgYW5nbGUsIG91dHB1dCkge1xuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLCBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGlmICghb3V0cHV0KSBvdXRwdXQgPSB7fTtcbiAgICAgICAgdmFyIHggPSB2ZWN0b3IueCAqIGNvcyAtIHZlY3Rvci55ICogc2luO1xuICAgICAgICBvdXRwdXQueSA9IHZlY3Rvci54ICogc2luICsgdmVjdG9yLnkgKiBjb3M7XG4gICAgICAgIG91dHB1dC54ID0geDtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyB0aGUgdmVjdG9yIGFib3V0IGEgc3BlY2lmaWVkIHBvaW50IGJ5IHNwZWNpZmllZCBhbmdsZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZUFib3V0XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbb3V0cHV0XVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIHJvdGF0ZWQgYWJvdXQgdGhlIHBvaW50XG4gICAgICovXG4gICAgVmVjdG9yLnJvdGF0ZUFib3V0ID0gZnVuY3Rpb24odmVjdG9yLCBhbmdsZSwgcG9pbnQsIG91dHB1dCkge1xuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLCBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGlmICghb3V0cHV0KSBvdXRwdXQgPSB7fTtcbiAgICAgICAgdmFyIHggPSBwb2ludC54ICsgKCh2ZWN0b3IueCAtIHBvaW50LngpICogY29zIC0gKHZlY3Rvci55IC0gcG9pbnQueSkgKiBzaW4pO1xuICAgICAgICBvdXRwdXQueSA9IHBvaW50LnkgKyAoKHZlY3Rvci54IC0gcG9pbnQueCkgKiBzaW4gKyAodmVjdG9yLnkgLSBwb2ludC55KSAqIGNvcyk7XG4gICAgICAgIG91dHB1dC54ID0geDtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXNlcyBhIHZlY3RvciAoc3VjaCB0aGF0IGl0cyBtYWduaXR1ZGUgaXMgYDFgKS5cbiAgICAgKiBAbWV0aG9kIG5vcm1hbGlzZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciBub3JtYWxpc2VkXG4gICAgICovXG4gICAgVmVjdG9yLm5vcm1hbGlzZSA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICB2YXIgbWFnbml0dWRlID0gVmVjdG9yLm1hZ25pdHVkZSh2ZWN0b3IpO1xuICAgICAgICBpZiAobWFnbml0dWRlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgICAgICByZXR1cm4geyB4OiB2ZWN0b3IueCAvIG1hZ25pdHVkZSwgeTogdmVjdG9yLnkgLyBtYWduaXR1ZGUgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZG90LXByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBkb3RcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgZG90IHByb2R1Y3Qgb2YgdGhlIHR3byB2ZWN0b3JzXG4gICAgICovXG4gICAgVmVjdG9yLmRvdCA9IGZ1bmN0aW9uKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgcmV0dXJuICh2ZWN0b3JBLnggKiB2ZWN0b3JCLngpICsgKHZlY3RvckEueSAqIHZlY3RvckIueSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNyb3NzLXByb2R1Y3Qgb2YgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBjcm9zc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjcm9zcyBwcm9kdWN0IG9mIHRoZSB0d28gdmVjdG9yc1xuICAgICAqL1xuICAgIFZlY3Rvci5jcm9zcyA9IGZ1bmN0aW9uKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgcmV0dXJuICh2ZWN0b3JBLnggKiB2ZWN0b3JCLnkpIC0gKHZlY3RvckEueSAqIHZlY3RvckIueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNyb3NzLXByb2R1Y3Qgb2YgdGhyZWUgdmVjdG9ycy5cbiAgICAgKiBAbWV0aG9kIGNyb3NzM1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQ1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHRocmVlIHZlY3RvcnNcbiAgICAgKi9cbiAgICBWZWN0b3IuY3Jvc3MzID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQiwgdmVjdG9yQykge1xuICAgICAgICByZXR1cm4gKHZlY3RvckIueCAtIHZlY3RvckEueCkgKiAodmVjdG9yQy55IC0gdmVjdG9yQS55KSAtICh2ZWN0b3JCLnkgLSB2ZWN0b3JBLnkpICogKHZlY3RvckMueCAtIHZlY3RvckEueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHR3byB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgYWRkXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbb3V0cHV0XVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG9mIHZlY3RvckEgYW5kIHZlY3RvckIgYWRkZWRcbiAgICAgKi9cbiAgICBWZWN0b3IuYWRkID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQiwgb3V0cHV0KSB7XG4gICAgICAgIGlmICghb3V0cHV0KSBvdXRwdXQgPSB7fTtcbiAgICAgICAgb3V0cHV0LnggPSB2ZWN0b3JBLnggKyB2ZWN0b3JCLng7XG4gICAgICAgIG91dHB1dC55ID0gdmVjdG9yQS55ICsgdmVjdG9yQi55O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIHR3byB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2Qgc3ViXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbb3V0cHV0XVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG9mIHZlY3RvckEgYW5kIHZlY3RvckIgc3VidHJhY3RlZFxuICAgICAqL1xuICAgIFZlY3Rvci5zdWIgPSBmdW5jdGlvbih2ZWN0b3JBLCB2ZWN0b3JCLCBvdXRwdXQpIHtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICBvdXRwdXQueCA9IHZlY3RvckEueCAtIHZlY3RvckIueDtcbiAgICAgICAgb3V0cHV0LnkgPSB2ZWN0b3JBLnkgLSB2ZWN0b3JCLnk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgYSB2ZWN0b3IgYW5kIGEgc2NhbGFyLlxuICAgICAqIEBtZXRob2QgbXVsdFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3IgbXVsdGlwbGllZCBieSBzY2FsYXJcbiAgICAgKi9cbiAgICBWZWN0b3IubXVsdCA9IGZ1bmN0aW9uKHZlY3Rvciwgc2NhbGFyKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3Rvci54ICogc2NhbGFyLCB5OiB2ZWN0b3IueSAqIHNjYWxhciB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGVzIGEgdmVjdG9yIGFuZCBhIHNjYWxhci5cbiAgICAgKiBAbWV0aG9kIGRpdlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3IgZGl2aWRlZCBieSBzY2FsYXJcbiAgICAgKi9cbiAgICBWZWN0b3IuZGl2ID0gZnVuY3Rpb24odmVjdG9yLCBzY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdmVjdG9yLnggLyBzY2FsYXIsIHk6IHZlY3Rvci55IC8gc2NhbGFyIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBlcnBlbmRpY3VsYXIgdmVjdG9yLiBTZXQgYG5lZ2F0ZWAgdG8gdHJ1ZSBmb3IgdGhlIHBlcnBlbmRpY3VsYXIgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbi5cbiAgICAgKiBAbWV0aG9kIHBlcnBcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtib29sfSBbbmVnYXRlPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gVGhlIHBlcnBlbmRpY3VsYXIgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLnBlcnAgPSBmdW5jdGlvbih2ZWN0b3IsIG5lZ2F0ZSkge1xuICAgICAgICBuZWdhdGUgPSBuZWdhdGUgPT09IHRydWUgPyAtMSA6IDE7XG4gICAgICAgIHJldHVybiB7IHg6IG5lZ2F0ZSAqIC12ZWN0b3IueSwgeTogbmVnYXRlICogdmVjdG9yLnggfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTmVnYXRlcyBib3RoIGNvbXBvbmVudHMgb2YgYSB2ZWN0b3Igc3VjaCB0aGF0IGl0IHBvaW50cyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgICAqIEBtZXRob2QgbmVnXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gVGhlIG5lZ2F0ZWQgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLm5lZyA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4geyB4OiAtdmVjdG9yLngsIHk6IC12ZWN0b3IueSB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhbmdsZSBiZXR3ZWVuIHRoZSB2ZWN0b3IgYHZlY3RvckIgLSB2ZWN0b3JBYCBhbmQgdGhlIHgtYXhpcyBpbiByYWRpYW5zLlxuICAgICAqIEBtZXRob2QgYW5nbGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xuICAgICAqL1xuICAgIFZlY3Rvci5hbmdsZSA9IGZ1bmN0aW9uKHZlY3RvckEsIHZlY3RvckIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIodmVjdG9yQi55IC0gdmVjdG9yQS55LCB2ZWN0b3JCLnggLSB2ZWN0b3JBLngpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUZW1wb3JhcnkgdmVjdG9yIHBvb2wgKG5vdCB0aHJlYWQtc2FmZSkuXG4gICAgICogQHByb3BlcnR5IF90ZW1wXG4gICAgICogQHR5cGUge3ZlY3RvcltdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgVmVjdG9yLl90ZW1wID0gW1xuICAgICAgICBWZWN0b3IuY3JlYXRlKCksIFZlY3Rvci5jcmVhdGUoKSwgXG4gICAgICAgIFZlY3Rvci5jcmVhdGUoKSwgVmVjdG9yLmNyZWF0ZSgpLCBcbiAgICAgICAgVmVjdG9yLmNyZWF0ZSgpLCBWZWN0b3IuY3JlYXRlKClcbiAgICBdO1xuXG59KSgpO1xufSx7fV0sMjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlZlcnRpY2VzYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBzZXRzIG9mIHZlcnRpY2VzLlxuKiBBIHNldCBvZiB2ZXJ0aWNlcyBpcyBhbiBhcnJheSBvZiBgTWF0dGVyLlZlY3RvcmAgd2l0aCBhZGRpdGlvbmFsIGluZGV4aW5nIHByb3BlcnRpZXMgaW5zZXJ0ZWQgYnkgYFZlcnRpY2VzLmNyZWF0ZWAuXG4qIEEgYE1hdHRlci5Cb2R5YCBtYWludGFpbnMgYSBzZXQgb2YgdmVydGljZXMgdG8gcmVwcmVzZW50IHRoZSBzaGFwZSBvZiB0aGUgb2JqZWN0IChpdHMgY29udmV4IGh1bGwpLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgVmVydGljZXNcbiovXG5cbnZhciBWZXJ0aWNlcyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZlcnRpY2VzO1xuXG52YXIgVmVjdG9yID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzZXQgb2YgYE1hdHRlci5Cb2R5YCBjb21wYXRpYmxlIHZlcnRpY2VzLlxuICAgICAqIFRoZSBgcG9pbnRzYCBhcmd1bWVudCBhY2NlcHRzIGFuIGFycmF5IG9mIGBNYXR0ZXIuVmVjdG9yYCBwb2ludHMgb3JpZW50YXRlZCBhcm91bmQgdGhlIG9yaWdpbiBgKDAsIDApYCwgZm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiAgICAgW3sgeDogMCwgeTogMCB9LCB7IHg6IDI1LCB5OiA1MCB9LCB7IHg6IDUwLCB5OiAwIH1dXG4gICAgICpcbiAgICAgKiBUaGUgYFZlcnRpY2VzLmNyZWF0ZWAgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkgb2YgdmVydGljZXMsIHdoaWNoIGFyZSBzaW1pbGFyIHRvIE1hdHRlci5WZWN0b3Igb2JqZWN0cyxcbiAgICAgKiBidXQgd2l0aCBzb21lIGFkZGl0aW9uYWwgcmVmZXJlbmNlcyByZXF1aXJlZCBmb3IgZWZmaWNpZW50IGNvbGxpc2lvbiBkZXRlY3Rpb24gcm91dGluZXMuXG4gICAgICpcbiAgICAgKiBWZXJ0aWNlcyBtdXN0IGJlIHNwZWNpZmllZCBpbiBjbG9ja3dpc2Ugb3JkZXIuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlIGBib2R5YCBhcmd1bWVudCBpcyBub3Qgb3B0aW9uYWwsIGEgYE1hdHRlci5Cb2R5YCByZWZlcmVuY2UgbXVzdCBiZSBwcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt2ZWN0b3JbXX0gcG9pbnRzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICovXG4gICAgVmVydGljZXMuY3JlYXRlID0gZnVuY3Rpb24ocG9pbnRzLCBib2R5KSB7XG4gICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBwb2ludHNbaV0sXG4gICAgICAgICAgICAgICAgdmVydGV4ID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBwb2ludC54LFxuICAgICAgICAgICAgICAgICAgICB5OiBwb2ludC55LFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgaXNJbnRlcm5hbDogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKHZlcnRleCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHN0cmluZyBjb250YWluaW5nIG9yZGVyZWQgeCB5IHBhaXJzIHNlcGFyYXRlZCBieSBzcGFjZXMgKGFuZCBvcHRpb25hbGx5IGNvbW1hcyksIFxuICAgICAqIGludG8gYSBgTWF0dGVyLlZlcnRpY2VzYCBvYmplY3QgZm9yIHRoZSBnaXZlbiBgTWF0dGVyLkJvZHlgLlxuICAgICAqIEZvciBwYXJzaW5nIFNWRyBwYXRocywgc2VlIGBTdmcucGF0aFRvVmVydGljZXNgLlxuICAgICAqIEBtZXRob2QgZnJvbVBhdGhcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEByZXR1cm4ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqL1xuICAgIFZlcnRpY2VzLmZyb21QYXRoID0gZnVuY3Rpb24ocGF0aCwgYm9keSkge1xuICAgICAgICB2YXIgcGF0aFBhdHRlcm4gPSAvTD9cXHMqKFtcXC1cXGRcXC5lXSspW1xccyxdKihbXFwtXFxkXFwuZV0rKSovaWcsXG4gICAgICAgICAgICBwb2ludHMgPSBbXTtcblxuICAgICAgICBwYXRoLnJlcGxhY2UocGF0aFBhdHRlcm4sIGZ1bmN0aW9uKG1hdGNoLCB4LCB5KSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7IHg6IHBhcnNlRmxvYXQoeCksIHk6IHBhcnNlRmxvYXQoeSkgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBWZXJ0aWNlcy5jcmVhdGUocG9pbnRzLCBib2R5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY2VudHJlIChjZW50cm9pZCkgb2YgdGhlIHNldCBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIGNlbnRyZVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgY2VudHJlIHBvaW50XG4gICAgICovXG4gICAgVmVydGljZXMuY2VudHJlID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgdmFyIGFyZWEgPSBWZXJ0aWNlcy5hcmVhKHZlcnRpY2VzLCB0cnVlKSxcbiAgICAgICAgICAgIGNlbnRyZSA9IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgY3Jvc3MsXG4gICAgICAgICAgICB0ZW1wLFxuICAgICAgICAgICAgajtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBqID0gKGkgKyAxKSAlIHZlcnRpY2VzLmxlbmd0aDtcbiAgICAgICAgICAgIGNyb3NzID0gVmVjdG9yLmNyb3NzKHZlcnRpY2VzW2ldLCB2ZXJ0aWNlc1tqXSk7XG4gICAgICAgICAgICB0ZW1wID0gVmVjdG9yLm11bHQoVmVjdG9yLmFkZCh2ZXJ0aWNlc1tpXSwgdmVydGljZXNbal0pLCBjcm9zcyk7XG4gICAgICAgICAgICBjZW50cmUgPSBWZWN0b3IuYWRkKGNlbnRyZSwgdGVtcCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gVmVjdG9yLmRpdihjZW50cmUsIDYgKiBhcmVhKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYXZlcmFnZSAobWVhbikgb2YgdGhlIHNldCBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIG1lYW5cbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gVGhlIGF2ZXJhZ2UgcG9pbnRcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5tZWFuID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgdmFyIGF2ZXJhZ2UgPSB7IHg6IDAsIHk6IDAgfTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhdmVyYWdlLnggKz0gdmVydGljZXNbaV0ueDtcbiAgICAgICAgICAgIGF2ZXJhZ2UueSArPSB2ZXJ0aWNlc1tpXS55O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFZlY3Rvci5kaXYoYXZlcmFnZSwgdmVydGljZXMubGVuZ3RoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYXJlYSBvZiB0aGUgc2V0IG9mIHZlcnRpY2VzLlxuICAgICAqIEBtZXRob2QgYXJlYVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtib29sfSBzaWduZWRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhcmVhXG4gICAgICovXG4gICAgVmVydGljZXMuYXJlYSA9IGZ1bmN0aW9uKHZlcnRpY2VzLCBzaWduZWQpIHtcbiAgICAgICAgdmFyIGFyZWEgPSAwLFxuICAgICAgICAgICAgaiA9IHZlcnRpY2VzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJlYSArPSAodmVydGljZXNbal0ueCAtIHZlcnRpY2VzW2ldLngpICogKHZlcnRpY2VzW2pdLnkgKyB2ZXJ0aWNlc1tpXS55KTtcbiAgICAgICAgICAgIGogPSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNpZ25lZClcbiAgICAgICAgICAgIHJldHVybiBhcmVhIC8gMjtcblxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYXJlYSkgLyAyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtb21lbnQgb2YgaW5lcnRpYSAoc2Vjb25kIG1vbWVudCBvZiBhcmVhKSBvZiB0aGUgc2V0IG9mIHZlcnRpY2VzIGdpdmVuIHRoZSB0b3RhbCBtYXNzLlxuICAgICAqIEBtZXRob2QgaW5lcnRpYVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1hc3NcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBwb2x5Z29uJ3MgbW9tZW50IG9mIGluZXJ0aWFcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5pbmVydGlhID0gZnVuY3Rpb24odmVydGljZXMsIG1hc3MpIHtcbiAgICAgICAgdmFyIG51bWVyYXRvciA9IDAsXG4gICAgICAgICAgICBkZW5vbWluYXRvciA9IDAsXG4gICAgICAgICAgICB2ID0gdmVydGljZXMsXG4gICAgICAgICAgICBjcm9zcyxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgcG9seWdvbidzIG1vbWVudCBvZiBpbmVydGlhLCB1c2luZyBzZWNvbmQgbW9tZW50IG9mIGFyZWFcbiAgICAgICAgLy8gZnJvbSBlcXVhdGlvbnMgYXQgaHR0cDovL3d3dy5waHlzaWNzZm9ydW1zLmNvbS9zaG93dGhyZWFkLnBocD90PTI1MjkzXG4gICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdi5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgaiA9IChuICsgMSkgJSB2Lmxlbmd0aDtcbiAgICAgICAgICAgIGNyb3NzID0gTWF0aC5hYnMoVmVjdG9yLmNyb3NzKHZbal0sIHZbbl0pKTtcbiAgICAgICAgICAgIG51bWVyYXRvciArPSBjcm9zcyAqIChWZWN0b3IuZG90KHZbal0sIHZbal0pICsgVmVjdG9yLmRvdCh2W2pdLCB2W25dKSArIFZlY3Rvci5kb3QodltuXSwgdltuXSkpO1xuICAgICAgICAgICAgZGVub21pbmF0b3IgKz0gY3Jvc3M7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG1hc3MgLyA2KSAqIChudW1lcmF0b3IgLyBkZW5vbWluYXRvcik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgdGhlIHNldCBvZiB2ZXJ0aWNlcyBpbi1wbGFjZS5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXJcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy50cmFuc2xhdGUgPSBmdW5jdGlvbih2ZXJ0aWNlcywgdmVjdG9yLCBzY2FsYXIpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChzY2FsYXIpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzW2ldLnggKz0gdmVjdG9yLnggKiBzY2FsYXI7XG4gICAgICAgICAgICAgICAgdmVydGljZXNbaV0ueSArPSB2ZWN0b3IueSAqIHNjYWxhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzW2ldLnggKz0gdmVjdG9yLng7XG4gICAgICAgICAgICAgICAgdmVydGljZXNbaV0ueSArPSB2ZWN0b3IueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2ZXJ0aWNlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyB0aGUgc2V0IG9mIHZlcnRpY2VzIGluLXBsYWNlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5yb3RhdGUgPSBmdW5jdGlvbih2ZXJ0aWNlcywgYW5nbGUsIHBvaW50KSB7XG4gICAgICAgIGlmIChhbmdsZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlID0gdmVydGljZXNbaV0sXG4gICAgICAgICAgICAgICAgZHggPSB2ZXJ0aWNlLnggLSBwb2ludC54LFxuICAgICAgICAgICAgICAgIGR5ID0gdmVydGljZS55IC0gcG9pbnQueTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHZlcnRpY2UueCA9IHBvaW50LnggKyAoZHggKiBjb3MgLSBkeSAqIHNpbik7XG4gICAgICAgICAgICB2ZXJ0aWNlLnkgPSBwb2ludC55ICsgKGR4ICogc2luICsgZHkgKiBjb3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHBvaW50YCBpcyBpbnNpZGUgdGhlIHNldCBvZiBgdmVydGljZXNgLlxuICAgICAqIEBtZXRob2QgY29udGFpbnNcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZlcnRpY2VzIGNvbnRhaW5zIHBvaW50LCBvdGhlcndpc2UgZmFsc2VcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5jb250YWlucyA9IGZ1bmN0aW9uKHZlcnRpY2VzLCBwb2ludCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmVydGljZSA9IHZlcnRpY2VzW2ldLFxuICAgICAgICAgICAgICAgIG5leHRWZXJ0aWNlID0gdmVydGljZXNbKGkgKyAxKSAlIHZlcnRpY2VzLmxlbmd0aF07XG4gICAgICAgICAgICBpZiAoKHBvaW50LnggLSB2ZXJ0aWNlLngpICogKG5leHRWZXJ0aWNlLnkgLSB2ZXJ0aWNlLnkpICsgKHBvaW50LnkgLSB2ZXJ0aWNlLnkpICogKHZlcnRpY2UueCAtIG5leHRWZXJ0aWNlLngpID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgdGhlIHZlcnRpY2VzIGZyb20gYSBwb2ludCAoZGVmYXVsdCBpcyBjZW50cmUpIGluLXBsYWNlLlxuICAgICAqIEBtZXRob2Qgc2NhbGVcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICovXG4gICAgVmVydGljZXMuc2NhbGUgPSBmdW5jdGlvbih2ZXJ0aWNlcywgc2NhbGVYLCBzY2FsZVksIHBvaW50KSB7XG4gICAgICAgIGlmIChzY2FsZVggPT09IDEgJiYgc2NhbGVZID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuXG4gICAgICAgIHBvaW50ID0gcG9pbnQgfHwgVmVydGljZXMuY2VudHJlKHZlcnRpY2VzKTtcblxuICAgICAgICB2YXIgdmVydGV4LFxuICAgICAgICAgICAgZGVsdGE7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICAgICAgICBkZWx0YSA9IFZlY3Rvci5zdWIodmVydGV4LCBwb2ludCk7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tpXS54ID0gcG9pbnQueCArIGRlbHRhLnggKiBzY2FsZVg7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tpXS55ID0gcG9pbnQueSArIGRlbHRhLnkgKiBzY2FsZVk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW1mZXJzIGEgc2V0IG9mIHZlcnRpY2VzIGJ5IGdpdmluZyB0aGVtIHJvdW5kZWQgY29ybmVycywgcmV0dXJucyBhIG5ldyBzZXQgb2YgdmVydGljZXMuXG4gICAgICogVGhlIHJhZGl1cyBwYXJhbWV0ZXIgaXMgYSBzaW5nbGUgbnVtYmVyIG9yIGFuIGFycmF5IHRvIHNwZWNpZnkgdGhlIHJhZGl1cyBmb3IgZWFjaCB2ZXJ0ZXguXG4gICAgICogQG1ldGhvZCBjaGFtZmVyXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSByYWRpdXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFsaXR5TWluXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHlNYXhcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5jaGFtZmVyID0gZnVuY3Rpb24odmVydGljZXMsIHJhZGl1cywgcXVhbGl0eSwgcXVhbGl0eU1pbiwgcXVhbGl0eU1heCkge1xuICAgICAgICBpZiAodHlwZW9mIHJhZGl1cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJhZGl1cyA9IFtyYWRpdXNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFkaXVzID0gcmFkaXVzIHx8IFs4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHF1YWxpdHkgZGVmYXVsdHMgdG8gLTEsIHdoaWNoIGlzIGF1dG9cbiAgICAgICAgcXVhbGl0eSA9ICh0eXBlb2YgcXVhbGl0eSAhPT0gJ3VuZGVmaW5lZCcpID8gcXVhbGl0eSA6IC0xO1xuICAgICAgICBxdWFsaXR5TWluID0gcXVhbGl0eU1pbiB8fCAyO1xuICAgICAgICBxdWFsaXR5TWF4ID0gcXVhbGl0eU1heCB8fCAxNDtcblxuICAgICAgICB2YXIgbmV3VmVydGljZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcHJldlZlcnRleCA9IHZlcnRpY2VzW2kgLSAxID49IDAgPyBpIC0gMSA6IHZlcnRpY2VzLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW2ldLFxuICAgICAgICAgICAgICAgIG5leHRWZXJ0ZXggPSB2ZXJ0aWNlc1soaSArIDEpICUgdmVydGljZXMubGVuZ3RoXSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFkaXVzID0gcmFkaXVzW2kgPCByYWRpdXMubGVuZ3RoID8gaSA6IHJhZGl1cy5sZW5ndGggLSAxXTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSYWRpdXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXdWZXJ0aWNlcy5wdXNoKHZlcnRleCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcmV2Tm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZSh7IFxuICAgICAgICAgICAgICAgIHg6IHZlcnRleC55IC0gcHJldlZlcnRleC55LCBcbiAgICAgICAgICAgICAgICB5OiBwcmV2VmVydGV4LnggLSB2ZXJ0ZXgueFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBuZXh0Tm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZSh7IFxuICAgICAgICAgICAgICAgIHg6IG5leHRWZXJ0ZXgueSAtIHZlcnRleC55LCBcbiAgICAgICAgICAgICAgICB5OiB2ZXJ0ZXgueCAtIG5leHRWZXJ0ZXgueFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBkaWFnb25hbFJhZGl1cyA9IE1hdGguc3FydCgyICogTWF0aC5wb3coY3VycmVudFJhZGl1cywgMikpLFxuICAgICAgICAgICAgICAgIHJhZGl1c1ZlY3RvciA9IFZlY3Rvci5tdWx0KENvbW1vbi5jbG9uZShwcmV2Tm9ybWFsKSwgY3VycmVudFJhZGl1cyksXG4gICAgICAgICAgICAgICAgbWlkTm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZShWZWN0b3IubXVsdChWZWN0b3IuYWRkKHByZXZOb3JtYWwsIG5leHROb3JtYWwpLCAwLjUpKSxcbiAgICAgICAgICAgICAgICBzY2FsZWRWZXJ0ZXggPSBWZWN0b3Iuc3ViKHZlcnRleCwgVmVjdG9yLm11bHQobWlkTm9ybWFsLCBkaWFnb25hbFJhZGl1cykpO1xuXG4gICAgICAgICAgICB2YXIgcHJlY2lzaW9uID0gcXVhbGl0eTtcblxuICAgICAgICAgICAgaWYgKHF1YWxpdHkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSBkZWNpZGUgcHJlY2lzaW9uXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uID0gTWF0aC5wb3coY3VycmVudFJhZGl1cywgMC4zMikgKiAxLjc1O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmVjaXNpb24gPSBDb21tb24uY2xhbXAocHJlY2lzaW9uLCBxdWFsaXR5TWluLCBxdWFsaXR5TWF4KTtcblxuICAgICAgICAgICAgLy8gdXNlIGFuIGV2ZW4gdmFsdWUgZm9yIHByZWNpc2lvbiwgbW9yZSBsaWtlbHkgdG8gcmVkdWNlIGF4ZXMgYnkgdXNpbmcgc3ltbWV0cnlcbiAgICAgICAgICAgIGlmIChwcmVjaXNpb24gJSAyID09PSAxKVxuICAgICAgICAgICAgICAgIHByZWNpc2lvbiArPSAxO1xuXG4gICAgICAgICAgICB2YXIgYWxwaGEgPSBNYXRoLmFjb3MoVmVjdG9yLmRvdChwcmV2Tm9ybWFsLCBuZXh0Tm9ybWFsKSksXG4gICAgICAgICAgICAgICAgdGhldGEgPSBhbHBoYSAvIHByZWNpc2lvbjtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwcmVjaXNpb247IGorKykge1xuICAgICAgICAgICAgICAgIG5ld1ZlcnRpY2VzLnB1c2goVmVjdG9yLmFkZChWZWN0b3Iucm90YXRlKHJhZGl1c1ZlY3RvciwgdGhldGEgKiBqKSwgc2NhbGVkVmVydGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3VmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNvcnRzIHRoZSBpbnB1dCB2ZXJ0aWNlcyBpbnRvIGNsb2Nrd2lzZSBvcmRlciBpbiBwbGFjZS5cbiAgICAgKiBAbWV0aG9kIGNsb2Nrd2lzZVNvcnRcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqL1xuICAgIFZlcnRpY2VzLmNsb2Nrd2lzZVNvcnQgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICB2YXIgY2VudHJlID0gVmVydGljZXMubWVhbih2ZXJ0aWNlcyk7XG5cbiAgICAgICAgdmVydGljZXMuc29ydChmdW5jdGlvbih2ZXJ0ZXhBLCB2ZXJ0ZXhCKSB7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yLmFuZ2xlKGNlbnRyZSwgdmVydGV4QSkgLSBWZWN0b3IuYW5nbGUoY2VudHJlLCB2ZXJ0ZXhCKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZlcnRpY2VzIGZvcm0gYSBjb252ZXggc2hhcGUgKHZlcnRpY2VzIG11c3QgYmUgaW4gY2xvY2t3aXNlIG9yZGVyKS5cbiAgICAgKiBAbWV0aG9kIGlzQ29udmV4XG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIHtib29sfSBgdHJ1ZWAgaWYgdGhlIGB2ZXJ0aWNlc2AgYXJlIGNvbnZleCwgYGZhbHNlYCBpZiBub3QgKG9yIGBudWxsYCBpZiBub3QgY29tcHV0YWJsZSkuXG4gICAgICovXG4gICAgVmVydGljZXMuaXNDb252ZXggPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICAvLyBodHRwOi8vcGF1bGJvdXJrZS5uZXQvZ2VvbWV0cnkvcG9seWdvbm1lc2gvXG4gICAgICAgIC8vIENvcHlyaWdodCAoYykgUGF1bCBCb3Vya2UgKHVzZSBwZXJtaXR0ZWQpXG5cbiAgICAgICAgdmFyIGZsYWcgPSAwLFxuICAgICAgICAgICAgbiA9IHZlcnRpY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgayxcbiAgICAgICAgICAgIHo7XG5cbiAgICAgICAgaWYgKG4gPCAzKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgaiA9IChpICsgMSkgJSBuO1xuICAgICAgICAgICAgayA9IChpICsgMikgJSBuO1xuICAgICAgICAgICAgeiA9ICh2ZXJ0aWNlc1tqXS54IC0gdmVydGljZXNbaV0ueCkgKiAodmVydGljZXNba10ueSAtIHZlcnRpY2VzW2pdLnkpO1xuICAgICAgICAgICAgeiAtPSAodmVydGljZXNbal0ueSAtIHZlcnRpY2VzW2ldLnkpICogKHZlcnRpY2VzW2tdLnggLSB2ZXJ0aWNlc1tqXS54KTtcblxuICAgICAgICAgICAgaWYgKHogPCAwKSB7XG4gICAgICAgICAgICAgICAgZmxhZyB8PSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh6ID4gMCkge1xuICAgICAgICAgICAgICAgIGZsYWcgfD0gMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZsYWcgPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmxhZyAhPT0gMCl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnZleCBodWxsIG9mIHRoZSBpbnB1dCB2ZXJ0aWNlcyBhcyBhIG5ldyBhcnJheSBvZiBwb2ludHMuXG4gICAgICogQG1ldGhvZCBodWxsXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIFt2ZXJ0ZXhdIHZlcnRpY2VzXG4gICAgICovXG4gICAgVmVydGljZXMuaHVsbCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9nZW9tYWxnb3JpdGhtcy5jb20vYTEwLV9odWxsLTEuaHRtbFxuXG4gICAgICAgIHZhciB1cHBlciA9IFtdLFxuICAgICAgICAgICAgbG93ZXIgPSBbXSwgXG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIHNvcnQgdmVydGljZXMgb24geC1heGlzICh5LWF4aXMgZm9yIHRpZXMpXG4gICAgICAgIHZlcnRpY2VzID0gdmVydGljZXMuc2xpY2UoMCk7XG4gICAgICAgIHZlcnRpY2VzLnNvcnQoZnVuY3Rpb24odmVydGV4QSwgdmVydGV4Qikge1xuICAgICAgICAgICAgdmFyIGR4ID0gdmVydGV4QS54IC0gdmVydGV4Qi54O1xuICAgICAgICAgICAgcmV0dXJuIGR4ICE9PSAwID8gZHggOiB2ZXJ0ZXhBLnkgLSB2ZXJ0ZXhCLnk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGJ1aWxkIGxvd2VyIGh1bGxcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcblxuICAgICAgICAgICAgd2hpbGUgKGxvd2VyLmxlbmd0aCA+PSAyIFxuICAgICAgICAgICAgICAgICAgICYmIFZlY3Rvci5jcm9zczMobG93ZXJbbG93ZXIubGVuZ3RoIC0gMl0sIGxvd2VyW2xvd2VyLmxlbmd0aCAtIDFdLCB2ZXJ0ZXgpIDw9IDApIHtcbiAgICAgICAgICAgICAgICBsb3dlci5wb3AoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG93ZXIucHVzaCh2ZXJ0ZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnVpbGQgdXBwZXIgaHVsbFxuICAgICAgICBmb3IgKGkgPSB2ZXJ0aWNlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV07XG5cbiAgICAgICAgICAgIHdoaWxlICh1cHBlci5sZW5ndGggPj0gMiBcbiAgICAgICAgICAgICAgICAgICAmJiBWZWN0b3IuY3Jvc3MzKHVwcGVyW3VwcGVyLmxlbmd0aCAtIDJdLCB1cHBlclt1cHBlci5sZW5ndGggLSAxXSwgdmVydGV4KSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdXBwZXIucG9wKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwcGVyLnB1c2godmVydGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbmNhdGVuYXRpb24gb2YgdGhlIGxvd2VyIGFuZCB1cHBlciBodWxscyBnaXZlcyB0aGUgY29udmV4IGh1bGxcbiAgICAgICAgLy8gb21pdCBsYXN0IHBvaW50cyBiZWNhdXNlIHRoZXkgYXJlIHJlcGVhdGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG90aGVyIGxpc3RcbiAgICAgICAgdXBwZXIucG9wKCk7XG4gICAgICAgIGxvd2VyLnBvcCgpO1xuXG4gICAgICAgIHJldHVybiB1cHBlci5jb25jYXQobG93ZXIpO1xuICAgIH07XG5cbn0pKCk7XG5cbn0se1wiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4fV0sMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1hdHRlciA9IG1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygnLi4vY29yZS9NYXR0ZXInKTtcblxuTWF0dGVyLkJvZHkgPSBfZGVyZXFfKCcuLi9ib2R5L0JvZHknKTtcbk1hdHRlci5Db21wb3NpdGUgPSBfZGVyZXFfKCcuLi9ib2R5L0NvbXBvc2l0ZScpO1xuTWF0dGVyLldvcmxkID0gX2RlcmVxXygnLi4vYm9keS9Xb3JsZCcpO1xuXG5NYXR0ZXIuQ29udGFjdCA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9Db250YWN0Jyk7XG5NYXR0ZXIuRGV0ZWN0b3IgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vRGV0ZWN0b3InKTtcbk1hdHRlci5HcmlkID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL0dyaWQnKTtcbk1hdHRlci5QYWlycyA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9QYWlycycpO1xuTWF0dGVyLlBhaXIgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vUGFpcicpO1xuTWF0dGVyLlF1ZXJ5ID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL1F1ZXJ5Jyk7XG5NYXR0ZXIuUmVzb2x2ZXIgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vUmVzb2x2ZXInKTtcbk1hdHRlci5TQVQgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vU0FUJyk7XG5cbk1hdHRlci5Db25zdHJhaW50ID0gX2RlcmVxXygnLi4vY29uc3RyYWludC9Db25zdHJhaW50Jyk7XG5NYXR0ZXIuTW91c2VDb25zdHJhaW50ID0gX2RlcmVxXygnLi4vY29uc3RyYWludC9Nb3VzZUNvbnN0cmFpbnQnKTtcblxuTWF0dGVyLkNvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG5NYXR0ZXIuRW5naW5lID0gX2RlcmVxXygnLi4vY29yZS9FbmdpbmUnKTtcbk1hdHRlci5FdmVudHMgPSBfZGVyZXFfKCcuLi9jb3JlL0V2ZW50cycpO1xuTWF0dGVyLk1vdXNlID0gX2RlcmVxXygnLi4vY29yZS9Nb3VzZScpO1xuTWF0dGVyLlJ1bm5lciA9IF9kZXJlcV8oJy4uL2NvcmUvUnVubmVyJyk7XG5NYXR0ZXIuU2xlZXBpbmcgPSBfZGVyZXFfKCcuLi9jb3JlL1NsZWVwaW5nJyk7XG5NYXR0ZXIuUGx1Z2luID0gX2RlcmVxXygnLi4vY29yZS9QbHVnaW4nKTtcblxuXG5NYXR0ZXIuQm9kaWVzID0gX2RlcmVxXygnLi4vZmFjdG9yeS9Cb2RpZXMnKTtcbk1hdHRlci5Db21wb3NpdGVzID0gX2RlcmVxXygnLi4vZmFjdG9yeS9Db21wb3NpdGVzJyk7XG5cbk1hdHRlci5BeGVzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvQXhlcycpO1xuTWF0dGVyLkJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xuTWF0dGVyLlN2ZyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1N2ZycpO1xuTWF0dGVyLlZlY3RvciA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L1ZlY3RvcicpO1xuTWF0dGVyLlZlcnRpY2VzID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVydGljZXMnKTtcblxuTWF0dGVyLlJlbmRlciA9IF9kZXJlcV8oJy4uL3JlbmRlci9SZW5kZXInKTtcbk1hdHRlci5SZW5kZXJQaXhpID0gX2RlcmVxXygnLi4vcmVuZGVyL1JlbmRlclBpeGknKTtcblxuLy8gYWxpYXNlc1xuXG5NYXR0ZXIuV29ybGQuYWRkID0gTWF0dGVyLkNvbXBvc2l0ZS5hZGQ7XG5NYXR0ZXIuV29ybGQucmVtb3ZlID0gTWF0dGVyLkNvbXBvc2l0ZS5yZW1vdmU7XG5NYXR0ZXIuV29ybGQuYWRkQ29tcG9zaXRlID0gTWF0dGVyLkNvbXBvc2l0ZS5hZGRDb21wb3NpdGU7XG5NYXR0ZXIuV29ybGQuYWRkQm9keSA9IE1hdHRlci5Db21wb3NpdGUuYWRkQm9keTtcbk1hdHRlci5Xb3JsZC5hZGRDb25zdHJhaW50ID0gTWF0dGVyLkNvbXBvc2l0ZS5hZGRDb25zdHJhaW50O1xuTWF0dGVyLldvcmxkLmNsZWFyID0gTWF0dGVyLkNvbXBvc2l0ZS5jbGVhcjtcbk1hdHRlci5FbmdpbmUucnVuID0gTWF0dGVyLlJ1bm5lci5ydW47XG5cbn0se1wiLi4vYm9keS9Cb2R5XCI6MSxcIi4uL2JvZHkvQ29tcG9zaXRlXCI6MixcIi4uL2JvZHkvV29ybGRcIjozLFwiLi4vY29sbGlzaW9uL0NvbnRhY3RcIjo0LFwiLi4vY29sbGlzaW9uL0RldGVjdG9yXCI6NSxcIi4uL2NvbGxpc2lvbi9HcmlkXCI6NixcIi4uL2NvbGxpc2lvbi9QYWlyXCI6NyxcIi4uL2NvbGxpc2lvbi9QYWlyc1wiOjgsXCIuLi9jb2xsaXNpb24vUXVlcnlcIjo5LFwiLi4vY29sbGlzaW9uL1Jlc29sdmVyXCI6MTAsXCIuLi9jb2xsaXNpb24vU0FUXCI6MTEsXCIuLi9jb25zdHJhaW50L0NvbnN0cmFpbnRcIjoxMixcIi4uL2NvbnN0cmFpbnQvTW91c2VDb25zdHJhaW50XCI6MTMsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FbmdpbmVcIjoxNSxcIi4uL2NvcmUvRXZlbnRzXCI6MTYsXCIuLi9jb3JlL01hdHRlclwiOjE3LFwiLi4vY29yZS9NZXRyaWNzXCI6MTgsXCIuLi9jb3JlL01vdXNlXCI6MTksXCIuLi9jb3JlL1BsdWdpblwiOjIwLFwiLi4vY29yZS9SdW5uZXJcIjoyMSxcIi4uL2NvcmUvU2xlZXBpbmdcIjoyMixcIi4uL2ZhY3RvcnkvQm9kaWVzXCI6MjMsXCIuLi9mYWN0b3J5L0NvbXBvc2l0ZXNcIjoyNCxcIi4uL2dlb21ldHJ5L0F4ZXNcIjoyNSxcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvU3ZnXCI6MjcsXCIuLi9nZW9tZXRyeS9WZWN0b3JcIjoyOCxcIi4uL2dlb21ldHJ5L1ZlcnRpY2VzXCI6MjksXCIuLi9yZW5kZXIvUmVuZGVyXCI6MzEsXCIuLi9yZW5kZXIvUmVuZGVyUGl4aVwiOjMyfV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlJlbmRlcmAgbW9kdWxlIGlzIGEgc2ltcGxlIEhUTUw1IGNhbnZhcyBiYXNlZCByZW5kZXJlciBmb3IgdmlzdWFsaXNpbmcgaW5zdGFuY2VzIG9mIGBNYXR0ZXIuRW5naW5lYC5cbiogSXQgaXMgaW50ZW5kZWQgZm9yIGRldmVsb3BtZW50IGFuZCBkZWJ1Z2dpbmcgcHVycG9zZXMsIGJ1dCBtYXkgYWxzbyBiZSBzdWl0YWJsZSBmb3Igc2ltcGxlIGdhbWVzLlxuKiBJdCBpbmNsdWRlcyBhIG51bWJlciBvZiBkcmF3aW5nIG9wdGlvbnMgaW5jbHVkaW5nIHdpcmVmcmFtZSwgdmVjdG9yIHdpdGggc3VwcG9ydCBmb3Igc3ByaXRlcyBhbmQgdmlld3BvcnRzLlxuKlxuKiBAY2xhc3MgUmVuZGVyXG4qL1xuXG52YXIgUmVuZGVyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyO1xuXG52YXIgQ29tbW9uID0gX2RlcmVxXygnLi4vY29yZS9Db21tb24nKTtcbnZhciBDb21wb3NpdGUgPSBfZGVyZXFfKCcuLi9ib2R5L0NvbXBvc2l0ZScpO1xudmFyIEJvdW5kcyA9IF9kZXJlcV8oJy4uL2dlb21ldHJ5L0JvdW5kcycpO1xudmFyIEV2ZW50cyA9IF9kZXJlcV8oJy4uL2NvcmUvRXZlbnRzJyk7XG52YXIgR3JpZCA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9HcmlkJyk7XG52YXIgVmVjdG9yID0gX2RlcmVxXygnLi4vZ2VvbWV0cnkvVmVjdG9yJyk7XG52YXIgTW91c2UgPSBfZGVyZXFfKCcuLi9jb3JlL01vdXNlJyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIHZhciBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lLFxuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBmdW5jdGlvbihjYWxsYmFjayl7IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhDb21tb24ubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xuXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmVuZGVyZXIuIFRoZSBvcHRpb25zIHBhcmFtZXRlciBpcyBhbiBvYmplY3QgdGhhdCBzcGVjaWZpZXMgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzLlxuICAgICAqIEFsbCBwcm9wZXJ0aWVzIGhhdmUgZGVmYXVsdCB2YWx1ZXMsIGFuZCBtYW55IGFyZSBwcmUtY2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIG90aGVyIHByb3BlcnRpZXMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtyZW5kZXJ9IEEgbmV3IHJlbmRlcmVyXG4gICAgICovXG4gICAgUmVuZGVyLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY29udHJvbGxlcjogUmVuZGVyLFxuICAgICAgICAgICAgZW5naW5lOiBudWxsLFxuICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgIGNhbnZhczogbnVsbCxcbiAgICAgICAgICAgIG1vdXNlOiBudWxsLFxuICAgICAgICAgICAgZnJhbWVSZXF1ZXN0SWQ6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDgwMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwMCxcbiAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiAxLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjMTgxODFkJyxcbiAgICAgICAgICAgICAgICB3aXJlZnJhbWVCYWNrZ3JvdW5kOiAnIzBmMGYxMycsXG4gICAgICAgICAgICAgICAgaGFzQm91bmRzOiAhIW9wdGlvbnMuYm91bmRzLFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lyZWZyYW1lczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93U2xlZXBpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd0RlYnVnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93QnJvYWRwaGFzZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0JvdW5kczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1ZlbG9jaXR5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93Q29sbGlzaW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1NlcGFyYXRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93QXhlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1Bvc2l0aW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0FuZ2xlSW5kaWNhdG9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93SWRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93U2hhZG93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1ZlcnRleE51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dDb252ZXhIdWxsczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0ludGVybmFsRWRnZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dNb3VzZVBvc2l0aW9uOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZW5kZXIgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAocmVuZGVyLmNhbnZhcykge1xuICAgICAgICAgICAgcmVuZGVyLmNhbnZhcy53aWR0aCA9IHJlbmRlci5vcHRpb25zLndpZHRoIHx8IHJlbmRlci5jYW52YXMud2lkdGg7XG4gICAgICAgICAgICByZW5kZXIuY2FudmFzLmhlaWdodCA9IHJlbmRlci5vcHRpb25zLmhlaWdodCB8fCByZW5kZXIuY2FudmFzLmhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlci5tb3VzZSA9IG9wdGlvbnMubW91c2U7XG4gICAgICAgIHJlbmRlci5lbmdpbmUgPSBvcHRpb25zLmVuZ2luZTtcbiAgICAgICAgcmVuZGVyLmNhbnZhcyA9IHJlbmRlci5jYW52YXMgfHwgX2NyZWF0ZUNhbnZhcyhyZW5kZXIub3B0aW9ucy53aWR0aCwgcmVuZGVyLm9wdGlvbnMuaGVpZ2h0KTtcbiAgICAgICAgcmVuZGVyLmNvbnRleHQgPSByZW5kZXIuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHJlbmRlci50ZXh0dXJlcyA9IHt9O1xuXG4gICAgICAgIHJlbmRlci5ib3VuZHMgPSByZW5kZXIuYm91bmRzIHx8IHtcbiAgICAgICAgICAgIG1pbjoge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heDoge1xuICAgICAgICAgICAgICAgIHg6IHJlbmRlci5jYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgeTogcmVuZGVyLmNhbnZhcy5oZWlnaHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAocmVuZGVyLm9wdGlvbnMucGl4ZWxSYXRpbyAhPT0gMSkge1xuICAgICAgICAgICAgUmVuZGVyLnNldFBpeGVsUmF0aW8ocmVuZGVyLCByZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChDb21tb24uaXNFbGVtZW50KHJlbmRlci5lbGVtZW50KSkge1xuICAgICAgICAgICAgcmVuZGVyLmVsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyLmNhbnZhcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlbmRlci5jYW52YXMucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgQ29tbW9uLmxvZygnUmVuZGVyLmNyZWF0ZTogb3B0aW9ucy5lbGVtZW50IHdhcyB1bmRlZmluZWQsIHJlbmRlci5jYW52YXMgd2FzIGNyZWF0ZWQgYnV0IG5vdCBhcHBlbmRlZCcsICd3YXJuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb250aW51b3VzbHkgdXBkYXRlcyB0aGUgcmVuZGVyIGNhbnZhcyBvbiB0aGUgYHJlcXVlc3RBbmltYXRpb25GcmFtZWAgZXZlbnQuXG4gICAgICogQG1ldGhvZCBydW5cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICovXG4gICAgUmVuZGVyLnJ1biA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICAoZnVuY3Rpb24gbG9vcCh0aW1lKXtcbiAgICAgICAgICAgIHJlbmRlci5mcmFtZVJlcXVlc3RJZCA9IF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgICAgICBSZW5kZXIud29ybGQocmVuZGVyKTtcbiAgICAgICAgfSkoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5kcyBleGVjdXRpb24gb2YgYFJlbmRlci5ydW5gIG9uIHRoZSBnaXZlbiBgcmVuZGVyYCwgYnkgY2FuY2VsaW5nIHRoZSBhbmltYXRpb24gZnJhbWUgcmVxdWVzdCBldmVudCBsb29wLlxuICAgICAqIEBtZXRob2Qgc3RvcFxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKi9cbiAgICBSZW5kZXIuc3RvcCA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVuZGVyLmZyYW1lUmVxdWVzdElkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcGl4ZWwgcmF0aW8gb2YgdGhlIHJlbmRlcmVyIGFuZCB1cGRhdGVzIHRoZSBjYW52YXMuXG4gICAgICogVG8gYXV0b21hdGljYWxseSBkZXRlY3QgdGhlIGNvcnJlY3QgcmF0aW8sIHBhc3MgdGhlIHN0cmluZyBgJ2F1dG8nYCBmb3IgYHBpeGVsUmF0aW9gLlxuICAgICAqIEBtZXRob2Qgc2V0UGl4ZWxSYXRpb1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWxSYXRpb1xuICAgICAqL1xuICAgIFJlbmRlci5zZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24ocmVuZGVyLCBwaXhlbFJhdGlvKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBjYW52YXMgPSByZW5kZXIuY2FudmFzO1xuXG4gICAgICAgIGlmIChwaXhlbFJhdGlvID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHBpeGVsUmF0aW8gPSBfZ2V0UGl4ZWxSYXRpbyhjYW52YXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcbiAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZSgnZGF0YS1waXhlbC1yYXRpbycsIHBpeGVsUmF0aW8pO1xuICAgICAgICBjYW52YXMud2lkdGggPSBvcHRpb25zLndpZHRoICogcGl4ZWxSYXRpbztcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ICogcGl4ZWxSYXRpbztcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gb3B0aW9ucy53aWR0aCArICdweCc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCArICdweCc7XG4gICAgICAgIHJlbmRlci5jb250ZXh0LnNjYWxlKHBpeGVsUmF0aW8sIHBpeGVsUmF0aW8pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQb3NpdGlvbnMgYW5kIHNpemVzIHRoZSB2aWV3cG9ydCBhcm91bmQgdGhlIGdpdmVuIG9iamVjdCBib3VuZHMuXG4gICAgICogT2JqZWN0cyBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgKiAtIGBvYmplY3QuYm91bmRzYFxuICAgICAqIC0gYG9iamVjdC5wb3NpdGlvbmBcbiAgICAgKiAtIGBvYmplY3QubWluYCBhbmQgYG9iamVjdC5tYXhgXG4gICAgICogLSBgb2JqZWN0LnhgIGFuZCBgb2JqZWN0LnlgXG4gICAgICogQG1ldGhvZCBsb29rQXRcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtvYmplY3RbXX0gb2JqZWN0c1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBbcGFkZGluZ11cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtjZW50ZXI9dHJ1ZV1cbiAgICAgKi9cbiAgICBSZW5kZXIubG9va0F0ID0gZnVuY3Rpb24ocmVuZGVyLCBvYmplY3RzLCBwYWRkaW5nLCBjZW50ZXIpIHtcbiAgICAgICAgY2VudGVyID0gdHlwZW9mIGNlbnRlciAhPT0gJ3VuZGVmaW5lZCcgPyBjZW50ZXIgOiB0cnVlO1xuICAgICAgICBvYmplY3RzID0gQ29tbW9uLmlzQXJyYXkob2JqZWN0cykgPyBvYmplY3RzIDogW29iamVjdHNdO1xuICAgICAgICBwYWRkaW5nID0gcGFkZGluZyB8fCB7XG4gICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgeTogMFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZpbmQgYm91bmRzIG9mIGFsbCBvYmplY3RzXG4gICAgICAgIHZhciBib3VuZHMgPSB7XG4gICAgICAgICAgICBtaW46IHsgeDogSW5maW5pdHksIHk6IEluZmluaXR5IH0sXG4gICAgICAgICAgICBtYXg6IHsgeDogLUluZmluaXR5LCB5OiAtSW5maW5pdHkgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IG9iamVjdHNbaV0sXG4gICAgICAgICAgICAgICAgbWluID0gb2JqZWN0LmJvdW5kcyA/IG9iamVjdC5ib3VuZHMubWluIDogKG9iamVjdC5taW4gfHwgb2JqZWN0LnBvc2l0aW9uIHx8IG9iamVjdCksXG4gICAgICAgICAgICAgICAgbWF4ID0gb2JqZWN0LmJvdW5kcyA/IG9iamVjdC5ib3VuZHMubWF4IDogKG9iamVjdC5tYXggfHwgb2JqZWN0LnBvc2l0aW9uIHx8IG9iamVjdCk7XG5cbiAgICAgICAgICAgIGlmIChtaW4gJiYgbWF4KSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbi54IDwgYm91bmRzLm1pbi54KVxuICAgICAgICAgICAgICAgICAgICBib3VuZHMubWluLnggPSBtaW4ueDtcblxuICAgICAgICAgICAgICAgIGlmIChtYXgueCA+IGJvdW5kcy5tYXgueClcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzLm1heC54ID0gbWF4Lng7XG5cbiAgICAgICAgICAgICAgICBpZiAobWluLnkgPCBib3VuZHMubWluLnkpXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5taW4ueSA9IG1pbi55O1xuXG4gICAgICAgICAgICAgICAgaWYgKG1heC55ID4gYm91bmRzLm1heC55KVxuICAgICAgICAgICAgICAgICAgICBib3VuZHMubWF4LnkgPSBtYXgueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbmQgcmF0aW9zXG4gICAgICAgIHZhciB3aWR0aCA9IChib3VuZHMubWF4LnggLSBib3VuZHMubWluLngpICsgMiAqIHBhZGRpbmcueCxcbiAgICAgICAgICAgIGhlaWdodCA9IChib3VuZHMubWF4LnkgLSBib3VuZHMubWluLnkpICsgMiAqIHBhZGRpbmcueSxcbiAgICAgICAgICAgIHZpZXdIZWlnaHQgPSByZW5kZXIuY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgIHZpZXdXaWR0aCA9IHJlbmRlci5jYW52YXMud2lkdGgsXG4gICAgICAgICAgICBvdXRlclJhdGlvID0gdmlld1dpZHRoIC8gdmlld0hlaWdodCxcbiAgICAgICAgICAgIGlubmVyUmF0aW8gPSB3aWR0aCAvIGhlaWdodCxcbiAgICAgICAgICAgIHNjYWxlWCA9IDEsXG4gICAgICAgICAgICBzY2FsZVkgPSAxO1xuXG4gICAgICAgIC8vIGZpbmQgc2NhbGUgZmFjdG9yXG4gICAgICAgIGlmIChpbm5lclJhdGlvID4gb3V0ZXJSYXRpbykge1xuICAgICAgICAgICAgc2NhbGVZID0gaW5uZXJSYXRpbyAvIG91dGVyUmF0aW87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY2FsZVggPSBvdXRlclJhdGlvIC8gaW5uZXJSYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuYWJsZSBib3VuZHNcbiAgICAgICAgcmVuZGVyLm9wdGlvbnMuaGFzQm91bmRzID0gdHJ1ZTtcblxuICAgICAgICAvLyBwb3NpdGlvbiBhbmQgc2l6ZVxuICAgICAgICByZW5kZXIuYm91bmRzLm1pbi54ID0gYm91bmRzLm1pbi54O1xuICAgICAgICByZW5kZXIuYm91bmRzLm1heC54ID0gYm91bmRzLm1pbi54ICsgd2lkdGggKiBzY2FsZVg7XG4gICAgICAgIHJlbmRlci5ib3VuZHMubWluLnkgPSBib3VuZHMubWluLnk7XG4gICAgICAgIHJlbmRlci5ib3VuZHMubWF4LnkgPSBib3VuZHMubWluLnkgKyBoZWlnaHQgKiBzY2FsZVk7XG5cbiAgICAgICAgLy8gY2VudGVyXG4gICAgICAgIGlmIChjZW50ZXIpIHtcbiAgICAgICAgICAgIHJlbmRlci5ib3VuZHMubWluLnggKz0gd2lkdGggKiAwLjUgLSAod2lkdGggKiBzY2FsZVgpICogMC41O1xuICAgICAgICAgICAgcmVuZGVyLmJvdW5kcy5tYXgueCArPSB3aWR0aCAqIDAuNSAtICh3aWR0aCAqIHNjYWxlWCkgKiAwLjU7XG4gICAgICAgICAgICByZW5kZXIuYm91bmRzLm1pbi55ICs9IGhlaWdodCAqIDAuNSAtIChoZWlnaHQgKiBzY2FsZVkpICogMC41O1xuICAgICAgICAgICAgcmVuZGVyLmJvdW5kcy5tYXgueSArPSBoZWlnaHQgKiAwLjUgLSAoaGVpZ2h0ICogc2NhbGVZKSAqIDAuNTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBhZGRpbmdcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5taW4ueCAtPSBwYWRkaW5nLng7XG4gICAgICAgIHJlbmRlci5ib3VuZHMubWF4LnggLT0gcGFkZGluZy54O1xuICAgICAgICByZW5kZXIuYm91bmRzLm1pbi55IC09IHBhZGRpbmcueTtcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5tYXgueSAtPSBwYWRkaW5nLnk7XG5cbiAgICAgICAgLy8gdXBkYXRlIG1vdXNlXG4gICAgICAgIGlmIChyZW5kZXIubW91c2UpIHtcbiAgICAgICAgICAgIE1vdXNlLnNldFNjYWxlKHJlbmRlci5tb3VzZSwge1xuICAgICAgICAgICAgICAgIHg6IChyZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCkgLyByZW5kZXIuY2FudmFzLndpZHRoLFxuICAgICAgICAgICAgICAgIHk6IChyZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSkgLyByZW5kZXIuY2FudmFzLmhlaWdodFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIE1vdXNlLnNldE9mZnNldChyZW5kZXIubW91c2UsIHJlbmRlci5ib3VuZHMubWluKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHZpZXdwb3J0IHRyYW5zZm9ybXMgYmFzZWQgb24gYHJlbmRlci5ib3VuZHNgIHRvIGEgcmVuZGVyIGNvbnRleHQuXG4gICAgICogQG1ldGhvZCBzdGFydFZpZXdUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICovXG4gICAgUmVuZGVyLnN0YXJ0Vmlld1RyYW5zZm9ybSA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICB2YXIgYm91bmRzV2lkdGggPSByZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCxcbiAgICAgICAgICAgIGJvdW5kc0hlaWdodCA9IHJlbmRlci5ib3VuZHMubWF4LnkgLSByZW5kZXIuYm91bmRzLm1pbi55LFxuICAgICAgICAgICAgYm91bmRzU2NhbGVYID0gYm91bmRzV2lkdGggLyByZW5kZXIub3B0aW9ucy53aWR0aCxcbiAgICAgICAgICAgIGJvdW5kc1NjYWxlWSA9IGJvdW5kc0hlaWdodCAvIHJlbmRlci5vcHRpb25zLmhlaWdodDtcblxuICAgICAgICByZW5kZXIuY29udGV4dC5zY2FsZSgxIC8gYm91bmRzU2NhbGVYLCAxIC8gYm91bmRzU2NhbGVZKTtcbiAgICAgICAgcmVuZGVyLmNvbnRleHQudHJhbnNsYXRlKC1yZW5kZXIuYm91bmRzLm1pbi54LCAtcmVuZGVyLmJvdW5kcy5taW4ueSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyBhbGwgdHJhbnNmb3JtcyBvbiB0aGUgcmVuZGVyIGNvbnRleHQuXG4gICAgICogQG1ldGhvZCBlbmRWaWV3VHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqL1xuICAgIFJlbmRlci5lbmRWaWV3VHJhbnNmb3JtID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIHJlbmRlci5jb250ZXh0LnNldFRyYW5zZm9ybShyZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvLCAwLCAwLCByZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvLCAwLCAwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgZ2l2ZW4gYGVuZ2luZWAncyBgTWF0dGVyLldvcmxkYCBvYmplY3QuXG4gICAgICogVGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIGFsbCByZW5kZXJpbmcgYW5kIHNob3VsZCBiZSBjYWxsZWQgZXZlcnkgdGltZSB0aGUgc2NlbmUgY2hhbmdlcy5cbiAgICAgKiBAbWV0aG9kIHdvcmxkXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqL1xuICAgIFJlbmRlci53b3JsZCA9IGZ1bmN0aW9uKHJlbmRlcikge1xuICAgICAgICB2YXIgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgY2FudmFzID0gcmVuZGVyLmNhbnZhcyxcbiAgICAgICAgICAgIGNvbnRleHQgPSByZW5kZXIuY29udGV4dCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIGFsbEJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMod29ybGQpLFxuICAgICAgICAgICAgYWxsQ29uc3RyYWludHMgPSBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMod29ybGQpLFxuICAgICAgICAgICAgYmFja2dyb3VuZCA9IG9wdGlvbnMud2lyZWZyYW1lcyA/IG9wdGlvbnMud2lyZWZyYW1lQmFja2dyb3VuZCA6IG9wdGlvbnMuYmFja2dyb3VuZCxcbiAgICAgICAgICAgIGJvZGllcyA9IFtdLFxuICAgICAgICAgICAgY29uc3RyYWludHMgPSBbXSxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBlbmdpbmUudGltaW5nLnRpbWVzdGFtcFxuICAgICAgICB9O1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKHJlbmRlciwgJ2JlZm9yZVJlbmRlcicsIGV2ZW50KTtcblxuICAgICAgICAvLyBhcHBseSBiYWNrZ3JvdW5kIGlmIGl0IGhhcyBjaGFuZ2VkXG4gICAgICAgIGlmIChyZW5kZXIuY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQpXG4gICAgICAgICAgICBfYXBwbHlCYWNrZ3JvdW5kKHJlbmRlciwgYmFja2dyb3VuZCk7XG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIGNhbnZhcyB3aXRoIGEgdHJhbnNwYXJlbnQgZmlsbCwgdG8gYWxsb3cgdGhlIGNhbnZhcyBiYWNrZ3JvdW5kIHRvIHNob3dcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLWluJztcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuXG4gICAgICAgIC8vIGhhbmRsZSBib3VuZHNcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGJvZGllcyB0aGF0IGFyZSBub3QgaW4gdmlld1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFsbEJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBib2R5ID0gYWxsQm9kaWVzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChCb3VuZHMub3ZlcmxhcHMoYm9keS5ib3VuZHMsIHJlbmRlci5ib3VuZHMpKVxuICAgICAgICAgICAgICAgICAgICBib2RpZXMucHVzaChib2R5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZmlsdGVyIG91dCBjb25zdHJhaW50cyB0aGF0IGFyZSBub3QgaW4gdmlld1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFsbENvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBhbGxDb25zdHJhaW50c1tpXSxcbiAgICAgICAgICAgICAgICAgICAgYm9keUEgPSBjb25zdHJhaW50LmJvZHlBLFxuICAgICAgICAgICAgICAgICAgICBib2R5QiA9IGNvbnN0cmFpbnQuYm9keUIsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50QVdvcmxkID0gY29uc3RyYWludC5wb2ludEEsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50QldvcmxkID0gY29uc3RyYWludC5wb2ludEI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYm9keUEpIHBvaW50QVdvcmxkID0gVmVjdG9yLmFkZChib2R5QS5wb3NpdGlvbiwgY29uc3RyYWludC5wb2ludEEpO1xuICAgICAgICAgICAgICAgIGlmIChib2R5QikgcG9pbnRCV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlCLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50Qik7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBvaW50QVdvcmxkIHx8ICFwb2ludEJXb3JsZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoQm91bmRzLmNvbnRhaW5zKHJlbmRlci5ib3VuZHMsIHBvaW50QVdvcmxkKSB8fCBCb3VuZHMuY29udGFpbnMocmVuZGVyLmJvdW5kcywgcG9pbnRCV29ybGQpKVxuICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50cy5wdXNoKGNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIHZpZXdcbiAgICAgICAgICAgIFJlbmRlci5zdGFydFZpZXdUcmFuc2Zvcm0ocmVuZGVyKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIG1vdXNlXG4gICAgICAgICAgICBpZiAocmVuZGVyLm1vdXNlKSB7XG4gICAgICAgICAgICAgICAgTW91c2Uuc2V0U2NhbGUocmVuZGVyLm1vdXNlLCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IChyZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCkgLyByZW5kZXIuY2FudmFzLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICB5OiAocmVuZGVyLmJvdW5kcy5tYXgueSAtIHJlbmRlci5ib3VuZHMubWluLnkpIC8gcmVuZGVyLmNhbnZhcy5oZWlnaHRcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIE1vdXNlLnNldE9mZnNldChyZW5kZXIubW91c2UsIHJlbmRlci5ib3VuZHMubWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzID0gYWxsQ29uc3RyYWludHM7XG4gICAgICAgICAgICBib2RpZXMgPSBhbGxCb2RpZXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMud2lyZWZyYW1lcyB8fCAoZW5naW5lLmVuYWJsZVNsZWVwaW5nICYmIG9wdGlvbnMuc2hvd1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgLy8gZnVsbHkgZmVhdHVyZWQgcmVuZGVyaW5nIG9mIGJvZGllc1xuICAgICAgICAgICAgUmVuZGVyLmJvZGllcyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93Q29udmV4SHVsbHMpXG4gICAgICAgICAgICAgICAgUmVuZGVyLmJvZHlDb252ZXhIdWxscyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgICAgIC8vIG9wdGltaXNlZCBtZXRob2QgZm9yIHdpcmVmcmFtZXMgb25seVxuICAgICAgICAgICAgUmVuZGVyLmJvZHlXaXJlZnJhbWVzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dCb3VuZHMpXG4gICAgICAgICAgICBSZW5kZXIuYm9keUJvdW5kcyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0F4ZXMgfHwgb3B0aW9ucy5zaG93QW5nbGVJbmRpY2F0b3IpXG4gICAgICAgICAgICBSZW5kZXIuYm9keUF4ZXMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dQb3NpdGlvbnMpXG4gICAgICAgICAgICBSZW5kZXIuYm9keVBvc2l0aW9ucyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1ZlbG9jaXR5KVxuICAgICAgICAgICAgUmVuZGVyLmJvZHlWZWxvY2l0eShyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0lkcylcbiAgICAgICAgICAgIFJlbmRlci5ib2R5SWRzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93U2VwYXJhdGlvbnMpXG4gICAgICAgICAgICBSZW5kZXIuc2VwYXJhdGlvbnMocmVuZGVyLCBlbmdpbmUucGFpcnMubGlzdCwgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0NvbGxpc2lvbnMpXG4gICAgICAgICAgICBSZW5kZXIuY29sbGlzaW9ucyhyZW5kZXIsIGVuZ2luZS5wYWlycy5saXN0LCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93VmVydGV4TnVtYmVycylcbiAgICAgICAgICAgIFJlbmRlci52ZXJ0ZXhOdW1iZXJzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93TW91c2VQb3NpdGlvbilcbiAgICAgICAgICAgIFJlbmRlci5tb3VzZVBvc2l0aW9uKHJlbmRlciwgcmVuZGVyLm1vdXNlLCBjb250ZXh0KTtcblxuICAgICAgICBSZW5kZXIuY29uc3RyYWludHMoY29uc3RyYWludHMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dCcm9hZHBoYXNlICYmIGVuZ2luZS5icm9hZHBoYXNlLmNvbnRyb2xsZXIgPT09IEdyaWQpXG4gICAgICAgICAgICBSZW5kZXIuZ3JpZChyZW5kZXIsIGVuZ2luZS5icm9hZHBoYXNlLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93RGVidWcpXG4gICAgICAgICAgICBSZW5kZXIuZGVidWcocmVuZGVyLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNCb3VuZHMpIHtcbiAgICAgICAgICAgIC8vIHJldmVydCB2aWV3IHRyYW5zZm9ybXNcbiAgICAgICAgICAgIFJlbmRlci5lbmRWaWV3VHJhbnNmb3JtKHJlbmRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBFdmVudHMudHJpZ2dlcihyZW5kZXIsICdhZnRlclJlbmRlcicsIGV2ZW50KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgZGVidWdcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmRlYnVnID0gZnVuY3Rpb24ocmVuZGVyLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICB3b3JsZCA9IGVuZ2luZS53b3JsZCxcbiAgICAgICAgICAgIG1ldHJpY3MgPSBlbmdpbmUubWV0cmljcyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIGJvZGllcyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMod29ybGQpLFxuICAgICAgICAgICAgc3BhY2UgPSBcIiAgICBcIjtcblxuICAgICAgICBpZiAoZW5naW5lLnRpbWluZy50aW1lc3RhbXAgLSAocmVuZGVyLmRlYnVnVGltZXN0YW1wIHx8IDApID49IDUwMCkge1xuICAgICAgICAgICAgdmFyIHRleHQgPSBcIlwiO1xuXG4gICAgICAgICAgICBpZiAobWV0cmljcy50aW1pbmcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IFwiZnBzOiBcIiArIE1hdGgucm91bmQobWV0cmljcy50aW1pbmcuZnBzKSArIHNwYWNlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHJlbmRlci5kZWJ1Z1N0cmluZyA9IHRleHQ7XG4gICAgICAgICAgICByZW5kZXIuZGVidWdUaW1lc3RhbXAgPSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXIuZGVidWdTdHJpbmcpIHtcbiAgICAgICAgICAgIGMuZm9udCA9IFwiMTJweCBBcmlhbFwiO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjUpJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwLjUpJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNwbGl0ID0gcmVuZGVyLmRlYnVnU3RyaW5nLnNwbGl0KCdcXG4nKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGxpdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGMuZmlsbFRleHQoc3BsaXRbaV0sIDUwLCA1MCArIGkgKiAxOCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgY29uc3RyYWludHNcbiAgICAgKiBAcGFyYW0ge2NvbnN0cmFpbnRbXX0gY29uc3RyYWludHNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuY29uc3RyYWludHMgPSBmdW5jdGlvbihjb25zdHJhaW50cywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQ7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25zdHJhaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBjb25zdHJhaW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKCFjb25zdHJhaW50LnJlbmRlci52aXNpYmxlIHx8ICFjb25zdHJhaW50LnBvaW50QSB8fCAhY29uc3RyYWludC5wb2ludEIpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBib2R5QSA9IGNvbnN0cmFpbnQuYm9keUEsXG4gICAgICAgICAgICAgICAgYm9keUIgPSBjb25zdHJhaW50LmJvZHlCLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDtcblxuICAgICAgICAgICAgaWYgKGJvZHlBKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBWZWN0b3IuYWRkKGJvZHlBLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gY29uc3RyYWludC5wb2ludEE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25zdHJhaW50LnJlbmRlci50eXBlID09PSAncGluJykge1xuICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgYy5hcmMoc3RhcnQueCwgc3RhcnQueSwgMywgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChib2R5Qikge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBWZWN0b3IuYWRkKGJvZHlCLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50Qik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gY29uc3RyYWludC5wb2ludEI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLm1vdmVUbyhzdGFydC54LCBzdGFydC55KTtcblxuICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50LnJlbmRlci50eXBlID09PSAnc3ByaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBWZWN0b3Iuc3ViKGVuZCwgc3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsID0gVmVjdG9yLnBlcnAoVmVjdG9yLm5vcm1hbGlzZShkZWx0YSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29pbHMgPSBNYXRoLmNlaWwoQ29tbW9uLmNsYW1wKGNvbnN0cmFpbnQubGVuZ3RoIC8gNSwgMTIsIDIwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBjb2lsczsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBqICUgMiA9PT0gMCA/IDEgOiAtMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYy5saW5lVG8oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQueCArIGRlbHRhLnggKiAoaiAvIGNvaWxzKSArIG5vcm1hbC54ICogb2Zmc2V0ICogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydC55ICsgZGVsdGEueSAqIChqIC8gY29pbHMpICsgbm9ybWFsLnkgKiBvZmZzZXQgKiA0XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYy5saW5lVG8oZW5kLngsIGVuZC55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQucmVuZGVyLmxpbmVXaWR0aCkge1xuICAgICAgICAgICAgICAgIGMubGluZVdpZHRoID0gY29uc3RyYWludC5yZW5kZXIubGluZVdpZHRoO1xuICAgICAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSBjb25zdHJhaW50LnJlbmRlci5zdHJva2VTdHlsZTtcbiAgICAgICAgICAgICAgICBjLnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uc3RyYWludC5yZW5kZXIuYW5jaG9ycykge1xuICAgICAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gY29uc3RyYWludC5yZW5kZXIuc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLmFyYyhzdGFydC54LCBzdGFydC55LCAzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgYy5hcmMoZW5kLngsIGVuZC55LCAzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgYy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLmZpbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5U2hhZG93c1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlTaGFkb3dzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgZW5naW5lID0gcmVuZGVyLmVuZ2luZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmICghYm9keS5yZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuY2lyY2xlUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLmFyYyhib2R5LnBvc2l0aW9uLngsIGJvZHkucG9zaXRpb24ueSwgYm9keS5jaXJjbGVSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMubW92ZVRvKGJvZHkudmVydGljZXNbMF0ueCwgYm9keS52ZXJ0aWNlc1swXS55KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGJvZHkudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYy5saW5lVG8oYm9keS52ZXJ0aWNlc1tqXS54LCBib2R5LnZlcnRpY2VzW2pdLnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGlzdGFuY2VYID0gYm9keS5wb3NpdGlvbi54IC0gcmVuZGVyLm9wdGlvbnMud2lkdGggKiAwLjUsXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VZID0gYm9keS5wb3NpdGlvbi55IC0gcmVuZGVyLm9wdGlvbnMuaGVpZ2h0ICogMC4yLFxuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoZGlzdGFuY2VYKSArIE1hdGguYWJzKGRpc3RhbmNlWSk7XG5cbiAgICAgICAgICAgIGMuc2hhZG93Q29sb3IgPSAncmdiYSgwLDAsMCwwLjE1KSc7XG4gICAgICAgICAgICBjLnNoYWRvd09mZnNldFggPSAwLjA1ICogZGlzdGFuY2VYO1xuICAgICAgICAgICAgYy5zaGFkb3dPZmZzZXRZID0gMC4wNSAqIGRpc3RhbmNlWTtcbiAgICAgICAgICAgIGMuc2hhZG93Qmx1ciA9IDEgKyAxMiAqIE1hdGgubWluKDEsIGRpc3RhbmNlIC8gMTAwMCk7XG5cbiAgICAgICAgICAgIGMuZmlsbCgpO1xuXG4gICAgICAgICAgICBjLnNoYWRvd0NvbG9yID0gbnVsbDtcbiAgICAgICAgICAgIGMuc2hhZG93T2Zmc2V0WCA9IG51bGw7XG4gICAgICAgICAgICBjLnNoYWRvd09mZnNldFkgPSBudWxsO1xuICAgICAgICAgICAgYy5zaGFkb3dCbHVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2RpZXNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2RpZXMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgc2hvd0ludGVybmFsRWRnZXMgPSBvcHRpb25zLnNob3dJbnRlcm5hbEVkZ2VzIHx8ICFvcHRpb25zLndpcmVmcmFtZXMsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBrO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmICghYm9keS5yZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gaGFuZGxlIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgICAgICBmb3IgKGsgPSBib2R5LnBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgayA8IGJvZHkucGFydHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICBwYXJ0ID0gYm9keS5wYXJ0c1trXTtcblxuICAgICAgICAgICAgICAgIGlmICghcGFydC5yZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93U2xlZXBpbmcgJiYgYm9keS5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuZ2xvYmFsQWxwaGEgPSAwLjUgKiBwYXJ0LnJlbmRlci5vcGFjaXR5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydC5yZW5kZXIub3BhY2l0eSAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjLmdsb2JhbEFscGhhID0gcGFydC5yZW5kZXIub3BhY2l0eTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocGFydC5yZW5kZXIuc3ByaXRlICYmIHBhcnQucmVuZGVyLnNwcml0ZS50ZXh0dXJlICYmICFvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFydCBzcHJpdGVcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwcml0ZSA9IHBhcnQucmVuZGVyLnNwcml0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUgPSBfZ2V0VGV4dHVyZShyZW5kZXIsIHNwcml0ZS50ZXh0dXJlKTtcblxuICAgICAgICAgICAgICAgICAgICBjLnRyYW5zbGF0ZShwYXJ0LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgICAgIGMucm90YXRlKHBhcnQuYW5nbGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGMuZHJhd0ltYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUud2lkdGggKiAtc3ByaXRlLnhPZmZzZXQgKiBzcHJpdGUueFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS5oZWlnaHQgKiAtc3ByaXRlLnlPZmZzZXQgKiBzcHJpdGUueVNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53aWR0aCAqIHNwcml0ZS54U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLmhlaWdodCAqIHNwcml0ZS55U2NhbGVcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyByZXZlcnQgdHJhbnNsYXRpb24sIGhvcGVmdWxseSBmYXN0ZXIgdGhhbiBzYXZlIC8gcmVzdG9yZVxuICAgICAgICAgICAgICAgICAgICBjLnJvdGF0ZSgtcGFydC5hbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIGMudHJhbnNsYXRlKC1wYXJ0LnBvc2l0aW9uLngsIC1wYXJ0LnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcnQgcG9seWdvblxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydC5jaXJjbGVSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmFyYyhwYXJ0LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSwgcGFydC5jaXJjbGVSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWzBdLngsIHBhcnQudmVydGljZXNbMF0ueSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcGFydC52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFydC52ZXJ0aWNlc1tqIC0gMV0uaXNJbnRlcm5hbCB8fCBzaG93SW50ZXJuYWxFZGdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhwYXJ0LnZlcnRpY2VzW2pdLngsIHBhcnQudmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC52ZXJ0aWNlc1tqXS54LCBwYXJ0LnZlcnRpY2VzW2pdLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnZlcnRpY2VzW2pdLmlzSW50ZXJuYWwgJiYgIXNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQudmVydGljZXNbKGogKyAxKSAlIHBhcnQudmVydGljZXMubGVuZ3RoXS54LCBwYXJ0LnZlcnRpY2VzWyhqICsgMSkgJSBwYXJ0LnZlcnRpY2VzLmxlbmd0aF0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhwYXJ0LnZlcnRpY2VzWzBdLngsIHBhcnQudmVydGljZXNbMF0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gcGFydC5yZW5kZXIuZmlsbFN0eWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydC5yZW5kZXIubGluZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5saW5lV2lkdGggPSBwYXJ0LnJlbmRlci5saW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9IHBhcnQucmVuZGVyLnN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGMuZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICcjYmJiJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjLmdsb2JhbEFscGhhID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBPcHRpbWlzZWQgbWV0aG9kIGZvciBkcmF3aW5nIGJvZHkgd2lyZWZyYW1lcyBpbiBvbmUgcGFzc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5V2lyZWZyYW1lc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlXaXJlZnJhbWVzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgc2hvd0ludGVybmFsRWRnZXMgPSByZW5kZXIub3B0aW9ucy5zaG93SW50ZXJuYWxFZGdlcyxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBwYXJ0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBrO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGFsbCBib2RpZXNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBoYW5kbGUgY29tcG91bmQgcGFydHNcbiAgICAgICAgICAgIGZvciAoayA9IGJvZHkucGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBrIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHBhcnQgPSBib2R5LnBhcnRzW2tdO1xuXG4gICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC52ZXJ0aWNlc1swXS54LCBwYXJ0LnZlcnRpY2VzWzBdLnkpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMTsgaiA8IHBhcnQudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJ0LnZlcnRpY2VzW2ogLSAxXS5pc0ludGVybmFsIHx8IHNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhwYXJ0LnZlcnRpY2VzW2pdLngsIHBhcnQudmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzW2pdLngsIHBhcnQudmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydC52ZXJ0aWNlc1tqXS5pc0ludGVybmFsICYmICFzaG93SW50ZXJuYWxFZGdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC52ZXJ0aWNlc1soaiArIDEpICUgcGFydC52ZXJ0aWNlcy5sZW5ndGhdLngsIHBhcnQudmVydGljZXNbKGogKyAxKSAlIHBhcnQudmVydGljZXMubGVuZ3RoXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbMF0ueCwgcGFydC52ZXJ0aWNlc1swXS55KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2VTdHlsZSA9ICcjYmJiJztcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3B0aW1pc2VkIG1ldGhvZCBmb3IgZHJhd2luZyBib2R5IGNvbnZleCBodWxsIHdpcmVmcmFtZXMgaW4gb25lIHBhc3NcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keUNvbnZleEh1bGxzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keUNvbnZleEh1bGxzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHBhcnQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgY29udmV4IGh1bGxzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmICghYm9keS5yZW5kZXIudmlzaWJsZSB8fCBib2R5LnBhcnRzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgYy5tb3ZlVG8oYm9keS52ZXJ0aWNlc1swXS54LCBib2R5LnZlcnRpY2VzWzBdLnkpO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgYm9keS52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGMubGluZVRvKGJvZHkudmVydGljZXNbal0ueCwgYm9keS52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYy5saW5lVG8oYm9keS52ZXJ0aWNlc1swXS54LCBib2R5LnZlcnRpY2VzWzBdLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC4yKSc7XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgYm9keSB2ZXJ0ZXggbnVtYmVycy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgdmVydGV4TnVtYmVyc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLnZlcnRleE51bWJlcnMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gYm9kaWVzW2ldLnBhcnRzO1xuICAgICAgICAgICAgZm9yIChrID0gcGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBrIDwgcGFydHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2tdO1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBwYXJ0LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC4yKSc7XG4gICAgICAgICAgICAgICAgICAgIGMuZmlsbFRleHQoaSArICdfJyArIGosIHBhcnQucG9zaXRpb24ueCArIChwYXJ0LnZlcnRpY2VzW2pdLnggLSBwYXJ0LnBvc2l0aW9uLngpICogMC44LCBwYXJ0LnBvc2l0aW9uLnkgKyAocGFydC52ZXJ0aWNlc1tqXS55IC0gcGFydC5wb3NpdGlvbi55KSAqIDAuOCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgbW91c2UgcG9zaXRpb24uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIG1vdXNlUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIubW91c2VQb3NpdGlvbiA9IGZ1bmN0aW9uKHJlbmRlciwgbW91c2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0O1xuICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuOCknO1xuICAgICAgICBjLmZpbGxUZXh0KG1vdXNlLnBvc2l0aW9uLnggKyAnICAnICsgbW91c2UucG9zaXRpb24ueSwgbW91c2UucG9zaXRpb24ueCArIDUsIG1vdXNlLnBvc2l0aW9uLnkgLSA1KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYm9keSBib3VuZHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keUJvdW5kc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlCb3VuZHMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5yZW5kZXIudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IGJvZGllc1tpXS5wYXJ0cztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gcGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgYy5yZWN0KHBhcnQuYm91bmRzLm1pbi54LCBwYXJ0LmJvdW5kcy5taW4ueSwgcGFydC5ib3VuZHMubWF4LnggLSBwYXJ0LmJvdW5kcy5taW4ueCwgcGFydC5ib3VuZHMubWF4LnkgLSBwYXJ0LmJvdW5kcy5taW4ueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMDgpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYm9keSBhbmdsZSBpbmRpY2F0b3JzIGFuZCBheGVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlBeGVzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keUF4ZXMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaztcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIHBhcnRzID0gYm9keS5wYXJ0cztcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaG93QXhlcykge1xuICAgICAgICAgICAgICAgIC8vIHJlbmRlciBhbGwgYXhlc1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IHBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBhcnQuYXhlcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXMgPSBwYXJ0LmF4ZXNba107XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhwYXJ0LnBvc2l0aW9uLnggKyBheGlzLnggKiAyMCwgcGFydC5wb3NpdGlvbi55ICsgYXhpcy55ICogMjApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSBwYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydHNbal07XG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBwYXJ0LmF4ZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbmRlciBhIHNpbmdsZSBheGlzIGluZGljYXRvclxuICAgICAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC5wb3NpdGlvbi54LCBwYXJ0LnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5saW5lVG8oKHBhcnQudmVydGljZXNbMF0ueCArIHBhcnQudmVydGljZXNbcGFydC52ZXJ0aWNlcy5sZW5ndGgtMV0ueCkgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnQudmVydGljZXNbMF0ueSArIHBhcnQudmVydGljZXNbcGFydC52ZXJ0aWNlcy5sZW5ndGgtMV0ueSkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAnaW5kaWFucmVkJztcbiAgICAgICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpJztcbiAgICAgICAgICAgIGMuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ292ZXJsYXknO1xuICAgICAgICAgICAgYy5saW5lV2lkdGggPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgYy5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IHBvc2l0aW9uc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5UG9zaXRpb25zXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVBvc2l0aW9ucyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBrO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGN1cnJlbnQgcG9zaXRpb25zXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmICghYm9keS5yZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gaGFuZGxlIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHBhcnQgPSBib2R5LnBhcnRzW2tdO1xuICAgICAgICAgICAgICAgIGMuYXJjKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55LCAzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdpbmRpYW5yZWQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwLjUpJztcbiAgICAgICAgfVxuICAgICAgICBjLmZpbGwoKTtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIC8vIHJlbmRlciBwcmV2aW91cyBwb3NpdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgIGlmIChib2R5LnJlbmRlci52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgYy5hcmMoYm9keS5wb3NpdGlvblByZXYueCwgYm9keS5wb3NpdGlvblByZXYueSwgMiwgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC44KSc7XG4gICAgICAgIGMuZmlsbCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IHZlbG9jaXR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlWZWxvY2l0eSA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dDtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjLm1vdmVUbyhib2R5LnBvc2l0aW9uLngsIGJvZHkucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5LnBvc2l0aW9uLnggKyAoYm9keS5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvblByZXYueCkgKiAyLCBib2R5LnBvc2l0aW9uLnkgKyAoYm9keS5wb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvblByZXYueSkgKiAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMztcbiAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdjb3JuZmxvd2VyYmx1ZSc7XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGJvZHkgaWRzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlJZHNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5SWRzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFib2RpZXNbaV0ucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGJvZGllc1tpXS5wYXJ0cztcbiAgICAgICAgICAgIGZvciAoaiA9IHBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICBjLmZvbnQgPSBcIjEycHggQXJpYWxcIjtcbiAgICAgICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknO1xuICAgICAgICAgICAgICAgIGMuZmlsbFRleHQocGFydC5pZCwgcGFydC5wb3NpdGlvbi54ICsgMTAsIHBhcnQucG9zaXRpb24ueSAtIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBjb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5jb2xsaXNpb25zID0gZnVuY3Rpb24ocmVuZGVyLCBwYWlycywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgY29ycmVjdGVkLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGNvbGxpc2lvbiBwb3NpdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcGFpci5hY3RpdmVDb250YWN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWN0ID0gcGFpci5hY3RpdmVDb250YWN0c1tqXSxcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4ID0gY29udGFjdC52ZXJ0ZXg7XG4gICAgICAgICAgICAgICAgYy5yZWN0KHZlcnRleC54IC0gMS41LCB2ZXJ0ZXgueSAtIDEuNSwgMy41LCAzLjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gJ29yYW5nZSc7XG4gICAgICAgIH1cbiAgICAgICAgYy5maWxsKCk7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgY29sbGlzaW9uIG5vcm1hbHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG5cbiAgICAgICAgICAgIGlmIChwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsUG9zWCA9IHBhaXIuYWN0aXZlQ29udGFjdHNbMF0udmVydGV4LngsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFBvc1kgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55O1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhaXIuYWN0aXZlQ29udGFjdHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFBvc1ggPSAocGFpci5hY3RpdmVDb250YWN0c1swXS52ZXJ0ZXgueCArIHBhaXIuYWN0aXZlQ29udGFjdHNbMV0udmVydGV4LngpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsUG9zWSA9IChwYWlyLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55ICsgcGFpci5hY3RpdmVDb250YWN0c1sxXS52ZXJ0ZXgueSkgLyAyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb24uYm9keUIgPT09IGNvbGxpc2lvbi5zdXBwb3J0c1swXS5ib2R5IHx8IGNvbGxpc2lvbi5ib2R5QS5pc1N0YXRpYyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhub3JtYWxQb3NYIC0gY29sbGlzaW9uLm5vcm1hbC54ICogOCwgbm9ybWFsUG9zWSAtIGNvbGxpc2lvbi5ub3JtYWwueSAqIDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKG5vcm1hbFBvc1ggKyBjb2xsaXNpb24ubm9ybWFsLnggKiA4LCBub3JtYWxQb3NZICsgY29sbGlzaW9uLm5vcm1hbC55ICogOCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYy5saW5lVG8obm9ybWFsUG9zWCwgbm9ybWFsUG9zWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDE2NSwwLDAuNyknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdvcmFuZ2UnO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBzZXBhcmF0aW9uc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuc2VwYXJhdGlvbnMgPSBmdW5jdGlvbihyZW5kZXIsIHBhaXJzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBjb3JyZWN0ZWQsXG4gICAgICAgICAgICBib2R5QSxcbiAgICAgICAgICAgIGJvZHlCLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgc2VwYXJhdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcbiAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLmJvZHlCO1xuXG4gICAgICAgICAgICB2YXIgayA9IDE7XG5cbiAgICAgICAgICAgIGlmICghYm9keUIuaXNTdGF0aWMgJiYgIWJvZHlBLmlzU3RhdGljKSBrID0gMC41O1xuICAgICAgICAgICAgaWYgKGJvZHlCLmlzU3RhdGljKSBrID0gMDtcblxuICAgICAgICAgICAgYy5tb3ZlVG8oYm9keUIucG9zaXRpb24ueCwgYm9keUIucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5Qi5wb3NpdGlvbi54IC0gY29sbGlzaW9uLnBlbmV0cmF0aW9uLnggKiBrLCBib2R5Qi5wb3NpdGlvbi55IC0gY29sbGlzaW9uLnBlbmV0cmF0aW9uLnkgKiBrKTtcblxuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGlmICghYm9keUIuaXNTdGF0aWMgJiYgIWJvZHlBLmlzU3RhdGljKSBrID0gMC41O1xuICAgICAgICAgICAgaWYgKGJvZHlBLmlzU3RhdGljKSBrID0gMDtcblxuICAgICAgICAgICAgYy5tb3ZlVG8oYm9keUEucG9zaXRpb24ueCwgYm9keUEucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5QS5wb3NpdGlvbi54ICsgY29sbGlzaW9uLnBlbmV0cmF0aW9uLnggKiBrLCBib2R5QS5wb3NpdGlvbi55ICsgY29sbGlzaW9uLnBlbmV0cmF0aW9uLnkgKiBrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC41KSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ29yYW5nZSc7XG4gICAgICAgIH1cbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgZ3JpZFxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2dyaWR9IGdyaWRcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuZ3JpZCA9IGZ1bmN0aW9uKHJlbmRlciwgZ3JpZCwgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwxODAsMCwwLjEpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTgwLDAsMC41KSc7XG4gICAgICAgIH1cblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIHZhciBidWNrZXRLZXlzID0gQ29tbW9uLmtleXMoZ3JpZC5idWNrZXRzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1Y2tldEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBidWNrZXRJZCA9IGJ1Y2tldEtleXNbaV07XG5cbiAgICAgICAgICAgIGlmIChncmlkLmJ1Y2tldHNbYnVja2V0SWRdLmxlbmd0aCA8IDIpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciByZWdpb24gPSBidWNrZXRJZC5zcGxpdCgvQ3xSLyk7XG4gICAgICAgICAgICBjLnJlY3QoMC41ICsgcGFyc2VJbnQocmVnaW9uWzFdLCAxMCkgKiBncmlkLmJ1Y2tldFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAwLjUgKyBwYXJzZUludChyZWdpb25bMl0sIDEwKSAqIGdyaWQuYnVja2V0SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBncmlkLmJ1Y2tldFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBncmlkLmJ1Y2tldEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBjLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGluc3BlY3RvclxuICAgICAqIEBwYXJhbSB7aW5zcGVjdG9yfSBpbnNwZWN0b3JcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuaW5zcGVjdG9yID0gZnVuY3Rpb24oaW5zcGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBlbmdpbmUgPSBpbnNwZWN0b3IuZW5naW5lLFxuICAgICAgICAgICAgc2VsZWN0ZWQgPSBpbnNwZWN0b3Iuc2VsZWN0ZWQsXG4gICAgICAgICAgICByZW5kZXIgPSBpbnNwZWN0b3IucmVuZGVyLFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgYm91bmRzO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc0JvdW5kcykge1xuICAgICAgICAgICAgdmFyIGJvdW5kc1dpZHRoID0gcmVuZGVyLmJvdW5kcy5tYXgueCAtIHJlbmRlci5ib3VuZHMubWluLngsXG4gICAgICAgICAgICAgICAgYm91bmRzSGVpZ2h0ID0gcmVuZGVyLmJvdW5kcy5tYXgueSAtIHJlbmRlci5ib3VuZHMubWluLnksXG4gICAgICAgICAgICAgICAgYm91bmRzU2NhbGVYID0gYm91bmRzV2lkdGggLyByZW5kZXIub3B0aW9ucy53aWR0aCxcbiAgICAgICAgICAgICAgICBib3VuZHNTY2FsZVkgPSBib3VuZHNIZWlnaHQgLyByZW5kZXIub3B0aW9ucy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGNvbnRleHQuc2NhbGUoMSAvIGJvdW5kc1NjYWxlWCwgMSAvIGJvdW5kc1NjYWxlWSk7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtcmVuZGVyLmJvdW5kcy5taW4ueCwgLXJlbmRlci5ib3VuZHMubWluLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBzZWxlY3RlZFtpXS5kYXRhO1xuXG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgwLjUsIDAuNSk7XG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDE2NSwwLDAuOSknO1xuICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChbMSwyXSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ2JvZHknOlxuXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyIGJvZHkgc2VsZWN0aW9uc1xuICAgICAgICAgICAgICAgIGJvdW5kcyA9IGl0ZW0uYm91bmRzO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5yZWN0KE1hdGguZmxvb3IoYm91bmRzLm1pbi54IC0gMyksIE1hdGguZmxvb3IoYm91bmRzLm1pbi55IC0gMyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoYm91bmRzLm1heC54IC0gYm91bmRzLm1pbi54ICsgNiksIE1hdGguZmxvb3IoYm91bmRzLm1heC55IC0gYm91bmRzLm1pbi55ICsgNikpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdjb25zdHJhaW50JzpcblxuICAgICAgICAgICAgICAgIC8vIHJlbmRlciBjb25zdHJhaW50IHNlbGVjdGlvbnNcbiAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSBpdGVtLnBvaW50QTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5ib2R5QSlcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSBpdGVtLnBvaW50QjtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHBvaW50LngsIHBvaW50LnksIDEwLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChbXSk7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtMC41LCAtMC41KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbmRlciBzZWxlY3Rpb24gcmVnaW9uXG4gICAgICAgIGlmIChpbnNwZWN0b3Iuc2VsZWN0U3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC42KSc7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwxNjUsMCwwLjEpJztcbiAgICAgICAgICAgIGJvdW5kcyA9IGluc3BlY3Rvci5zZWxlY3RCb3VuZHM7XG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5yZWN0KE1hdGguZmxvb3IoYm91bmRzLm1pbi54KSwgTWF0aC5mbG9vcihib3VuZHMubWluLnkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoYm91bmRzLm1heC54IC0gYm91bmRzLm1pbi54KSwgTWF0aC5mbG9vcihib3VuZHMubWF4LnkgLSBib3VuZHMubWluLnkpKTtcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgtMC41LCAtMC41KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmhhc0JvdW5kcylcbiAgICAgICAgICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2QgX2NyZWF0ZUNhbnZhc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IHdpZHRoXG4gICAgICogQHBhcmFtIHt9IGhlaWdodFxuICAgICAqIEByZXR1cm4gY2FudmFzXG4gICAgICovXG4gICAgdmFyIF9jcmVhdGVDYW52YXMgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGNhbnZhcy5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICAgICAgY2FudmFzLm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9O1xuICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwaXhlbCByYXRpbyBvZiB0aGUgY2FudmFzLlxuICAgICAqIEBtZXRob2QgX2dldFBpeGVsUmF0aW9cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhbnZhc1xuICAgICAqIEByZXR1cm4ge051bWJlcn0gcGl4ZWwgcmF0aW9cbiAgICAgKi9cbiAgICB2YXIgX2dldFBpeGVsUmF0aW8gPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgICAgICAgIGRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxLFxuICAgICAgICAgICAgYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyA9IGNvbnRleHQud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fCBjb250ZXh0Lm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgY29udGV4dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgY29udGV4dC5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBjb250ZXh0LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgMTtcblxuICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxSYXRpbyAvIGJhY2tpbmdTdG9yZVBpeGVsUmF0aW87XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlcXVlc3RlZCB0ZXh0dXJlIChhbiBJbWFnZSkgdmlhIGl0cyBwYXRoXG4gICAgICogQG1ldGhvZCBfZ2V0VGV4dHVyZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbWFnZVBhdGhcbiAgICAgKiBAcmV0dXJuIHtJbWFnZX0gdGV4dHVyZVxuICAgICAqL1xuICAgIHZhciBfZ2V0VGV4dHVyZSA9IGZ1bmN0aW9uKHJlbmRlciwgaW1hZ2VQYXRoKSB7XG4gICAgICAgIHZhciBpbWFnZSA9IHJlbmRlci50ZXh0dXJlc1tpbWFnZVBhdGhdO1xuXG4gICAgICAgIGlmIChpbWFnZSlcbiAgICAgICAgICAgIHJldHVybiBpbWFnZTtcblxuICAgICAgICBpbWFnZSA9IHJlbmRlci50ZXh0dXJlc1tpbWFnZVBhdGhdID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltYWdlLnNyYyA9IGltYWdlUGF0aDtcblxuICAgICAgICByZXR1cm4gaW1hZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGJhY2tncm91bmQgdG8gdGhlIGNhbnZhcyB1c2luZyBDU1MuXG4gICAgICogQG1ldGhvZCBhcHBseUJhY2tncm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZFxuICAgICAqL1xuICAgIHZhciBfYXBwbHlCYWNrZ3JvdW5kID0gZnVuY3Rpb24ocmVuZGVyLCBiYWNrZ3JvdW5kKSB7XG4gICAgICAgIHZhciBjc3NCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblxuICAgICAgICBpZiAoLyhqcGd8Z2lmfHBuZykkLy50ZXN0KGJhY2tncm91bmQpKVxuICAgICAgICAgICAgY3NzQmFja2dyb3VuZCA9ICd1cmwoJyArIGJhY2tncm91bmQgKyAnKSc7XG5cbiAgICAgICAgcmVuZGVyLmNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kID0gY3NzQmFja2dyb3VuZDtcbiAgICAgICAgcmVuZGVyLmNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IFwiY29udGFpblwiO1xuICAgICAgICByZW5kZXIuY3VycmVudEJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBFdmVudHMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBiZWZvcmUgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVJlbmRlclxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyUmVuZGVyXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGJhY2stcmVmZXJlbmNlIHRvIHRoZSBgTWF0dGVyLlJlbmRlcmAgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbnRyb2xsZXJcbiAgICAgKiBAdHlwZSByZW5kZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgTWF0dGVyLkVuZ2luZWAgaW5zdGFuY2UgdG8gYmUgdXNlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBlbmdpbmVcbiAgICAgKiBAdHlwZSBlbmdpbmVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBlbGVtZW50IHdoZXJlIHRoZSBjYW52YXMgaXMgdG8gYmUgaW5zZXJ0ZWQgKGlmIGByZW5kZXIuY2FudmFzYCBoYXMgbm90IGJlZW4gc3BlY2lmaWVkKVxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGVsZW1lbnRcbiAgICAgKiBAdHlwZSBIVE1MRWxlbWVudFxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBjYW52YXMgZWxlbWVudCB0byByZW5kZXIgdG8uIElmIG5vdCBzcGVjaWZpZWQsIG9uZSB3aWxsIGJlIGNyZWF0ZWQgaWYgYHJlbmRlci5lbGVtZW50YCBoYXMgYmVlbiBzcGVjaWZpZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY2FudmFzXG4gICAgICogQHR5cGUgSFRNTENhbnZhc0VsZW1lbnRcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIG9mIHRoZSByZW5kZXJlci5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgd2lkdGggaW4gcGl4ZWxzIG9mIHRoZSBgcmVuZGVyLmNhbnZhc2AgdG8gYmUgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLndpZHRoXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgODAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IGhlaWdodCBpbiBwaXhlbHMgb2YgdGhlIGByZW5kZXIuY2FudmFzYCB0byBiZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuaGVpZ2h0XG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgNjAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBzcGVjaWZpZXMgaWYgYHJlbmRlci5ib3VuZHNgIHNob3VsZCBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuaGFzQm91bmRzXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBCb3VuZHNgIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgZHJhd2luZyB2aWV3IHJlZ2lvbi5cbiAgICAgKiBSZW5kZXJpbmcgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHRyYW5zZm9ybWVkIGFuZCBzY2FsZWQgdG8gZml0IHdpdGhpbiB0aGUgY2FudmFzIHNpemUgKGByZW5kZXIub3B0aW9ucy53aWR0aGAgYW5kIGByZW5kZXIub3B0aW9ucy5oZWlnaHRgKS5cbiAgICAgKiBUaGlzIGFsbG93cyBmb3IgY3JlYXRpbmcgdmlld3MgdGhhdCBjYW4gcGFuIG9yIHpvb20gYXJvdW5kIHRoZSBzY2VuZS5cbiAgICAgKiBZb3UgbXVzdCBhbHNvIHNldCBgcmVuZGVyLm9wdGlvbnMuaGFzQm91bmRzYCB0byBgdHJ1ZWAgdG8gZW5hYmxlIGJvdW5kZWQgcmVuZGVyaW5nLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJvdW5kc1xuICAgICAqIEB0eXBlIGJvdW5kc1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIDJkIHJlbmRlcmluZyBjb250ZXh0IGZyb20gdGhlIGByZW5kZXIuY2FudmFzYCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbnRleHRcbiAgICAgKiBAdHlwZSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzcHJpdGUgdGV4dHVyZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0ZXh0dXJlc1xuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbn0pKCk7XG5cbn0se1wiLi4vYm9keS9Db21wb3NpdGVcIjoyLFwiLi4vY29sbGlzaW9uL0dyaWRcIjo2LFwiLi4vY29yZS9Db21tb25cIjoxNCxcIi4uL2NvcmUvRXZlbnRzXCI6MTYsXCIuLi9jb3JlL01vdXNlXCI6MTksXCIuLi9nZW9tZXRyeS9Cb3VuZHNcIjoyNixcIi4uL2dlb21ldHJ5L1ZlY3RvclwiOjI4fV0sMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4qIFRoZSBgTWF0dGVyLlJlbmRlclBpeGlgIG1vZHVsZSBpcyBhbiBleGFtcGxlIHJlbmRlcmVyIHVzaW5nIHBpeGkuanMuXG4qIFNlZSBhbHNvIGBNYXR0ZXIuUmVuZGVyYCBmb3IgYSBjYW52YXMgYmFzZWQgcmVuZGVyZXIuXG4qXG4qIEBjbGFzcyBSZW5kZXJQaXhpXG4qIEBkZXByZWNhdGVkIHRoZSBNYXR0ZXIuUmVuZGVyUGl4aSBtb2R1bGUgd2lsbCBzb29uIGJlIHJlbW92ZWQgZnJvbSB0aGUgTWF0dGVyLmpzIGNvcmUuXG4qIEl0IHdpbGwgbGlrZWx5IGJlIG1vdmVkIHRvIGl0cyBvd24gcmVwb3NpdG9yeSAoYnV0IG1haW50ZW5hbmNlIHdpbGwgYmUgbGltaXRlZCkuXG4qL1xuXG52YXIgUmVuZGVyUGl4aSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbmRlclBpeGk7XG5cbnZhciBCb3VuZHMgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9Cb3VuZHMnKTtcbnZhciBDb21wb3NpdGUgPSBfZGVyZXFfKCcuLi9ib2R5L0NvbXBvc2l0ZScpO1xudmFyIENvbW1vbiA9IF9kZXJlcV8oJy4uL2NvcmUvQ29tbW9uJyk7XG52YXIgRXZlbnRzID0gX2RlcmVxXygnLi4vY29yZS9FdmVudHMnKTtcbnZhciBWZWN0b3IgPSBfZGVyZXFfKCcuLi9nZW9tZXRyeS9WZWN0b3InKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBmdW5jdGlvbihjYWxsYmFjayl7IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhDb21tb24ubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xuICAgXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBQaXhpLmpzIFdlYkdMIHJlbmRlcmVyXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1JlbmRlclBpeGl9IEEgbmV3IHJlbmRlcmVyXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgQ29tbW9uLndhcm4oJ1JlbmRlclBpeGkuY3JlYXRlOiBNYXR0ZXIuUmVuZGVyUGl4aSBpcyBkZXByZWNhdGVkIChzZWUgZG9jcyknKTtcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiBSZW5kZXJQaXhpLFxuICAgICAgICAgICAgZW5naW5lOiBudWxsLFxuICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgIGZyYW1lUmVxdWVzdElkOiBudWxsLFxuICAgICAgICAgICAgY2FudmFzOiBudWxsLFxuICAgICAgICAgICAgcmVuZGVyZXI6IG51bGwsXG4gICAgICAgICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICAgICAgICBzcHJpdGVDb250YWluZXI6IG51bGwsXG4gICAgICAgICAgICBwaXhpT3B0aW9uczogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogODAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNjAwLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZmFmYWZhJyxcbiAgICAgICAgICAgICAgICB3aXJlZnJhbWVCYWNrZ3JvdW5kOiAnIzIyMicsXG4gICAgICAgICAgICAgICAgaGFzQm91bmRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpcmVmcmFtZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1NsZWVwaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dEZWJ1ZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0Jyb2FkcGhhc2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dCb3VuZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dWZWxvY2l0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0NvbGxpc2lvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dBeGVzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93UG9zaXRpb25zOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93QW5nbGVJbmRpY2F0b3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dJZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dTaGFkb3dzOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZW5kZXIgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKSxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50ID0gIXJlbmRlci5vcHRpb25zLndpcmVmcmFtZXMgJiYgcmVuZGVyLm9wdGlvbnMuYmFja2dyb3VuZCA9PT0gJ3RyYW5zcGFyZW50JztcblxuICAgICAgICAvLyBpbml0IHBpeGlcbiAgICAgICAgcmVuZGVyLnBpeGlPcHRpb25zID0gcmVuZGVyLnBpeGlPcHRpb25zIHx8IHtcbiAgICAgICAgICAgIHZpZXc6IHJlbmRlci5jYW52YXMsXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogdHJhbnNwYXJlbnQsXG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZFxuICAgICAgICB9O1xuXG4gICAgICAgIHJlbmRlci5tb3VzZSA9IG9wdGlvbnMubW91c2U7XG4gICAgICAgIHJlbmRlci5lbmdpbmUgPSBvcHRpb25zLmVuZ2luZTtcbiAgICAgICAgcmVuZGVyLnJlbmRlcmVyID0gcmVuZGVyLnJlbmRlcmVyIHx8IG5ldyBQSVhJLldlYkdMUmVuZGVyZXIocmVuZGVyLm9wdGlvbnMud2lkdGgsIHJlbmRlci5vcHRpb25zLmhlaWdodCwgcmVuZGVyLnBpeGlPcHRpb25zKTtcbiAgICAgICAgcmVuZGVyLmNvbnRhaW5lciA9IHJlbmRlci5jb250YWluZXIgfHwgbmV3IFBJWEkuQ29udGFpbmVyKCk7XG4gICAgICAgIHJlbmRlci5zcHJpdGVDb250YWluZXIgPSByZW5kZXIuc3ByaXRlQ29udGFpbmVyIHx8IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICAgICAgICByZW5kZXIuY2FudmFzID0gcmVuZGVyLmNhbnZhcyB8fCByZW5kZXIucmVuZGVyZXIudmlldztcbiAgICAgICAgcmVuZGVyLmJvdW5kcyA9IHJlbmRlci5ib3VuZHMgfHwgeyBcbiAgICAgICAgICAgIG1pbjoge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICBtYXg6IHsgXG4gICAgICAgICAgICAgICAgeDogcmVuZGVyLm9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgeTogcmVuZGVyLm9wdGlvbnMuaGVpZ2h0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIEV2ZW50cy5vbihyZW5kZXIuZW5naW5lLCAnYmVmb3JlVXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBSZW5kZXJQaXhpLmNsZWFyKHJlbmRlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNhY2hlc1xuICAgICAgICByZW5kZXIudGV4dHVyZXMgPSB7fTtcbiAgICAgICAgcmVuZGVyLnNwcml0ZXMgPSB7fTtcbiAgICAgICAgcmVuZGVyLnByaW1pdGl2ZXMgPSB7fTtcblxuICAgICAgICAvLyB1c2UgYSBzcHJpdGUgYmF0Y2ggZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgIHJlbmRlci5jb250YWluZXIuYWRkQ2hpbGQocmVuZGVyLnNwcml0ZUNvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gaW5zZXJ0IGNhbnZhc1xuICAgICAgICBpZiAoQ29tbW9uLmlzRWxlbWVudChyZW5kZXIuZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJlbmRlci5lbGVtZW50LmFwcGVuZENoaWxkKHJlbmRlci5jYW52YXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4oJ05vIFwicmVuZGVyLmVsZW1lbnRcIiBwYXNzZWQsIFwicmVuZGVyLmNhbnZhc1wiIHdhcyBub3QgaW5zZXJ0ZWQgaW50byBkb2N1bWVudC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByZXZlbnQgbWVudXMgb24gY2FudmFzXG4gICAgICAgIHJlbmRlci5jYW52YXMub25jb250ZXh0bWVudSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07XG4gICAgICAgIHJlbmRlci5jYW52YXMub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udGludW91c2x5IHVwZGF0ZXMgdGhlIHJlbmRlciBjYW52YXMgb24gdGhlIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGV2ZW50LlxuICAgICAqIEBtZXRob2QgcnVuXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUmVuZGVyUGl4aS5ydW4gPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgKGZ1bmN0aW9uIGxvb3AodGltZSl7XG4gICAgICAgICAgICByZW5kZXIuZnJhbWVSZXF1ZXN0SWQgPSBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgICAgICAgICAgUmVuZGVyUGl4aS53b3JsZChyZW5kZXIpO1xuICAgICAgICB9KSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmRzIGV4ZWN1dGlvbiBvZiBgUmVuZGVyLnJ1bmAgb24gdGhlIGdpdmVuIGByZW5kZXJgLCBieSBjYW5jZWxpbmcgdGhlIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0IGV2ZW50IGxvb3AuXG4gICAgICogQG1ldGhvZCBzdG9wXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUmVuZGVyUGl4aS5zdG9wID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZShyZW5kZXIuZnJhbWVSZXF1ZXN0SWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIHNjZW5lIGdyYXBoXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7UmVuZGVyUGl4aX0gcmVuZGVyXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLmNsZWFyID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSByZW5kZXIuY29udGFpbmVyLFxuICAgICAgICAgICAgc3ByaXRlQ29udGFpbmVyID0gcmVuZGVyLnNwcml0ZUNvbnRhaW5lcjtcblxuICAgICAgICAvLyBjbGVhciBzdGFnZSBjb250YWluZXJcbiAgICAgICAgd2hpbGUgKGNvbnRhaW5lci5jaGlsZHJlblswXSkgeyBcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuY2hpbGRyZW5bMF0pOyBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIHNwcml0ZSBiYXRjaFxuICAgICAgICB3aGlsZSAoc3ByaXRlQ29udGFpbmVyLmNoaWxkcmVuWzBdKSB7IFxuICAgICAgICAgICAgc3ByaXRlQ29udGFpbmVyLnJlbW92ZUNoaWxkKHNwcml0ZUNvbnRhaW5lci5jaGlsZHJlblswXSk7IFxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJnU3ByaXRlID0gcmVuZGVyLnNwcml0ZXNbJ2JnLTAnXTtcblxuICAgICAgICAvLyBjbGVhciBjYWNoZXNcbiAgICAgICAgcmVuZGVyLnRleHR1cmVzID0ge307XG4gICAgICAgIHJlbmRlci5zcHJpdGVzID0ge307XG4gICAgICAgIHJlbmRlci5wcmltaXRpdmVzID0ge307XG5cbiAgICAgICAgLy8gc2V0IGJhY2tncm91bmQgc3ByaXRlXG4gICAgICAgIHJlbmRlci5zcHJpdGVzWydiZy0wJ10gPSBiZ1Nwcml0ZTtcbiAgICAgICAgaWYgKGJnU3ByaXRlKVxuICAgICAgICAgICAgY29udGFpbmVyLmFkZENoaWxkQXQoYmdTcHJpdGUsIDApO1xuXG4gICAgICAgIC8vIGFkZCBzcHJpdGUgYmF0Y2ggYmFjayBpbnRvIGNvbnRhaW5lclxuICAgICAgICByZW5kZXIuY29udGFpbmVyLmFkZENoaWxkKHJlbmRlci5zcHJpdGVDb250YWluZXIpO1xuXG4gICAgICAgIC8vIHJlc2V0IGJhY2tncm91bmQgc3RhdGVcbiAgICAgICAgcmVuZGVyLmN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDtcblxuICAgICAgICAvLyByZXNldCBib3VuZHMgdHJhbnNmb3Jtc1xuICAgICAgICBjb250YWluZXIuc2NhbGUuc2V0KDEsIDEpO1xuICAgICAgICBjb250YWluZXIucG9zaXRpb24uc2V0KDAsIDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBiYWNrZ3JvdW5kIG9mIHRoZSBjYW52YXMgXG4gICAgICogQG1ldGhvZCBzZXRCYWNrZ3JvdW5kXG4gICAgICogQHBhcmFtIHtSZW5kZXJQaXhpfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZFxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUmVuZGVyUGl4aS5zZXRCYWNrZ3JvdW5kID0gZnVuY3Rpb24ocmVuZGVyLCBiYWNrZ3JvdW5kKSB7XG4gICAgICAgIGlmIChyZW5kZXIuY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQpIHtcbiAgICAgICAgICAgIHZhciBpc0NvbG9yID0gYmFja2dyb3VuZC5pbmRleE9mICYmIGJhY2tncm91bmQuaW5kZXhPZignIycpICE9PSAtMSxcbiAgICAgICAgICAgICAgICBiZ1Nwcml0ZSA9IHJlbmRlci5zcHJpdGVzWydiZy0wJ107XG5cbiAgICAgICAgICAgIGlmIChpc0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgc29saWQgYmFja2dyb3VuZCBjb2xvclxuICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IENvbW1vbi5jb2xvclRvTnVtYmVyKGJhY2tncm91bmQpO1xuICAgICAgICAgICAgICAgIHJlbmRlci5yZW5kZXJlci5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcblxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBiYWNrZ3JvdW5kIHNwcml0ZSBpZiBleGlzdGluZ1xuICAgICAgICAgICAgICAgIGlmIChiZ1Nwcml0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyLmNvbnRhaW5lci5yZW1vdmVDaGlsZChiZ1Nwcml0ZSk7IFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXNlIGJhY2tncm91bmQgc3ByaXRlIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIGlmICghYmdTcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBfZ2V0VGV4dHVyZShyZW5kZXIsIGJhY2tncm91bmQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJnU3ByaXRlID0gcmVuZGVyLnNwcml0ZXNbJ2JnLTAnXSA9IG5ldyBQSVhJLlNwcml0ZSh0ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgYmdTcHJpdGUucG9zaXRpb24ueCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJnU3ByaXRlLnBvc2l0aW9uLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICByZW5kZXIuY29udGFpbmVyLmFkZENoaWxkQXQoYmdTcHJpdGUsIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVuZGVyLmN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBtZXRob2Qgd29ybGRcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLndvcmxkID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIHZhciBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgd29ybGQgPSBlbmdpbmUud29ybGQsXG4gICAgICAgICAgICByZW5kZXJlciA9IHJlbmRlci5yZW5kZXJlcixcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IHJlbmRlci5jb250YWluZXIsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBib2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKHdvcmxkKSxcbiAgICAgICAgICAgIGFsbENvbnN0cmFpbnRzID0gQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKHdvcmxkKSxcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzID0gW10sXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIFJlbmRlclBpeGkuc2V0QmFja2dyb3VuZChyZW5kZXIsIG9wdGlvbnMud2lyZWZyYW1lQmFja2dyb3VuZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBSZW5kZXJQaXhpLnNldEJhY2tncm91bmQocmVuZGVyLCBvcHRpb25zLmJhY2tncm91bmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIGJvdW5kc1xuICAgICAgICB2YXIgYm91bmRzV2lkdGggPSByZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCxcbiAgICAgICAgICAgIGJvdW5kc0hlaWdodCA9IHJlbmRlci5ib3VuZHMubWF4LnkgLSByZW5kZXIuYm91bmRzLm1pbi55LFxuICAgICAgICAgICAgYm91bmRzU2NhbGVYID0gYm91bmRzV2lkdGggLyByZW5kZXIub3B0aW9ucy53aWR0aCxcbiAgICAgICAgICAgIGJvdW5kc1NjYWxlWSA9IGJvdW5kc0hlaWdodCAvIHJlbmRlci5vcHRpb25zLmhlaWdodDtcblxuICAgICAgICBpZiAob3B0aW9ucy5oYXNCb3VuZHMpIHtcbiAgICAgICAgICAgIC8vIEhpZGUgYm9kaWVzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG4gICAgICAgICAgICAgICAgYm9keS5yZW5kZXIuc3ByaXRlLnZpc2libGUgPSBCb3VuZHMub3ZlcmxhcHMoYm9keS5ib3VuZHMsIHJlbmRlci5ib3VuZHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGNvbnN0cmFpbnRzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQ29uc3RyYWludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGFsbENvbnN0cmFpbnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBib2R5QSA9IGNvbnN0cmFpbnQuYm9keUEsXG4gICAgICAgICAgICAgICAgICAgIGJvZHlCID0gY29uc3RyYWludC5ib2R5QixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRBV29ybGQgPSBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCV29ybGQgPSBjb25zdHJhaW50LnBvaW50QjtcblxuICAgICAgICAgICAgICAgIGlmIChib2R5QSkgcG9pbnRBV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlBLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlCKSBwb2ludEJXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKTtcblxuICAgICAgICAgICAgICAgIGlmICghcG9pbnRBV29ybGQgfHwgIXBvaW50QldvcmxkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMocmVuZGVyLmJvdW5kcywgcG9pbnRBV29ybGQpIHx8IEJvdW5kcy5jb250YWlucyhyZW5kZXIuYm91bmRzLCBwb2ludEJXb3JsZCkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgdmlld1xuICAgICAgICAgICAgY29udGFpbmVyLnNjYWxlLnNldCgxIC8gYm91bmRzU2NhbGVYLCAxIC8gYm91bmRzU2NhbGVZKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5wb3NpdGlvbi5zZXQoLXJlbmRlci5ib3VuZHMubWluLnggKiAoMSAvIGJvdW5kc1NjYWxlWCksIC1yZW5kZXIuYm91bmRzLm1pbi55ICogKDEgLyBib3VuZHNTY2FsZVkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzID0gYWxsQ29uc3RyYWludHM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgUmVuZGVyUGl4aS5ib2R5KHJlbmRlciwgYm9kaWVzW2ldKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uc3RyYWludHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBSZW5kZXJQaXhpLmNvbnN0cmFpbnQocmVuZGVyLCBjb25zdHJhaW50c1tpXSk7XG5cbiAgICAgICAgcmVuZGVyZXIucmVuZGVyKGNvbnRhaW5lcik7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAbWV0aG9kIGNvbnN0cmFpbnRcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lXG4gICAgICogQHBhcmFtIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBSZW5kZXJQaXhpLmNvbnN0cmFpbnQgPSBmdW5jdGlvbihyZW5kZXIsIGNvbnN0cmFpbnQpIHtcbiAgICAgICAgdmFyIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBib2R5QSA9IGNvbnN0cmFpbnQuYm9keUEsXG4gICAgICAgICAgICBib2R5QiA9IGNvbnN0cmFpbnQuYm9keUIsXG4gICAgICAgICAgICBwb2ludEEgPSBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgIHBvaW50QiA9IGNvbnN0cmFpbnQucG9pbnRCLFxuICAgICAgICAgICAgY29udGFpbmVyID0gcmVuZGVyLmNvbnRhaW5lcixcbiAgICAgICAgICAgIGNvbnN0cmFpbnRSZW5kZXIgPSBjb25zdHJhaW50LnJlbmRlcixcbiAgICAgICAgICAgIHByaW1pdGl2ZUlkID0gJ2MtJyArIGNvbnN0cmFpbnQuaWQsXG4gICAgICAgICAgICBwcmltaXRpdmUgPSByZW5kZXIucHJpbWl0aXZlc1twcmltaXRpdmVJZF07XG5cbiAgICAgICAgLy8gaW5pdGlhbGlzZSBjb25zdHJhaW50IHByaW1pdGl2ZSBpZiBub3QgZXhpc3RpbmdcbiAgICAgICAgaWYgKCFwcmltaXRpdmUpXG4gICAgICAgICAgICBwcmltaXRpdmUgPSByZW5kZXIucHJpbWl0aXZlc1twcmltaXRpdmVJZF0gPSBuZXcgUElYSS5HcmFwaGljcygpO1xuXG4gICAgICAgIC8vIGRvbid0IHJlbmRlciBpZiBjb25zdHJhaW50IGRvZXMgbm90IGhhdmUgdHdvIGVuZCBwb2ludHNcbiAgICAgICAgaWYgKCFjb25zdHJhaW50UmVuZGVyLnZpc2libGUgfHwgIWNvbnN0cmFpbnQucG9pbnRBIHx8ICFjb25zdHJhaW50LnBvaW50Qikge1xuICAgICAgICAgICAgcHJpbWl0aXZlLmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgdG8gc2NlbmUgZ3JhcGggaWYgbm90IGFscmVhZHkgdGhlcmVcbiAgICAgICAgaWYgKENvbW1vbi5pbmRleE9mKGNvbnRhaW5lci5jaGlsZHJlbiwgcHJpbWl0aXZlKSA9PT0gLTEpXG4gICAgICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQocHJpbWl0aXZlKTtcblxuICAgICAgICAvLyByZW5kZXIgdGhlIGNvbnN0cmFpbnQgb24gZXZlcnkgdXBkYXRlLCBzaW5jZSB0aGV5IGNhbiBjaGFuZ2UgZHluYW1pY2FsbHlcbiAgICAgICAgcHJpbWl0aXZlLmNsZWFyKCk7XG4gICAgICAgIHByaW1pdGl2ZS5iZWdpbkZpbGwoMCwgMCk7XG4gICAgICAgIHByaW1pdGl2ZS5saW5lU3R5bGUoY29uc3RyYWludFJlbmRlci5saW5lV2lkdGgsIENvbW1vbi5jb2xvclRvTnVtYmVyKGNvbnN0cmFpbnRSZW5kZXIuc3Ryb2tlU3R5bGUpLCAxKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChib2R5QSkge1xuICAgICAgICAgICAgcHJpbWl0aXZlLm1vdmVUbyhib2R5QS5wb3NpdGlvbi54ICsgcG9pbnRBLngsIGJvZHlBLnBvc2l0aW9uLnkgKyBwb2ludEEueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmltaXRpdmUubW92ZVRvKHBvaW50QS54LCBwb2ludEEueSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keUIpIHtcbiAgICAgICAgICAgIHByaW1pdGl2ZS5saW5lVG8oYm9keUIucG9zaXRpb24ueCArIHBvaW50Qi54LCBib2R5Qi5wb3NpdGlvbi55ICsgcG9pbnRCLnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVUbyhwb2ludEIueCwgcG9pbnRCLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpbWl0aXZlLmVuZEZpbGwoKTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQG1ldGhvZCBib2R5XG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUmVuZGVyUGl4aS5ib2R5ID0gZnVuY3Rpb24ocmVuZGVyLCBib2R5KSB7XG4gICAgICAgIHZhciBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgYm9keVJlbmRlciA9IGJvZHkucmVuZGVyO1xuXG4gICAgICAgIGlmICghYm9keVJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmIChib2R5UmVuZGVyLnNwcml0ZSAmJiBib2R5UmVuZGVyLnNwcml0ZS50ZXh0dXJlKSB7XG4gICAgICAgICAgICB2YXIgc3ByaXRlSWQgPSAnYi0nICsgYm9keS5pZCxcbiAgICAgICAgICAgICAgICBzcHJpdGUgPSByZW5kZXIuc3ByaXRlc1tzcHJpdGVJZF0sXG4gICAgICAgICAgICAgICAgc3ByaXRlQ29udGFpbmVyID0gcmVuZGVyLnNwcml0ZUNvbnRhaW5lcjtcblxuICAgICAgICAgICAgLy8gaW5pdGlhbGlzZSBib2R5IHNwcml0ZSBpZiBub3QgZXhpc3RpbmdcbiAgICAgICAgICAgIGlmICghc3ByaXRlKVxuICAgICAgICAgICAgICAgIHNwcml0ZSA9IHJlbmRlci5zcHJpdGVzW3Nwcml0ZUlkXSA9IF9jcmVhdGVCb2R5U3ByaXRlKHJlbmRlciwgYm9keSk7XG5cbiAgICAgICAgICAgIC8vIGFkZCB0byBzY2VuZSBncmFwaCBpZiBub3QgYWxyZWFkeSB0aGVyZVxuICAgICAgICAgICAgaWYgKENvbW1vbi5pbmRleE9mKHNwcml0ZUNvbnRhaW5lci5jaGlsZHJlbiwgc3ByaXRlKSA9PT0gLTEpXG4gICAgICAgICAgICAgICAgc3ByaXRlQ29udGFpbmVyLmFkZENoaWxkKHNwcml0ZSk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBib2R5IHNwcml0ZVxuICAgICAgICAgICAgc3ByaXRlLnBvc2l0aW9uLnggPSBib2R5LnBvc2l0aW9uLng7XG4gICAgICAgICAgICBzcHJpdGUucG9zaXRpb24ueSA9IGJvZHkucG9zaXRpb24ueTtcbiAgICAgICAgICAgIHNwcml0ZS5yb3RhdGlvbiA9IGJvZHkuYW5nbGU7XG4gICAgICAgICAgICBzcHJpdGUuc2NhbGUueCA9IGJvZHlSZW5kZXIuc3ByaXRlLnhTY2FsZSB8fCAxO1xuICAgICAgICAgICAgc3ByaXRlLnNjYWxlLnkgPSBib2R5UmVuZGVyLnNwcml0ZS55U2NhbGUgfHwgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwcmltaXRpdmVJZCA9ICdiLScgKyBib2R5LmlkLFxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZSA9IHJlbmRlci5wcmltaXRpdmVzW3ByaW1pdGl2ZUlkXSxcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSByZW5kZXIuY29udGFpbmVyO1xuXG4gICAgICAgICAgICAvLyBpbml0aWFsaXNlIGJvZHkgcHJpbWl0aXZlIGlmIG5vdCBleGlzdGluZ1xuICAgICAgICAgICAgaWYgKCFwcmltaXRpdmUpIHtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUgPSByZW5kZXIucHJpbWl0aXZlc1twcmltaXRpdmVJZF0gPSBfY3JlYXRlQm9keVByaW1pdGl2ZShyZW5kZXIsIGJvZHkpO1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5pbml0aWFsQW5nbGUgPSBib2R5LmFuZ2xlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhZGQgdG8gc2NlbmUgZ3JhcGggaWYgbm90IGFscmVhZHkgdGhlcmVcbiAgICAgICAgICAgIGlmIChDb21tb24uaW5kZXhPZihjb250YWluZXIuY2hpbGRyZW4sIHByaW1pdGl2ZSkgPT09IC0xKVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDaGlsZChwcmltaXRpdmUpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgYm9keSBwcmltaXRpdmVcbiAgICAgICAgICAgIHByaW1pdGl2ZS5wb3NpdGlvbi54ID0gYm9keS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgcHJpbWl0aXZlLnBvc2l0aW9uLnkgPSBib2R5LnBvc2l0aW9uLnk7XG4gICAgICAgICAgICBwcmltaXRpdmUucm90YXRpb24gPSBib2R5LmFuZ2xlIC0gcHJpbWl0aXZlLmluaXRpYWxBbmdsZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYm9keSBzcHJpdGVcbiAgICAgKiBAbWV0aG9kIF9jcmVhdGVCb2R5U3ByaXRlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1JlbmRlclBpeGl9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEByZXR1cm4ge1BJWEkuU3ByaXRlfSBzcHJpdGVcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIHZhciBfY3JlYXRlQm9keVNwcml0ZSA9IGZ1bmN0aW9uKHJlbmRlciwgYm9keSkge1xuICAgICAgICB2YXIgYm9keVJlbmRlciA9IGJvZHkucmVuZGVyLFxuICAgICAgICAgICAgdGV4dHVyZVBhdGggPSBib2R5UmVuZGVyLnNwcml0ZS50ZXh0dXJlLFxuICAgICAgICAgICAgdGV4dHVyZSA9IF9nZXRUZXh0dXJlKHJlbmRlciwgdGV4dHVyZVBhdGgpLFxuICAgICAgICAgICAgc3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlKHRleHR1cmUpO1xuXG4gICAgICAgIHNwcml0ZS5hbmNob3IueCA9IGJvZHkucmVuZGVyLnNwcml0ZS54T2Zmc2V0O1xuICAgICAgICBzcHJpdGUuYW5jaG9yLnkgPSBib2R5LnJlbmRlci5zcHJpdGUueU9mZnNldDtcblxuICAgICAgICByZXR1cm4gc3ByaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYm9keSBwcmltaXRpdmVcbiAgICAgKiBAbWV0aG9kIF9jcmVhdGVCb2R5UHJpbWl0aXZlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1JlbmRlclBpeGl9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEByZXR1cm4ge1BJWEkuR3JhcGhpY3N9IGdyYXBoaWNzXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICB2YXIgX2NyZWF0ZUJvZHlQcmltaXRpdmUgPSBmdW5jdGlvbihyZW5kZXIsIGJvZHkpIHtcbiAgICAgICAgdmFyIGJvZHlSZW5kZXIgPSBib2R5LnJlbmRlcixcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIHByaW1pdGl2ZSA9IG5ldyBQSVhJLkdyYXBoaWNzKCksXG4gICAgICAgICAgICBmaWxsU3R5bGUgPSBDb21tb24uY29sb3JUb051bWJlcihib2R5UmVuZGVyLmZpbGxTdHlsZSksXG4gICAgICAgICAgICBzdHJva2VTdHlsZSA9IENvbW1vbi5jb2xvclRvTnVtYmVyKGJvZHlSZW5kZXIuc3Ryb2tlU3R5bGUpLFxuICAgICAgICAgICAgc3Ryb2tlU3R5bGVJbmRpY2F0b3IgPSBDb21tb24uY29sb3JUb051bWJlcihib2R5UmVuZGVyLnN0cm9rZVN0eWxlKSxcbiAgICAgICAgICAgIHN0cm9rZVN0eWxlV2lyZWZyYW1lID0gQ29tbW9uLmNvbG9yVG9OdW1iZXIoJyNiYmInKSxcbiAgICAgICAgICAgIHN0cm9rZVN0eWxlV2lyZWZyYW1lSW5kaWNhdG9yID0gQ29tbW9uLmNvbG9yVG9OdW1iZXIoJyNDRDVDNUMnKSxcbiAgICAgICAgICAgIHBhcnQ7XG5cbiAgICAgICAgcHJpbWl0aXZlLmNsZWFyKCk7XG5cbiAgICAgICAgLy8gaGFuZGxlIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgIGZvciAodmFyIGsgPSBib2R5LnBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgayA8IGJvZHkucGFydHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHBhcnQgPSBib2R5LnBhcnRzW2tdO1xuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5iZWdpbkZpbGwoZmlsbFN0eWxlLCAxKTtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUubGluZVN0eWxlKGJvZHlSZW5kZXIubGluZVdpZHRoLCBzdHJva2VTdHlsZSwgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5iZWdpbkZpbGwoMCwgMCk7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVTdHlsZSgxLCBzdHJva2VTdHlsZVdpcmVmcmFtZSwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByaW1pdGl2ZS5tb3ZlVG8ocGFydC52ZXJ0aWNlc1swXS54IC0gYm9keS5wb3NpdGlvbi54LCBwYXJ0LnZlcnRpY2VzWzBdLnkgLSBib2R5LnBvc2l0aW9uLnkpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHBhcnQudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUubGluZVRvKHBhcnQudmVydGljZXNbal0ueCAtIGJvZHkucG9zaXRpb24ueCwgcGFydC52ZXJ0aWNlc1tqXS55IC0gYm9keS5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJpbWl0aXZlLmxpbmVUbyhwYXJ0LnZlcnRpY2VzWzBdLnggLSBib2R5LnBvc2l0aW9uLngsIHBhcnQudmVydGljZXNbMF0ueSAtIGJvZHkucG9zaXRpb24ueSk7XG5cbiAgICAgICAgICAgIHByaW1pdGl2ZS5lbmRGaWxsKCk7XG5cbiAgICAgICAgICAgIC8vIGFuZ2xlIGluZGljYXRvclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0FuZ2xlSW5kaWNhdG9yIHx8IG9wdGlvbnMuc2hvd0F4ZXMpIHtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUuYmVnaW5GaWxsKDAsIDApO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUubGluZVN0eWxlKDEsIHN0cm9rZVN0eWxlV2lyZWZyYW1lSW5kaWNhdG9yLCAxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUubGluZVN0eWxlKDEsIHN0cm9rZVN0eWxlSW5kaWNhdG9yKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcmltaXRpdmUubW92ZVRvKHBhcnQucG9zaXRpb24ueCAtIGJvZHkucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUubGluZVRvKCgocGFydC52ZXJ0aWNlc1swXS54ICsgcGFydC52ZXJ0aWNlc1twYXJ0LnZlcnRpY2VzLmxlbmd0aC0xXS54KSAvIDIgLSBib2R5LnBvc2l0aW9uLngpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgocGFydC52ZXJ0aWNlc1swXS55ICsgcGFydC52ZXJ0aWNlc1twYXJ0LnZlcnRpY2VzLmxlbmd0aC0xXS55KSAvIDIgLSBib2R5LnBvc2l0aW9uLnkpKTtcblxuICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5lbmRGaWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJpbWl0aXZlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByZXF1ZXN0ZWQgdGV4dHVyZSAoYSBQSVhJLlRleHR1cmUpIHZpYSBpdHMgcGF0aFxuICAgICAqIEBtZXRob2QgX2dldFRleHR1cmVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7UmVuZGVyUGl4aX0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGltYWdlUGF0aFxuICAgICAqIEByZXR1cm4ge1BJWEkuVGV4dHVyZX0gdGV4dHVyZVxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgdmFyIF9nZXRUZXh0dXJlID0gZnVuY3Rpb24ocmVuZGVyLCBpbWFnZVBhdGgpIHtcbiAgICAgICAgdmFyIHRleHR1cmUgPSByZW5kZXIudGV4dHVyZXNbaW1hZ2VQYXRoXTtcblxuICAgICAgICBpZiAoIXRleHR1cmUpXG4gICAgICAgICAgICB0ZXh0dXJlID0gcmVuZGVyLnRleHR1cmVzW2ltYWdlUGF0aF0gPSBQSVhJLlRleHR1cmUuZnJvbUltYWdlKGltYWdlUGF0aCk7XG5cbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgfTtcblxufSkoKTtcblxufSx7XCIuLi9ib2R5L0NvbXBvc2l0ZVwiOjIsXCIuLi9jb3JlL0NvbW1vblwiOjE0LFwiLi4vY29yZS9FdmVudHNcIjoxNixcIi4uL2dlb21ldHJ5L0JvdW5kc1wiOjI2LFwiLi4vZ2VvbWV0cnkvVmVjdG9yXCI6Mjh9XX0se30sWzMwXSkoMzApXG59KTtcbiIsImltcG9ydCBNYXR0ZXIgZnJvbSBcIm1hdHRlci1qc1wiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4vdXRpbHNcIlxuaW1wb3J0IHsgV29ybGRFeHRlbmRlZCB9IGZyb20gXCIuL2V4dHR5cGVzXCI7XG5cblxuZXhwb3J0IGNvbnN0IGFudGlHcmF2aXR5TWFuaGF0dGFuID0gKHNyYzogTWF0dGVyLkJvZHksIHRndDogTWF0dGVyLkJvZHksIGNvZWZmID0gMTAwKTogTWF0dGVyLlZlY3RvciA9PiB7XG4gICAgbGV0IGcgPSBjb2VmZjtcbiAgICBsZXQgZHggPSB1dGlscy5kaXN0SG9yaXooc3JjLnBvc2l0aW9uLCB0Z3QucG9zaXRpb24pO1xuICAgIGxldCBkeSA9IHV0aWxzLmRpc3RWZXJ0aShzcmMucG9zaXRpb24sIHRndC5wb3NpdGlvbik7XG4gICAgLy8gY2hhcmFjdGVyaXN0aWMgc2l6ZVxuICAgIGxldCBjaGFyU2l6ZSA9IDAuNSAqIChNYXRoLnNxcnQoc3JjLmFyZWEpICsgTWF0aC5zcXJ0KHRndC5hcmVhKSk7XG4gICAgbGV0IGFudGlHcmF2aXR5TWFnWCA9IChkeCA8IDEuNSAqIGNoYXJTaXplKSA/IGcgLyAoMTAwMCArIGR4ICoqIDIpIDogMDtcbiAgICBsZXQgYW50aUdyYXZpdHlNYWdZID0gKGR5IDwgMS41ICogY2hhclNpemUpID8gZyAvICgxMDAwICsgZHkgKiogMikgOiAwO1xuICAgIGxldCBmb3JjZSA9IHtcbiAgICAgICAgeDogYW50aUdyYXZpdHlNYWdYLFxuICAgICAgICB5OiBhbnRpR3Jhdml0eU1hZ1ksXG4gICAgfTtcbiAgICByZXR1cm4gZm9yY2U7XG59XG5cblxuZXhwb3J0IGNvbnN0IGFudGlHcmF2aXR5UmFuZ2VkID0gKHNyYzogTWF0dGVyLkJvZHksIHRndDogTWF0dGVyLkJvZHksIGNvZWZmID0gMTAwLCByYW5nZUZhY3RvciA9IDMuMCk6IE1hdHRlci5WZWN0b3IgPT4ge1xuICAgIGxldCBkID0gdXRpbHMuZGlzdEV1Y2xpZChzcmMucG9zaXRpb24sIHRndC5wb3NpdGlvbik7XG4gICAgLy8gY2hhcmFjdGVyaXN0aWMgc2l6ZVxuICAgIGxldCBjaGFyU2l6ZSA9IDAuNSAqIChNYXRoLnNxcnQoc3JjLmFyZWEpICsgTWF0aC5zcXJ0KHRndC5hcmVhKSk7XG4gICAgbGV0IGFudGlHcmF2aXR5TWFnID0gKGQgPCByYW5nZUZhY3RvciAqIGNoYXJTaXplKSA/IGNvZWZmIC8gZCAqKiAyIDogMDtcbiAgICBsZXQgdW5pdFNyY1RvVGd0ID0gdXRpbHMudW5pdFZlYyhzcmMucG9zaXRpb24sIHRndC5wb3NpdGlvbilcbiAgICBsZXQgZm9yY2UgPSB7XG4gICAgICAgIHg6IGFudGlHcmF2aXR5TWFnICogdW5pdFNyY1RvVGd0LngsXG4gICAgICAgIHk6IGFudGlHcmF2aXR5TWFnICogdW5pdFNyY1RvVGd0LnksXG4gICAgfTtcbiAgICByZXR1cm4gZm9yY2U7XG59XG5cblxuZXhwb3J0IGNvbnN0IGFudGlHcmF2aXR5ID0gKHNyYzogTWF0dGVyLkJvZHksIHRndDogTWF0dGVyLkJvZHksIGNvZWZmID0gMTAwKTogTWF0dGVyLlZlY3RvciA9PiB7XG4gICAgbGV0IGQgPSB1dGlscy5kaXN0RXVjbGlkKHNyYy5wb3NpdGlvbiwgdGd0LnBvc2l0aW9uKTtcbiAgICBsZXQgYW50aUdyYXZpdHlNYWcgPSBjb2VmZiAvIGQgKiogMjtcbiAgICBsZXQgdW5pdFNyY1RvVGd0ID0gdXRpbHMudW5pdFZlYyhzcmMucG9zaXRpb24sIHRndC5wb3NpdGlvbilcbiAgICBsZXQgZm9yY2UgPSB7XG4gICAgICAgIHg6IGFudGlHcmF2aXR5TWFnICogdW5pdFNyY1RvVGd0LngsXG4gICAgICAgIHk6IGFudGlHcmF2aXR5TWFnICogdW5pdFNyY1RvVGd0LnksXG4gICAgfTtcbiAgICByZXR1cm4gZm9yY2U7XG59XG5cblxuZXhwb3J0IGNvbnN0IGFwcGx5QW50aUdyYXZpdHlUd29Cb2R5ID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBzcmM6IE1hdHRlci5Cb2R5LCB0Z3Q6IE1hdHRlci5Cb2R5KSA9PiB7XG4gICAgY29uc3QgZiA9IChzOiBNYXR0ZXIuQm9keSwgdDogTWF0dGVyLkJvZHkpOiBNYXR0ZXIuVmVjdG9yID0+IHtcbiAgICAgICAgcmV0dXJuIGFudGlHcmF2aXR5UmFuZ2VkKHMsIHQsIHdvcmxkLnJlcHVsc2lvbkNvZWZmLCB3b3JsZC5yZXB1bHNpb25SYW5nZSk7XG4gICAgfTtcblxuICAgIC8vIHdhbGwgc2hvdWxkIG5vdCBiZSBpbnZvbHZlZFxuICAgIGlmICghc3JjLmlzU3RhdGljICYmICF0Z3QuaXNTdGF0aWMpIHtcbiAgICAgICAgbGV0IGZvcmNlQW50aUdyYXZpdHkgPSBmKHNyYywgdGd0KTtcbiAgICAgICAgLy8gYW50aWdyYXZpdHkgZXhlcnRzIG9uIHRoZSBjZW50ZXIgb2YgYSBibG9ja1xuICAgICAgICBNYXR0ZXIuQm9keS5hcHBseUZvcmNlKHRndCwgdGd0LnBvc2l0aW9uLCBmb3JjZUFudGlHcmF2aXR5KTtcbiAgICAgICAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZShzcmMsIHNyYy5wb3NpdGlvbiwgdXRpbHMubmVnYXRlKGZvcmNlQW50aUdyYXZpdHkpKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNvbnN0IGFwcGx5QW50aUdyYXZpdHkgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGJsb2Nrcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgYXBwbHlBbnRpR3Jhdml0eVR3b0JvZHkod29ybGQsIGJsb2Nrc1tpXSwgYmxvY2tzW2pdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEtub2xsYm90IH0gZnJvbSBcIi4va25vbGxib3RcIjtcblxuS25vbGxib3QucnVuKCk7XG4iLCJpbXBvcnQgTWF0dGVyIGZyb20gXCJtYXR0ZXItanNcIjtcblxuaW1wb3J0IHsgV29ybGRFeHRlbmRlZCB9IGZyb20gXCIuL2V4dHR5cGVzXCI7XG5pbXBvcnQgeyBpbWdQYXRocywgcGFyYW1zIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0ICogYXMgcmVwdWxzaW9uIGZyb20gXCIuL3JlcHVsc2lvblwiO1xuaW1wb3J0ICogYXMgYWxpZ24gZnJvbSBcIi4vYWxpZ25tZW50XCI7XG5pbXBvcnQgKiBhcyBncm91cGluZyBmcm9tIFwiLi9ncm91cGluZ1wiO1xuaW1wb3J0ICogYXMgcG9rZSBmcm9tIFwiLi9yYW5kb21wb2tlc1wiO1xuXG5cbmV4cG9ydCBuYW1lc3BhY2UgS25vbGxib3Qge1xuXG4gICAgZXhwb3J0IGNvbnN0IHJ1biA9ICgpID0+IHtcblxuICAgICAgICAvLyBjcmVhdGUgYW4gZW5naW5lIGFuZCBydW5uZXJcbiAgICAgICAgY29uc3QgZW5naW5lID0gTWF0dGVyLkVuZ2luZS5jcmVhdGUoKTtcbiAgICAgICAgY29uc3Qgd29ybGQgPSBlbmdpbmUud29ybGQgYXMgV29ybGRFeHRlbmRlZDtcbiAgICAgICAgY29uc3QgcnVubmVyID0gTWF0dGVyLlJ1bm5lci5jcmVhdGUoKTtcblxuICAgICAgICAvLyBlbmFibGUgZm9yY2UgYnkgZGVmYXVsdFxuICAgICAgICB3b3JsZC5mb3JjZU9uID0gdHJ1ZTtcblxuICAgICAgICAvLyBkaXNhYmxlIGdyYXZpdHlcbiAgICAgICAgd29ybGQuZ3Jhdml0eS55ID0gMC4wO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFNjcmVlbiBwYXJhbWV0ZXJzXG4gICAgICAgIGNvbnN0IFNjcmVlbldpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC0gMjA7XG4gICAgICAgIGNvbnN0IFNjcmVlbkhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSAyMDtcbiAgICAgICAgY29uc3QgU2NyZWVuV2lkdGhIYWxmID0gTWF0aC5mbG9vcihTY3JlZW5XaWR0aCAvIDIpO1xuICAgICAgICBjb25zdCBTY3JlZW5IZWlnaHRIYWxmID0gTWF0aC5mbG9vcihTY3JlZW5IZWlnaHQgLyAyKTtcblxuICAgICAgICAvLyBXYWxsIHBhcmFtZXRlcnNcbiAgICAgICAgY29uc3QgV2FsbFRoaWNrbmVzcyA9IDIwMDtcbiAgICAgICAgY29uc3QgV2FsbE1hcmdpbiA9IDEwMDtcbiAgICAgICAgY29uc3QgV2FsbFZpc2libGUgPSA1O1xuICAgICAgICBjb25zdCBXYWxsT2Zmc2V0ID0gTWF0aC5mbG9vcihXYWxsVGhpY2tuZXNzIC8gMikgLSBXYWxsVmlzaWJsZTtcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBPYmplY3QgcGFyYW1ldGVyc1xuICAgICAgICBjb25zdCBOdW1Cb3hlcyA9IGltZ1BhdGhzLmxlbmd0aDtcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBSYW5kb20gcG9raW5nXG4gICAgICAgIHdvcmxkLnBva2VTY2FsZSA9IHBhcmFtcy5wb2tlU2NhbGU7XG4gICAgICAgIHdvcmxkLnBva2VEZWNheSA9IHBhcmFtcy5wb2tlRGVjYXk7XG5cbiAgICAgICAgLy8gQWxpZ25tZW50IGZvcmNlXG4gICAgICAgIHdvcmxkLmFsaWdubWVudEZvcmNlQ29lZmYgPSBwYXJhbXMuYWxpZ25tZW50Rm9yY2VDb2VmZjtcbiAgICAgICAgd29ybGQuYWxpZ25tZW50Rm9yY2VSYW5nZSA9IHBhcmFtcy5hbGlnbm1lbnRGb3JjZVJhbmdlOyAgLy8gcGl4ZWxzXG4gICAgICAgIHdvcmxkLmFsaWdubWVudEZvcmNlV2FsbFJhbmdlID0gcGFyYW1zLmFsaWdubWVudEZvcmNlV2FsbFJhbmdlO1xuXG4gICAgICAgIC8vIEFudGlHcmF2aXR5IGZvcmNlXG4gICAgICAgIHdvcmxkLnJlcHVsc2lvbkNvZWZmID0gcGFyYW1zLnJlcHVsc2lvbkNvZWZmO1xuICAgICAgICB3b3JsZC5yZXB1bHNpb25SYW5nZSA9IHBhcmFtcy5yZXB1bHNpb25SYW5nZTsgICAgICAvLyBOT1QgcGl4ZWxzXG5cbiAgICAgICAgLy8gR3JvdXBpbmcgYXR0cmFjdGlvbi9yZXB1bHNpb25cbiAgICAgICAgd29ybGQuZ3JvdXBpbmdDb2VmZiA9IHBhcmFtcy5ncm91cGluZ0NvZWZmO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIGNyZWF0ZSBhIHJlbmRlcmVyXG4gICAgICAgIGNvbnN0IHJlbmRlciA9IE1hdHRlci5SZW5kZXIuY3JlYXRlKHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmJvZHksXG4gICAgICAgICAgICBlbmdpbmU6IGVuZ2luZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogU2NyZWVuV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBTY3JlZW5IZWlnaHQsXG4gICAgICAgICAgICAgICAgLy8gc2hvd0FuZ2xlSW5kaWNhdG9yOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dWZWxvY2l0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2lyZWZyYW1lczogZmFsc2UsICAgIC8vIHJlcXVpcmVkIHRvIGVuYWJsZSBzcHJpdGVzIVxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjMjQ3YzQxJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0d28gYm94ZXNcbiAgICAgICAgY29uc3QgYm9keU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBpbmVydGlhOiBJbmZpbml0eSxcbiAgICAgICAgICAgIGZyaWN0aW9uQWlyOiBwYXJhbXMuZnJpY3Rpb25BaXIsXG4gICAgICAgICAgICBmcmljdGlvbjogcGFyYW1zLmZyaWN0aW9uLFxuICAgICAgICB9O1xuXG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgYm94ZXMgcmFuZG9tbHlcbiAgICAgICAgY29uc3QgZ2VuZXJhdGVSYW5kb21Cb3hlcyA9ICgpOiBNYXR0ZXIuQm9keVtdID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFsbFNxdWFyZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgTWluU2l6ZVggPSAzMDtcbiAgICAgICAgICAgIGNvbnN0IE1heFNpemVYID0gMTcwO1xuICAgICAgICAgICAgY29uc3QgTWluU2l6ZVkgPSAzMDtcbiAgICAgICAgICAgIGNvbnN0IE1heFNpemVZID0gMTcwO1xuICAgICAgICAgICAgY29uc3QgVW5pdFNpemUgPSAxNjtcblxuICAgICAgICAgICAgY29uc3QgYm94ZXMgPSBBcnJheTxNYXR0ZXIuQm9keT4oTnVtQm94ZXMpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOdW1Cb3hlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdFdpZHRoID0gdXRpbHMucmFuZFJhbmdlKE1pblNpemVYLCBNYXhTaXplWCwgVW5pdFNpemUpO1xuICAgICAgICAgICAgICAgIGxldCByZWN0SGVpZ2h0ID0gcmVjdFdpZHRoO1xuICAgICAgICAgICAgICAgIGlmICghYWxsU3F1YXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY3RIZWlnaHQgPSB1dGlscy5yYW5kUmFuZ2UoTWluU2l6ZVksIE1heFNpemVZLCBVbml0U2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSBXYWxsT2Zmc2V0ICsgcmVjdFdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gV2FsbE9mZnNldCArIHJlY3RIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSB1dGlscy5yYW5kUmFuZ2Uob2Zmc2V0WCwgU2NyZWVuV2lkdGggLSBvZmZzZXRYKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gdXRpbHMucmFuZFJhbmdlKG9mZnNldFksIFNjcmVlbkhlaWdodCAtIG9mZnNldFkpO1xuICAgICAgICAgICAgICAgIGJveGVzW2ldID0gTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoeCwgeSwgcmVjdFdpZHRoLCByZWN0SGVpZ2h0LCBib2R5T3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYm94ZXM7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTU5MzQyNDEvNTI0NTI2XG4gICAgICAgIGNvbnN0IGdldEltYWdlRGltZW5zaW9ucyA9IChwYXRoOiBzdHJpbmcpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgICAgICAvLyB0aGUgZm9sbG93aW5nIGhhbmRsZXIgd2lsbCBmaXJlIGFmdGVyIHRoZSBzdWNjZXNzZnVsIGxvYWRpbmcgb2YgdGhlIGltYWdlXG4gICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiB3aWR0aCwgbmF0dXJhbEhlaWdodDogaGVpZ2h0IH0gPSBpbWc7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7IHdpZHRoLCBoZWlnaHQgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBhbmQgdGhpcyBoYW5kbGVyIHdpbGwgZmlyZSBpZiB0aGVyZSB3YXMgYW4gZXJyb3Igd2l0aCB0aGUgaW1hZ2UgKGxpa2UgaWYgaXQncyBub3QgcmVhbGx5IGFuIGltYWdlIG9yIGEgY29ycnVwdGVkIG9uZSlcbiAgICAgICAgICAgIGltZy5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIHNvbWUgcHJvYmxlbSB3aXRoIHRoZSBpbWFnZS4nKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltZy5zcmMgPSBwYXRoO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGNvbnN0IGdldEJveCA9IGFzeW5jIChpbWdQYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGxldCBpbWcgPSBhd2FpdCBnZXRJbWFnZURpbWVuc2lvbnMoaW1nUGF0aCkgYXMgeyB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciB9O1xuICAgICAgICAgICAgbGV0IG9mZnNldFggPSBXYWxsT2Zmc2V0ICsgaW1nLndpZHRoIC8gMjtcbiAgICAgICAgICAgIGxldCBvZmZzZXRZID0gV2FsbE9mZnNldCArIGltZy5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgbGV0IHggPSB1dGlscy5yYW5kUmFuZ2Uob2Zmc2V0WCwgU2NyZWVuV2lkdGggLSBvZmZzZXRYKTtcbiAgICAgICAgICAgIGxldCB5ID0gdXRpbHMucmFuZFJhbmdlKG9mZnNldFksIFNjcmVlbkhlaWdodCAtIG9mZnNldFkpO1xuICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgLi4uYm9keU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiB7IHNwcml0ZTogeyB0ZXh0dXJlOiBpbWdQYXRoIH0gfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoeCwgeSwgaW1nLndpZHRoLCBpbWcuaGVpZ2h0LCBvcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwcm9taXNlZEJveGVzID0gUHJvbWlzZS5hbGwoaW1nUGF0aHMubWFwKGdldEJveCkpO1xuXG4gICAgICAgIC8vIHN1cnJvdW5kaW5nIHdhbGxcbiAgICAgICAgY29uc3Qgd2FsbE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBpc1N0YXRpYzogdHJ1ZSxcbiAgICAgICAgICAgIGZyaWN0aW9uOiBwYXJhbXMud2FsbEZyaWN0aW9uLFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgd2FsbFRvcCA9IE1hdHRlci5Cb2RpZXMucmVjdGFuZ2xlKFxuICAgICAgICAgICAgU2NyZWVuV2lkdGhIYWxmLFxuICAgICAgICAgICAgLVdhbGxPZmZzZXQsXG4gICAgICAgICAgICBTY3JlZW5XaWR0aCArIFdhbGxNYXJnaW4sXG4gICAgICAgICAgICBXYWxsVGhpY2tuZXNzLFxuICAgICAgICAgICAgd2FsbE9wdGlvbnMsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHdhbGxCb3R0b20gPSBNYXR0ZXIuQm9kaWVzLnJlY3RhbmdsZShcbiAgICAgICAgICAgIFNjcmVlbldpZHRoSGFsZixcbiAgICAgICAgICAgIFNjcmVlbkhlaWdodCArIFdhbGxPZmZzZXQsXG4gICAgICAgICAgICBTY3JlZW5XaWR0aCArIFdhbGxNYXJnaW4sXG4gICAgICAgICAgICBXYWxsVGhpY2tuZXNzLFxuICAgICAgICAgICAgd2FsbE9wdGlvbnMsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHdhbGxMZWZ0ID0gTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoXG4gICAgICAgICAgICAtIFdhbGxPZmZzZXQsXG4gICAgICAgICAgICBTY3JlZW5IZWlnaHRIYWxmLFxuICAgICAgICAgICAgV2FsbFRoaWNrbmVzcyxcbiAgICAgICAgICAgIFNjcmVlbkhlaWdodCArIFdhbGxNYXJnaW4sXG4gICAgICAgICAgICB3YWxsT3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgd2FsbFJpZ2h0ID0gTWF0dGVyLkJvZGllcy5yZWN0YW5nbGUoXG4gICAgICAgICAgICBTY3JlZW5XaWR0aCArIFdhbGxPZmZzZXQsXG4gICAgICAgICAgICBTY3JlZW5IZWlnaHRIYWxmLFxuICAgICAgICAgICAgV2FsbFRoaWNrbmVzcyxcbiAgICAgICAgICAgIFNjcmVlbkhlaWdodCArIFdhbGxNYXJnaW4sXG4gICAgICAgICAgICB3YWxsT3B0aW9ucyxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBtb3VzZSBhbmQgY29uc3RyYWludFxuICAgICAgICBjb25zdCBtb3VzZSA9IE1hdHRlci5Nb3VzZS5jcmVhdGUocmVuZGVyLmNhbnZhcyk7XG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnQgPSBNYXR0ZXIuQ29uc3RyYWludC5jcmVhdGUoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gTXVzdCBkZWZpbmUgcG9pbnRBIGFuZCBwb2ludEIgdW5saWtlIElDb25zdHJhaW50RGVmaW5pdGlvbiBpbnRlcmZhY2VcbiAgICAgICAgICAgICAgICBwb2ludEE6IG1vdXNlLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIHBvaW50QjogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICAgICAgc3RpZmZuZXNzOiAwLjIsXG4gICAgICAgICAgICAgICAgcmVuZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtb3VzZUNvbnN0cmFpbnQgPSBNYXR0ZXIuTW91c2VDb25zdHJhaW50LmNyZWF0ZShcbiAgICAgICAgICAgIGVuZ2luZSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtb3VzZTogbW91c2UsXG4gICAgICAgICAgICAgICAgY29uc3RyYWludDogY29uc3RyYWludCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBgYmxvY2tzYCBpcyB0byBjb250YWluIGJveGVzLCB3YWxscywgYW5kIG1vdXNlIGNvbnN0cmFpbnRzXG4gICAgICAgIHZhciBibG9ja3M6IE1hdHRlci5Cb2R5W107XG5cbiAgICAgICAgY29uc3Qgc2V0dXBXb3JsZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxldCBib3hlcyA9IGF3YWl0IHByb21pc2VkQm94ZXM7XG4gICAgICAgICAgICBibG9ja3MgPSBbLi4uYm94ZXMsIHdhbGxUb3AsIHdhbGxCb3R0b20sIHdhbGxMZWZ0LCB3YWxsUmlnaHRdXG4gICAgICAgICAgICBNYXR0ZXIuV29ybGQuYWRkKHdvcmxkLCBibG9ja3MpO1xuICAgICAgICAgICAgTWF0dGVyLldvcmxkLmFkZCh3b3JsZCwgbW91c2VDb25zdHJhaW50KTtcbiAgICAgICAgICAgIE1hdHRlci5SdW5uZXIucnVuKHJ1bm5lciwgZW5naW5lKTtcbiAgICAgICAgICAgIE1hdHRlci5SZW5kZXIucnVuKHJlbmRlcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2V0dXBXb3JsZCgpO1xuXG5cbiAgICAgICAgLy8gbWFpbiBsb29wXG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgTWF0dGVyLkV2ZW50cy5vbihlbmdpbmUsICdiZWZvcmVVcGRhdGUnLCAoZXZlbnQ6IE1hdHRlci5FdmVudHMpID0+IHtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gMTtcbiAgICAgICAgICAgIGlmIChjb3VudGVyICUgMzAwID09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvdW50ZXI6IFwiLCBjb3VudGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHdvcmxkLmZvcmNlT24pIHtcbiAgICAgICAgICAgICAgICBpZiAoY291bnRlciA8IDE4MCkge1xuICAgICAgICAgICAgICAgICAgICBncm91cGluZy5hcHBseUdyb3VwaW5nKHdvcmxkLCBibG9ja3MpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRlciA8IDI0MCkge1xuICAgICAgICAgICAgICAgICAgICByZXB1bHNpb24uYXBwbHlBbnRpR3Jhdml0eSh3b3JsZCwgYmxvY2tzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbi5hcHBseUFsaWdubWVudCh3b3JsZCwgYmxvY2tzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY291bnRlciAlIDEwID09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgd29ybGQucG9rZVNjYWxlICo9IHdvcmxkLnBva2VEZWNheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9rZS5hcHBseVJhbmRvbVBva2VzKHdvcmxkLCBibG9ja3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIFRvZ2dsZSBmb3JjZXMgYnkgcHJlc3NpbmcgU3BhY2Uga2V5XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUuY29kZSA9PT0gXCJTcGFjZVwiKSB7XG4gICAgICAgICAgICAgICAgd29ybGQuZm9yY2VPbiA9ICF3b3JsZC5mb3JjZU9uO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUb2dnbGVkIGZvcmNlOiBmb3JjZU9uIGlzICR7d29ybGQuZm9yY2VPbn0gbm93YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgLy8gUm90YXRlIGEgYmxvY2sgYnkgZG91YmxlIGNsaWNraW5nXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYC0tLSBEb3VibGUgY2xpY2sgYXQgdD0ke2NvdW50ZXJ9IC0tLWApO1xuICAgICAgICAgICAgYmxvY2tzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihiID0+ICghYi5pc1N0YXRpYykgJiYgTWF0dGVyLkJvdW5kcy5jb250YWlucyhiLmJvdW5kcywgbW91c2UucG9zaXRpb24pKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGIgPT4gTWF0dGVyLkJvZHkucm90YXRlKGIsIE1hdGguUEkgLyAyKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJvdGF0ZSBhIGJsb2NrIGJ5IHRvdWNoIHJvdGF0aW9uXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIChlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdG91Y2ggPSBlLmNoYW5nZWRUb3VjaGVzLml0ZW0oMCk7XG4gICAgICAgICAgICBsZXQgYW5nbGVJblJhZGlhbiA9IE1hdGguUEkgLyAxODAgKiAodG91Y2g/LnJvdGF0aW9uQW5nbGUgPz8gMCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgLS0tIFRvdWNoIHJvdGF0aW9uIGFjdGl2YXRlZCBhdCB0PSR7Y291bnRlcn0gLS0tYCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgICAgIHJvdGF0aW9uIGFuZ2xlID0gJHt0b3VjaD8ucm90YXRpb25BbmdsZX0gKGRlZylgKVxuICAgICAgICAgICAgYmxvY2tzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihiID0+ICghYi5pc1N0YXRpYykgJiYgTWF0dGVyLkJvdW5kcy5jb250YWlucyhiLmJvdW5kcywgbW91c2UucG9zaXRpb24pKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGIgPT4gTWF0dGVyLkJvZHkucm90YXRlKGIsIGFuZ2xlSW5SYWRpYW4pKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVuZ2luZTogZW5naW5lLFxuICAgICAgICAgICAgcnVubmVyOiBydW5uZXIsXG4gICAgICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgICAgIGNhbnZhczogcmVuZGVyLmNhbnZhcyxcbiAgICAgICAgICAgIHN0b3A6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBNYXR0ZXIuUmVuZGVyLnN0b3AocmVuZGVyKTtcbiAgICAgICAgICAgICAgICBNYXR0ZXIuUnVubmVyLnN0b3AocnVubmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIH1cbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImNvbnN0IGltZ1Jvb3QgPSBcIi4vcHVibGljL2xlZ28vXCI7XG5jb25zdCBpbWdOYW1lcyA9IFtcbiAgICBcImJsdWVfMXgyLnBuZ1wiLFxuICAgIFwiYmx1ZV8xeDIucG5nXCIsXG4gICAgXCJibHVlXzF4Mi5wbmdcIixcbiAgICBcImJsdWVfMXgyLnBuZ1wiLFxuICAgIFwiYmx1ZV8xeDIucG5nXCIsXG4gICAgXCJibHVlXzF4My5wbmdcIixcbiAgICBcImJsdWVfMXgzLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMXgyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMngyLnBuZ1wiLFxuICAgIFwiZ3JlZW5fMngyLnBuZ1wiLFxuICAgIFwib3JhbmdlXzJ4MS5wbmdcIixcbiAgICBcIm9yYW5nZV8yeDEucG5nXCIsXG4gICAgXCJvcmFuZ2VfMngxLnBuZ1wiLFxuICAgIFwib3JhbmdlXzJ4MS5wbmdcIixcbiAgICBcIm9yYW5nZV8yeDEucG5nXCIsXG4gICAgXCJvcmFuZ2VfMngxLnBuZ1wiLFxuICAgIFwib3JhbmdlXzJ4My5wbmdcIixcbiAgICBcIm9yYW5nZV8yeDMucG5nXCIsXG4gICAgXCJyZWRfMXg0LnBuZ1wiLFxuICAgIFwicmVkXzF4NC5wbmdcIixcbiAgICBcInJlZF8xeDQucG5nXCIsXG4gICAgXCJyZWRfMngyLnBuZ1wiLFxuICAgIFwicmVkXzJ4Mi5wbmdcIixcbiAgICBcInllbGxvd18yeDEucG5nXCIsXG4gICAgXCJ5ZWxsb3dfMngxLnBuZ1wiLFxuICAgIFwieWVsbG93XzJ4MS5wbmdcIixcbiAgICBcInllbGxvd18yeDEucG5nXCIsXG4gICAgXCJ5ZWxsb3dfMngxLnBuZ1wiLFxuICAgIFwieWVsbG93XzN4Mi5wbmdcIixcbiAgICBcInllbGxvd18zeDIucG5nXCIsXG4gICAgXCJ5ZWxsb3dfM3gyLnBuZ1wiXG5dO1xuXG5leHBvcnQgY29uc3QgaW1nUGF0aHMgPSBpbWdOYW1lcy5tYXAobmFtZSA9PiBpbWdSb290ICsgbmFtZSk7XG5cbmV4cG9ydCBjb25zdCBwYXJhbXMgPSB7XG4gICAgLy8gQm9keSBwYXJhbWV0ZXJzXG4gICAgZnJpY3Rpb25BaXI6IDAuMDEsXG4gICAgZnJpY3Rpb246IDAuMCxcbiAgICB3YWxsRnJpY3Rpb246IDAuMDEsXG5cbiAgICAvLyBHbG9iYWwgcmFuZG9tIHBva2luZ1xuICAgIHBva2VTY2FsZTogMC4wNSxcbiAgICBwb2tlRGVjYXk6IDAuOTUsICAvLyBtdWx0aXBsaWVyIGFmdGVyIDEwIGNvdW50c1xuXG4gICAgLy8gQWxpZ25tZW50IGZvcmNlXG4gICAgYWxpZ25tZW50Rm9yY2VDb2VmZjogMC4wMDEwLFxuICAgIGFsaWdubWVudEZvcmNlUmFuZ2U6IDMwLCAgLy8gcGl4ZWxzXG4gICAgYWxpZ25tZW50Rm9yY2VXYWxsUmFuZ2U6IDE1LCAvLyBwaXhlbHNcblxuICAgIC8vIEFudGlHcmF2aXR5IGZvcmNlXG4gICAgcmVwdWxzaW9uQ29lZmY6IDEwMCxcbiAgICByZXB1bHNpb25SYW5nZTogMy4wLCAgICAgIC8vIE5PVCBwaXhlbHNcblxuICAgIC8vIEdyb3VwaW5nIGF0dHJhY3Rpb24vcmVwdWxzaW9uXG4gICAgZ3JvdXBpbmdDb2VmZjogNDAwLFxuXG59XG4iLCJpbXBvcnQgTWF0dGVyIGZyb20gXCJtYXR0ZXItanNcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBrcnVza2FsIH0gZnJvbSBcIi4vZ3JhcGhcIjtcbmltcG9ydCBVbmlvbkZpbmQgZnJvbSBcIi4vdW5pb25maW5kXCI7XG5pbXBvcnQgeyBXb3JsZEV4dGVuZGVkLCBFZGdlRXh0ZW5kZWQsIEdyYXBoRXh0ZW5kZWQsIElQb2ludFBhaXJGdW5jIH0gZnJvbSBcIi4vZXh0dHlwZXNcIjtcbmltcG9ydCAqIGFzIGdyb3VwaW5nIGZyb20gXCIuL2dyb3VwaW5nXCI7XG5cblxuY29uc3QgY3JlYXRlQWxpZ25tZW50R3JhcGhNZXRhID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10sIHBvaW50UGFpckZ1bmM6IElQb2ludFBhaXJGdW5jKTogR3JhcGhFeHRlbmRlZCA9PiB7XG4gIGxldCBlZGdlczogRWRnZUV4dGVuZGVkW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBibG9ja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IHNyYyA9IGJsb2Nrc1tpXTtcbiAgICAgIGNvbnN0IHRndCA9IGJsb2Nrc1tqXTtcbiAgICAgIGNvbnN0IFtwb3NTcmMsIHBvc1RndCwgZGlzdF0gPSBwb2ludFBhaXJGdW5jKHNyYywgdGd0KTtcbiAgICAgIGlmIChkaXN0IDwgd29ybGQuYWxpZ25tZW50Rm9yY2VSYW5nZSAmJiAoIXNyYy5pc1N0YXRpYyB8fCAhdGd0LmlzU3RhdGljKSkge1xuICAgICAgICBjb25zdCBlID0ge1xuICAgICAgICAgIHdlaWdodDogZGlzdCxcbiAgICAgICAgICBwYWlyOiB1dGlscy5tYWtlVW5vcmRlcmVkUGFpcihpLCBqKSxcbiAgICAgICAgICBwb3NTcmM6IHBvc1NyYyxcbiAgICAgICAgICBwb3NUZ3Q6IHBvc1RndCxcbiAgICAgICAgICBpZHhTcmM6IGksXG4gICAgICAgICAgaWR4VGd0OiBqLFxuICAgICAgICB9XG4gICAgICAgIGVkZ2VzLnB1c2goZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxldCBnOiBHcmFwaEV4dGVuZGVkID0ge1xuICAgIHZlcnRpY2VzOiB1dGlscy5yYW5nZShibG9ja3MubGVuZ3RoKSxcbiAgICBlZGdlczogZWRnZXMsXG4gIH1cbiAgcmV0dXJuIGc7XG59XG5cblxuY29uc3QgY3JlYXRlQWxpZ25tZW50R3JhcGhYID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10pOiBHcmFwaEV4dGVuZGVkID0+IHtcbiAgcmV0dXJuIGNyZWF0ZUFsaWdubWVudEdyYXBoTWV0YSh3b3JsZCwgYmxvY2tzLCB1dGlscy5jbG9lc3RQb2ludFBhaXJYKTtcbn1cblxuXG5jb25zdCBjcmVhdGVBbGlnbm1lbnRHcmFwaFkgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSk6IEdyYXBoRXh0ZW5kZWQgPT4ge1xuICByZXR1cm4gY3JlYXRlQWxpZ25tZW50R3JhcGhNZXRhKHdvcmxkLCBibG9ja3MsIHV0aWxzLmNsb2VzdFBvaW50UGFpclkpO1xufVxuXG5cbmNvbnN0IGFwcGx5QWxpZ25tZW50Rm9yY2VYID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10sIGVkZ2U6IEVkZ2VFeHRlbmRlZCkgPT4ge1xuICBjb25zdCBzaWduID0gKGVkZ2UucG9zU3JjLnggPCBlZGdlLnBvc1RndC54KSA/IC0xIDogMTtcbiAgY29uc3QgZGlzdCA9IGVkZ2Uud2VpZ2h0O1xuICBjb25zdCBmb3JjZSA9IHdvcmxkLmFsaWdubWVudEZvcmNlQ29lZmYgKiBzaWduICogZGlzdDtcbiAgY29uc3QgZm9yY2VPblRndCA9IHsgeDogZm9yY2UsIHk6IDAgfTtcbiAgY29uc3Qgc3JjID0gYmxvY2tzW2VkZ2UuaWR4U3JjXTtcbiAgY29uc3QgdGd0ID0gYmxvY2tzW2VkZ2UuaWR4VGd0XTtcbiAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZSh0Z3QsIHRndC5wb3NpdGlvbiwgZm9yY2VPblRndCk7XG4gIE1hdHRlci5Cb2R5LmFwcGx5Rm9yY2Uoc3JjLCBzcmMucG9zaXRpb24sIHV0aWxzLm5lZ2F0ZShmb3JjZU9uVGd0KSk7XG59XG5cblxuY29uc3QgYXBwbHlBbGlnbm1lbnRGb3JjZVkgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSwgZWRnZTogRWRnZUV4dGVuZGVkKSA9PiB7XG4gIGNvbnN0IHNpZ24gPSAoZWRnZS5wb3NTcmMueSA8IGVkZ2UucG9zVGd0LnkpID8gLTEgOiAxO1xuICBjb25zdCBkaXN0ID0gZWRnZS53ZWlnaHQ7XG4gIGNvbnN0IGZvcmNlID0gd29ybGQuYWxpZ25tZW50Rm9yY2VDb2VmZiAqIHNpZ24gKiBkaXN0O1xuICBjb25zdCBmb3JjZU9uVGd0ID0geyB4OiAwLCB5OiBmb3JjZSB9O1xuICBjb25zdCBzcmMgPSBibG9ja3NbZWRnZS5pZHhTcmNdO1xuICBjb25zdCB0Z3QgPSBibG9ja3NbZWRnZS5pZHhUZ3RdO1xuICBNYXR0ZXIuQm9keS5hcHBseUZvcmNlKHRndCwgdGd0LnBvc2l0aW9uLCBmb3JjZU9uVGd0KTtcbiAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZShzcmMsIHNyYy5wb3NpdGlvbiwgdXRpbHMubmVnYXRlKGZvcmNlT25UZ3QpKTtcbn1cblxuXG5jb25zdCBhcHBseUFsaWdubWVudE1TVCA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdKSA9PiB7XG4gIGxldCBnWCA9IGNyZWF0ZUFsaWdubWVudEdyYXBoWCh3b3JsZCwgYmxvY2tzKTtcbiAgbGV0IGdZID0gY3JlYXRlQWxpZ25tZW50R3JhcGhZKHdvcmxkLCBibG9ja3MpO1xuICBsZXQgZWRnZU1zdFggPSBrcnVza2FsKGdYKSBhcyBFZGdlRXh0ZW5kZWRbXTtcbiAgbGV0IGVkZ2VNc3RZID0ga3J1c2thbChnWSkgYXMgRWRnZUV4dGVuZGVkW107XG5cbiAgLy8gYWxpZ25tZW50IGZvcmNlIG9jY3VycyBhdCBNU1QgZWRnZXMgb25seVxuICBlZGdlTXN0WC5mb3JFYWNoKGUgPT4gYXBwbHlBbGlnbm1lbnRGb3JjZVgod29ybGQsIGJsb2NrcywgZSkpO1xuICBlZGdlTXN0WS5mb3JFYWNoKGUgPT4gYXBwbHlBbGlnbm1lbnRGb3JjZVkod29ybGQsIGJsb2NrcywgZSkpO1xuXG4gIC8vIGFudGlncmF2aXR5IGZvcmNlIG9jY3VycyBhdCBkaXNjb25uZWN0ZWQgbm9kZXNcbiAgLy8gbGV0IHVmWCA9IG5ldyBVbmlvbkZpbmQoZ1gudmVydGljZXMpO1xuICAvLyBnWC5lZGdlcy5mb3JFYWNoKGUgPT4geyB1ZlguY29ubmVjdChlLmlkeFNyYywgZS5pZHhUZ3QpIH0pO1xuICAvLyBsZXQgdWZZID0gbmV3IFVuaW9uRmluZChnWS52ZXJ0aWNlcyk7XG4gIC8vIGdZLmVkZ2VzLmZvckVhY2goZSA9PiB7IHVmWS5jb25uZWN0KGUuaWR4U3JjLCBlLmlkeFRndCkgfSk7XG4gIC8vIGdyb3VwaW5nLmFwcGx5QW50aUdyYXZpdHlEaXNqb2ludCh3b3JsZCwgYmxvY2tzLCB1ZlgsIHVmWSk7XG59XG5cblxuY29uc3QgY3JlYXRlQm94V2FsbEJpcGFydGl0ZU1ldGEgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrczogTWF0dGVyLkJvZHlbXSwgcG9pbnRQYWlyRnVuYzogSVBvaW50UGFpckZ1bmMpOiBHcmFwaEV4dGVuZGVkID0+IHtcbiAgbGV0IGVkZ2VzOiBFZGdlRXh0ZW5kZWRbXSA9IFtdO1xuICBjb25zdCBib3hlcyA9IGJsb2Nrcy5zbGljZSgwLCBibG9ja3MubGVuZ3RoIC0gNCk7XG4gIGNvbnN0IHdhbGxzID0gYmxvY2tzLnNsaWNlKGJsb2Nrcy5sZW5ndGggLSA0LCBibG9ja3MubGVuZ3RoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJveGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcbiAgICAgIGNvbnN0IHNyYyA9IGJveGVzW2ldO1xuICAgICAgY29uc3QgdGd0ID0gd2FsbHNbal07XG4gICAgICBjb25zdCBpZHhCb3ggPSBpO1xuICAgICAgY29uc3QgaWR4V2FsbCA9IGogKyBib3hlcy5sZW5ndGg7XG4gICAgICBjb25zdCBbcG9zQm94LCBwb3NXYWxsLCBkaXN0XSA9IHBvaW50UGFpckZ1bmMoc3JjLCB0Z3QpO1xuICAgICAgaWYgKGRpc3QgPCB3b3JsZC5hbGlnbm1lbnRGb3JjZVdhbGxSYW5nZSkge1xuICAgICAgICBjb25zdCBlOiBFZGdlRXh0ZW5kZWQgPSB7XG4gICAgICAgICAgd2VpZ2h0OiBkaXN0LFxuICAgICAgICAgIHBhaXI6IHsgZmlyc3Q6IGlkeEJveCwgc2Vjb25kOiBpZHhXYWxsIH0sXG4gICAgICAgICAgcG9zU3JjOiBwb3NCb3gsXG4gICAgICAgICAgcG9zVGd0OiBwb3NXYWxsLFxuICAgICAgICAgIGlkeFNyYzogaSxcbiAgICAgICAgICBpZHhUZ3Q6IGosXG4gICAgICAgIH1cbiAgICAgICAgZWRnZXMucHVzaChlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbGV0IGc6IEdyYXBoRXh0ZW5kZWQgPSB7XG4gICAgdmVydGljZXM6IHV0aWxzLnJhbmdlKGJsb2Nrcy5sZW5ndGgpLFxuICAgIGVkZ2VzOiBlZGdlcyxcbiAgfVxuICByZXR1cm4gZztcbn1cblxuY29uc3QgYXBwbHlCb3hXYWxsQWxpZ25tZW50ID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10pID0+IHtcbiAgY29uc3QgZ1ggPSBjcmVhdGVCb3hXYWxsQmlwYXJ0aXRlTWV0YSh3b3JsZCwgYmxvY2tzLCB1dGlscy5jbG9lc3RQb2ludFBhaXJYKTtcbiAgY29uc3QgZ1kgPSBjcmVhdGVCb3hXYWxsQmlwYXJ0aXRlTWV0YSh3b3JsZCwgYmxvY2tzLCB1dGlscy5jbG9lc3RQb2ludFBhaXJZKTtcblxuICAvLyBhbGlnbm1lbnQgZm9yY2Ugb2NjdXJzIGF0IE1TVCBlZGdlcyBvbmx5XG4gIGdYLmVkZ2VzLmZvckVhY2goZSA9PiBhcHBseUFsaWdubWVudEZvcmNlWCh3b3JsZCwgYmxvY2tzLCBlKSk7XG4gIGdZLmVkZ2VzLmZvckVhY2goZSA9PiBhcHBseUFsaWdubWVudEZvcmNlWSh3b3JsZCwgYmxvY2tzLCBlKSk7XG59XG5cblxuZXhwb3J0IGNvbnN0IGFwcGx5QWxpZ25tZW50ID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10pID0+IHtcbiAgLy8gYXBwbHlCb3hXYWxsQWxpZ25tZW50KHdvcmxkLCBibG9ja3MpO1xuXG4gIGNvbnN0IGJveGVzID0gYmxvY2tzLnNsaWNlKDAsIGJsb2Nrcy5sZW5ndGggLSA0KTtcbiAgYXBwbHlBbGlnbm1lbnRNU1Qod29ybGQsIGJveGVzKTtcbn1cbiIsImltcG9ydCBVbmlvbkZpbmQgZnJvbSBcIi4vdW5pb25maW5kXCI7XG5pbXBvcnQgeyBQYWlyIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuLy8gTWluaW11bSBzcGFubmluZyB0cmVlXG50eXBlIFZlcnRleCA9IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBFZGdlIHtcbiAgcGFpcjogUGFpcjxWZXJ0ZXg+LFxuICB3ZWlnaHQ6IG51bWJlcixcbiAgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnk7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdyYXBoIHtcbiAgdmVydGljZXM6IFZlcnRleFtdO1xuICBlZGdlczogRWRnZVtdO1xufVxuXG4vKiogS3J1c2thbCBmb3IgTVNUIE8oRSBsb2cgRSlcbiAqL1xuZXhwb3J0IGNvbnN0IGtydXNrYWwgPSAoZzogR3JhcGgpOiBFZGdlW10gPT4ge1xuICBjb25zdCB1ZiA9IG5ldyBVbmlvbkZpbmQoZy52ZXJ0aWNlcyk7XG4gIGNvbnN0IHNvcnRlZEVkZ2VzID0gZy5lZGdlcy5zb3J0KChlMSwgZTIpID0+IGUxLndlaWdodCAtIGUyLndlaWdodCk7XG4gIGxldCByZXM6IEVkZ2VbXSA9IFtdO1xuICBmb3IgKGxldCBlIG9mIHNvcnRlZEVkZ2VzKSB7XG4gICAgbGV0IHYxID0gZS5wYWlyLmZpcnN0O1xuICAgIGxldCB2MiA9IGUucGFpci5zZWNvbmQ7XG4gICAgaWYgKCF1Zi5hcmVDb25uZWN0ZWQodjEsIHYyKSkge1xuICAgICAgdWYuY29ubmVjdCh2MSwgdjIpO1xuICAgICAgcmVzLnB1c2goZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG4iLCJpbXBvcnQgeyByYW5nZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbnR5cGUgTm9kZSA9IHN0cmluZyB8IG51bWJlcjtcbnR5cGUgSW5kZXggPSBudW1iZXI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5pb25GaW5kIHtcbiAgbGVuOiBudW1iZXI7XG4gIHBhcmVudDogbnVtYmVyW107XG4gIHRyYW5zbGF0ZTogTWFwPE5vZGUsIEluZGV4PjtcblxuICBjb25zdHJ1Y3Rvcihhcmc6IG51bWJlciB8IE5vZGVbXSkge1xuICAgIGlmICh0eXBlb2YgYXJnID09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLmxlbiA9IGFyZztcbiAgICAgIHRoaXMudHJhbnNsYXRlID0gbmV3IE1hcChyYW5nZShhcmcpLm1hcCgoXywgaSkgPT4gW2ksIGldKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGVuID0gYXJnLmxlbmd0aDtcbiAgICAgIHRoaXMudHJhbnNsYXRlID0gbmV3IE1hcChhcmcubWFwKCh2LCBpKSA9PiBbdiwgaV0pKTtcbiAgICB9XG4gICAgdGhpcy5wYXJlbnQgPSByYW5nZSh0aGlzLmxlbikubWFwKF8gPT4gLTEpO1xuICB9XG5cbiAgX2lzUm9vdCh4OiBJbmRleCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudFt4XSA8IDA7XG4gIH1cblxuICBfcm9vdCh4OiBJbmRleCk6IEluZGV4IHtcbiAgICB3aGlsZSAoIXRoaXMuX2lzUm9vdCh4KSkge1xuICAgICAgeCA9IHRoaXMucGFyZW50W3hdO1xuICAgIH1cbiAgICByZXR1cm4geDtcbiAgfVxuXG4gIF9kZXB0aCh4OiBJbmRleCk6IEluZGV4IHtcbiAgICByZXR1cm4gLXRoaXMucGFyZW50W3RoaXMuX3Jvb3QoeCldO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGluZGV4LiBBZGQgdG8gdGhpcy5fdHJhbnNsYXRlIGlmIGFic2VudC5cbiAgICogQHBhcmFtIHhcbiAgICovXG4gIF9pbmRleCh4OiBOb2RlKTogSW5kZXgge1xuICAgIGxldCB0bXAgPSB0aGlzLnRyYW5zbGF0ZS5nZXQoeCk7XG4gICAgbGV0IGl4OiBJbmRleDtcbiAgICBpZiAodG1wID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGl4ID0gdGhpcy5sZW47XG4gICAgICB0aGlzLnRyYW5zbGF0ZS5zZXQoeCwgaXgpO1xuICAgICAgdGhpcy5sZW4gKz0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXggPSB0bXA7XG4gICAgfVxuICAgIHJldHVybiBpeDtcbiAgfVxuXG4gIGFyZUNvbm5lY3RlZCh4OiBOb2RlLCB5OiBOb2RlKTogYm9vbGVhbiB7XG4gICAgbGV0IGl4ID0gdGhpcy5faW5kZXgoeCk7XG4gICAgbGV0IGl5ID0gdGhpcy5faW5kZXgoeSk7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QoaXgpID09IHRoaXMuX3Jvb3QoaXkpO1xuICB9XG5cbiAgY29ubmVjdCh4OiBOb2RlLCB5OiBOb2RlKTogYm9vbGVhbiB7XG4gICAgbGV0IGl4ID0gdGhpcy5faW5kZXgoeCk7XG4gICAgbGV0IGl5ID0gdGhpcy5faW5kZXgoeSk7XG4gICAgaWYgKHRoaXMuX2RlcHRoKGl4KSA8IHRoaXMuX2RlcHRoKGl5KSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdCh5LCB4KTtcbiAgICB9XG4gICAgbGV0IHJvb3RYID0gdGhpcy5fcm9vdChpeCk7XG4gICAgbGV0IHJvb3RZID0gdGhpcy5fcm9vdChpeSk7XG4gICAgaWYgKHJvb3RYID09IHJvb3RZKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMucGFyZW50W3Jvb3RYXSArPSB0aGlzLnBhcmVudFtyb290WV07XG4gICAgdGhpcy5wYXJlbnRbcm9vdFldID0gcm9vdFg7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXRSb290QWxsKCk6IEluZGV4W10ge1xuICAgIHJldHVybiByYW5nZSh0aGlzLmxlbikubWFwKGkgPT4gdGhpcy5fcm9vdChpKSk7XG4gIH07XG59XG5cblxuY2xhc3MgTXVsdGlTZXQ8VD4ge1xuICBjb3VudGVyOiBNYXA8VCwgbnVtYmVyPjtcbiAgY29uc3RydWN0b3IoeHM/OiBUW10pIHtcbiAgICB0aGlzLmNvdW50ZXIgPSBuZXcgTWFwPFQsIG51bWJlcj4oKTtcbiAgICBpZiAoeHMpIHtcbiAgICAgIHhzLmZvckVhY2goeCA9PiB0aGlzLmFkZCh4KSk7XG4gICAgfVxuICB9XG5cbiAgYWRkKHg6IFQpIHtcbiAgICB0aGlzLmNvdW50ZXIuc2V0KHgsICh0aGlzLmNvdW50ZXIuZ2V0KHgpID8/IDApICsgMSlcbiAgfVxuXG4gIGdldCh4OiBUKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jb3VudGVyLmdldCh4KSA/PyAwO1xuICB9XG5cbiAgaGFzKHg6IFQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb3VudGVyLmhhcyh4KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuY291bnRlci5jbGVhcigpO1xuICB9XG59XG4iLCJpbXBvcnQgTWF0dGVyIGZyb20gXCJtYXR0ZXItanNcIjtcbmltcG9ydCB7IGFudGlHcmF2aXR5LCBhbnRpR3Jhdml0eVJhbmdlZCB9IGZyb20gXCIuL3JlcHVsc2lvblwiO1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IFdvcmxkRXh0ZW5kZWQgfSBmcm9tIFwiLi9leHR0eXBlc1wiO1xuaW1wb3J0IFVuaW9uRmluZCBmcm9tIFwiLi91bmlvbmZpbmRcIjtcblxuXG5leHBvcnQgY29uc3QgYXBwbHlBbnRpR3Jhdml0eURpc2pvaW50ID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10sIHVmWDogVW5pb25GaW5kLCB1Zlk6IFVuaW9uRmluZCkgPT4ge1xuICBjb25zdCBmID0gKHM6IE1hdHRlci5Cb2R5LCB0OiBNYXR0ZXIuQm9keSk6IE1hdHRlci5WZWN0b3IgPT4ge1xuICAgIHJldHVybiBhbnRpR3Jhdml0eVJhbmdlZChzLCB0LCB3b3JsZC5yZXB1bHNpb25Db2VmZiwgd29ybGQucmVwdWxzaW9uUmFuZ2UpO1xuICB9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgYmxvY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgc3JjID0gYmxvY2tzW2ldO1xuICAgICAgbGV0IHRndCA9IGJsb2Nrc1tqXTtcbiAgICAgIGlmICghc3JjLmlzU3RhdGljICYmICF0Z3QuaXNTdGF0aWMpIHtcbiAgICAgICAgbGV0IGZvcmNlID0gZihzcmMsIHRndCk7XG4gICAgICAgIGlmICh1ZlguYXJlQ29ubmVjdGVkKGksIGopKSB7XG4gICAgICAgICAgZm9yY2UueCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVmWS5hcmVDb25uZWN0ZWQoaSwgaikpIHtcbiAgICAgICAgICBmb3JjZS55ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBNYXR0ZXIuQm9keS5hcHBseUZvcmNlKHRndCwgdGd0LnBvc2l0aW9uLCBmb3JjZSlcbiAgICAgICAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZShzcmMsIHNyYy5wb3NpdGlvbiwgdXRpbHMubmVnYXRlKGZvcmNlKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuY29uc3QgYXBwbHlHcm91cGluZ1R3b0JvZHkgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIHNyYzogTWF0dGVyLkJvZHksIHRndDogTWF0dGVyLkJvZHkpID0+IHtcbiAgY29uc3QgZiA9IChzOiBNYXR0ZXIuQm9keSwgdDogTWF0dGVyLkJvZHkpOiBNYXR0ZXIuVmVjdG9yID0+IGFudGlHcmF2aXR5KHMsIHQsIHdvcmxkLmdyb3VwaW5nQ29lZmYpO1xuXG4gIC8vIHdhbGwgc2hvdWxkIG5vdCBiZSBpbnZvbHZlZFxuICBpZiAoIXNyYy5pc1N0YXRpYyAmJiAhdGd0LmlzU3RhdGljKSB7XG4gICAgbGV0IGZvcmNlQW50aUdyYXZpdHkgPSBmKHNyYywgdGd0KTtcblxuICAgIC8vIGV4ZXJ0IGF0dHJhY3RpdmUgZm9yY2UgaWYgYmxvY2tzIGFyZSBvZiB0aGUgc2FtZSBncm91cFxuICAgIGlmICh1dGlscy5hcmVTYW1lV2lkdGgoc3JjLCB0Z3QpIHx8IHV0aWxzLmFyZVNhbWVIZWlnaHQoc3JjLCB0Z3QpKSB7XG4gICAgICBmb3JjZUFudGlHcmF2aXR5ID0gdXRpbHMubmVnYXRlKGZvcmNlQW50aUdyYXZpdHkpO1xuICAgIH1cbiAgICAvLyBhbnRpZ3Jhdml0eSBleGVydHMgb24gdGhlIGNlbnRlciBvZiBhIGJsb2NrXG4gICAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZSh0Z3QsIHRndC5wb3NpdGlvbiwgZm9yY2VBbnRpR3Jhdml0eSk7XG4gICAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZShzcmMsIHNyYy5wb3NpdGlvbiwgdXRpbHMubmVnYXRlKGZvcmNlQW50aUdyYXZpdHkpKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBjb25zdCBhcHBseUdyb3VwaW5nID0gKHdvcmxkOiBXb3JsZEV4dGVuZGVkLCBibG9ja3M6IE1hdHRlci5Cb2R5W10pID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBibG9ja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgIGFwcGx5R3JvdXBpbmdUd29Cb2R5KHdvcmxkLCBibG9ja3NbaV0sIGJsb2Nrc1tqXSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgTWF0dGVyIGZyb20gXCJtYXR0ZXItanNcIjtcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBXb3JsZEV4dGVuZGVkIH0gZnJvbSBcIi4vZXh0dHlwZXNcIjtcblxuXG5jb25zdCBhcHBseVJhbmRvbVBva2UgPSAod29ybGQ6IFdvcmxkRXh0ZW5kZWQsIGJsb2NrOiBNYXR0ZXIuQm9keSkgPT4ge1xuICBpZiAoIWJsb2NrLmlzU3RhdGljKSB7XG4gICAgTWF0dGVyLkJvZHkuYXBwbHlGb3JjZShibG9jaywgYmxvY2sucG9zaXRpb24sXG4gICAgICB7XG4gICAgICAgIHg6IHdvcmxkLnBva2VTY2FsZSAqIHV0aWxzLnJhbmRuKCksXG4gICAgICAgIHk6IHdvcmxkLnBva2VTY2FsZSAqIHV0aWxzLnJhbmRuKCksXG4gICAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXBwbHlSYW5kb21Qb2tlcyA9ICh3b3JsZDogV29ybGRFeHRlbmRlZCwgYmxvY2tzOiBNYXR0ZXIuQm9keVtdKSA9PiB7XG4gIGJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IGFwcGx5UmFuZG9tUG9rZSh3b3JsZCwgYmxvY2spKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=